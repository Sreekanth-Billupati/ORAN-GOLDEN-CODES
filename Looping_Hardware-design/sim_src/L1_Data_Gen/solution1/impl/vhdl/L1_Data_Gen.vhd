-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity L1_Data_Gen is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    L1_data_out_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    L1_data_out_V_TVALID : OUT STD_LOGIC;
    L1_data_out_V_TREADY : IN STD_LOGIC;
    l1datagen_stateout_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    CDATA_COUNTER_V : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of L1_Data_Gen is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "L1_Data_Gen,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.202000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=334,HLS_SYN_LUT=1169,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv52_8050050050050 : STD_LOGIC_VECTOR (51 downto 0) := "1000000001010000000001010000000001010000000001010000";
    constant ap_const_lv52_50050050050 : STD_LOGIC_VECTOR (51 downto 0) := "0000000001010000000001010000000001010000000001010000";
    constant ap_const_lv54_201F07FF880000 : STD_LOGIC_VECTOR (53 downto 0) := "100000000111110000011111111111100010000000000000000000";
    constant ap_const_lv12_A11 : STD_LOGIC_VECTOR (11 downto 0) := "101000010001";
    constant ap_const_lv12_B11 : STD_LOGIC_VECTOR (11 downto 0) := "101100010001";
    constant ap_const_lv12_B12 : STD_LOGIC_VECTOR (11 downto 0) := "101100010010";
    constant ap_const_lv12_C11 : STD_LOGIC_VECTOR (11 downto 0) := "110000010001";
    constant ap_const_lv12_C12 : STD_LOGIC_VECTOR (11 downto 0) := "110000010010";
    constant ap_const_lv12_C13 : STD_LOGIC_VECTOR (11 downto 0) := "110000010011";
    constant ap_const_lv12_D11 : STD_LOGIC_VECTOR (11 downto 0) := "110100010001";
    constant ap_const_lv12_D12 : STD_LOGIC_VECTOR (11 downto 0) := "110100010010";
    constant ap_const_lv12_D13 : STD_LOGIC_VECTOR (11 downto 0) := "110100010011";
    constant ap_const_lv12_D14 : STD_LOGIC_VECTOR (11 downto 0) := "110100010100";
    constant ap_const_lv12_E11 : STD_LOGIC_VECTOR (11 downto 0) := "111000010001";
    constant ap_const_lv12_E12 : STD_LOGIC_VECTOR (11 downto 0) := "111000010010";
    constant ap_const_lv12_E13 : STD_LOGIC_VECTOR (11 downto 0) := "111000010011";
    constant ap_const_lv12_E14 : STD_LOGIC_VECTOR (11 downto 0) := "111000010100";
    constant ap_const_lv12_E15 : STD_LOGIC_VECTOR (11 downto 0) := "111000010101";
    constant ap_const_lv12_111 : STD_LOGIC_VECTOR (11 downto 0) := "000100010001";
    constant ap_const_lv12_211 : STD_LOGIC_VECTOR (11 downto 0) := "001000010001";
    constant ap_const_lv12_212 : STD_LOGIC_VECTOR (11 downto 0) := "001000010010";
    constant ap_const_lv12_311 : STD_LOGIC_VECTOR (11 downto 0) := "001100010001";
    constant ap_const_lv12_312 : STD_LOGIC_VECTOR (11 downto 0) := "001100010010";
    constant ap_const_lv12_313 : STD_LOGIC_VECTOR (11 downto 0) := "001100010011";
    constant ap_const_lv12_411 : STD_LOGIC_VECTOR (11 downto 0) := "010000010001";
    constant ap_const_lv12_412 : STD_LOGIC_VECTOR (11 downto 0) := "010000010010";
    constant ap_const_lv12_413 : STD_LOGIC_VECTOR (11 downto 0) := "010000010011";
    constant ap_const_lv12_414 : STD_LOGIC_VECTOR (11 downto 0) := "010000010100";
    constant ap_const_lv12_511 : STD_LOGIC_VECTOR (11 downto 0) := "010100010001";
    constant ap_const_lv12_512 : STD_LOGIC_VECTOR (11 downto 0) := "010100010010";
    constant ap_const_lv12_513 : STD_LOGIC_VECTOR (11 downto 0) := "010100010011";
    constant ap_const_lv12_514 : STD_LOGIC_VECTOR (11 downto 0) := "010100010100";
    constant ap_const_lv12_515 : STD_LOGIC_VECTOR (11 downto 0) := "010100010101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv19_61700 : STD_LOGIC_VECTOR (18 downto 0) := "1100001011100000000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv11_616 : STD_LOGIC_VECTOR (10 downto 0) := "11000010110";
    constant ap_const_lv18_140 : STD_LOGIC_VECTOR (17 downto 0) := "000000000101000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv9_131 : STD_LOGIC_VECTOR (8 downto 0) := "100110001";
    constant ap_const_lv9_130 : STD_LOGIC_VECTOR (8 downto 0) := "100110000";
    constant ap_const_lv9_129 : STD_LOGIC_VECTOR (8 downto 0) := "100101001";
    constant ap_const_lv9_128 : STD_LOGIC_VECTOR (8 downto 0) := "100101000";
    constant ap_const_lv9_127 : STD_LOGIC_VECTOR (8 downto 0) := "100100111";
    constant ap_const_lv9_126 : STD_LOGIC_VECTOR (8 downto 0) := "100100110";
    constant ap_const_lv9_125 : STD_LOGIC_VECTOR (8 downto 0) := "100100101";
    constant ap_const_lv9_124 : STD_LOGIC_VECTOR (8 downto 0) := "100100100";
    constant ap_const_lv9_123 : STD_LOGIC_VECTOR (8 downto 0) := "100100011";
    constant ap_const_lv9_132 : STD_LOGIC_VECTOR (8 downto 0) := "100110010";
    constant ap_const_lv8_9C : STD_LOGIC_VECTOR (7 downto 0) := "10011100";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv8_88 : STD_LOGIC_VECTOR (7 downto 0) := "10001000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv8_B0 : STD_LOGIC_VECTOR (7 downto 0) := "10110000";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv7_14 : STD_LOGIC_VECTOR (6 downto 0) := "0010100";
    constant ap_const_lv7_C : STD_LOGIC_VECTOR (6 downto 0) := "0001100";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv11_402 : STD_LOGIC_VECTOR (10 downto 0) := "10000000010";
    constant ap_const_lv13_1FFE : STD_LOGIC_VECTOR (12 downto 0) := "1111111111110";
    constant ap_const_lv10_1A0 : STD_LOGIC_VECTOR (9 downto 0) := "0110100000";
    constant ap_const_lv54_10180000000000 : STD_LOGIC_VECTOR (53 downto 0) := "010000000110000000000000000000000000000000000000000000";
    constant ap_const_lv54_10140283940140 : STD_LOGIC_VECTOR (53 downto 0) := "010000000101000000001010000011100101000000000101000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal L1_data_out_V_1_data_in : STD_LOGIC_VECTOR (63 downto 0);
    signal L1_data_out_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal L1_data_out_V_1_vld_in : STD_LOGIC;
    signal L1_data_out_V_1_vld_out : STD_LOGIC;
    signal L1_data_out_V_1_ack_in : STD_LOGIC;
    signal L1_data_out_V_1_ack_out : STD_LOGIC;
    signal L1_data_out_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal L1_data_out_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal L1_data_out_V_1_sel_rd : STD_LOGIC := '0';
    signal L1_data_out_V_1_sel_wr : STD_LOGIC := '0';
    signal L1_data_out_V_1_sel : STD_LOGIC;
    signal L1_data_out_V_1_load_A : STD_LOGIC;
    signal L1_data_out_V_1_load_B : STD_LOGIC;
    signal L1_data_out_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal L1_data_out_V_1_state_cmp_full : STD_LOGIC;
    signal data_src_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal seq_count_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal section_count_V : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal numExt_V : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal numBeam_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal numBeam_ce0 : STD_LOGIC;
    signal numBeam_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal ext_ind_V : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal temp_ind_V : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal cplane_data_counter_s : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal L1_data_out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal data_src_state_load_reg_1224 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal data_src_state_load_reg_1224_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal data_src_state_load_load_fu_455_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal seq_count_V_load_load_fu_459_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal seq_count_V_load_reg_1229 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_reg_1234 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_reg_1234_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_539_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln879_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_1244_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_1094_p7 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_3_fu_1146_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_1155_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_2_fu_1178_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_1194_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_p_02605_0_2_phi_fu_295_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_2_fu_721_p6 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_phi_reg_pp0_iter0_p_02605_0_2_reg_292 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln681_fu_573_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_740_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_phi_mux_storemerge2892_phi_fu_305_p6 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge2892_reg_302 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_storemerge2893_phi_fu_319_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge2893_reg_316 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_payload_V_1_reg_327 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_payload_V_1_reg_327 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_payload_V_2_reg_340 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_payload_V_2_reg_340 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_payload_V_reg_352 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_payload_V_reg_352 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln544_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln54_1_fu_1122_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln54_fu_1116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_3_fu_555_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_1164_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_numExt_V_load : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_444_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln700_4_fu_751_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln700_2_fu_1211_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal lhs_V_fu_495_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rhs_V_fu_503_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_fu_507_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_513_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_375_p34 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln738_fu_529_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal UnifiedRetVal_i3_fu_647_p34 : STD_LOGIC_VECTOR (4 downto 0);
    signal UnifiedRetVal_i2_fu_577_p34 : STD_LOGIC_VECTOR (0 downto 0);
    signal UnifiedRetVal_i323_c_fu_717_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln391_fu_736_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln31_8_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_7_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_6_fu_810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_5_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_4_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_3_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_2_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_1_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln215_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln215_fu_828_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln215_1_fu_842_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln215_1_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln215_2_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln215_2_fu_856_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln215_3_fu_870_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln215_3_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln215_4_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln215_5_fu_892_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln215_6_fu_906_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln215_5_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln215_6_fu_928_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln215_7_fu_920_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln215_4_fu_884_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln215_8_fu_934_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln215_9_fu_946_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln215_10_fu_954_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln215_11_fu_962_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln215_12_fu_970_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln215_15_fu_994_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln215_14_fu_986_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln215_1_fu_1002_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln215_16_fu_1006_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln215_13_fu_978_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln215_18_fu_1022_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln215_22_fu_1054_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln215_19_fu_1030_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln215_20_fu_1038_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln215_2_fu_1062_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln215_23_fu_1066_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln215_24_fu_1074_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln215_21_fu_1046_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln215_25_fu_1082_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln215_fu_942_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln215_17_fu_1014_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln215_3_fu_1090_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln162_fu_1142_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln54_fu_1187_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_329 : BOOLEAN;
    signal ap_condition_256 : BOOLEAN;
    signal ap_condition_311 : BOOLEAN;
    signal ap_condition_285 : BOOLEAN;
    signal ap_condition_231 : BOOLEAN;
    signal ap_condition_292 : BOOLEAN;
    signal ap_condition_286 : BOOLEAN;

    component L1_Data_Gen_mux_325_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        din3 : IN STD_LOGIC_VECTOR (11 downto 0);
        din4 : IN STD_LOGIC_VECTOR (11 downto 0);
        din5 : IN STD_LOGIC_VECTOR (11 downto 0);
        din6 : IN STD_LOGIC_VECTOR (11 downto 0);
        din7 : IN STD_LOGIC_VECTOR (11 downto 0);
        din8 : IN STD_LOGIC_VECTOR (11 downto 0);
        din9 : IN STD_LOGIC_VECTOR (11 downto 0);
        din10 : IN STD_LOGIC_VECTOR (11 downto 0);
        din11 : IN STD_LOGIC_VECTOR (11 downto 0);
        din12 : IN STD_LOGIC_VECTOR (11 downto 0);
        din13 : IN STD_LOGIC_VECTOR (11 downto 0);
        din14 : IN STD_LOGIC_VECTOR (11 downto 0);
        din15 : IN STD_LOGIC_VECTOR (11 downto 0);
        din16 : IN STD_LOGIC_VECTOR (11 downto 0);
        din17 : IN STD_LOGIC_VECTOR (11 downto 0);
        din18 : IN STD_LOGIC_VECTOR (11 downto 0);
        din19 : IN STD_LOGIC_VECTOR (11 downto 0);
        din20 : IN STD_LOGIC_VECTOR (11 downto 0);
        din21 : IN STD_LOGIC_VECTOR (11 downto 0);
        din22 : IN STD_LOGIC_VECTOR (11 downto 0);
        din23 : IN STD_LOGIC_VECTOR (11 downto 0);
        din24 : IN STD_LOGIC_VECTOR (11 downto 0);
        din25 : IN STD_LOGIC_VECTOR (11 downto 0);
        din26 : IN STD_LOGIC_VECTOR (11 downto 0);
        din27 : IN STD_LOGIC_VECTOR (11 downto 0);
        din28 : IN STD_LOGIC_VECTOR (11 downto 0);
        din29 : IN STD_LOGIC_VECTOR (11 downto 0);
        din30 : IN STD_LOGIC_VECTOR (11 downto 0);
        din31 : IN STD_LOGIC_VECTOR (11 downto 0);
        din32 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component L1_Data_Gen_mux_325_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (0 downto 0);
        din17 : IN STD_LOGIC_VECTOR (0 downto 0);
        din18 : IN STD_LOGIC_VECTOR (0 downto 0);
        din19 : IN STD_LOGIC_VECTOR (0 downto 0);
        din20 : IN STD_LOGIC_VECTOR (0 downto 0);
        din21 : IN STD_LOGIC_VECTOR (0 downto 0);
        din22 : IN STD_LOGIC_VECTOR (0 downto 0);
        din23 : IN STD_LOGIC_VECTOR (0 downto 0);
        din24 : IN STD_LOGIC_VECTOR (0 downto 0);
        din25 : IN STD_LOGIC_VECTOR (0 downto 0);
        din26 : IN STD_LOGIC_VECTOR (0 downto 0);
        din27 : IN STD_LOGIC_VECTOR (0 downto 0);
        din28 : IN STD_LOGIC_VECTOR (0 downto 0);
        din29 : IN STD_LOGIC_VECTOR (0 downto 0);
        din30 : IN STD_LOGIC_VECTOR (0 downto 0);
        din31 : IN STD_LOGIC_VECTOR (0 downto 0);
        din32 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component L1_Data_Gen_mux_325_5_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        din3 : IN STD_LOGIC_VECTOR (4 downto 0);
        din4 : IN STD_LOGIC_VECTOR (4 downto 0);
        din5 : IN STD_LOGIC_VECTOR (4 downto 0);
        din6 : IN STD_LOGIC_VECTOR (4 downto 0);
        din7 : IN STD_LOGIC_VECTOR (4 downto 0);
        din8 : IN STD_LOGIC_VECTOR (4 downto 0);
        din9 : IN STD_LOGIC_VECTOR (4 downto 0);
        din10 : IN STD_LOGIC_VECTOR (4 downto 0);
        din11 : IN STD_LOGIC_VECTOR (4 downto 0);
        din12 : IN STD_LOGIC_VECTOR (4 downto 0);
        din13 : IN STD_LOGIC_VECTOR (4 downto 0);
        din14 : IN STD_LOGIC_VECTOR (4 downto 0);
        din15 : IN STD_LOGIC_VECTOR (4 downto 0);
        din16 : IN STD_LOGIC_VECTOR (4 downto 0);
        din17 : IN STD_LOGIC_VECTOR (4 downto 0);
        din18 : IN STD_LOGIC_VECTOR (4 downto 0);
        din19 : IN STD_LOGIC_VECTOR (4 downto 0);
        din20 : IN STD_LOGIC_VECTOR (4 downto 0);
        din21 : IN STD_LOGIC_VECTOR (4 downto 0);
        din22 : IN STD_LOGIC_VECTOR (4 downto 0);
        din23 : IN STD_LOGIC_VECTOR (4 downto 0);
        din24 : IN STD_LOGIC_VECTOR (4 downto 0);
        din25 : IN STD_LOGIC_VECTOR (4 downto 0);
        din26 : IN STD_LOGIC_VECTOR (4 downto 0);
        din27 : IN STD_LOGIC_VECTOR (4 downto 0);
        din28 : IN STD_LOGIC_VECTOR (4 downto 0);
        din29 : IN STD_LOGIC_VECTOR (4 downto 0);
        din30 : IN STD_LOGIC_VECTOR (4 downto 0);
        din31 : IN STD_LOGIC_VECTOR (4 downto 0);
        din32 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component L1_Data_Gen_numBeam IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;



begin
    numBeam_U : component L1_Data_Gen_numBeam
    generic map (
        DataWidth => 3,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => numBeam_address0,
        ce0 => numBeam_ce0,
        q0 => numBeam_q0);

    L1_Data_Gen_mux_325_12_1_1_U1 : component L1_Data_Gen_mux_325_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 12,
        din5_WIDTH => 12,
        din6_WIDTH => 12,
        din7_WIDTH => 12,
        din8_WIDTH => 12,
        din9_WIDTH => 12,
        din10_WIDTH => 12,
        din11_WIDTH => 12,
        din12_WIDTH => 12,
        din13_WIDTH => 12,
        din14_WIDTH => 12,
        din15_WIDTH => 12,
        din16_WIDTH => 12,
        din17_WIDTH => 12,
        din18_WIDTH => 12,
        din19_WIDTH => 12,
        din20_WIDTH => 12,
        din21_WIDTH => 12,
        din22_WIDTH => 12,
        din23_WIDTH => 12,
        din24_WIDTH => 12,
        din25_WIDTH => 12,
        din26_WIDTH => 12,
        din27_WIDTH => 12,
        din28_WIDTH => 12,
        din29_WIDTH => 12,
        din30_WIDTH => 12,
        din31_WIDTH => 12,
        din32_WIDTH => 5,
        dout_WIDTH => 12)
    port map (
        din0 => ap_const_lv12_A11,
        din1 => ap_const_lv12_B11,
        din2 => ap_const_lv12_B12,
        din3 => ap_const_lv12_C11,
        din4 => ap_const_lv12_C12,
        din5 => ap_const_lv12_C13,
        din6 => ap_const_lv12_D11,
        din7 => ap_const_lv12_D12,
        din8 => ap_const_lv12_D13,
        din9 => ap_const_lv12_D14,
        din10 => ap_const_lv12_E11,
        din11 => ap_const_lv12_E12,
        din12 => ap_const_lv12_E13,
        din13 => ap_const_lv12_E14,
        din14 => ap_const_lv12_E15,
        din15 => ap_const_lv12_111,
        din16 => ap_const_lv12_211,
        din17 => ap_const_lv12_212,
        din18 => ap_const_lv12_311,
        din19 => ap_const_lv12_312,
        din20 => ap_const_lv12_313,
        din21 => ap_const_lv12_411,
        din22 => ap_const_lv12_412,
        din23 => ap_const_lv12_413,
        din24 => ap_const_lv12_414,
        din25 => ap_const_lv12_511,
        din26 => ap_const_lv12_512,
        din27 => ap_const_lv12_513,
        din28 => ap_const_lv12_514,
        din29 => ap_const_lv12_515,
        din30 => ap_const_lv12_515,
        din31 => ap_const_lv12_515,
        din32 => ext_ind_V,
        dout => grp_fu_375_p34);

    L1_Data_Gen_mux_325_1_1_1_U2 : component L1_Data_Gen_mux_325_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 1,
        din17_WIDTH => 1,
        din18_WIDTH => 1,
        din19_WIDTH => 1,
        din20_WIDTH => 1,
        din21_WIDTH => 1,
        din22_WIDTH => 1,
        din23_WIDTH => 1,
        din24_WIDTH => 1,
        din25_WIDTH => 1,
        din26_WIDTH => 1,
        din27_WIDTH => 1,
        din28_WIDTH => 1,
        din29_WIDTH => 1,
        din30_WIDTH => 1,
        din31_WIDTH => 1,
        din32_WIDTH => 5,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_0,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_1,
        din16 => ap_const_lv1_1,
        din17 => ap_const_lv1_0,
        din18 => ap_const_lv1_1,
        din19 => ap_const_lv1_1,
        din20 => ap_const_lv1_1,
        din21 => ap_const_lv1_0,
        din22 => ap_const_lv1_1,
        din23 => ap_const_lv1_1,
        din24 => ap_const_lv1_0,
        din25 => ap_const_lv1_1,
        din26 => ap_const_lv1_1,
        din27 => ap_const_lv1_1,
        din28 => ap_const_lv1_1,
        din29 => ap_const_lv1_0,
        din30 => ap_const_lv1_0,
        din31 => ap_const_lv1_0,
        din32 => ext_ind_V,
        dout => UnifiedRetVal_i2_fu_577_p34);

    L1_Data_Gen_mux_325_5_1_1_U3 : component L1_Data_Gen_mux_325_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        din3_WIDTH => 5,
        din4_WIDTH => 5,
        din5_WIDTH => 5,
        din6_WIDTH => 5,
        din7_WIDTH => 5,
        din8_WIDTH => 5,
        din9_WIDTH => 5,
        din10_WIDTH => 5,
        din11_WIDTH => 5,
        din12_WIDTH => 5,
        din13_WIDTH => 5,
        din14_WIDTH => 5,
        din15_WIDTH => 5,
        din16_WIDTH => 5,
        din17_WIDTH => 5,
        din18_WIDTH => 5,
        din19_WIDTH => 5,
        din20_WIDTH => 5,
        din21_WIDTH => 5,
        din22_WIDTH => 5,
        din23_WIDTH => 5,
        din24_WIDTH => 5,
        din25_WIDTH => 5,
        din26_WIDTH => 5,
        din27_WIDTH => 5,
        din28_WIDTH => 5,
        din29_WIDTH => 5,
        din30_WIDTH => 5,
        din31_WIDTH => 5,
        din32_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => ap_const_lv5_8,
        din1 => ap_const_lv5_4,
        din2 => ap_const_lv5_4,
        din3 => ap_const_lv5_4,
        din4 => ap_const_lv5_4,
        din5 => ap_const_lv5_4,
        din6 => ap_const_lv5_5,
        din7 => ap_const_lv5_5,
        din8 => ap_const_lv5_5,
        din9 => ap_const_lv5_5,
        din10 => ap_const_lv5_10,
        din11 => ap_const_lv5_10,
        din12 => ap_const_lv5_10,
        din13 => ap_const_lv5_10,
        din14 => ap_const_lv5_10,
        din15 => ap_const_lv5_8,
        din16 => ap_const_lv5_4,
        din17 => ap_const_lv5_4,
        din18 => ap_const_lv5_4,
        din19 => ap_const_lv5_4,
        din20 => ap_const_lv5_4,
        din21 => ap_const_lv5_5,
        din22 => ap_const_lv5_5,
        din23 => ap_const_lv5_5,
        din24 => ap_const_lv5_5,
        din25 => ap_const_lv5_10,
        din26 => ap_const_lv5_10,
        din27 => ap_const_lv5_10,
        din28 => ap_const_lv5_10,
        din29 => ap_const_lv5_10,
        din30 => ap_const_lv5_10,
        din31 => ap_const_lv5_10,
        din32 => ext_ind_V,
        dout => UnifiedRetVal_i3_fu_647_p34);





    L1_data_out_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                L1_data_out_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = L1_data_out_V_1_ack_out) and (ap_const_logic_1 = L1_data_out_V_1_vld_out))) then 
                                        L1_data_out_V_1_sel_rd <= not(L1_data_out_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    L1_data_out_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                L1_data_out_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = L1_data_out_V_1_ack_in) and (ap_const_logic_1 = L1_data_out_V_1_vld_in))) then 
                                        L1_data_out_V_1_sel_wr <= not(L1_data_out_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    L1_data_out_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                L1_data_out_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = L1_data_out_V_1_vld_in) and (ap_const_lv2_2 = L1_data_out_V_1_state)) or ((ap_const_logic_0 = L1_data_out_V_1_vld_in) and (ap_const_lv2_3 = L1_data_out_V_1_state) and (ap_const_logic_1 = L1_data_out_V_1_ack_out)))) then 
                    L1_data_out_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = L1_data_out_V_TREADY) and (ap_const_lv2_1 = L1_data_out_V_1_state)) or ((ap_const_logic_0 = L1_data_out_V_TREADY) and (ap_const_lv2_3 = L1_data_out_V_1_state) and (ap_const_logic_1 = L1_data_out_V_1_vld_in)))) then 
                    L1_data_out_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = L1_data_out_V_1_vld_in) and (ap_const_logic_1 = L1_data_out_V_1_ack_out))) and not(((ap_const_logic_0 = L1_data_out_V_TREADY) and (ap_const_logic_1 = L1_data_out_V_1_vld_in))) and (ap_const_lv2_3 = L1_data_out_V_1_state)) or ((ap_const_lv2_1 = L1_data_out_V_1_state) and (ap_const_logic_1 = L1_data_out_V_1_ack_out)) or ((ap_const_lv2_2 = L1_data_out_V_1_state) and (ap_const_logic_1 = L1_data_out_V_1_vld_in)))) then 
                    L1_data_out_V_1_state <= ap_const_lv2_3;
                else 
                    L1_data_out_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    data_src_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_src_state <= ap_const_lv2_0;
            else
                if ((ap_const_boolean_1 = ap_condition_231)) then
                    if ((data_src_state_load_load_fu_455_p1 = ap_const_lv2_1)) then 
                        data_src_state <= select_ln54_1_fu_1122_p3;
                    elsif ((data_src_state_load_load_fu_455_p1 = ap_const_lv2_2)) then 
                        data_src_state <= ap_phi_mux_storemerge2893_phi_fu_319_p4;
                    elsif ((data_src_state_load_load_fu_455_p1 = ap_const_lv2_3)) then 
                        data_src_state <= ap_phi_mux_storemerge2892_phi_fu_305_p6;
                    elsif (((data_src_state_load_load_fu_455_p1 = ap_const_lv2_0) and (seq_count_V_load_load_fu_459_p1 = ap_const_lv1_1))) then 
                        data_src_state <= ap_const_lv2_1;
                    elsif (((data_src_state_load_load_fu_455_p1 = ap_const_lv2_0) and (seq_count_V_load_load_fu_459_p1 = ap_const_lv1_0))) then 
                        data_src_state <= ap_const_lv2_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    seq_count_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                seq_count_V <= ap_const_lv1_0;
            else
                if (((data_src_state_load_load_fu_455_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    seq_count_V <= xor_ln54_fu_1116_p2;
                elsif ((((data_src_state_load_load_fu_455_p1 = ap_const_lv2_0) and (seq_count_V_load_load_fu_459_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((data_src_state_load_load_fu_455_p1 = ap_const_lv2_2) and (seq_count_V_load_load_fu_459_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((data_src_state_load_load_fu_455_p1 = ap_const_lv2_3) and (trunc_ln681_fu_573_p1 = ap_const_lv1_1) and (icmp_ln895_fu_523_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((data_src_state_load_load_fu_455_p1 = ap_const_lv2_3) and (icmp_ln895_fu_523_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                    seq_count_V <= ap_const_lv1_0;
                elsif ((((data_src_state_load_load_fu_455_p1 = ap_const_lv2_0) and (seq_count_V_load_load_fu_459_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((data_src_state_load_load_fu_455_p1 = ap_const_lv2_2) and (seq_count_V_load_load_fu_459_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((data_src_state_load_load_fu_455_p1 = ap_const_lv2_3) and (icmp_ln895_fu_523_p2 = ap_const_lv1_1) and (trunc_ln681_fu_573_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                    seq_count_V <= ap_const_lv1_1;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_tmp_payload_V_1_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_231)) then
                if (((data_src_state_load_load_fu_455_p1 = ap_const_lv2_0) and (seq_count_V_load_load_fu_459_p1 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_tmp_payload_V_1_reg_327 <= ap_const_lv52_50050050050;
                elsif (((data_src_state_load_load_fu_455_p1 = ap_const_lv2_0) and (seq_count_V_load_load_fu_459_p1 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_tmp_payload_V_1_reg_327 <= ap_const_lv52_8050050050050;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_tmp_payload_V_1_reg_327 <= ap_phi_reg_pp0_iter0_tmp_payload_V_1_reg_327;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_tmp_payload_V_2_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_src_state_load_load_fu_455_p1 = ap_const_lv2_3) and (icmp_ln895_fu_523_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ap_phi_reg_pp0_iter1_tmp_payload_V_2_reg_340 <= ap_phi_mux_p_02605_0_2_phi_fu_295_p4;
            elsif ((((data_src_state_load_load_fu_455_p1 = ap_const_lv2_3) and (icmp_ln879_fu_549_p2 = ap_const_lv1_0) and (icmp_ln895_fu_523_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((data_src_state_load_load_fu_455_p1 = ap_const_lv2_3) and (icmp_ln879_fu_549_p2 = ap_const_lv1_1) and (icmp_ln895_fu_523_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                ap_phi_reg_pp0_iter1_tmp_payload_V_2_reg_340 <= p_Result_3_fu_539_p4;
            elsif (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ap_phi_reg_pp0_iter1_tmp_payload_V_2_reg_340 <= ap_phi_reg_pp0_iter0_tmp_payload_V_2_reg_340;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_tmp_payload_V_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_231)) then
                if (((data_src_state_load_load_fu_455_p1 = ap_const_lv2_2) and (seq_count_V_load_load_fu_459_p1 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_tmp_payload_V_reg_352 <= p_Result_s_fu_1094_p7;
                elsif (((data_src_state_load_load_fu_455_p1 = ap_const_lv2_2) and (seq_count_V_load_load_fu_459_p1 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_tmp_payload_V_reg_352 <= ap_const_lv54_201F07FF880000;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_tmp_payload_V_reg_352 <= ap_phi_reg_pp0_iter0_tmp_payload_V_reg_352;
                end if;
            end if; 
        end if;
    end process;

    ext_ind_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((data_src_state_load_load_fu_455_p1 = ap_const_lv2_3) and (trunc_ln681_fu_573_p1 = ap_const_lv1_1) and (icmp_ln895_fu_523_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((data_src_state_load_load_fu_455_p1 = ap_const_lv2_3) and (icmp_ln895_fu_523_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                ext_ind_V <= grp_fu_444_p2;
            elsif (((data_src_state_load_load_fu_455_p1 = ap_const_lv2_0) and (seq_count_V_load_load_fu_459_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ext_ind_V <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    section_count_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_292)) then
                if ((icmp_ln879_fu_549_p2 = ap_const_lv1_1)) then 
                    section_count_V <= ap_const_lv4_0;
                elsif ((icmp_ln879_fu_549_p2 = ap_const_lv1_0)) then 
                    section_count_V <= add_ln700_3_fu_555_p2;
                end if;
            end if; 
        end if;
    end process;

    temp_ind_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_286)) then
                if ((icmp_ln895_fu_523_p2 = ap_const_lv1_1)) then 
                    temp_ind_V <= add_ln700_4_fu_751_p2;
                elsif ((icmp_ln895_fu_523_p2 = ap_const_lv1_0)) then 
                    temp_ind_V <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = L1_data_out_V_1_load_A)) then
                L1_data_out_V_1_payload_A <= L1_data_out_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = L1_data_out_V_1_load_B)) then
                L1_data_out_V_1_payload_B <= L1_data_out_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_src_state_load_reg_1224_pp0_iter1_reg = ap_const_lv2_3) and (icmp_ln879_reg_1244_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln895_reg_1234_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                cplane_data_counter_s <= add_ln700_2_fu_1211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                data_src_state_load_reg_1224 <= data_src_state;
                data_src_state_load_reg_1224_pp0_iter1_reg <= data_src_state_load_reg_1224;
                icmp_ln879_reg_1244_pp0_iter1_reg <= icmp_ln879_reg_1244;
                icmp_ln895_reg_1234_pp0_iter1_reg <= icmp_ln895_reg_1234;
                seq_count_V_load_reg_1229 <= seq_count_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_src_state_load_load_fu_455_p1 = ap_const_lv2_3) and (icmp_ln895_fu_523_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln879_reg_1244 <= icmp_ln879_fu_549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_src_state_load_load_fu_455_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln895_reg_1234 <= icmp_ln895_fu_523_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_src_state_load_reg_1224 = ap_const_lv2_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    numExt_V(3 downto 1) <= shl_ln_fu_1164_p3(3 downto 1);
            end if;
        end if;
    end process;
    numExt_V(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    CDATA_COUNTER_V <= std_logic_vector(unsigned(cplane_data_counter_s) + unsigned(ap_const_lv8_1));
    L1_data_out_V_1_ack_in <= L1_data_out_V_1_state(1);
    L1_data_out_V_1_ack_out <= L1_data_out_V_TREADY;

    L1_data_out_V_1_data_in_assign_proc : process(data_src_state_load_reg_1224, tmp_3_fu_1146_p3, tmp_2_fu_1155_p3, tmp_1_2_fu_1178_p3, tmp_fu_1194_p3, ap_condition_329)
    begin
        if ((ap_const_boolean_1 = ap_condition_329)) then
            if ((data_src_state_load_reg_1224 = ap_const_lv2_1)) then 
                L1_data_out_V_1_data_in <= tmp_fu_1194_p3;
            elsif ((data_src_state_load_reg_1224 = ap_const_lv2_2)) then 
                L1_data_out_V_1_data_in <= tmp_1_2_fu_1178_p3;
            elsif ((data_src_state_load_reg_1224 = ap_const_lv2_3)) then 
                L1_data_out_V_1_data_in <= tmp_2_fu_1155_p3;
            elsif ((data_src_state_load_reg_1224 = ap_const_lv2_0)) then 
                L1_data_out_V_1_data_in <= tmp_3_fu_1146_p3;
            else 
                L1_data_out_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            L1_data_out_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    L1_data_out_V_1_data_out_assign_proc : process(L1_data_out_V_1_payload_A, L1_data_out_V_1_payload_B, L1_data_out_V_1_sel)
    begin
        if ((ap_const_logic_1 = L1_data_out_V_1_sel)) then 
            L1_data_out_V_1_data_out <= L1_data_out_V_1_payload_B;
        else 
            L1_data_out_V_1_data_out <= L1_data_out_V_1_payload_A;
        end if; 
    end process;

    L1_data_out_V_1_load_A <= (not(L1_data_out_V_1_sel_wr) and L1_data_out_V_1_state_cmp_full);
    L1_data_out_V_1_load_B <= (L1_data_out_V_1_state_cmp_full and L1_data_out_V_1_sel_wr);
    L1_data_out_V_1_sel <= L1_data_out_V_1_sel_rd;
    L1_data_out_V_1_state_cmp_full <= '0' when (L1_data_out_V_1_state = ap_const_lv2_1) else '1';

    L1_data_out_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, data_src_state_load_reg_1224, ap_block_pp0_stage0_11001)
    begin
        if ((((data_src_state_load_reg_1224 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((data_src_state_load_reg_1224 = ap_const_lv2_3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((data_src_state_load_reg_1224 = ap_const_lv2_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((data_src_state_load_reg_1224 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            L1_data_out_V_1_vld_in <= ap_const_logic_1;
        else 
            L1_data_out_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    L1_data_out_V_1_vld_out <= L1_data_out_V_1_state(0);
    L1_data_out_V_TDATA <= L1_data_out_V_1_data_out;

    L1_data_out_V_TDATA_blk_n_assign_proc : process(L1_data_out_V_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, data_src_state_load_reg_1224, ap_enable_reg_pp0_iter2, data_src_state_load_reg_1224_pp0_iter1_reg)
    begin
        if ((((data_src_state_load_reg_1224_pp0_iter1_reg = ap_const_lv2_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((data_src_state_load_reg_1224_pp0_iter1_reg = ap_const_lv2_3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((data_src_state_load_reg_1224_pp0_iter1_reg = ap_const_lv2_2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((data_src_state_load_reg_1224_pp0_iter1_reg = ap_const_lv2_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((data_src_state_load_reg_1224 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((data_src_state_load_reg_1224 = ap_const_lv2_3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((data_src_state_load_reg_1224 = ap_const_lv2_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((data_src_state_load_reg_1224 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            L1_data_out_V_TDATA_blk_n <= L1_data_out_V_1_state(1);
        else 
            L1_data_out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    L1_data_out_V_TVALID <= L1_data_out_V_1_state(0);
    UnifiedRetVal_i323_c_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(UnifiedRetVal_i3_fu_647_p34),8));
    add_ln700_2_fu_1211_p2 <= std_logic_vector(unsigned(cplane_data_counter_s) + unsigned(ap_const_lv8_1));
    add_ln700_3_fu_555_p2 <= std_logic_vector(unsigned(section_count_V) + unsigned(ap_const_lv4_1));
    add_ln700_4_fu_751_p2 <= std_logic_vector(unsigned(temp_ind_V) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(L1_data_out_V_TREADY, L1_data_out_V_1_state, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_lv2_1 = L1_data_out_V_1_state) or ((ap_const_logic_0 = L1_data_out_V_TREADY) and (ap_const_lv2_3 = L1_data_out_V_1_state))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(L1_data_out_V_TREADY, L1_data_out_V_1_state, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_io, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (ap_const_lv2_1 = L1_data_out_V_1_state) or ((ap_const_logic_0 = L1_data_out_V_TREADY) and (ap_const_lv2_3 = L1_data_out_V_1_state)))) or ((ap_const_boolean_1 = ap_block_state2_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(L1_data_out_V_TREADY, L1_data_out_V_1_state, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_io, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (ap_const_lv2_1 = L1_data_out_V_1_state) or ((ap_const_logic_0 = L1_data_out_V_TREADY) and (ap_const_lv2_3 = L1_data_out_V_1_state)))) or ((ap_const_boolean_1 = ap_block_state2_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(L1_data_out_V_1_ack_in, data_src_state_load_reg_1224)
    begin
                ap_block_state2_io <= (((data_src_state_load_reg_1224 = ap_const_lv2_0) and (ap_const_logic_0 = L1_data_out_V_1_ack_in)) or ((data_src_state_load_reg_1224 = ap_const_lv2_3) and (ap_const_logic_0 = L1_data_out_V_1_ack_in)) or ((data_src_state_load_reg_1224 = ap_const_lv2_2) and (ap_const_logic_0 = L1_data_out_V_1_ack_in)) or ((data_src_state_load_reg_1224 = ap_const_lv2_1) and (ap_const_logic_0 = L1_data_out_V_1_ack_in)));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(L1_data_out_V_1_ack_in, data_src_state_load_reg_1224_pp0_iter1_reg)
    begin
                ap_block_state3_io <= (((data_src_state_load_reg_1224_pp0_iter1_reg = ap_const_lv2_0) and (ap_const_logic_0 = L1_data_out_V_1_ack_in)) or ((data_src_state_load_reg_1224_pp0_iter1_reg = ap_const_lv2_3) and (ap_const_logic_0 = L1_data_out_V_1_ack_in)) or ((data_src_state_load_reg_1224_pp0_iter1_reg = ap_const_lv2_2) and (ap_const_logic_0 = L1_data_out_V_1_ack_in)) or ((data_src_state_load_reg_1224_pp0_iter1_reg = ap_const_lv2_1) and (ap_const_logic_0 = L1_data_out_V_1_ack_in)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(L1_data_out_V_TREADY, L1_data_out_V_1_state)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((ap_const_lv2_1 = L1_data_out_V_1_state) or ((ap_const_logic_0 = L1_data_out_V_TREADY) and (ap_const_lv2_3 = L1_data_out_V_1_state)));
    end process;


    ap_condition_231_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_231 <= ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_256_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_src_state_load_load_fu_455_p1, icmp_ln895_fu_523_p2)
    begin
                ap_condition_256 <= ((data_src_state_load_load_fu_455_p1 = ap_const_lv2_3) and (icmp_ln895_fu_523_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_285_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_src_state_load_load_fu_455_p1)
    begin
                ap_condition_285 <= ((data_src_state_load_load_fu_455_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_286_assign_proc : process(ap_CS_fsm_pp0_stage0, data_src_state_load_load_fu_455_p1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_286 <= ((data_src_state_load_load_fu_455_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_292_assign_proc : process(ap_CS_fsm_pp0_stage0, data_src_state_load_load_fu_455_p1, ap_block_pp0_stage0_11001, icmp_ln895_fu_523_p2)
    begin
                ap_condition_292 <= ((data_src_state_load_load_fu_455_p1 = ap_const_lv2_3) and (icmp_ln895_fu_523_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_311_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_src_state_load_load_fu_455_p1)
    begin
                ap_condition_311 <= ((data_src_state_load_load_fu_455_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_329_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_01001)
    begin
                ap_condition_329 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_02605_0_2_phi_fu_295_p4_assign_proc : process(p_Result_2_fu_721_p6, ap_phi_reg_pp0_iter0_p_02605_0_2_reg_292, trunc_ln681_fu_573_p1, p_Result_1_fu_740_p4, ap_condition_256)
    begin
        if ((ap_const_boolean_1 = ap_condition_256)) then
            if ((trunc_ln681_fu_573_p1 = ap_const_lv1_1)) then 
                ap_phi_mux_p_02605_0_2_phi_fu_295_p4 <= p_Result_1_fu_740_p4;
            elsif ((trunc_ln681_fu_573_p1 = ap_const_lv1_0)) then 
                ap_phi_mux_p_02605_0_2_phi_fu_295_p4 <= p_Result_2_fu_721_p6;
            else 
                ap_phi_mux_p_02605_0_2_phi_fu_295_p4 <= ap_phi_reg_pp0_iter0_p_02605_0_2_reg_292;
            end if;
        else 
            ap_phi_mux_p_02605_0_2_phi_fu_295_p4 <= ap_phi_reg_pp0_iter0_p_02605_0_2_reg_292;
        end if; 
    end process;


    ap_phi_mux_storemerge2892_phi_fu_305_p6_assign_proc : process(icmp_ln895_fu_523_p2, icmp_ln879_fu_549_p2, ap_phi_reg_pp0_iter0_storemerge2892_reg_302, ap_condition_311)
    begin
        if ((ap_const_boolean_1 = ap_condition_311)) then
            if ((icmp_ln895_fu_523_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge2892_phi_fu_305_p6 <= ap_const_lv2_3;
            elsif (((icmp_ln879_fu_549_p2 = ap_const_lv1_0) and (icmp_ln895_fu_523_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_storemerge2892_phi_fu_305_p6 <= ap_const_lv2_1;
            elsif (((icmp_ln879_fu_549_p2 = ap_const_lv1_1) and (icmp_ln895_fu_523_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_storemerge2892_phi_fu_305_p6 <= ap_const_lv2_0;
            else 
                ap_phi_mux_storemerge2892_phi_fu_305_p6 <= ap_phi_reg_pp0_iter0_storemerge2892_reg_302;
            end if;
        else 
            ap_phi_mux_storemerge2892_phi_fu_305_p6 <= ap_phi_reg_pp0_iter0_storemerge2892_reg_302;
        end if; 
    end process;


    ap_phi_mux_storemerge2893_phi_fu_319_p4_assign_proc : process(seq_count_V_load_load_fu_459_p1, ap_phi_reg_pp0_iter0_storemerge2893_reg_316, ap_condition_285)
    begin
        if ((ap_const_boolean_1 = ap_condition_285)) then
            if ((seq_count_V_load_load_fu_459_p1 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge2893_phi_fu_319_p4 <= ap_const_lv2_2;
            elsif ((seq_count_V_load_load_fu_459_p1 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge2893_phi_fu_319_p4 <= ap_const_lv2_3;
            else 
                ap_phi_mux_storemerge2893_phi_fu_319_p4 <= ap_phi_reg_pp0_iter0_storemerge2893_reg_316;
            end if;
        else 
            ap_phi_mux_storemerge2893_phi_fu_319_p4 <= ap_phi_reg_pp0_iter0_storemerge2893_reg_316;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_p_02605_0_2_reg_292 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_storemerge2892_reg_302 <= "XX";
    ap_phi_reg_pp0_iter0_storemerge2893_reg_316 <= "XX";
    ap_phi_reg_pp0_iter0_tmp_payload_V_1_reg_327 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_tmp_payload_V_2_reg_340 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_tmp_payload_V_reg_352 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_numExt_V_load_assign_proc : process(numExt_V, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, data_src_state_load_reg_1224, shl_ln_fu_1164_p3)
    begin
        if (((data_src_state_load_reg_1224 = ap_const_lv2_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_numExt_V_load <= shl_ln_fu_1164_p3;
        else 
            ap_sig_allocacmp_numExt_V_load <= numExt_V;
        end if; 
    end process;

    data_src_state_load_load_fu_455_p1 <= data_src_state;
    grp_fu_444_p2 <= std_logic_vector(unsigned(ext_ind_V) + unsigned(ap_const_lv5_1));
    icmp_ln31_1_fu_780_p2 <= "1" when (section_count_V = ap_const_lv4_1) else "0";
    icmp_ln31_2_fu_786_p2 <= "1" when (section_count_V = ap_const_lv4_2) else "0";
    icmp_ln31_3_fu_792_p2 <= "1" when (section_count_V = ap_const_lv4_3) else "0";
    icmp_ln31_4_fu_798_p2 <= "1" when (section_count_V = ap_const_lv4_4) else "0";
    icmp_ln31_5_fu_804_p2 <= "1" when (section_count_V = ap_const_lv4_5) else "0";
    icmp_ln31_6_fu_810_p2 <= "1" when (section_count_V = ap_const_lv4_6) else "0";
    icmp_ln31_7_fu_816_p2 <= "1" when (section_count_V = ap_const_lv4_7) else "0";
    icmp_ln31_8_fu_822_p2 <= "1" when (section_count_V = ap_const_lv4_8) else "0";
    icmp_ln31_fu_774_p2 <= "1" when (section_count_V = ap_const_lv4_0) else "0";
    icmp_ln879_fu_549_p2 <= "1" when (section_count_V = ap_const_lv4_9) else "0";
    icmp_ln895_fu_523_p2 <= "1" when (signed(tmp_1_fu_513_p4) > signed(ap_const_lv4_0)) else "0";
    l1datagen_stateout_V <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_src_state_load_reg_1224_pp0_iter1_reg),8));
    lhs_V_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_numExt_V_load),5));
    numBeam_address0 <= zext_ln544_fu_769_p1(4 - 1 downto 0);

    numBeam_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            numBeam_ce0 <= ap_const_logic_1;
        else 
            numBeam_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln215_1_fu_850_p2 <= (icmp_ln31_6_fu_810_p2 or icmp_ln31_5_fu_804_p2);
    or_ln215_2_fu_864_p2 <= (icmp_ln31_4_fu_798_p2 or icmp_ln31_3_fu_792_p2);
    or_ln215_3_fu_878_p2 <= (icmp_ln31_2_fu_786_p2 or icmp_ln31_1_fu_780_p2);
    or_ln215_4_fu_900_p2 <= (or_ln215_fu_836_p2 or or_ln215_1_fu_850_p2);
    or_ln215_5_fu_914_p2 <= (or_ln215_3_fu_878_p2 or or_ln215_2_fu_864_p2);
    or_ln215_6_fu_928_p2 <= (or_ln215_5_fu_914_p2 or or_ln215_4_fu_900_p2);
    or_ln215_fu_836_p2 <= (icmp_ln31_8_fu_822_p2 or icmp_ln31_7_fu_816_p2);
    p_Result_1_fu_740_p4 <= ((ap_const_lv19_61700 & zext_ln391_fu_736_p1) & ap_const_lv20_0);
    p_Result_2_fu_721_p6 <= ((((ap_const_lv11_616 & UnifiedRetVal_i2_fu_577_p34) & ap_const_lv18_140) & UnifiedRetVal_i323_c_fu_717_p1) & ap_const_lv16_0);
    p_Result_3_fu_539_p4 <= ((ap_const_lv19_61700 & zext_ln738_fu_529_p1) & ap_const_lv20_0);
    p_Result_s_fu_1094_p7 <= (((((ap_const_lv11_402 & zext_ln215_fu_942_p1) & ap_const_lv2_0) & select_ln215_17_fu_1014_p3) & zext_ln215_3_fu_1090_p1) & ap_const_lv13_1FFE);
    ret_V_fu_507_p2 <= std_logic_vector(unsigned(lhs_V_fu_495_p1) - unsigned(rhs_V_fu_503_p1));
    rhs_V_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_ind_V),5));
    select_ln215_10_fu_954_p3 <= 
        ap_const_lv8_88 when (icmp_ln31_6_fu_810_p2(0) = '1') else 
        ap_const_lv8_80;
    select_ln215_11_fu_962_p3 <= 
        ap_const_lv6_30 when (icmp_ln31_4_fu_798_p2(0) = '1') else 
        ap_const_lv6_1C;
    select_ln215_12_fu_970_p3 <= 
        ap_const_lv6_10 when (icmp_ln31_2_fu_786_p2(0) = '1') else 
        ap_const_lv6_8;
    select_ln215_13_fu_978_p3 <= 
        ap_const_lv8_0 when (icmp_ln31_fu_774_p2(0) = '1') else 
        ap_const_lv8_B0;
    select_ln215_14_fu_986_p3 <= 
        select_ln215_9_fu_946_p3 when (or_ln215_fu_836_p2(0) = '1') else 
        select_ln215_10_fu_954_p3;
    select_ln215_15_fu_994_p3 <= 
        select_ln215_11_fu_962_p3 when (or_ln215_2_fu_864_p2(0) = '1') else 
        select_ln215_12_fu_970_p3;
    select_ln215_16_fu_1006_p3 <= 
        select_ln215_14_fu_986_p3 when (or_ln215_4_fu_900_p2(0) = '1') else 
        zext_ln215_1_fu_1002_p1;
    select_ln215_17_fu_1014_p3 <= 
        select_ln215_16_fu_1006_p3 when (or_ln215_6_fu_928_p2(0) = '1') else 
        select_ln215_13_fu_978_p3;
    select_ln215_18_fu_1022_p3 <= 
        ap_const_lv5_14 when (icmp_ln31_8_fu_822_p2(0) = '1') else 
        ap_const_lv5_C;
    select_ln215_19_fu_1030_p3 <= 
        ap_const_lv7_50 when (icmp_ln31_4_fu_798_p2(0) = '1') else 
        ap_const_lv7_14;
    select_ln215_1_fu_842_p3 <= 
        ap_const_lv9_129 when (icmp_ln31_6_fu_810_p2(0) = '1') else 
        ap_const_lv9_128;
    select_ln215_20_fu_1038_p3 <= 
        ap_const_lv7_C when (icmp_ln31_2_fu_786_p2(0) = '1') else 
        ap_const_lv7_8;
    select_ln215_21_fu_1046_p3 <= 
        ap_const_lv7_8 when (icmp_ln31_fu_774_p2(0) = '1') else 
        ap_const_lv7_50;
    select_ln215_22_fu_1054_p3 <= 
        select_ln215_18_fu_1022_p3 when (or_ln215_fu_836_p2(0) = '1') else 
        ap_const_lv5_8;
    select_ln215_23_fu_1066_p3 <= 
        select_ln215_19_fu_1030_p3 when (or_ln215_2_fu_864_p2(0) = '1') else 
        select_ln215_20_fu_1038_p3;
    select_ln215_24_fu_1074_p3 <= 
        zext_ln215_2_fu_1062_p1 when (or_ln215_4_fu_900_p2(0) = '1') else 
        select_ln215_23_fu_1066_p3;
    select_ln215_25_fu_1082_p3 <= 
        select_ln215_24_fu_1074_p3 when (or_ln215_6_fu_928_p2(0) = '1') else 
        select_ln215_21_fu_1046_p3;
    select_ln215_2_fu_856_p3 <= 
        ap_const_lv9_127 when (icmp_ln31_4_fu_798_p2(0) = '1') else 
        ap_const_lv9_126;
    select_ln215_3_fu_870_p3 <= 
        ap_const_lv9_125 when (icmp_ln31_2_fu_786_p2(0) = '1') else 
        ap_const_lv9_124;
    select_ln215_4_fu_884_p3 <= 
        ap_const_lv9_123 when (icmp_ln31_fu_774_p2(0) = '1') else 
        ap_const_lv9_132;
    select_ln215_5_fu_892_p3 <= 
        select_ln215_fu_828_p3 when (or_ln215_fu_836_p2(0) = '1') else 
        select_ln215_1_fu_842_p3;
    select_ln215_6_fu_906_p3 <= 
        select_ln215_2_fu_856_p3 when (or_ln215_2_fu_864_p2(0) = '1') else 
        select_ln215_3_fu_870_p3;
    select_ln215_7_fu_920_p3 <= 
        select_ln215_5_fu_892_p3 when (or_ln215_4_fu_900_p2(0) = '1') else 
        select_ln215_6_fu_906_p3;
    select_ln215_8_fu_934_p3 <= 
        select_ln215_7_fu_920_p3 when (or_ln215_6_fu_928_p2(0) = '1') else 
        select_ln215_4_fu_884_p3;
    select_ln215_9_fu_946_p3 <= 
        ap_const_lv8_9C when (icmp_ln31_8_fu_822_p2(0) = '1') else 
        ap_const_lv8_90;
    select_ln215_fu_828_p3 <= 
        ap_const_lv9_131 when (icmp_ln31_8_fu_822_p2(0) = '1') else 
        ap_const_lv9_130;
    select_ln54_1_fu_1122_p3 <= 
        ap_const_lv2_2 when (seq_count_V(0) = '1') else 
        ap_const_lv2_1;
    select_ln54_fu_1187_p3 <= 
        ap_const_lv54_10180000000000 when (seq_count_V_load_reg_1229(0) = '1') else 
        ap_const_lv54_10140283940140;
    seq_count_V_load_load_fu_459_p1 <= seq_count_V;
    shl_ln_fu_1164_p3 <= (numBeam_q0 & ap_const_lv1_0);
    tmp_1_2_fu_1178_p3 <= (ap_const_lv10_1A0 & ap_phi_reg_pp0_iter1_tmp_payload_V_reg_352);
    tmp_1_fu_513_p4 <= ret_V_fu_507_p2(4 downto 1);
    tmp_2_fu_1155_p3 <= (ap_const_lv10_1A0 & ap_phi_reg_pp0_iter1_tmp_payload_V_2_reg_340);
    tmp_3_fu_1146_p3 <= (ap_const_lv10_1A0 & zext_ln162_fu_1142_p1);
    tmp_fu_1194_p3 <= (ap_const_lv10_1A0 & select_ln54_fu_1187_p3);
    trunc_ln681_fu_573_p1 <= temp_ind_V(1 - 1 downto 0);
    xor_ln54_fu_1116_p2 <= (seq_count_V xor ap_const_lv1_1);
    zext_ln162_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_reg_pp0_iter1_tmp_payload_V_1_reg_327),54));
    zext_ln215_1_fu_1002_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln215_15_fu_994_p3),8));
    zext_ln215_2_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln215_22_fu_1054_p3),7));
    zext_ln215_3_fu_1090_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln215_25_fu_1082_p3),8));
    zext_ln215_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln215_8_fu_934_p3),12));
    zext_ln391_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_375_p34),15));
    zext_ln544_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(section_count_V),64));
    zext_ln738_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_375_p34),15));
end behav;
