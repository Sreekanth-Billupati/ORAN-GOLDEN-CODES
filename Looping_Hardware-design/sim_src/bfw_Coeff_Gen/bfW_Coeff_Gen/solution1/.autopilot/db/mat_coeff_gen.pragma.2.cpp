# 1 "mat_coeff_gen.cpp"
# 1 "mat_coeff_gen.cpp" 1
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 155 "<built-in>" 3
# 1 "<command line>" 1






# 1 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/etc/autopilot_ssdm_op.h" 1
# 157 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow));

    void _ssdm_op_Return(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecKeepValue(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_Unroll(...) __attribute__ ((nothrow));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow));
    void _ssdm_Inline(...) __attribute__ ((nothrow));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecStable(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecStableContent(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipoDepth(...) __attribute__ ((nothrow));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow));

    void _ssdm_DataPack(...) __attribute__ ((nothrow));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow));

    void __xilinx_ip_top(...) __attribute__ ((nothrow));


}
# 8 "<command line>" 2
# 1 "<built-in>" 2
# 1 "mat_coeff_gen.cpp" 2
# 1 "./mat_coeff_gen.h" 1



# 1 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/hls_stream.h" 1
# 66 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/hls_stream.h"
# 1 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/etc/autopilot_enum.h" 1
# 58 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/etc/autopilot_enum.h"
enum SsdmDataTypes {
    _ssdm_sc_int = 0,
    _ssdm_c_int = _ssdm_sc_int,
    _ssdm_sc_uint = 1,
    _ssdm_c_uint = _ssdm_sc_uint,
    _ssdm_sc_bigint = 2,
    _ssdm_sc_biguint = 3,
};



enum SsdmPortTypes {
    _ssdm_sc_in = 0,
    _ssdm_sc_out = 1,
    _ssdm_sc_inout = 2,
    _ssdm_sc_in_clk,

    _ssdm_fifo_in,
    _ssdm_sc_fifo_in = _ssdm_fifo_in,
    _ssdm_tlm_fifo_in = _ssdm_fifo_in,
    _ssdm_fifo_out,
    _ssdm_sc_fifo_out = _ssdm_fifo_out,
    _ssdm_tlm_fifo_out = _ssdm_fifo_out,
    _ssdm_fifo_inout,
    _ssdm_sc_fifo_inout = _ssdm_fifo_inout,
    _ssdm_tlm_fifo_inout = _ssdm_fifo_inout,
    _ssdm_sc_bus,
    _ssdm_hls_bus_port = _ssdm_sc_bus,
    _ssdm_AXI4M_bus_port = _ssdm_sc_bus,
    _ssdm_port_end,
};



enum SsdmProcessTypes {
    _ssdm_method = 0,
    _ssdm_sc_method = _ssdm_method,
    _ssdm_thread = 1,
    _ssdm_sc_thread = _ssdm_thread,
    _ssdm_cthread = 2,
    _ssdm_sc_cthread = _ssdm_cthread,
    _ssdm_process_end,
};



enum SsdmSensitiveTypes {
    _ssdm_sensitive = 0,
    _ssdm_sensitive_pos,
    _ssdm_sensitive_neg,
    _ssdm_sensitive_reset0,
    _ssdm_sensitive_reset1,
    _ssdm_sensitive_end,
};



enum SsdmChannelTypes {
    _ssdm_sc_sig,
    _ssdm_fifo,
    _ssdm_sc_fifo = _ssdm_fifo,
    _ssdm_mem_fifo,
    _ssdm_sc_mem_fifo = _ssdm_mem_fifo,
};


enum SsdmRegionTypes {
    _ssdm_region_reset,
    _ssdm_region_protocol,
    _ssdm_region_pipeline,
    _ssdm_region_parallel,
};
# 67 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/hls_stream.h" 2


namespace hls {
# 78 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/hls_stream.h"
template<typename __STREAM_T__>
class stream
{
  public:

    inline __attribute__((always_inline)) stream() {
    }

    inline __attribute__((always_inline)) stream(const char* name) {
    }


  private:
    inline __attribute__((always_inline)) stream(const stream< __STREAM_T__ >& chn):V(chn.V) {
    }

    inline __attribute__((always_inline)) stream& operator= (const stream< __STREAM_T__ >& chn) {
        V = chn.V;
        return *this;
    }

  public:

    inline __attribute__((always_inline)) void operator >> (__STREAM_T__& rdata) {
        read(rdata);
    }

    inline __attribute__((always_inline)) void operator << (const __STREAM_T__& wdata) {
        write(wdata);
    }


  public:

    inline __attribute__((always_inline)) bool empty() const {

        bool tmp = _ssdm_StreamCanRead(&V);
        return !tmp;



    }

    inline __attribute__((always_inline)) bool full() const {

        bool tmp = _ssdm_StreamCanWrite(&V);
        return !tmp;



    }


    inline __attribute__((always_inline)) void read(__STREAM_T__& dout) {

        __STREAM_T__ tmp;
        _ssdm_StreamRead(&V, &tmp);
        dout = tmp;



    }

    inline __attribute__((always_inline)) __STREAM_T__ read() {
       __STREAM_T__ tmp;
       read(tmp);
       return tmp;
    }


    inline __attribute__((always_inline)) bool read_nb(__STREAM_T__& dout) {

        __STREAM_T__ tmp;
        bool empty_n = _ssdm_StreamNbRead(&V, &tmp);
        dout = tmp;
        return empty_n;



    }


    inline __attribute__((always_inline)) void write(const __STREAM_T__& din) {

        __STREAM_T__ tmp = din;
        _ssdm_StreamWrite(&V, &tmp);



    }


    inline __attribute__((always_inline)) bool write_nb(const __STREAM_T__& din) {

        __STREAM_T__ tmp = din;
        bool full_n = _ssdm_StreamNbWrite(&V, &tmp);
        return full_n;



    }



    inline __attribute__((always_inline)) unsigned size() {
        unsigned size = _ssdm_StreamSize(&V);
        return size;
    }


  public:
    __STREAM_T__ V;
};


}
# 5 "./mat_coeff_gen.h" 2
# 1 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int.h" 1
# 54 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int.h"
# 1 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_common.h" 1
# 57 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_common.h"
# 1 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_decl.h" 1
# 100 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_decl.h"
enum ap_q_mode {
  AP_RND,
  AP_RND_ZERO,
  AP_RND_MIN_INF,
  AP_RND_INF,
  AP_RND_CONV,
  AP_TRN,
  AP_TRN_ZERO,
};
# 122 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_decl.h"
enum ap_o_mode {
  AP_SAT,
  AP_SAT_ZERO,
  AP_SAT_SYM,
  AP_WRAP,
  AP_WRAP_SM,
};
# 179 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_decl.h"
template <int _AP_W, bool _AP_S>
struct ap_int_base;

template <int _AP_W>
struct ap_int;

template <int _AP_W>
struct ap_uint;

template <int _AP_W, bool _AP_S>
struct ap_range_ref;

template <int _AP_W, bool _AP_S>
struct ap_bit_ref;

template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref;

template <int _AP_W, int _AP_I, bool _AP_S = true, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed_base;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_ufixed;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref;


enum BaseMode { AP_BIN = 2, AP_OCT = 8, AP_DEC = 10, AP_HEX = 16 };
# 233 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_decl.h"
typedef signed long long ap_slong;
typedef unsigned long long ap_ulong;


enum {
  _AP_SIZE_char = 8,
  _AP_SIZE_short = sizeof(short) * 8,
  _AP_SIZE_int = sizeof(int) * 8,
  _AP_SIZE_long = sizeof(long) * 8,
  _AP_SIZE_ap_slong = sizeof(ap_slong) * 8
};
# 58 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_common.h" 2
# 157 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_common.h"
enum { CHAR_IS_SIGNED = (char)-1 < 0 };


namespace _ap_type {
template <typename _Tp>
struct is_signed {
  static const bool value = _Tp(-1) < _Tp(1);
};

template <typename _Tp>
struct is_integral {
  static const bool value = false;
};





template <> struct is_integral<bool> { static const bool value = true; };
template <> struct is_integral<char> { static const bool value = true; };
template <> struct is_integral<signed char> { static const bool value = true; };
template <> struct is_integral<unsigned char> { static const bool value = true; };
template <> struct is_integral<short> { static const bool value = true; };
template <> struct is_integral<unsigned short> { static const bool value = true; };
template <> struct is_integral<int> { static const bool value = true; };
template <> struct is_integral<unsigned int> { static const bool value = true; };
template <> struct is_integral<long> { static const bool value = true; };
template <> struct is_integral<unsigned long> { static const bool value = true; };
template <> struct is_integral<ap_slong> { static const bool value = true; };
template <> struct is_integral<ap_ulong> { static const bool value = true; };


template <bool, typename _Tp = void>
struct enable_if {};

template <typename _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const<_Tp const> {
  typedef _Tp type;
};
}
# 220 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_common.h"
template <int _AP_N, bool _AP_S>
struct ssdm_int;
# 238 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_common.h"
# 1 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/etc/autopilot_dt.def" 1


template <> struct ssdm_int<1 + 1024 * 0, true> { int V __attribute__((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<2 + 1024 * 0, true> { int V __attribute__((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<2 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<3 + 1024 * 0, true> { int V __attribute__((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<3 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<4 + 1024 * 0, true> { int V __attribute__((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<4 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<5 + 1024 * 0, true> { int V __attribute__((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<5 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<6 + 1024 * 0, true> { int V __attribute__((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<6 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<7 + 1024 * 0, true> { int V __attribute__((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<7 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<8 + 1024 * 0, true> { int V __attribute__((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<8 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<9 + 1024 * 0, true> { int V __attribute__((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<9 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<10 + 1024 * 0, true> { int V __attribute__((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<10 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<11 + 1024 * 0, true> { int V __attribute__((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<11 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<12 + 1024 * 0, true> { int V __attribute__((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<12 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<13 + 1024 * 0, true> { int V __attribute__((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<13 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<14 + 1024 * 0, true> { int V __attribute__((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<14 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<15 + 1024 * 0, true> { int V __attribute__((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<15 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<16 + 1024 * 0, true> { int V __attribute__((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<16 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<17 + 1024 * 0, true> { int V __attribute__((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<17 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<18 + 1024 * 0, true> { int V __attribute__((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<18 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<19 + 1024 * 0, true> { int V __attribute__((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<19 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<20 + 1024 * 0, true> { int V __attribute__((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<20 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<21 + 1024 * 0, true> { int V __attribute__((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<21 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<22 + 1024 * 0, true> { int V __attribute__((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<22 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<23 + 1024 * 0, true> { int V __attribute__((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<23 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<24 + 1024 * 0, true> { int V __attribute__((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<24 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<25 + 1024 * 0, true> { int V __attribute__((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<25 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<26 + 1024 * 0, true> { int V __attribute__((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<26 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<27 + 1024 * 0, true> { int V __attribute__((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<27 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<28 + 1024 * 0, true> { int V __attribute__((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<28 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<29 + 1024 * 0, true> { int V __attribute__((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<29 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<30 + 1024 * 0, true> { int V __attribute__((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<30 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<31 + 1024 * 0, true> { int V __attribute__((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<31 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<32 + 1024 * 0, true> { int V __attribute__((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<32 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<33 + 1024 * 0, true> { int V __attribute__((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<33 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<34 + 1024 * 0, true> { int V __attribute__((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<34 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<35 + 1024 * 0, true> { int V __attribute__((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<35 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<36 + 1024 * 0, true> { int V __attribute__((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<36 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<37 + 1024 * 0, true> { int V __attribute__((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<37 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<38 + 1024 * 0, true> { int V __attribute__((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<38 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<39 + 1024 * 0, true> { int V __attribute__((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<39 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<40 + 1024 * 0, true> { int V __attribute__((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<40 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<41 + 1024 * 0, true> { int V __attribute__((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<41 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<42 + 1024 * 0, true> { int V __attribute__((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<42 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<43 + 1024 * 0, true> { int V __attribute__((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<43 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<44 + 1024 * 0, true> { int V __attribute__((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<44 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<45 + 1024 * 0, true> { int V __attribute__((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<45 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<46 + 1024 * 0, true> { int V __attribute__((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<46 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<47 + 1024 * 0, true> { int V __attribute__((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<47 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<48 + 1024 * 0, true> { int V __attribute__((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<48 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<49 + 1024 * 0, true> { int V __attribute__((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<49 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<50 + 1024 * 0, true> { int V __attribute__((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<50 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<51 + 1024 * 0, true> { int V __attribute__((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<51 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<52 + 1024 * 0, true> { int V __attribute__((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<52 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<53 + 1024 * 0, true> { int V __attribute__((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<53 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<54 + 1024 * 0, true> { int V __attribute__((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<54 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<55 + 1024 * 0, true> { int V __attribute__((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<55 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<56 + 1024 * 0, true> { int V __attribute__((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<56 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<57 + 1024 * 0, true> { int V __attribute__((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<57 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<58 + 1024 * 0, true> { int V __attribute__((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<58 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<59 + 1024 * 0, true> { int V __attribute__((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<59 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<60 + 1024 * 0, true> { int V __attribute__((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<60 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<61 + 1024 * 0, true> { int V __attribute__((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<61 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<62 + 1024 * 0, true> { int V __attribute__((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<62 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<63 + 1024 * 0, true> { int V __attribute__((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<63 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0, false>(){}; };


template <> struct ssdm_int<64 + 1024 * 0, true> { int V __attribute__((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<64 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0, false>(){}; };




template <> struct ssdm_int<65 + 1024 * 0, true> { int V __attribute__((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<65 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<66 + 1024 * 0, true> { int V __attribute__((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<66 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<67 + 1024 * 0, true> { int V __attribute__((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<67 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<68 + 1024 * 0, true> { int V __attribute__((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<68 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<69 + 1024 * 0, true> { int V __attribute__((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<69 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<70 + 1024 * 0, true> { int V __attribute__((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<70 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<71 + 1024 * 0, true> { int V __attribute__((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<71 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<72 + 1024 * 0, true> { int V __attribute__((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<72 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<73 + 1024 * 0, true> { int V __attribute__((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<73 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<74 + 1024 * 0, true> { int V __attribute__((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<74 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<75 + 1024 * 0, true> { int V __attribute__((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<75 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<76 + 1024 * 0, true> { int V __attribute__((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<76 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<77 + 1024 * 0, true> { int V __attribute__((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<77 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<78 + 1024 * 0, true> { int V __attribute__((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<78 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<79 + 1024 * 0, true> { int V __attribute__((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<79 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<80 + 1024 * 0, true> { int V __attribute__((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<80 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<81 + 1024 * 0, true> { int V __attribute__((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<81 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<82 + 1024 * 0, true> { int V __attribute__((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<82 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<83 + 1024 * 0, true> { int V __attribute__((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<83 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<84 + 1024 * 0, true> { int V __attribute__((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<84 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<85 + 1024 * 0, true> { int V __attribute__((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<85 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<86 + 1024 * 0, true> { int V __attribute__((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<86 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<87 + 1024 * 0, true> { int V __attribute__((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<87 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<88 + 1024 * 0, true> { int V __attribute__((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<88 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<89 + 1024 * 0, true> { int V __attribute__((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<89 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<90 + 1024 * 0, true> { int V __attribute__((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<90 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<91 + 1024 * 0, true> { int V __attribute__((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<91 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<92 + 1024 * 0, true> { int V __attribute__((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<92 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<93 + 1024 * 0, true> { int V __attribute__((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<93 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<94 + 1024 * 0, true> { int V __attribute__((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<94 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<95 + 1024 * 0, true> { int V __attribute__((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<95 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<96 + 1024 * 0, true> { int V __attribute__((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<96 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<97 + 1024 * 0, true> { int V __attribute__((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<97 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<98 + 1024 * 0, true> { int V __attribute__((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<98 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<99 + 1024 * 0, true> { int V __attribute__((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<99 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<100 + 1024 * 0, true> { int V __attribute__((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<100 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<101 + 1024 * 0, true> { int V __attribute__((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<101 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<102 + 1024 * 0, true> { int V __attribute__((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<102 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<103 + 1024 * 0, true> { int V __attribute__((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<103 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<104 + 1024 * 0, true> { int V __attribute__((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<104 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<105 + 1024 * 0, true> { int V __attribute__((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<105 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<106 + 1024 * 0, true> { int V __attribute__((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<106 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<107 + 1024 * 0, true> { int V __attribute__((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<107 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<108 + 1024 * 0, true> { int V __attribute__((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<108 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<109 + 1024 * 0, true> { int V __attribute__((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<109 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<110 + 1024 * 0, true> { int V __attribute__((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<110 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<111 + 1024 * 0, true> { int V __attribute__((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<111 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<112 + 1024 * 0, true> { int V __attribute__((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<112 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<113 + 1024 * 0, true> { int V __attribute__((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<113 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<114 + 1024 * 0, true> { int V __attribute__((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<114 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<115 + 1024 * 0, true> { int V __attribute__((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<115 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<116 + 1024 * 0, true> { int V __attribute__((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<116 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<117 + 1024 * 0, true> { int V __attribute__((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<117 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<118 + 1024 * 0, true> { int V __attribute__((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<118 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<119 + 1024 * 0, true> { int V __attribute__((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<119 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<120 + 1024 * 0, true> { int V __attribute__((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<120 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<121 + 1024 * 0, true> { int V __attribute__((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<121 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<122 + 1024 * 0, true> { int V __attribute__((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<122 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<123 + 1024 * 0, true> { int V __attribute__((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<123 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<124 + 1024 * 0, true> { int V __attribute__((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<124 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<125 + 1024 * 0, true> { int V __attribute__((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<125 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<126 + 1024 * 0, true> { int V __attribute__((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<126 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<127 + 1024 * 0, true> { int V __attribute__((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<127 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<128 + 1024 * 0, true> { int V __attribute__((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<128 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0, false>(){}; };






template <> struct ssdm_int<129 + 1024 * 0, true> { int V __attribute__((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<129 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<130 + 1024 * 0, true> { int V __attribute__((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<130 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<131 + 1024 * 0, true> { int V __attribute__((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<131 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<132 + 1024 * 0, true> { int V __attribute__((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<132 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<133 + 1024 * 0, true> { int V __attribute__((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<133 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<134 + 1024 * 0, true> { int V __attribute__((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<134 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<135 + 1024 * 0, true> { int V __attribute__((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<135 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<136 + 1024 * 0, true> { int V __attribute__((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<136 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<137 + 1024 * 0, true> { int V __attribute__((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<137 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<138 + 1024 * 0, true> { int V __attribute__((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<138 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<139 + 1024 * 0, true> { int V __attribute__((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<139 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<140 + 1024 * 0, true> { int V __attribute__((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<140 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<141 + 1024 * 0, true> { int V __attribute__((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<141 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<142 + 1024 * 0, true> { int V __attribute__((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<142 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<143 + 1024 * 0, true> { int V __attribute__((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<143 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<144 + 1024 * 0, true> { int V __attribute__((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<144 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<145 + 1024 * 0, true> { int V __attribute__((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<145 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<146 + 1024 * 0, true> { int V __attribute__((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<146 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<147 + 1024 * 0, true> { int V __attribute__((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<147 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<148 + 1024 * 0, true> { int V __attribute__((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<148 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<149 + 1024 * 0, true> { int V __attribute__((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<149 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<150 + 1024 * 0, true> { int V __attribute__((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<150 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<151 + 1024 * 0, true> { int V __attribute__((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<151 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<152 + 1024 * 0, true> { int V __attribute__((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<152 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<153 + 1024 * 0, true> { int V __attribute__((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<153 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<154 + 1024 * 0, true> { int V __attribute__((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<154 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<155 + 1024 * 0, true> { int V __attribute__((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<155 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<156 + 1024 * 0, true> { int V __attribute__((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<156 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<157 + 1024 * 0, true> { int V __attribute__((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<157 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<158 + 1024 * 0, true> { int V __attribute__((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<158 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<159 + 1024 * 0, true> { int V __attribute__((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<159 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<160 + 1024 * 0, true> { int V __attribute__((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<160 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<161 + 1024 * 0, true> { int V __attribute__((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<161 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<162 + 1024 * 0, true> { int V __attribute__((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<162 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<163 + 1024 * 0, true> { int V __attribute__((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<163 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<164 + 1024 * 0, true> { int V __attribute__((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<164 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<165 + 1024 * 0, true> { int V __attribute__((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<165 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<166 + 1024 * 0, true> { int V __attribute__((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<166 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<167 + 1024 * 0, true> { int V __attribute__((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<167 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<168 + 1024 * 0, true> { int V __attribute__((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<168 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<169 + 1024 * 0, true> { int V __attribute__((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<169 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<170 + 1024 * 0, true> { int V __attribute__((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<170 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<171 + 1024 * 0, true> { int V __attribute__((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<171 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<172 + 1024 * 0, true> { int V __attribute__((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<172 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<173 + 1024 * 0, true> { int V __attribute__((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<173 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<174 + 1024 * 0, true> { int V __attribute__((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<174 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<175 + 1024 * 0, true> { int V __attribute__((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<175 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<176 + 1024 * 0, true> { int V __attribute__((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<176 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<177 + 1024 * 0, true> { int V __attribute__((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<177 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<178 + 1024 * 0, true> { int V __attribute__((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<178 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<179 + 1024 * 0, true> { int V __attribute__((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<179 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<180 + 1024 * 0, true> { int V __attribute__((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<180 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<181 + 1024 * 0, true> { int V __attribute__((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<181 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<182 + 1024 * 0, true> { int V __attribute__((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<182 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<183 + 1024 * 0, true> { int V __attribute__((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<183 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<184 + 1024 * 0, true> { int V __attribute__((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<184 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<185 + 1024 * 0, true> { int V __attribute__((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<185 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<186 + 1024 * 0, true> { int V __attribute__((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<186 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<187 + 1024 * 0, true> { int V __attribute__((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<187 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<188 + 1024 * 0, true> { int V __attribute__((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<188 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<189 + 1024 * 0, true> { int V __attribute__((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<189 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<190 + 1024 * 0, true> { int V __attribute__((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<190 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<191 + 1024 * 0, true> { int V __attribute__((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<191 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<192 + 1024 * 0, true> { int V __attribute__((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<192 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<193 + 1024 * 0, true> { int V __attribute__((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<193 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<194 + 1024 * 0, true> { int V __attribute__((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<194 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<195 + 1024 * 0, true> { int V __attribute__((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<195 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<196 + 1024 * 0, true> { int V __attribute__((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<196 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<197 + 1024 * 0, true> { int V __attribute__((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<197 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<198 + 1024 * 0, true> { int V __attribute__((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<198 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<199 + 1024 * 0, true> { int V __attribute__((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<199 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<200 + 1024 * 0, true> { int V __attribute__((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<200 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<201 + 1024 * 0, true> { int V __attribute__((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<201 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<202 + 1024 * 0, true> { int V __attribute__((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<202 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<203 + 1024 * 0, true> { int V __attribute__((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<203 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<204 + 1024 * 0, true> { int V __attribute__((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<204 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<205 + 1024 * 0, true> { int V __attribute__((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<205 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<206 + 1024 * 0, true> { int V __attribute__((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<206 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<207 + 1024 * 0, true> { int V __attribute__((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<207 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<208 + 1024 * 0, true> { int V __attribute__((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<208 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<209 + 1024 * 0, true> { int V __attribute__((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<209 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<210 + 1024 * 0, true> { int V __attribute__((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<210 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<211 + 1024 * 0, true> { int V __attribute__((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<211 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<212 + 1024 * 0, true> { int V __attribute__((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<212 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<213 + 1024 * 0, true> { int V __attribute__((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<213 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<214 + 1024 * 0, true> { int V __attribute__((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<214 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<215 + 1024 * 0, true> { int V __attribute__((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<215 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<216 + 1024 * 0, true> { int V __attribute__((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<216 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<217 + 1024 * 0, true> { int V __attribute__((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<217 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<218 + 1024 * 0, true> { int V __attribute__((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<218 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<219 + 1024 * 0, true> { int V __attribute__((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<219 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<220 + 1024 * 0, true> { int V __attribute__((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<220 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<221 + 1024 * 0, true> { int V __attribute__((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<221 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<222 + 1024 * 0, true> { int V __attribute__((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<222 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<223 + 1024 * 0, true> { int V __attribute__((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<223 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<224 + 1024 * 0, true> { int V __attribute__((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<224 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<225 + 1024 * 0, true> { int V __attribute__((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<225 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<226 + 1024 * 0, true> { int V __attribute__((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<226 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<227 + 1024 * 0, true> { int V __attribute__((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<227 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<228 + 1024 * 0, true> { int V __attribute__((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<228 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<229 + 1024 * 0, true> { int V __attribute__((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<229 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<230 + 1024 * 0, true> { int V __attribute__((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<230 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<231 + 1024 * 0, true> { int V __attribute__((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<231 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<232 + 1024 * 0, true> { int V __attribute__((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<232 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<233 + 1024 * 0, true> { int V __attribute__((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<233 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<234 + 1024 * 0, true> { int V __attribute__((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<234 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<235 + 1024 * 0, true> { int V __attribute__((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<235 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<236 + 1024 * 0, true> { int V __attribute__((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<236 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<237 + 1024 * 0, true> { int V __attribute__((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<237 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<238 + 1024 * 0, true> { int V __attribute__((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<238 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<239 + 1024 * 0, true> { int V __attribute__((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<239 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<240 + 1024 * 0, true> { int V __attribute__((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<240 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<241 + 1024 * 0, true> { int V __attribute__((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<241 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<242 + 1024 * 0, true> { int V __attribute__((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<242 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<243 + 1024 * 0, true> { int V __attribute__((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<243 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<244 + 1024 * 0, true> { int V __attribute__((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<244 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<245 + 1024 * 0, true> { int V __attribute__((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<245 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<246 + 1024 * 0, true> { int V __attribute__((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<246 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<247 + 1024 * 0, true> { int V __attribute__((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<247 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<248 + 1024 * 0, true> { int V __attribute__((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<248 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<249 + 1024 * 0, true> { int V __attribute__((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<249 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<250 + 1024 * 0, true> { int V __attribute__((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<250 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<251 + 1024 * 0, true> { int V __attribute__((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<251 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<252 + 1024 * 0, true> { int V __attribute__((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<252 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<253 + 1024 * 0, true> { int V __attribute__((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<253 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<254 + 1024 * 0, true> { int V __attribute__((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<254 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<255 + 1024 * 0, true> { int V __attribute__((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<255 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<256 + 1024 * 0, true> { int V __attribute__((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<256 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<257 + 1024 * 0, true> { int V __attribute__((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<257 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<258 + 1024 * 0, true> { int V __attribute__((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<258 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<259 + 1024 * 0, true> { int V __attribute__((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<259 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<260 + 1024 * 0, true> { int V __attribute__((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<260 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<261 + 1024 * 0, true> { int V __attribute__((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<261 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<262 + 1024 * 0, true> { int V __attribute__((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<262 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<263 + 1024 * 0, true> { int V __attribute__((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<263 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<264 + 1024 * 0, true> { int V __attribute__((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<264 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<265 + 1024 * 0, true> { int V __attribute__((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<265 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<266 + 1024 * 0, true> { int V __attribute__((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<266 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<267 + 1024 * 0, true> { int V __attribute__((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<267 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<268 + 1024 * 0, true> { int V __attribute__((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<268 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<269 + 1024 * 0, true> { int V __attribute__((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<269 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<270 + 1024 * 0, true> { int V __attribute__((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<270 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<271 + 1024 * 0, true> { int V __attribute__((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<271 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<272 + 1024 * 0, true> { int V __attribute__((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<272 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<273 + 1024 * 0, true> { int V __attribute__((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<273 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<274 + 1024 * 0, true> { int V __attribute__((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<274 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<275 + 1024 * 0, true> { int V __attribute__((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<275 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<276 + 1024 * 0, true> { int V __attribute__((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<276 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<277 + 1024 * 0, true> { int V __attribute__((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<277 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<278 + 1024 * 0, true> { int V __attribute__((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<278 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<279 + 1024 * 0, true> { int V __attribute__((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<279 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<280 + 1024 * 0, true> { int V __attribute__((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<280 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<281 + 1024 * 0, true> { int V __attribute__((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<281 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<282 + 1024 * 0, true> { int V __attribute__((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<282 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<283 + 1024 * 0, true> { int V __attribute__((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<283 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<284 + 1024 * 0, true> { int V __attribute__((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<284 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<285 + 1024 * 0, true> { int V __attribute__((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<285 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<286 + 1024 * 0, true> { int V __attribute__((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<286 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<287 + 1024 * 0, true> { int V __attribute__((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<287 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<288 + 1024 * 0, true> { int V __attribute__((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<288 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<289 + 1024 * 0, true> { int V __attribute__((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<289 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<290 + 1024 * 0, true> { int V __attribute__((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<290 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<291 + 1024 * 0, true> { int V __attribute__((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<291 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<292 + 1024 * 0, true> { int V __attribute__((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<292 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<293 + 1024 * 0, true> { int V __attribute__((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<293 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<294 + 1024 * 0, true> { int V __attribute__((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<294 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<295 + 1024 * 0, true> { int V __attribute__((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<295 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<296 + 1024 * 0, true> { int V __attribute__((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<296 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<297 + 1024 * 0, true> { int V __attribute__((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<297 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<298 + 1024 * 0, true> { int V __attribute__((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<298 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<299 + 1024 * 0, true> { int V __attribute__((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<299 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<300 + 1024 * 0, true> { int V __attribute__((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<300 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<301 + 1024 * 0, true> { int V __attribute__((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<301 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<302 + 1024 * 0, true> { int V __attribute__((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<302 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<303 + 1024 * 0, true> { int V __attribute__((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<303 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<304 + 1024 * 0, true> { int V __attribute__((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<304 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<305 + 1024 * 0, true> { int V __attribute__((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<305 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<306 + 1024 * 0, true> { int V __attribute__((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<306 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<307 + 1024 * 0, true> { int V __attribute__((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<307 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<308 + 1024 * 0, true> { int V __attribute__((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<308 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<309 + 1024 * 0, true> { int V __attribute__((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<309 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<310 + 1024 * 0, true> { int V __attribute__((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<310 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<311 + 1024 * 0, true> { int V __attribute__((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<311 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<312 + 1024 * 0, true> { int V __attribute__((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<312 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<313 + 1024 * 0, true> { int V __attribute__((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<313 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<314 + 1024 * 0, true> { int V __attribute__((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<314 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<315 + 1024 * 0, true> { int V __attribute__((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<315 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<316 + 1024 * 0, true> { int V __attribute__((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<316 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<317 + 1024 * 0, true> { int V __attribute__((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<317 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<318 + 1024 * 0, true> { int V __attribute__((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<318 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<319 + 1024 * 0, true> { int V __attribute__((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<319 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<320 + 1024 * 0, true> { int V __attribute__((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<320 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<321 + 1024 * 0, true> { int V __attribute__((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<321 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<322 + 1024 * 0, true> { int V __attribute__((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<322 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<323 + 1024 * 0, true> { int V __attribute__((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<323 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<324 + 1024 * 0, true> { int V __attribute__((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<324 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<325 + 1024 * 0, true> { int V __attribute__((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<325 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<326 + 1024 * 0, true> { int V __attribute__((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<326 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<327 + 1024 * 0, true> { int V __attribute__((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<327 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<328 + 1024 * 0, true> { int V __attribute__((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<328 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<329 + 1024 * 0, true> { int V __attribute__((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<329 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<330 + 1024 * 0, true> { int V __attribute__((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<330 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<331 + 1024 * 0, true> { int V __attribute__((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<331 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<332 + 1024 * 0, true> { int V __attribute__((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<332 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<333 + 1024 * 0, true> { int V __attribute__((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<333 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<334 + 1024 * 0, true> { int V __attribute__((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<334 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<335 + 1024 * 0, true> { int V __attribute__((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<335 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<336 + 1024 * 0, true> { int V __attribute__((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<336 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<337 + 1024 * 0, true> { int V __attribute__((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<337 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<338 + 1024 * 0, true> { int V __attribute__((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<338 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<339 + 1024 * 0, true> { int V __attribute__((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<339 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<340 + 1024 * 0, true> { int V __attribute__((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<340 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<341 + 1024 * 0, true> { int V __attribute__((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<341 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<342 + 1024 * 0, true> { int V __attribute__((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<342 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<343 + 1024 * 0, true> { int V __attribute__((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<343 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<344 + 1024 * 0, true> { int V __attribute__((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<344 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<345 + 1024 * 0, true> { int V __attribute__((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<345 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<346 + 1024 * 0, true> { int V __attribute__((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<346 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<347 + 1024 * 0, true> { int V __attribute__((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<347 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<348 + 1024 * 0, true> { int V __attribute__((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<348 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<349 + 1024 * 0, true> { int V __attribute__((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<349 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<350 + 1024 * 0, true> { int V __attribute__((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<350 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<351 + 1024 * 0, true> { int V __attribute__((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<351 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<352 + 1024 * 0, true> { int V __attribute__((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<352 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<353 + 1024 * 0, true> { int V __attribute__((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<353 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<354 + 1024 * 0, true> { int V __attribute__((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<354 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<355 + 1024 * 0, true> { int V __attribute__((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<355 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<356 + 1024 * 0, true> { int V __attribute__((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<356 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<357 + 1024 * 0, true> { int V __attribute__((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<357 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<358 + 1024 * 0, true> { int V __attribute__((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<358 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<359 + 1024 * 0, true> { int V __attribute__((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<359 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<360 + 1024 * 0, true> { int V __attribute__((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<360 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<361 + 1024 * 0, true> { int V __attribute__((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<361 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<362 + 1024 * 0, true> { int V __attribute__((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<362 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<363 + 1024 * 0, true> { int V __attribute__((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<363 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<364 + 1024 * 0, true> { int V __attribute__((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<364 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<365 + 1024 * 0, true> { int V __attribute__((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<365 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<366 + 1024 * 0, true> { int V __attribute__((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<366 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<367 + 1024 * 0, true> { int V __attribute__((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<367 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<368 + 1024 * 0, true> { int V __attribute__((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<368 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<369 + 1024 * 0, true> { int V __attribute__((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<369 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<370 + 1024 * 0, true> { int V __attribute__((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<370 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<371 + 1024 * 0, true> { int V __attribute__((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<371 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<372 + 1024 * 0, true> { int V __attribute__((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<372 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<373 + 1024 * 0, true> { int V __attribute__((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<373 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<374 + 1024 * 0, true> { int V __attribute__((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<374 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<375 + 1024 * 0, true> { int V __attribute__((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<375 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<376 + 1024 * 0, true> { int V __attribute__((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<376 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<377 + 1024 * 0, true> { int V __attribute__((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<377 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<378 + 1024 * 0, true> { int V __attribute__((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<378 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<379 + 1024 * 0, true> { int V __attribute__((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<379 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<380 + 1024 * 0, true> { int V __attribute__((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<380 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<381 + 1024 * 0, true> { int V __attribute__((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<381 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<382 + 1024 * 0, true> { int V __attribute__((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<382 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<383 + 1024 * 0, true> { int V __attribute__((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<383 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<384 + 1024 * 0, true> { int V __attribute__((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<384 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<385 + 1024 * 0, true> { int V __attribute__((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<385 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<386 + 1024 * 0, true> { int V __attribute__((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<386 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<387 + 1024 * 0, true> { int V __attribute__((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<387 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<388 + 1024 * 0, true> { int V __attribute__((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<388 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<389 + 1024 * 0, true> { int V __attribute__((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<389 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<390 + 1024 * 0, true> { int V __attribute__((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<390 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<391 + 1024 * 0, true> { int V __attribute__((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<391 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<392 + 1024 * 0, true> { int V __attribute__((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<392 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<393 + 1024 * 0, true> { int V __attribute__((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<393 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<394 + 1024 * 0, true> { int V __attribute__((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<394 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<395 + 1024 * 0, true> { int V __attribute__((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<395 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<396 + 1024 * 0, true> { int V __attribute__((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<396 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<397 + 1024 * 0, true> { int V __attribute__((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<397 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<398 + 1024 * 0, true> { int V __attribute__((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<398 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<399 + 1024 * 0, true> { int V __attribute__((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<399 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<400 + 1024 * 0, true> { int V __attribute__((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<400 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<401 + 1024 * 0, true> { int V __attribute__((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<401 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<402 + 1024 * 0, true> { int V __attribute__((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<402 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<403 + 1024 * 0, true> { int V __attribute__((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<403 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<404 + 1024 * 0, true> { int V __attribute__((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<404 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<405 + 1024 * 0, true> { int V __attribute__((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<405 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<406 + 1024 * 0, true> { int V __attribute__((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<406 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<407 + 1024 * 0, true> { int V __attribute__((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<407 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<408 + 1024 * 0, true> { int V __attribute__((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<408 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<409 + 1024 * 0, true> { int V __attribute__((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<409 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<410 + 1024 * 0, true> { int V __attribute__((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<410 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<411 + 1024 * 0, true> { int V __attribute__((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<411 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<412 + 1024 * 0, true> { int V __attribute__((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<412 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<413 + 1024 * 0, true> { int V __attribute__((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<413 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<414 + 1024 * 0, true> { int V __attribute__((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<414 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<415 + 1024 * 0, true> { int V __attribute__((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<415 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<416 + 1024 * 0, true> { int V __attribute__((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<416 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<417 + 1024 * 0, true> { int V __attribute__((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<417 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<418 + 1024 * 0, true> { int V __attribute__((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<418 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<419 + 1024 * 0, true> { int V __attribute__((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<419 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<420 + 1024 * 0, true> { int V __attribute__((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<420 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<421 + 1024 * 0, true> { int V __attribute__((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<421 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<422 + 1024 * 0, true> { int V __attribute__((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<422 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<423 + 1024 * 0, true> { int V __attribute__((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<423 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<424 + 1024 * 0, true> { int V __attribute__((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<424 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<425 + 1024 * 0, true> { int V __attribute__((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<425 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<426 + 1024 * 0, true> { int V __attribute__((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<426 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<427 + 1024 * 0, true> { int V __attribute__((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<427 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<428 + 1024 * 0, true> { int V __attribute__((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<428 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<429 + 1024 * 0, true> { int V __attribute__((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<429 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<430 + 1024 * 0, true> { int V __attribute__((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<430 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<431 + 1024 * 0, true> { int V __attribute__((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<431 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<432 + 1024 * 0, true> { int V __attribute__((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<432 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<433 + 1024 * 0, true> { int V __attribute__((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<433 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<434 + 1024 * 0, true> { int V __attribute__((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<434 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<435 + 1024 * 0, true> { int V __attribute__((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<435 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<436 + 1024 * 0, true> { int V __attribute__((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<436 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<437 + 1024 * 0, true> { int V __attribute__((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<437 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<438 + 1024 * 0, true> { int V __attribute__((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<438 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<439 + 1024 * 0, true> { int V __attribute__((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<439 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<440 + 1024 * 0, true> { int V __attribute__((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<440 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<441 + 1024 * 0, true> { int V __attribute__((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<441 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<442 + 1024 * 0, true> { int V __attribute__((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<442 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<443 + 1024 * 0, true> { int V __attribute__((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<443 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<444 + 1024 * 0, true> { int V __attribute__((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<444 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<445 + 1024 * 0, true> { int V __attribute__((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<445 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<446 + 1024 * 0, true> { int V __attribute__((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<446 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<447 + 1024 * 0, true> { int V __attribute__((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<447 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<448 + 1024 * 0, true> { int V __attribute__((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<448 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<449 + 1024 * 0, true> { int V __attribute__((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<449 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<450 + 1024 * 0, true> { int V __attribute__((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<450 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<451 + 1024 * 0, true> { int V __attribute__((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<451 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<452 + 1024 * 0, true> { int V __attribute__((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<452 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<453 + 1024 * 0, true> { int V __attribute__((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<453 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<454 + 1024 * 0, true> { int V __attribute__((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<454 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<455 + 1024 * 0, true> { int V __attribute__((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<455 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<456 + 1024 * 0, true> { int V __attribute__((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<456 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<457 + 1024 * 0, true> { int V __attribute__((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<457 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<458 + 1024 * 0, true> { int V __attribute__((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<458 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<459 + 1024 * 0, true> { int V __attribute__((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<459 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<460 + 1024 * 0, true> { int V __attribute__((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<460 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<461 + 1024 * 0, true> { int V __attribute__((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<461 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<462 + 1024 * 0, true> { int V __attribute__((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<462 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<463 + 1024 * 0, true> { int V __attribute__((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<463 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<464 + 1024 * 0, true> { int V __attribute__((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<464 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<465 + 1024 * 0, true> { int V __attribute__((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<465 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<466 + 1024 * 0, true> { int V __attribute__((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<466 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<467 + 1024 * 0, true> { int V __attribute__((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<467 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<468 + 1024 * 0, true> { int V __attribute__((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<468 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<469 + 1024 * 0, true> { int V __attribute__((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<469 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<470 + 1024 * 0, true> { int V __attribute__((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<470 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<471 + 1024 * 0, true> { int V __attribute__((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<471 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<472 + 1024 * 0, true> { int V __attribute__((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<472 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<473 + 1024 * 0, true> { int V __attribute__((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<473 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<474 + 1024 * 0, true> { int V __attribute__((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<474 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<475 + 1024 * 0, true> { int V __attribute__((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<475 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<476 + 1024 * 0, true> { int V __attribute__((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<476 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<477 + 1024 * 0, true> { int V __attribute__((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<477 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<478 + 1024 * 0, true> { int V __attribute__((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<478 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<479 + 1024 * 0, true> { int V __attribute__((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<479 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<480 + 1024 * 0, true> { int V __attribute__((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<480 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<481 + 1024 * 0, true> { int V __attribute__((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<481 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<482 + 1024 * 0, true> { int V __attribute__((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<482 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<483 + 1024 * 0, true> { int V __attribute__((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<483 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<484 + 1024 * 0, true> { int V __attribute__((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<484 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<485 + 1024 * 0, true> { int V __attribute__((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<485 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<486 + 1024 * 0, true> { int V __attribute__((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<486 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<487 + 1024 * 0, true> { int V __attribute__((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<487 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<488 + 1024 * 0, true> { int V __attribute__((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<488 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<489 + 1024 * 0, true> { int V __attribute__((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<489 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<490 + 1024 * 0, true> { int V __attribute__((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<490 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<491 + 1024 * 0, true> { int V __attribute__((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<491 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<492 + 1024 * 0, true> { int V __attribute__((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<492 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<493 + 1024 * 0, true> { int V __attribute__((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<493 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<494 + 1024 * 0, true> { int V __attribute__((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<494 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<495 + 1024 * 0, true> { int V __attribute__((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<495 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<496 + 1024 * 0, true> { int V __attribute__((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<496 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<497 + 1024 * 0, true> { int V __attribute__((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<497 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<498 + 1024 * 0, true> { int V __attribute__((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<498 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<499 + 1024 * 0, true> { int V __attribute__((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<499 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<500 + 1024 * 0, true> { int V __attribute__((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<500 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<501 + 1024 * 0, true> { int V __attribute__((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<501 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<502 + 1024 * 0, true> { int V __attribute__((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<502 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<503 + 1024 * 0, true> { int V __attribute__((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<503 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<504 + 1024 * 0, true> { int V __attribute__((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<504 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<505 + 1024 * 0, true> { int V __attribute__((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<505 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<506 + 1024 * 0, true> { int V __attribute__((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<506 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<507 + 1024 * 0, true> { int V __attribute__((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<507 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<508 + 1024 * 0, true> { int V __attribute__((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<508 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<509 + 1024 * 0, true> { int V __attribute__((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<509 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<510 + 1024 * 0, true> { int V __attribute__((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<510 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<511 + 1024 * 0, true> { int V __attribute__((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<511 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<512 + 1024 * 0, true> { int V __attribute__((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<512 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<513 + 1024 * 0, true> { int V __attribute__((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<513 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<514 + 1024 * 0, true> { int V __attribute__((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<514 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<515 + 1024 * 0, true> { int V __attribute__((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<515 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<516 + 1024 * 0, true> { int V __attribute__((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<516 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<517 + 1024 * 0, true> { int V __attribute__((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<517 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<518 + 1024 * 0, true> { int V __attribute__((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<518 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<519 + 1024 * 0, true> { int V __attribute__((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<519 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<520 + 1024 * 0, true> { int V __attribute__((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<520 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<521 + 1024 * 0, true> { int V __attribute__((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<521 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<522 + 1024 * 0, true> { int V __attribute__((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<522 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<523 + 1024 * 0, true> { int V __attribute__((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<523 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<524 + 1024 * 0, true> { int V __attribute__((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<524 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<525 + 1024 * 0, true> { int V __attribute__((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<525 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<526 + 1024 * 0, true> { int V __attribute__((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<526 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<527 + 1024 * 0, true> { int V __attribute__((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<527 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<528 + 1024 * 0, true> { int V __attribute__((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<528 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<529 + 1024 * 0, true> { int V __attribute__((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<529 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<530 + 1024 * 0, true> { int V __attribute__((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<530 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<531 + 1024 * 0, true> { int V __attribute__((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<531 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<532 + 1024 * 0, true> { int V __attribute__((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<532 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<533 + 1024 * 0, true> { int V __attribute__((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<533 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<534 + 1024 * 0, true> { int V __attribute__((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<534 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<535 + 1024 * 0, true> { int V __attribute__((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<535 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<536 + 1024 * 0, true> { int V __attribute__((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<536 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<537 + 1024 * 0, true> { int V __attribute__((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<537 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<538 + 1024 * 0, true> { int V __attribute__((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<538 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<539 + 1024 * 0, true> { int V __attribute__((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<539 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<540 + 1024 * 0, true> { int V __attribute__((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<540 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<541 + 1024 * 0, true> { int V __attribute__((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<541 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<542 + 1024 * 0, true> { int V __attribute__((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<542 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<543 + 1024 * 0, true> { int V __attribute__((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<543 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<544 + 1024 * 0, true> { int V __attribute__((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<544 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<545 + 1024 * 0, true> { int V __attribute__((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<545 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<546 + 1024 * 0, true> { int V __attribute__((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<546 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<547 + 1024 * 0, true> { int V __attribute__((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<547 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<548 + 1024 * 0, true> { int V __attribute__((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<548 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<549 + 1024 * 0, true> { int V __attribute__((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<549 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<550 + 1024 * 0, true> { int V __attribute__((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<550 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<551 + 1024 * 0, true> { int V __attribute__((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<551 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<552 + 1024 * 0, true> { int V __attribute__((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<552 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<553 + 1024 * 0, true> { int V __attribute__((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<553 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<554 + 1024 * 0, true> { int V __attribute__((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<554 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<555 + 1024 * 0, true> { int V __attribute__((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<555 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<556 + 1024 * 0, true> { int V __attribute__((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<556 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<557 + 1024 * 0, true> { int V __attribute__((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<557 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<558 + 1024 * 0, true> { int V __attribute__((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<558 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<559 + 1024 * 0, true> { int V __attribute__((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<559 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<560 + 1024 * 0, true> { int V __attribute__((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<560 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<561 + 1024 * 0, true> { int V __attribute__((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<561 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<562 + 1024 * 0, true> { int V __attribute__((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<562 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<563 + 1024 * 0, true> { int V __attribute__((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<563 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<564 + 1024 * 0, true> { int V __attribute__((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<564 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<565 + 1024 * 0, true> { int V __attribute__((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<565 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<566 + 1024 * 0, true> { int V __attribute__((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<566 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<567 + 1024 * 0, true> { int V __attribute__((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<567 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<568 + 1024 * 0, true> { int V __attribute__((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<568 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<569 + 1024 * 0, true> { int V __attribute__((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<569 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<570 + 1024 * 0, true> { int V __attribute__((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<570 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<571 + 1024 * 0, true> { int V __attribute__((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<571 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<572 + 1024 * 0, true> { int V __attribute__((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<572 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<573 + 1024 * 0, true> { int V __attribute__((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<573 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<574 + 1024 * 0, true> { int V __attribute__((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<574 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<575 + 1024 * 0, true> { int V __attribute__((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<575 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<576 + 1024 * 0, true> { int V __attribute__((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<576 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<577 + 1024 * 0, true> { int V __attribute__((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<577 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<578 + 1024 * 0, true> { int V __attribute__((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<578 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<579 + 1024 * 0, true> { int V __attribute__((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<579 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<580 + 1024 * 0, true> { int V __attribute__((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<580 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<581 + 1024 * 0, true> { int V __attribute__((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<581 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<582 + 1024 * 0, true> { int V __attribute__((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<582 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<583 + 1024 * 0, true> { int V __attribute__((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<583 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<584 + 1024 * 0, true> { int V __attribute__((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<584 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<585 + 1024 * 0, true> { int V __attribute__((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<585 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<586 + 1024 * 0, true> { int V __attribute__((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<586 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<587 + 1024 * 0, true> { int V __attribute__((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<587 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<588 + 1024 * 0, true> { int V __attribute__((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<588 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<589 + 1024 * 0, true> { int V __attribute__((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<589 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<590 + 1024 * 0, true> { int V __attribute__((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<590 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<591 + 1024 * 0, true> { int V __attribute__((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<591 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<592 + 1024 * 0, true> { int V __attribute__((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<592 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<593 + 1024 * 0, true> { int V __attribute__((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<593 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<594 + 1024 * 0, true> { int V __attribute__((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<594 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<595 + 1024 * 0, true> { int V __attribute__((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<595 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<596 + 1024 * 0, true> { int V __attribute__((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<596 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<597 + 1024 * 0, true> { int V __attribute__((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<597 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<598 + 1024 * 0, true> { int V __attribute__((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<598 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<599 + 1024 * 0, true> { int V __attribute__((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<599 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<600 + 1024 * 0, true> { int V __attribute__((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<600 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<601 + 1024 * 0, true> { int V __attribute__((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<601 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<602 + 1024 * 0, true> { int V __attribute__((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<602 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<603 + 1024 * 0, true> { int V __attribute__((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<603 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<604 + 1024 * 0, true> { int V __attribute__((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<604 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<605 + 1024 * 0, true> { int V __attribute__((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<605 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<606 + 1024 * 0, true> { int V __attribute__((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<606 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<607 + 1024 * 0, true> { int V __attribute__((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<607 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<608 + 1024 * 0, true> { int V __attribute__((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<608 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<609 + 1024 * 0, true> { int V __attribute__((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<609 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<610 + 1024 * 0, true> { int V __attribute__((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<610 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<611 + 1024 * 0, true> { int V __attribute__((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<611 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<612 + 1024 * 0, true> { int V __attribute__((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<612 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<613 + 1024 * 0, true> { int V __attribute__((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<613 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<614 + 1024 * 0, true> { int V __attribute__((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<614 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<615 + 1024 * 0, true> { int V __attribute__((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<615 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<616 + 1024 * 0, true> { int V __attribute__((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<616 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<617 + 1024 * 0, true> { int V __attribute__((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<617 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<618 + 1024 * 0, true> { int V __attribute__((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<618 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<619 + 1024 * 0, true> { int V __attribute__((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<619 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<620 + 1024 * 0, true> { int V __attribute__((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<620 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<621 + 1024 * 0, true> { int V __attribute__((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<621 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<622 + 1024 * 0, true> { int V __attribute__((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<622 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<623 + 1024 * 0, true> { int V __attribute__((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<623 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<624 + 1024 * 0, true> { int V __attribute__((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<624 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<625 + 1024 * 0, true> { int V __attribute__((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<625 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<626 + 1024 * 0, true> { int V __attribute__((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<626 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<627 + 1024 * 0, true> { int V __attribute__((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<627 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<628 + 1024 * 0, true> { int V __attribute__((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<628 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<629 + 1024 * 0, true> { int V __attribute__((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<629 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<630 + 1024 * 0, true> { int V __attribute__((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<630 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<631 + 1024 * 0, true> { int V __attribute__((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<631 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<632 + 1024 * 0, true> { int V __attribute__((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<632 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<633 + 1024 * 0, true> { int V __attribute__((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<633 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<634 + 1024 * 0, true> { int V __attribute__((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<634 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<635 + 1024 * 0, true> { int V __attribute__((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<635 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<636 + 1024 * 0, true> { int V __attribute__((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<636 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<637 + 1024 * 0, true> { int V __attribute__((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<637 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<638 + 1024 * 0, true> { int V __attribute__((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<638 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<639 + 1024 * 0, true> { int V __attribute__((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<639 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<640 + 1024 * 0, true> { int V __attribute__((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<640 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<641 + 1024 * 0, true> { int V __attribute__((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<641 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<642 + 1024 * 0, true> { int V __attribute__((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<642 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<643 + 1024 * 0, true> { int V __attribute__((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<643 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<644 + 1024 * 0, true> { int V __attribute__((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<644 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<645 + 1024 * 0, true> { int V __attribute__((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<645 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<646 + 1024 * 0, true> { int V __attribute__((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<646 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<647 + 1024 * 0, true> { int V __attribute__((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<647 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<648 + 1024 * 0, true> { int V __attribute__((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<648 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<649 + 1024 * 0, true> { int V __attribute__((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<649 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<650 + 1024 * 0, true> { int V __attribute__((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<650 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<651 + 1024 * 0, true> { int V __attribute__((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<651 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<652 + 1024 * 0, true> { int V __attribute__((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<652 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<653 + 1024 * 0, true> { int V __attribute__((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<653 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<654 + 1024 * 0, true> { int V __attribute__((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<654 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<655 + 1024 * 0, true> { int V __attribute__((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<655 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<656 + 1024 * 0, true> { int V __attribute__((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<656 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<657 + 1024 * 0, true> { int V __attribute__((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<657 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<658 + 1024 * 0, true> { int V __attribute__((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<658 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<659 + 1024 * 0, true> { int V __attribute__((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<659 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<660 + 1024 * 0, true> { int V __attribute__((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<660 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<661 + 1024 * 0, true> { int V __attribute__((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<661 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<662 + 1024 * 0, true> { int V __attribute__((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<662 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<663 + 1024 * 0, true> { int V __attribute__((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<663 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<664 + 1024 * 0, true> { int V __attribute__((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<664 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<665 + 1024 * 0, true> { int V __attribute__((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<665 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<666 + 1024 * 0, true> { int V __attribute__((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<666 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<667 + 1024 * 0, true> { int V __attribute__((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<667 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<668 + 1024 * 0, true> { int V __attribute__((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<668 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<669 + 1024 * 0, true> { int V __attribute__((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<669 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<670 + 1024 * 0, true> { int V __attribute__((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<670 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<671 + 1024 * 0, true> { int V __attribute__((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<671 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<672 + 1024 * 0, true> { int V __attribute__((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<672 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<673 + 1024 * 0, true> { int V __attribute__((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<673 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<674 + 1024 * 0, true> { int V __attribute__((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<674 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<675 + 1024 * 0, true> { int V __attribute__((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<675 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<676 + 1024 * 0, true> { int V __attribute__((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<676 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<677 + 1024 * 0, true> { int V __attribute__((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<677 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<678 + 1024 * 0, true> { int V __attribute__((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<678 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<679 + 1024 * 0, true> { int V __attribute__((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<679 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<680 + 1024 * 0, true> { int V __attribute__((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<680 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<681 + 1024 * 0, true> { int V __attribute__((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<681 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<682 + 1024 * 0, true> { int V __attribute__((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<682 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<683 + 1024 * 0, true> { int V __attribute__((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<683 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<684 + 1024 * 0, true> { int V __attribute__((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<684 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<685 + 1024 * 0, true> { int V __attribute__((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<685 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<686 + 1024 * 0, true> { int V __attribute__((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<686 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<687 + 1024 * 0, true> { int V __attribute__((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<687 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<688 + 1024 * 0, true> { int V __attribute__((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<688 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<689 + 1024 * 0, true> { int V __attribute__((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<689 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<690 + 1024 * 0, true> { int V __attribute__((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<690 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<691 + 1024 * 0, true> { int V __attribute__((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<691 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<692 + 1024 * 0, true> { int V __attribute__((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<692 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<693 + 1024 * 0, true> { int V __attribute__((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<693 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<694 + 1024 * 0, true> { int V __attribute__((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<694 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<695 + 1024 * 0, true> { int V __attribute__((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<695 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<696 + 1024 * 0, true> { int V __attribute__((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<696 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<697 + 1024 * 0, true> { int V __attribute__((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<697 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<698 + 1024 * 0, true> { int V __attribute__((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<698 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<699 + 1024 * 0, true> { int V __attribute__((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<699 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<700 + 1024 * 0, true> { int V __attribute__((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<700 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<701 + 1024 * 0, true> { int V __attribute__((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<701 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<702 + 1024 * 0, true> { int V __attribute__((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<702 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<703 + 1024 * 0, true> { int V __attribute__((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<703 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<704 + 1024 * 0, true> { int V __attribute__((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<704 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<705 + 1024 * 0, true> { int V __attribute__((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<705 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<706 + 1024 * 0, true> { int V __attribute__((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<706 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<707 + 1024 * 0, true> { int V __attribute__((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<707 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<708 + 1024 * 0, true> { int V __attribute__((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<708 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<709 + 1024 * 0, true> { int V __attribute__((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<709 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<710 + 1024 * 0, true> { int V __attribute__((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<710 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<711 + 1024 * 0, true> { int V __attribute__((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<711 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<712 + 1024 * 0, true> { int V __attribute__((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<712 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<713 + 1024 * 0, true> { int V __attribute__((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<713 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<714 + 1024 * 0, true> { int V __attribute__((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<714 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<715 + 1024 * 0, true> { int V __attribute__((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<715 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<716 + 1024 * 0, true> { int V __attribute__((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<716 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<717 + 1024 * 0, true> { int V __attribute__((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<717 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<718 + 1024 * 0, true> { int V __attribute__((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<718 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<719 + 1024 * 0, true> { int V __attribute__((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<719 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<720 + 1024 * 0, true> { int V __attribute__((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<720 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<721 + 1024 * 0, true> { int V __attribute__((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<721 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<722 + 1024 * 0, true> { int V __attribute__((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<722 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<723 + 1024 * 0, true> { int V __attribute__((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<723 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<724 + 1024 * 0, true> { int V __attribute__((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<724 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<725 + 1024 * 0, true> { int V __attribute__((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<725 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<726 + 1024 * 0, true> { int V __attribute__((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<726 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<727 + 1024 * 0, true> { int V __attribute__((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<727 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<728 + 1024 * 0, true> { int V __attribute__((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<728 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<729 + 1024 * 0, true> { int V __attribute__((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<729 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<730 + 1024 * 0, true> { int V __attribute__((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<730 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<731 + 1024 * 0, true> { int V __attribute__((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<731 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<732 + 1024 * 0, true> { int V __attribute__((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<732 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<733 + 1024 * 0, true> { int V __attribute__((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<733 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<734 + 1024 * 0, true> { int V __attribute__((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<734 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<735 + 1024 * 0, true> { int V __attribute__((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<735 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<736 + 1024 * 0, true> { int V __attribute__((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<736 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<737 + 1024 * 0, true> { int V __attribute__((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<737 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<738 + 1024 * 0, true> { int V __attribute__((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<738 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<739 + 1024 * 0, true> { int V __attribute__((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<739 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<740 + 1024 * 0, true> { int V __attribute__((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<740 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<741 + 1024 * 0, true> { int V __attribute__((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<741 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<742 + 1024 * 0, true> { int V __attribute__((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<742 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<743 + 1024 * 0, true> { int V __attribute__((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<743 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<744 + 1024 * 0, true> { int V __attribute__((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<744 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<745 + 1024 * 0, true> { int V __attribute__((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<745 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<746 + 1024 * 0, true> { int V __attribute__((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<746 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<747 + 1024 * 0, true> { int V __attribute__((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<747 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<748 + 1024 * 0, true> { int V __attribute__((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<748 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<749 + 1024 * 0, true> { int V __attribute__((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<749 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<750 + 1024 * 0, true> { int V __attribute__((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<750 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<751 + 1024 * 0, true> { int V __attribute__((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<751 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<752 + 1024 * 0, true> { int V __attribute__((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<752 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<753 + 1024 * 0, true> { int V __attribute__((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<753 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<754 + 1024 * 0, true> { int V __attribute__((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<754 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<755 + 1024 * 0, true> { int V __attribute__((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<755 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<756 + 1024 * 0, true> { int V __attribute__((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<756 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<757 + 1024 * 0, true> { int V __attribute__((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<757 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<758 + 1024 * 0, true> { int V __attribute__((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<758 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<759 + 1024 * 0, true> { int V __attribute__((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<759 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<760 + 1024 * 0, true> { int V __attribute__((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<760 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<761 + 1024 * 0, true> { int V __attribute__((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<761 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<762 + 1024 * 0, true> { int V __attribute__((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<762 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<763 + 1024 * 0, true> { int V __attribute__((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<763 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<764 + 1024 * 0, true> { int V __attribute__((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<764 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<765 + 1024 * 0, true> { int V __attribute__((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<765 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<766 + 1024 * 0, true> { int V __attribute__((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<766 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<767 + 1024 * 0, true> { int V __attribute__((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<767 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<768 + 1024 * 0, true> { int V __attribute__((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<768 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<769 + 1024 * 0, true> { int V __attribute__((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<769 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<770 + 1024 * 0, true> { int V __attribute__((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<770 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<771 + 1024 * 0, true> { int V __attribute__((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<771 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<772 + 1024 * 0, true> { int V __attribute__((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<772 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<773 + 1024 * 0, true> { int V __attribute__((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<773 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<774 + 1024 * 0, true> { int V __attribute__((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<774 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<775 + 1024 * 0, true> { int V __attribute__((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<775 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<776 + 1024 * 0, true> { int V __attribute__((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<776 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<777 + 1024 * 0, true> { int V __attribute__((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<777 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<778 + 1024 * 0, true> { int V __attribute__((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<778 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<779 + 1024 * 0, true> { int V __attribute__((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<779 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<780 + 1024 * 0, true> { int V __attribute__((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<780 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<781 + 1024 * 0, true> { int V __attribute__((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<781 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<782 + 1024 * 0, true> { int V __attribute__((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<782 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<783 + 1024 * 0, true> { int V __attribute__((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<783 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<784 + 1024 * 0, true> { int V __attribute__((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<784 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<785 + 1024 * 0, true> { int V __attribute__((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<785 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<786 + 1024 * 0, true> { int V __attribute__((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<786 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<787 + 1024 * 0, true> { int V __attribute__((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<787 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<788 + 1024 * 0, true> { int V __attribute__((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<788 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<789 + 1024 * 0, true> { int V __attribute__((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<789 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<790 + 1024 * 0, true> { int V __attribute__((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<790 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<791 + 1024 * 0, true> { int V __attribute__((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<791 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<792 + 1024 * 0, true> { int V __attribute__((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<792 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<793 + 1024 * 0, true> { int V __attribute__((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<793 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<794 + 1024 * 0, true> { int V __attribute__((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<794 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<795 + 1024 * 0, true> { int V __attribute__((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<795 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<796 + 1024 * 0, true> { int V __attribute__((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<796 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<797 + 1024 * 0, true> { int V __attribute__((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<797 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<798 + 1024 * 0, true> { int V __attribute__((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<798 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<799 + 1024 * 0, true> { int V __attribute__((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<799 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<800 + 1024 * 0, true> { int V __attribute__((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<800 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<801 + 1024 * 0, true> { int V __attribute__((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<801 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<802 + 1024 * 0, true> { int V __attribute__((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<802 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<803 + 1024 * 0, true> { int V __attribute__((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<803 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<804 + 1024 * 0, true> { int V __attribute__((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<804 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<805 + 1024 * 0, true> { int V __attribute__((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<805 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<806 + 1024 * 0, true> { int V __attribute__((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<806 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<807 + 1024 * 0, true> { int V __attribute__((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<807 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<808 + 1024 * 0, true> { int V __attribute__((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<808 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<809 + 1024 * 0, true> { int V __attribute__((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<809 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<810 + 1024 * 0, true> { int V __attribute__((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<810 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<811 + 1024 * 0, true> { int V __attribute__((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<811 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<812 + 1024 * 0, true> { int V __attribute__((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<812 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<813 + 1024 * 0, true> { int V __attribute__((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<813 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<814 + 1024 * 0, true> { int V __attribute__((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<814 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<815 + 1024 * 0, true> { int V __attribute__((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<815 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<816 + 1024 * 0, true> { int V __attribute__((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<816 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<817 + 1024 * 0, true> { int V __attribute__((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<817 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<818 + 1024 * 0, true> { int V __attribute__((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<818 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<819 + 1024 * 0, true> { int V __attribute__((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<819 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<820 + 1024 * 0, true> { int V __attribute__((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<820 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<821 + 1024 * 0, true> { int V __attribute__((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<821 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<822 + 1024 * 0, true> { int V __attribute__((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<822 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<823 + 1024 * 0, true> { int V __attribute__((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<823 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<824 + 1024 * 0, true> { int V __attribute__((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<824 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<825 + 1024 * 0, true> { int V __attribute__((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<825 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<826 + 1024 * 0, true> { int V __attribute__((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<826 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<827 + 1024 * 0, true> { int V __attribute__((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<827 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<828 + 1024 * 0, true> { int V __attribute__((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<828 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<829 + 1024 * 0, true> { int V __attribute__((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<829 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<830 + 1024 * 0, true> { int V __attribute__((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<830 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<831 + 1024 * 0, true> { int V __attribute__((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<831 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<832 + 1024 * 0, true> { int V __attribute__((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<832 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<833 + 1024 * 0, true> { int V __attribute__((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<833 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<834 + 1024 * 0, true> { int V __attribute__((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<834 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<835 + 1024 * 0, true> { int V __attribute__((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<835 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<836 + 1024 * 0, true> { int V __attribute__((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<836 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<837 + 1024 * 0, true> { int V __attribute__((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<837 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<838 + 1024 * 0, true> { int V __attribute__((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<838 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<839 + 1024 * 0, true> { int V __attribute__((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<839 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<840 + 1024 * 0, true> { int V __attribute__((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<840 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<841 + 1024 * 0, true> { int V __attribute__((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<841 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<842 + 1024 * 0, true> { int V __attribute__((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<842 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<843 + 1024 * 0, true> { int V __attribute__((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<843 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<844 + 1024 * 0, true> { int V __attribute__((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<844 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<845 + 1024 * 0, true> { int V __attribute__((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<845 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<846 + 1024 * 0, true> { int V __attribute__((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<846 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<847 + 1024 * 0, true> { int V __attribute__((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<847 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<848 + 1024 * 0, true> { int V __attribute__((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<848 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<849 + 1024 * 0, true> { int V __attribute__((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<849 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<850 + 1024 * 0, true> { int V __attribute__((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<850 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<851 + 1024 * 0, true> { int V __attribute__((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<851 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<852 + 1024 * 0, true> { int V __attribute__((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<852 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<853 + 1024 * 0, true> { int V __attribute__((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<853 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<854 + 1024 * 0, true> { int V __attribute__((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<854 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<855 + 1024 * 0, true> { int V __attribute__((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<855 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<856 + 1024 * 0, true> { int V __attribute__((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<856 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<857 + 1024 * 0, true> { int V __attribute__((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<857 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<858 + 1024 * 0, true> { int V __attribute__((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<858 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<859 + 1024 * 0, true> { int V __attribute__((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<859 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<860 + 1024 * 0, true> { int V __attribute__((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<860 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<861 + 1024 * 0, true> { int V __attribute__((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<861 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<862 + 1024 * 0, true> { int V __attribute__((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<862 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<863 + 1024 * 0, true> { int V __attribute__((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<863 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<864 + 1024 * 0, true> { int V __attribute__((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<864 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<865 + 1024 * 0, true> { int V __attribute__((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<865 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<866 + 1024 * 0, true> { int V __attribute__((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<866 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<867 + 1024 * 0, true> { int V __attribute__((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<867 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<868 + 1024 * 0, true> { int V __attribute__((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<868 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<869 + 1024 * 0, true> { int V __attribute__((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<869 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<870 + 1024 * 0, true> { int V __attribute__((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<870 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<871 + 1024 * 0, true> { int V __attribute__((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<871 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<872 + 1024 * 0, true> { int V __attribute__((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<872 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<873 + 1024 * 0, true> { int V __attribute__((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<873 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<874 + 1024 * 0, true> { int V __attribute__((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<874 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<875 + 1024 * 0, true> { int V __attribute__((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<875 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<876 + 1024 * 0, true> { int V __attribute__((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<876 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<877 + 1024 * 0, true> { int V __attribute__((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<877 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<878 + 1024 * 0, true> { int V __attribute__((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<878 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<879 + 1024 * 0, true> { int V __attribute__((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<879 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<880 + 1024 * 0, true> { int V __attribute__((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<880 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<881 + 1024 * 0, true> { int V __attribute__((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<881 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<882 + 1024 * 0, true> { int V __attribute__((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<882 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<883 + 1024 * 0, true> { int V __attribute__((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<883 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<884 + 1024 * 0, true> { int V __attribute__((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<884 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<885 + 1024 * 0, true> { int V __attribute__((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<885 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<886 + 1024 * 0, true> { int V __attribute__((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<886 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<887 + 1024 * 0, true> { int V __attribute__((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<887 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<888 + 1024 * 0, true> { int V __attribute__((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<888 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<889 + 1024 * 0, true> { int V __attribute__((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<889 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<890 + 1024 * 0, true> { int V __attribute__((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<890 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<891 + 1024 * 0, true> { int V __attribute__((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<891 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<892 + 1024 * 0, true> { int V __attribute__((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<892 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<893 + 1024 * 0, true> { int V __attribute__((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<893 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<894 + 1024 * 0, true> { int V __attribute__((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<894 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<895 + 1024 * 0, true> { int V __attribute__((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<895 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<896 + 1024 * 0, true> { int V __attribute__((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<896 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<897 + 1024 * 0, true> { int V __attribute__((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<897 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<898 + 1024 * 0, true> { int V __attribute__((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<898 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<899 + 1024 * 0, true> { int V __attribute__((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<899 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<900 + 1024 * 0, true> { int V __attribute__((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<900 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<901 + 1024 * 0, true> { int V __attribute__((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<901 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<902 + 1024 * 0, true> { int V __attribute__((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<902 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<903 + 1024 * 0, true> { int V __attribute__((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<903 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<904 + 1024 * 0, true> { int V __attribute__((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<904 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<905 + 1024 * 0, true> { int V __attribute__((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<905 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<906 + 1024 * 0, true> { int V __attribute__((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<906 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<907 + 1024 * 0, true> { int V __attribute__((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<907 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<908 + 1024 * 0, true> { int V __attribute__((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<908 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<909 + 1024 * 0, true> { int V __attribute__((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<909 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<910 + 1024 * 0, true> { int V __attribute__((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<910 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<911 + 1024 * 0, true> { int V __attribute__((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<911 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<912 + 1024 * 0, true> { int V __attribute__((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<912 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<913 + 1024 * 0, true> { int V __attribute__((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<913 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<914 + 1024 * 0, true> { int V __attribute__((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<914 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<915 + 1024 * 0, true> { int V __attribute__((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<915 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<916 + 1024 * 0, true> { int V __attribute__((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<916 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<917 + 1024 * 0, true> { int V __attribute__((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<917 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<918 + 1024 * 0, true> { int V __attribute__((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<918 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<919 + 1024 * 0, true> { int V __attribute__((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<919 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<920 + 1024 * 0, true> { int V __attribute__((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<920 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<921 + 1024 * 0, true> { int V __attribute__((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<921 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<922 + 1024 * 0, true> { int V __attribute__((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<922 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<923 + 1024 * 0, true> { int V __attribute__((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<923 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<924 + 1024 * 0, true> { int V __attribute__((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<924 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<925 + 1024 * 0, true> { int V __attribute__((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<925 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<926 + 1024 * 0, true> { int V __attribute__((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<926 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<927 + 1024 * 0, true> { int V __attribute__((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<927 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<928 + 1024 * 0, true> { int V __attribute__((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<928 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<929 + 1024 * 0, true> { int V __attribute__((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<929 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<930 + 1024 * 0, true> { int V __attribute__((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<930 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<931 + 1024 * 0, true> { int V __attribute__((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<931 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<932 + 1024 * 0, true> { int V __attribute__((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<932 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<933 + 1024 * 0, true> { int V __attribute__((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<933 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<934 + 1024 * 0, true> { int V __attribute__((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<934 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<935 + 1024 * 0, true> { int V __attribute__((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<935 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<936 + 1024 * 0, true> { int V __attribute__((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<936 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<937 + 1024 * 0, true> { int V __attribute__((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<937 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<938 + 1024 * 0, true> { int V __attribute__((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<938 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<939 + 1024 * 0, true> { int V __attribute__((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<939 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<940 + 1024 * 0, true> { int V __attribute__((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<940 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<941 + 1024 * 0, true> { int V __attribute__((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<941 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<942 + 1024 * 0, true> { int V __attribute__((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<942 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<943 + 1024 * 0, true> { int V __attribute__((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<943 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<944 + 1024 * 0, true> { int V __attribute__((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<944 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<945 + 1024 * 0, true> { int V __attribute__((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<945 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<946 + 1024 * 0, true> { int V __attribute__((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<946 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<947 + 1024 * 0, true> { int V __attribute__((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<947 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<948 + 1024 * 0, true> { int V __attribute__((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<948 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<949 + 1024 * 0, true> { int V __attribute__((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<949 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<950 + 1024 * 0, true> { int V __attribute__((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<950 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<951 + 1024 * 0, true> { int V __attribute__((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<951 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<952 + 1024 * 0, true> { int V __attribute__((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<952 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<953 + 1024 * 0, true> { int V __attribute__((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<953 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<954 + 1024 * 0, true> { int V __attribute__((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<954 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<955 + 1024 * 0, true> { int V __attribute__((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<955 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<956 + 1024 * 0, true> { int V __attribute__((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<956 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<957 + 1024 * 0, true> { int V __attribute__((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<957 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<958 + 1024 * 0, true> { int V __attribute__((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<958 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<959 + 1024 * 0, true> { int V __attribute__((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<959 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<960 + 1024 * 0, true> { int V __attribute__((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<960 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<961 + 1024 * 0, true> { int V __attribute__((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<961 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<962 + 1024 * 0, true> { int V __attribute__((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<962 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<963 + 1024 * 0, true> { int V __attribute__((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<963 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<964 + 1024 * 0, true> { int V __attribute__((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<964 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<965 + 1024 * 0, true> { int V __attribute__((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<965 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<966 + 1024 * 0, true> { int V __attribute__((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<966 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<967 + 1024 * 0, true> { int V __attribute__((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<967 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<968 + 1024 * 0, true> { int V __attribute__((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<968 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<969 + 1024 * 0, true> { int V __attribute__((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<969 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<970 + 1024 * 0, true> { int V __attribute__((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<970 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<971 + 1024 * 0, true> { int V __attribute__((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<971 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<972 + 1024 * 0, true> { int V __attribute__((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<972 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<973 + 1024 * 0, true> { int V __attribute__((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<973 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<974 + 1024 * 0, true> { int V __attribute__((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<974 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<975 + 1024 * 0, true> { int V __attribute__((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<975 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<976 + 1024 * 0, true> { int V __attribute__((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<976 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<977 + 1024 * 0, true> { int V __attribute__((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<977 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<978 + 1024 * 0, true> { int V __attribute__((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<978 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<979 + 1024 * 0, true> { int V __attribute__((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<979 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<980 + 1024 * 0, true> { int V __attribute__((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<980 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<981 + 1024 * 0, true> { int V __attribute__((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<981 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<982 + 1024 * 0, true> { int V __attribute__((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<982 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<983 + 1024 * 0, true> { int V __attribute__((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<983 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<984 + 1024 * 0, true> { int V __attribute__((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<984 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<985 + 1024 * 0, true> { int V __attribute__((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<985 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<986 + 1024 * 0, true> { int V __attribute__((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<986 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<987 + 1024 * 0, true> { int V __attribute__((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<987 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<988 + 1024 * 0, true> { int V __attribute__((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<988 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<989 + 1024 * 0, true> { int V __attribute__((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<989 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<990 + 1024 * 0, true> { int V __attribute__((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<990 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<991 + 1024 * 0, true> { int V __attribute__((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<991 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<992 + 1024 * 0, true> { int V __attribute__((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<992 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<993 + 1024 * 0, true> { int V __attribute__((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<993 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<994 + 1024 * 0, true> { int V __attribute__((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<994 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<995 + 1024 * 0, true> { int V __attribute__((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<995 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<996 + 1024 * 0, true> { int V __attribute__((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<996 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<997 + 1024 * 0, true> { int V __attribute__((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<997 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<998 + 1024 * 0, true> { int V __attribute__((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<998 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<999 + 1024 * 0, true> { int V __attribute__((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<999 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1000 + 1024 * 0, true> { int V __attribute__((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1000 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1001 + 1024 * 0, true> { int V __attribute__((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1001 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1002 + 1024 * 0, true> { int V __attribute__((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1002 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1003 + 1024 * 0, true> { int V __attribute__((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1003 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1004 + 1024 * 0, true> { int V __attribute__((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1004 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1005 + 1024 * 0, true> { int V __attribute__((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1005 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1006 + 1024 * 0, true> { int V __attribute__((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1006 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1007 + 1024 * 0, true> { int V __attribute__((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1007 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1008 + 1024 * 0, true> { int V __attribute__((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1008 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1009 + 1024 * 0, true> { int V __attribute__((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1009 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1010 + 1024 * 0, true> { int V __attribute__((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1010 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1011 + 1024 * 0, true> { int V __attribute__((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1011 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1012 + 1024 * 0, true> { int V __attribute__((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1012 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1013 + 1024 * 0, true> { int V __attribute__((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1013 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1014 + 1024 * 0, true> { int V __attribute__((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1014 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1015 + 1024 * 0, true> { int V __attribute__((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1015 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1016 + 1024 * 0, true> { int V __attribute__((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1016 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1017 + 1024 * 0, true> { int V __attribute__((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1017 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1018 + 1024 * 0, true> { int V __attribute__((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1018 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1019 + 1024 * 0, true> { int V __attribute__((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1019 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1020 + 1024 * 0, true> { int V __attribute__((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1020 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1021 + 1024 * 0, true> { int V __attribute__((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1021 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1022 + 1024 * 0, true> { int V __attribute__((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1022 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1023 + 1024 * 0, true> { int V __attribute__((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1023 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1024 + 1024 * 0, true> { int V __attribute__((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1024 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0, false>(){}; };
# 239 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_common.h" 2
# 562 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_common.h"
# 1 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/etc/autopilot_ssdm_bits.h" 1
# 563 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_common.h" 2

extern "C" void _ssdm_string2bits(...);
# 574 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_common.h"
static inline unsigned char guess_radix(const char* s) {
  unsigned char rd = 10;
  const char* p = s;

  if (p[0] == '-' || p[0] == '+') ++p;

  if (p[0] == '0') {
    if (p[1] == 'b' || p[1] == 'B') {
      rd = 2;
    } else if (p[1] == 'o' || p[1] == 'O') {
      rd = 8;
    } else if (p[1] == 'x' || p[1] == 'X') {
      rd = 16;
    } else if (p[1] == 'd' || p[1] == 'D') {
      rd = 10;
    }
  }
  return rd;
}







typedef __fp16 half;
# 691 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_common.h"
inline __attribute__((always_inline)) ap_ulong doubleToRawBits(double pf) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned int floatToRawBits(float pf) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned short halfToRawBits(half pf) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__D = pf;
  return LD.__L;



}


inline __attribute__((always_inline)) double rawBitsToDouble(ap_ulong pi) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) float rawBitsToFloat(unsigned long pi) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) half rawBitsToHalf(unsigned short pi) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__L = pi;
  return LD.__D;






}
# 55 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int.h" 2
# 1 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h" 1
# 80 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_N, bool _AP_S>
struct retval;


template <int _AP_N>
struct retval<_AP_N, true> {
  typedef ap_slong Type;
};

template <int _AP_N>
struct retval<_AP_N, false> {
  typedef ap_ulong Type;
};


template <>
struct retval<1, true> {
  typedef signed char Type;
};

template <>
struct retval<1, false> {
  typedef unsigned char Type;
};


template <>
struct retval<2, true> {
  typedef short Type;
};

template <>
struct retval<2, false> {
  typedef unsigned short Type;
};


template <>
struct retval<3, true> {
  typedef long Type;
};

template <>
struct retval<3, false> {
  typedef unsigned long Type;
};

template <>
struct retval<4, true> {
  typedef long Type;
};

template <>
struct retval<4, false> {
  typedef unsigned long Type;
};




template <int _AP_W2, bool _AP_S2>
struct _ap_int_factory;
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,true> { typedef ap_int<_AP_W2> type; };
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,false> { typedef ap_uint<_AP_W2> type; };

template <int _AP_W, bool _AP_S>
struct ap_int_base : public ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;







  typedef typename retval<(((_AP_W + 7) / 8) > (8) ? ((_AP_W + 7) / 8) : (8)), _AP_S>::Type RetType;

  static const int width = _AP_W;

  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };


    typedef ap_int_base<mult_w, mult_s> mult_base;
    typedef ap_int_base<plus_w, plus_s> plus_base;
    typedef ap_int_base<minus_w, minus_s> minus_base;
    typedef ap_int_base<logic_w, logic_s> logic_base;
    typedef ap_int_base<div_w, div_s> div_base;
    typedef ap_int_base<mod_w, mod_s> mod_base;
    typedef ap_int_base<_AP_W, _AP_S> arg1_base;

    typedef typename _ap_int_factory<mult_w, mult_s>::type mult;
    typedef typename _ap_int_factory<plus_w, plus_s>::type plus;
    typedef typename _ap_int_factory<minus_w, minus_s>::type minus;
    typedef typename _ap_int_factory<logic_w, logic_s>::type logic;
    typedef typename _ap_int_factory<div_w, div_s>::type div;
    typedef typename _ap_int_factory<mod_w, mod_s>::type mod;
    typedef typename _ap_int_factory<_AP_W, _AP_S>::type arg1;
    typedef bool reduce;
  };





  inline __attribute__((always_inline)) ap_int_base() {





  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }
# 237 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const bool op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const signed char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_slong op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_ulong op) { Base::V = op; }




  inline __attribute__((always_inline)) ap_int_base(half op) {
    ap_int_base<_AP_W, _AP_S> t((float)op);
    Base::V = t.V;
  }


  inline __attribute__((always_inline)) ap_int_base(float op) {
    const int BITS = 23 + 8 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = floatToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<8 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 23, BITS - 2); __Result__; });
    exp = exp - ((1L << (8 - 1L)) - 1L);

    ap_int_base<23 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 23 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23); __Result__; });


    if ((reg.V & 0x7ffffffful) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 23 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 23 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
          if (is_neg)
            Base::V = -1;
          else
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  inline __attribute__((always_inline)) ap_int_base(double op) {
    const int BITS = 52 + 11 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = doubleToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<11 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, BITS - 2); __Result__; });
    exp = exp - ((1L << (11 - 1L)) - 1L);

    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });


    if ((reg.V & 0x7fffffffffffffffull) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 52 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 52 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
          if (is_neg)
            Base::V = -1;
          else
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_range_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = (ref.get()).V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_bit_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>::_AP_WR,
                      false>
        tmp = ref.get();
    Base::V = tmp.V;
  }
# 391 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_int_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = (val.get()).V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = val.operator bool();
  }

  inline __attribute__((always_inline)) ap_int_base read() volatile {

    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }

  inline __attribute__((always_inline)) void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {

    Base::V = op2.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const volatile ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }
# 482 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base& operator=(bool op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(signed char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_slong op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_ulong op) { Base::V = op; return *this; }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool)op2;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool)op;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }





  inline __attribute__((always_inline)) operator RetType() const { return (RetType)(Base::V); }




  inline __attribute__((always_inline)) bool to_bool() const { return (bool)(Base::V); }
  inline __attribute__((always_inline)) char to_char() const { return (char)(Base::V); }
  inline __attribute__((always_inline)) signed char to_schar() const { return (signed char)(Base::V); }
  inline __attribute__((always_inline)) unsigned char to_uchar() const { return (unsigned char)(Base::V); }
  inline __attribute__((always_inline)) short to_short() const { return (short)(Base::V); }
  inline __attribute__((always_inline)) unsigned short to_ushort() const { return (unsigned short)(Base::V); }
  inline __attribute__((always_inline)) int to_int() const { return (int)(Base::V); }
  inline __attribute__((always_inline)) unsigned to_uint() const { return (unsigned)(Base::V); }
  inline __attribute__((always_inline)) long to_long() const { return (long)(Base::V); }
  inline __attribute__((always_inline)) unsigned long to_ulong() const { return (unsigned long)(Base::V); }
  inline __attribute__((always_inline)) ap_slong to_int64() const { return (ap_slong)(Base::V); }
  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline __attribute__((always_inline)) float to_float() const { return (float)(Base::V); }
  inline __attribute__((always_inline)) double to_double() const { return (double)(Base::V); }
# 586 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) int length() const volatile { return _AP_W; }


  inline __attribute__((always_inline)) bool iszero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool sign() const {
    if (_AP_S &&
        ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }))
      return true;
    else
      return false;
  }


  inline __attribute__((always_inline)) void clear(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void invert(int i) {
                                                           ;
    bool val = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    if (val)
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
    else
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }

  inline __attribute__((always_inline)) bool test(int i) const {
                                                           ;
    return ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) ap_int_base& get() { return *this; }


  inline __attribute__((always_inline)) void set(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void set(int i, bool v) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }



  inline __attribute__((always_inline)) ap_int_base& lrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << n;
    typeof(Base::V) r_p = Base::V >> (_AP_W - n);
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& rrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << (_AP_W - n);
    typeof(Base::V) r_p = Base::V >> n;
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& reverse() {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
    return *this;
  }


  inline __attribute__((always_inline)) void set_bit(int i, bool v) {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) bool get_bit(int i) const {
    return (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) void b_not() { Base::V = ~Base::V; }
# 699 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator *=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V *= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator +=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V += op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator -=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V -= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator /=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V /= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator %=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V %= op2.V; return *this; }
# 717 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator &=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V &= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator |=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V |= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator ^=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V ^= op2.V; return *this; }





  inline __attribute__((always_inline)) ap_int_base& operator++() {
    operator+=((ap_int_base<1, false>)1);
    return *this;
  }
  inline __attribute__((always_inline)) ap_int_base& operator--() {
    operator-=((ap_int_base<1, false>)1);
    return *this;
  }




  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1, false>)1);
    return t;
  }
  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator--(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1, false>)1);
    return t;
  }




  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator+() const { return *this; }


  inline __attribute__((always_inline)) typename RType<1, false>::minus operator-() const {
    return ap_int_base<1, false>(0) - *this;
  }




  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }





  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator~() const {
    ap_int_base<_AP_W, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>(sh);
    } else
      return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V << op2.to_uint();
    return r;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<(sh);
    }
    return operator>>(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V >> op2.to_uint();
    return r;
  }
# 828 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>=(sh);
    } else
      return operator<<=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V <<= op2.to_uint();
    return *this;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<=(sh);
    }
    return operator>>=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V >>= op2.to_uint();
    return *this;
  }
# 877 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V == op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return !(Base::V == op2.V);
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V < op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V >= op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V > op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V <= op2.V;
  }




  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }
# 986 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool operator[](int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator[](const ap_int_base<_AP_W2, _AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index.to_int());
    return br.to_bool();
  }

  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool bit(int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool bit(const ap_int_base<_AP_W2, _AP_S2>& index) const {
    return bit(index.to_int());
  }
# 1053 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {

    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1UL), x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      ap_int_base<64, false> x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctzll(t.V);
    } else {
      enum { __N = (_AP_W + 63) / 64 };
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - i * 64 - 64, _AP_W - i * 64 - 1); __Result__; });
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t.V != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        enum { REST = (_AP_W - 1) % 64 };
        ap_int_base<64, false> x;
        x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, REST); __Result__; });
        t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 63 - REST, 63); __Result__; });
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this), a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator&(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator|(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator^(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }





  inline __attribute__((always_inline)) bool and_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nand_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool or_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nor_reduce() const { return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); })); }
  inline __attribute__((always_inline)) bool xor_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool xnor_reduce() const {
    return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }
# 1293 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2, bool sign = _AP_S) const {
    return 0;
  }

};
# 1352 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base ret; ret.V = lhs.V * rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base ret; ret.V = lhs.V + rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base ret; ret.V = lhs.V - rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V & rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V | rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V ^ rhs.V; return ret; }
# 1371 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: div_base ret; ret.V = op.V / op2.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mod_base ret; ret.V = op.V % op2.V; return ret; }
# 1399 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op + op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 + i_op; }
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op - op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 - i_op; }
# 1427 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1461 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op * ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op + ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op - ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op / ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op % ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op & ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op | ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op ^ ap_int_base<1, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op * ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op + ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op - ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op / ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op % ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op & ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op | ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op ^ ap_int_base<8, CHAR_IS_SIGNED>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op * ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op + ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op - ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op / ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op % ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op & ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op | ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op ^ ap_int_base<8, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op * ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op + ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op - ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op / ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op % ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op & ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op | ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op ^ ap_int_base<8, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op * ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op + ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op - ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op / ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op % ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op & ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op | ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op ^ ap_int_base<_AP_SIZE_short, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op * ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op + ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op - ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op / ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op % ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op & ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op | ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op ^ ap_int_base<_AP_SIZE_short, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op * ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op + ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op - ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op / ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op % ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op & ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op | ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op ^ ap_int_base<_AP_SIZE_int, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op * ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op + ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op - ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op / ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op % ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op & ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op | ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op ^ ap_int_base<_AP_SIZE_int, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op * ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op + ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op - ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op / ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op % ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op & ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op | ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op ^ ap_int_base<_AP_SIZE_long, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op * ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op + ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op - ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op / ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op % ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op & ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op | ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op ^ ap_int_base<_AP_SIZE_long, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, false>(i_op); }
# 1500 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
# 1524 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
# 1555 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op += ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op -= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op *= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op /= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op %= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op &= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op |= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op ^= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >>= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <<= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op += ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op -= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op *= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op /= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op %= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op &= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op |= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op ^= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >>= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <<= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op += ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op -= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op *= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op /= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op %= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op &= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op |= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op ^= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >>= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <<= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op += ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op -= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op *= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op /= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op %= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op &= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op |= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op ^= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >>= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <<= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op += ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op -= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op *= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op /= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op %= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op &= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op |= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op ^= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >>= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <<= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op += ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op -= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op *= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op /= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op %= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op &= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op |= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op ^= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >>= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <<= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op += ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op -= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op *= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op /= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op %= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op &= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op |= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op ^= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >>= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <<= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op += ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op -= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op *= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op /= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op %= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op &= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op |= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op ^= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >>= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <<= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op += ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op -= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op *= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op /= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op %= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op &= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op |= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op ^= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >>= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <<= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op += ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op -= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op *= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op /= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op %= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op &= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op |= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op ^= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >>= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <<= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1592 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1629 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; }
# 1659 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) + op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) - op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) * op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) / op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) % op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) & op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) | op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) ^ op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) >> op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) << op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<_AP_W2, false>(op2); }
# 1690 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator +=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator -=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator *=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator /=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator %=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator >>=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator <<=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1722 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator &=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator |=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator ^=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1741 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(op2.operator ap_int_base<_AP_W2, false>()); }
# 1768 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) + op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) - op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) * op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) / op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) % op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) & op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) | op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) ^ op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >> op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) << op2; }
# 1799 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator +=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator -=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator *=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator /=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator %=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator >>=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator <<=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1831 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator &=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator |=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator ^=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1850 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 == ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) == op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 != ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) != op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 > ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) > op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >= op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 < ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) < op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) <= op2; }
# 1958 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 == op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() == op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 != op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() != op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 > op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() > op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 >= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() >= op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 < op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() < op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 <= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() <= op2; }
# 56 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int.h" 2
# 1 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_ref.h" 1
# 73 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref {
  enum {
    _AP_WR = _AP_W1 + _AP_W2,
  };

  _AP_T1& mbv1;
  _AP_T2& mbv2;

  inline __attribute__((always_inline)) ap_concat_ref(const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& ref)
      : mbv1(ref.mbv1), mbv2(ref.mbv2) {}

  inline __attribute__((always_inline)) ap_concat_ref(_AP_T1& bv1, _AP_T2& bv2) : mbv1(bv1), mbv2(bv2) {}

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> Part1;
    Part1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(Part1);
    ap_int_base<_AP_W2, false> Part2;
    Part2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(Part2);
    return *this;
  }
# 116 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_concat_ref& operator=(bool val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(signed char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_slong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_ulong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(half val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(float val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(double val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }





  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_bit_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }
  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_range_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((const ap_int_base<_AP_W3, false>)(val));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_fixed_base<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&
          val) {
    return operator=(val.to_ap_int_base());
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((ap_ulong)(bool)(val));
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_WR, false>() const { return get(); }

  inline __attribute__((always_inline)) operator ap_ulong() const { return get().to_uint64(); }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                       ap_range_ref<_AP_W3, _AP_S3> >
  operator,(const ap_range_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_range_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_range_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(*this, a2);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(volatile ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const volatile ap_int_base<_AP_W3, _AP_S3> &a2) {

    ap_int_base<_AP_W3, _AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(op));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >
  operator,(const ap_bit_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_bit_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                       ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >
  operator,(const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                         ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >(
        *this, const_cast<ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_WR, ap_concat_ref, _AP_W3,
      af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator,(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, _AP_W3,
        af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<
            af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, 1,
                    af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
      operator,(const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>
                    &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, 1,
        af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(
            a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator&(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() & a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator|(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() | a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator^(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() ^ a2;
  }
# 304 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_int_base<_AP_WR, false> get() const {
    ap_int_base<_AP_WR, false> tmpVal(0);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W2, false> v2(mbv2);
    ap_int_base<_AP_W1, false> v1(mbv1);
    tmpVal.V = ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v2.V) __Repl2__ = v2.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, W_ref2 - 1); __Result__; });
    tmpVal.V =
        ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v1.V) __Repl2__ = v1.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    return tmpVal;
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> tmpVal1;
    tmpVal1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(tmpVal1);
    ap_int_base<_AP_W2, false> tmpVal2;
    tmpVal2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(tmpVal2);
  }

  inline __attribute__((always_inline)) int length() const { return mbv1.length() + mbv2.length(); }
};




template <int _AP_W, bool _AP_S>
struct ap_range_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:
  inline __attribute__((always_inline)) ap_range_ref(const ap_range_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

  inline __attribute__((always_inline)) ap_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) ap_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }
# 385 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_range_ref& operator=(bool val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(signed char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_slong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_ulong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(half val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(float val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(double val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref& val) {
    return operator=((const ap_int_base<_AP_W, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    return operator=(val.to_ap_int_base());
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W, ap_int_base<_AP_W, _AP_S> >
  operator,(ap_int_base<_AP_W, _AP_S>& a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W,
                         ap_int_base<_AP_W, _AP_S> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_range_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop == hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop < hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop <= hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<=(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= op2.V;
    return *this;
  };

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) bool and_reduce() const {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

_ssdm_Unroll(0,0,0, "");

 ret &= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool or_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

_ssdm_Unroll(0,0,0, "");

 ret |= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool xor_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

_ssdm_Unroll(0,0,0, "");

 ret ^= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }
# 733 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char radix = 2) const {
    return 0;
  }

};
# 772 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S>
struct ap_bit_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int d_index;

 public:

  inline __attribute__((always_inline)) ap_bit_ref(const ap_bit_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {}

  inline __attribute__((always_inline)) ap_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) ap_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}

  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
  inline __attribute__((always_inline)) bool to_bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
# 810 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(bool val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(signed char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_slong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_ulong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
# 832 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(half val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(float val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(double val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(val.V != 0));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_int_base<_AP_W2, false>)val);
  }



  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, ap_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        1, ap_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() != op.get();
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) bool get() { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    operator=(val);
  }

  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 1030 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }






template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1089 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::plus operator +(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::minus operator -(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mult operator *(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::div operator /(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mod operator %(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::plus operator +(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::minus operator -(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mult operator *(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::div operator /(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mod operator %(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::plus operator +(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::minus operator -(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mult operator *(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::div operator /(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mod operator %(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::div operator /(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::plus operator +(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::minus operator -(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mult operator *(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::div operator /(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mod operator %(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::plus operator +(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::minus operator -(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mult operator *(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::div operator /(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mod operator %(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::plus operator +(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::minus operator -(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mult operator *(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::div operator /(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mod operator %(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::plus operator +(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::minus operator -(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mult operator *(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::div operator /(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mod operator %(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::plus operator +(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::minus operator -(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mult operator *(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::div operator /(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mod operator %(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::plus operator +(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::minus operator -(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mult operator *(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::div operator /(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mod operator %(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::plus operator +(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::minus operator -(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mult operator *(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::div operator /(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mod operator %(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::plus operator +(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::minus operator -(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mult operator *(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::div operator /(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mod operator %(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
# 1112 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator &(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator |(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator ^(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator >>(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator <<(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator &(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator |(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator ^(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator >>(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator <<(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator &(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator |(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator ^(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator >>(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator <<(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator &(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator |(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator ^(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator >>(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator <<(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator &(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator |(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator &(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator |(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator ^(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator >>(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator <<(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator &(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator |(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator &(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator |(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator ^(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator >>(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator <<(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator &(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator |(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator &(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator |(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator ^(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator >>(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator <<(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator &(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator |(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator ^(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator >>(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator <<(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
# 1140 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())+( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())-( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())*( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::div operator /(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())/( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())%( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())&( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())|( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())^( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())>>( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())<<( rhs.operator ap_int_base<_AP_W2, false>()); }
# 1189 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_ref.h"
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::plus operator +( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() + rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::minus operator -( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() - rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mult operator *( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() * rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::div operator /( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() / rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mod operator %( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() % rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator &( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() & rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator |( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() | rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator ^( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() ^ rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator >>( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() >> rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator <<( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() << rhs.get(); }
# 1336 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 1; ret >>= 1; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, bool op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op2); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( bool op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op1); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, char op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op2); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op1); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( signed char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, signed char op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op2); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( signed char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op1); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + 1, true> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( signed char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( unsigned char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned char op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op2); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( unsigned char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op1); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( unsigned char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( unsigned short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( unsigned short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( unsigned int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( unsigned int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( unsigned long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( unsigned long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_slong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_ulong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
# 1360 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }

template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
# 57 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int.h" 2




template <int _AP_W>
struct ap_int : ap_int_base<_AP_W, true> {
  typedef ap_int_base<_AP_W, true> Base;

  inline __attribute__((always_inline)) ap_int() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }
# 95 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_int(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_ulong val) { Base::V = val; }

  ap_int(double val) : Base(val) {}
  ap_int(float val) : Base(val) {}
  ap_int(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_int(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_int(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_int& operator=(const ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_int& operator=(const volatile ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_int<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_int<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};




template <int _AP_W>
struct ap_uint : ap_int_base<_AP_W, false> {
  typedef ap_int_base<_AP_W, false> Base;

  inline __attribute__((always_inline)) ap_uint() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }
# 236 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_uint(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_uint(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_ulong val) { Base::V = val; }

  ap_uint(double val) : Base(val) {}
  ap_uint(float val) : Base(val) {}
  ap_uint(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_uint(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_uint(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_uint& operator=(const ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_uint& operator=(const volatile ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_uint<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_uint<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};
# 359 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int.h"
# 1 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_special.h" 1
# 61 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_special.h"
template <int _AP_W>
class complex<ap_int<_AP_W> > {
 public:
  typedef ap_int<_AP_W> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}





  _Tp& real() { return _M_real; }
  const _Tp& real() const { return _M_real; }
  _Tp& imag() { return _M_imag; }
  const _Tp& imag() const { return _M_imag; }


  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 222 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int_special.h"
template <int _AP_W>
inline bool operator==(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W>
inline bool operator==(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W>
inline bool operator!=(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W>
inline bool operator!=(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 360 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int.h" 2







# 1 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed.h" 1
# 55 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed.h"
# 1 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h" 1
# 62 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h"
# 1 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int.h" 1
# 63 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h" 2
# 133 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W2, int _AP_I2, bool _AP_S2>
struct _ap_fixed_factory;
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, true> {
  typedef ap_fixed<_AP_W2, _AP_I2> type;
};
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, false> {
  typedef ap_ufixed<_AP_W2, _AP_I2> type;
};
# 154 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct ap_fixed_base : ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;
  static const int width = _AP_W;
  static const int iwidth = _AP_I;
  static const ap_q_mode qmode = _AP_Q;
  static const ap_o_mode omode = _AP_O;


  template <int _AP_W2, int _AP_I2, bool _AP_S2>
  struct RType {
    enum {
      _AP_F = _AP_W - _AP_I,
      F2 = _AP_W2 - _AP_I2,
      mult_w = _AP_W + _AP_W2,
      mult_i = _AP_I + _AP_I2,
      mult_s = _AP_S || _AP_S2,
      plus_w = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
               1 + ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      plus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1 +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      minus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,

      div_w = _AP_S2 + _AP_W + ((F2) > (0) ? (F2) : (0)),



      div_i = _AP_S2 + _AP_I + F2,
      div_s = _AP_S || _AP_S2,
      logic_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      logic_i = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };

    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> lhs;
    typedef ap_fixed_base<_AP_W2, _AP_I2, _AP_S2> rhs;

    typedef ap_fixed_base<mult_w, mult_i, mult_s> mult_base;
    typedef ap_fixed_base<plus_w, plus_i, plus_s> plus_base;
    typedef ap_fixed_base<minus_w, minus_i, minus_s> minus_base;
    typedef ap_fixed_base<logic_w, logic_i, logic_s> logic_base;
    typedef ap_fixed_base<div_w, div_i, div_s> div_base;
    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> arg1_base;

    typedef typename _ap_fixed_factory<mult_w, mult_i, mult_s>::type mult;
    typedef typename _ap_fixed_factory<plus_w, plus_i, plus_s>::type plus;
    typedef typename _ap_fixed_factory<minus_w, minus_i, minus_s>::type minus;
    typedef typename _ap_fixed_factory<logic_w, logic_i, logic_s>::type logic;
    typedef typename _ap_fixed_factory<div_w, div_i, div_s>::type div;
    typedef typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type arg1;
  };

 private:
# 333 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) void report() {}




  inline __attribute__((always_inline)) void overflow_adjust(bool underflow, bool overflow, bool lD,
                              bool sign) {
    if (!underflow && !overflow) return;
    if (_AP_O == AP_WRAP) {
      if (_AP_N == 0) return;
      if (_AP_S) {


        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        if (_AP_N > 1) {

          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
      } else {

        ap_int_base<_AP_W, false> mask(-1);
        Base::V =
            ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 1); __Result__; });
      }
    } else if (_AP_O == AP_SAT_ZERO) {
      Base::V = 0;
    } else if (_AP_O == AP_WRAP_SM && _AP_S) {
      bool Ro = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      if (_AP_N == 0) {
        if (lD != Ro) {
          Base::V = ~Base::V;
          Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(lD) __Repl2__ = !!lD; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        }
      } else {
        if (_AP_N == 1 && sign != Ro) {
          Base::V = ~Base::V;
        } else if (_AP_N > 1) {
          bool lNo = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - _AP_N); __Result__; });
          if (lNo == sign) Base::V = ~Base::V;
          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
      }
    } else {
      if (_AP_S) {
        if (overflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          Base::V = ~Base::V;
        } else if (underflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          if (_AP_O == AP_SAT_SYM) Base::V |= 1;
        }
      } else {
        if (overflow)
          Base::V = ~(ap_int_base<_AP_W, false>(0).V);
        else if (underflow)
          Base::V = 0;
      }
    }
  }

  inline __attribute__((always_inline)) bool quantization_adjust(bool qb, bool r, bool s) {
    bool carry = (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    if (_AP_Q == AP_TRN) return false;
    if (_AP_Q == AP_RND_ZERO)
      qb &= s || r;
    else if (_AP_Q == AP_RND_MIN_INF)
      qb &= r;
    else if (_AP_Q == AP_RND_INF)
      qb &= !s || r;
    else if (_AP_Q == AP_RND_CONV)
      qb &= ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 0); __Result__; }) || r;
    else if (_AP_Q == AP_TRN_ZERO)
      qb = s && (qb || r);
    Base::V += qb;
    return carry && (!(bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }));
  }


 public:



  inline __attribute__((always_inline)) ap_fixed_base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }
# 477 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_fixed_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    *this = ((bool)op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_range_ref<_AP_W2, _AP_S2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
    *this = (ap_int_base<_AP_W2 + _AP_W3, false>(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (bool(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }
# 535 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const bool x) { ap_fixed_base<(1), (1), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const char x) { ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const signed char x) { ap_fixed_base<(8), (8), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned char x) { ap_fixed_base<(8), (8), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_slong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_ulong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)> tmp; tmp.V = x; *this = tmp; }







          ap_fixed_base(double d) {
    ap_int_base<64, false> ireg;
    ireg.V = doubleToRawBits(d);
    bool isneg = ({ typeof(ireg.V) __Val2__ = ireg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 63); __Result__; });

    ap_int_base<11 + 1, true> exp;
    ap_int_base<11, false> exp_tmp;
    exp_tmp.V =
        ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, 52 + 11 - 1); __Result__; });
    exp = exp_tmp - ((1L << (11 - 1L)) - 1L);
    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));

    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });
    if (isneg) man = -man;
    if ((ireg.V & 0x7fffffffffffffffLL) == 0) {
      Base::V = 0;
    } else {
      int _AP_W2 = 52 + 2, _AP_I2 = exp.V + 2, _AP_F = _AP_W - _AP_I,
          F2 = _AP_W2 - _AP_I2;
      bool _AP_S2 = true,
           QUAN_INC = F2 > _AP_F &&
                      !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));
      bool carry = false;

      unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
      if (F2 == _AP_F)
        Base::V = man.V;
      else if (F2 > _AP_F) {
        if (sh_amt < 52 + 2)
          Base::V = man.V >> sh_amt;
        else {
          Base::V = isneg ? -1 : 0;
        }
        if ((_AP_Q != AP_TRN) && !((_AP_Q == AP_TRN_ZERO) && !_AP_S2)) {
          bool qb = (F2 - _AP_F > _AP_W2) ? isneg : (bool)({ typeof(man.V) __Val2__ = man.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

          bool r =
              (F2 > _AP_F + 1)
                  ? ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, (F2 - _AP_F - 2 < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1)); __Result__; }) != 0


                  : false;
          carry = quantization_adjust(qb, r, isneg);
        }
      } else {
        Base::V = man.V;
        if (sh_amt < _AP_W)
          Base::V = Base::V << sh_amt;
        else
          Base::V = 0;
      }

      if ((_AP_O != AP_WRAP || _AP_N != 0) &&
          ((!_AP_S && _AP_S2) ||
           _AP_I - _AP_S <
               _AP_I2 - _AP_S2 +
                   (QUAN_INC ||
                    (_AP_S2 && (_AP_O == AP_SAT_SYM))))) {
        bool deleted_zeros = _AP_S2 ? true : !carry, deleted_ones = true;
        bool neg_src = isneg;
        bool lD = false;
        int pos1 = F2 - _AP_F + _AP_W;
        int pos2 = F2 - _AP_F + _AP_W + 1;
        bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
        if (pos1 < _AP_W2 && pos1 >= 0)

          lD = (man.V >> pos1) & 1;
        if (pos1 < _AP_W2) {
          bool Range1_all_ones = true;
          bool Range1_all_zeros = true;
          bool Range2_all_ones = true;
          ap_int_base<52 + 2, false> Range2;
          ap_int_base<52 + 2, false> all_ones(-1);

          if (pos2 >= 0 && pos2 < _AP_W2) {


            Range2.V = man.V;
            Range2.V >>= pos2;
            Range2_all_ones = Range2 == (all_ones >> pos2);
          } else if (pos2 < 0)
            Range2_all_ones = false;
          if (pos1 >= 0 && pos2 < _AP_W2) {
            Range1_all_ones = Range2_all_ones && lD;
            Range1_all_zeros = !Range2.V && !lD;
          } else if (pos2 == _AP_W2) {
            Range1_all_ones = lD;
            Range1_all_zeros = !lD;
          } else if (pos1 < 0) {
            Range1_all_zeros = !man.V;
            Range1_all_ones = false;
          }

          deleted_zeros =
              deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
          deleted_ones =
              carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
          neg_src = isneg && !(carry && Range1_all_ones);
        } else
          neg_src = isneg && newsignbit;
        bool neg_trg = _AP_S && newsignbit;
        bool overflow = (neg_trg || !deleted_zeros) && !isneg;
        bool underflow = (!neg_trg || !deleted_ones) && neg_src;
        if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
          underflow |=
              neg_src &&
              (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                         : true);
        overflow_adjust(underflow, overflow, lD, neg_src);
      }
    }
    report();
  }


  inline __attribute__((always_inline)) ap_fixed_base(float d) { *this = ap_fixed_base(double(d)); }


  inline __attribute__((always_inline)) ap_fixed_base(half d) { *this = ap_fixed_base(double(d)); }
# 688 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {

    const int _AP_F = _AP_W - _AP_I;
    const int F2 = _AP_W2 - _AP_I2;
    const int QUAN_INC =
          F2 > _AP_F && !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));

    if (!op) Base::V = 0;
    bool carry = false;
    bool signbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    bool isneg = signbit && _AP_S2;
    if (F2 == _AP_F)
      Base::V = op.V;
    else if (F2 > _AP_F) {
      unsigned int sh_amt = F2 - _AP_F;

      if (sh_amt < _AP_W2) {
        Base::V = op.V >> sh_amt;
      } else {
        Base::V = isneg ? -1 : 0;
      }
      if (_AP_Q != AP_TRN && !(_AP_Q == AP_TRN_ZERO && !_AP_S2)) {
        bool qbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

        bool qb = (F2 - _AP_F > _AP_W2) ? _AP_S2 && signbit : qbit;
        enum { hi = ((F2 - _AP_F - 2) < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1) };

        bool r = (F2 > _AP_F + 1) ? (({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, hi); __Result__; }) != 0) : false;
        carry = quantization_adjust(qb, r, isneg);
      }
    } else {
      unsigned sh_amt = _AP_F - F2;

      if (sh_amt < _AP_W) {
        if (_AP_W > _AP_W2) {

          Base::V = op.V;
          Base::V <<= sh_amt;
        } else {

          Base::V = op.V << sh_amt;
        }
      } else {
        Base::V = 0;
      }
    }

    if ((_AP_O != AP_WRAP || _AP_N != 0) &&
        ((!_AP_S && _AP_S2) ||
         _AP_I - _AP_S <
             _AP_I2 - _AP_S2 +
                 (QUAN_INC || (_AP_S2 && _AP_O == AP_SAT_SYM)))) {
      bool deleted_zeros = _AP_S2 ? true : !carry;
      bool deleted_ones = true;
      bool neg_src = isneg;
      bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      enum { pos1 = F2 - _AP_F + _AP_W, pos2 = F2 - _AP_F + _AP_W + 1 };
      bool lD = (pos1 < _AP_W2 && pos1 >= 0) ? ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), pos1); __Result__; })
                                             : false;
      if (pos1 < _AP_W2) {
        bool Range1_all_ones = true;
        bool Range1_all_zeros = true;
        bool Range2_all_ones = true;
        ap_int_base<_AP_W2, false> all_ones(-1);

        if (pos2 < _AP_W2 && pos2 >= 0) {
          ap_int_base<_AP_W2, false> Range2;
          Range2.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos2, _AP_W2 - 1); __Result__; });
          Range2_all_ones = Range2 == (all_ones >> pos2);
        } else if (pos2 < 0) {
          Range2_all_ones = false;
        }

        if (pos1 >= 0 && pos2 < _AP_W2) {
          ap_int_base<_AP_W2, false> Range1;
          Range1.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos1, _AP_W2 - 1); __Result__; });
          Range1_all_ones = Range1 == (all_ones >> pos1);
          Range1_all_zeros = !Range1.V;
        } else if (pos2 == _AP_W2) {
          Range1_all_ones = lD;
          Range1_all_zeros = !lD;
        } else if (pos1 < 0) {
          Range1_all_zeros = !op.V;
          Range1_all_ones = false;
        }

        deleted_zeros =
            deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
        deleted_ones =
            carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
        neg_src = isneg && !(carry && Range1_all_ones);
      } else
        neg_src = isneg && newsignbit;
      bool neg_trg = _AP_S && newsignbit;
      bool overflow = (neg_trg || !deleted_zeros) && !isneg;
      bool underflow = (!neg_trg || !deleted_ones) && neg_src;
      if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
        underflow |=
            neg_src &&
            (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                       : true);

      overflow_adjust(underflow, overflow, lD, neg_src);
    }
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(const_cast<const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(op));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& setBits(ap_ulong bv) {

    Base::V = bv;
    return *this;
  }


  static inline __attribute__((always_inline)) ap_fixed_base bitsToFixed(ap_ulong bv) {

    ap_fixed_base t;

    t.V = bv;



    return t;
  }





  inline __attribute__((always_inline)) ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> to_ap_int_base(
      bool Cnative = true) const {
    ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> ret;
    if (_AP_I == 0) {
      ret.V = 0;
    } else if (_AP_I > 0 && _AP_I <= _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - _AP_I, _AP_W - 1); __Result__; });
    } else if (_AP_I > _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 1); __Result__; });
      ret.V <<= (_AP_I - _AP_W);
    }
# 848 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h"
    if (Cnative && _AP_I < _AP_W) {

      if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }) && (_AP_I < _AP_W) &&
          (({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_I < 0 ? _AP_W - 1 : _AP_W - _AP_I - 1); __Result__; }) != 0))

        ++ret;
    } else {

    }
    return ret;
  };

 public:
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) operator ap_int_base<_AP_W2, _AP_S2>() const {
    return ap_int_base<_AP_W2, _AP_S2>(to_ap_int_base());
  }


  inline __attribute__((always_inline)) char to_char() const { return to_ap_int_base().to_char(); }

  inline __attribute__((always_inline)) int to_int() const { return to_ap_int_base().to_int(); }

  inline __attribute__((always_inline)) unsigned to_uint() const { return to_ap_int_base().to_uint(); }

  inline __attribute__((always_inline)) ap_slong to_int64() const { return to_ap_int_base().to_int64(); }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return to_ap_int_base().to_uint64(); }



  inline __attribute__((always_inline)) double to_double() const {




    enum { BITS = 52 + 11 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (11 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 52;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    ap_ulong m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (ap_ulong)(tmp.V >> (lsb_index - 1))
                           : (ap_ulong)(tmp.V << (1 - lsb_index));
    } else {
      m = (ap_ulong)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;


    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 52 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52 + 11 - 1); __Result__; });


    return rawBitsToDouble(m);
  }



  inline __attribute__((always_inline)) float to_float() const {




    enum { BITS = 23 + 8 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (8 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 23;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned long m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned long)(tmp.V >> (lsb_index - 1))
                           : (unsigned long)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned long)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 23 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23 + 8 - 1); __Result__; });

    return rawBitsToFloat(m);
  }



  inline __attribute__((always_inline)) half to_half() const {




    enum { BITS = 10 + 5 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (5 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 10;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned short m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned short)(tmp.V >> (lsb_index - 1))
                           : (unsigned short)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned short)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 10 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 10, 10 + 5 - 1); __Result__; });

    return rawBitsToHalf(m);
  }


  inline __attribute__((always_inline)) operator long double() const { return (long double)to_double(); }

  inline __attribute__((always_inline)) operator double() const { return to_double(); }

  inline __attribute__((always_inline)) operator float() const { return to_float(); }

  inline __attribute__((always_inline)) operator half() const { return to_half(); }

  inline __attribute__((always_inline)) operator bool() const { return (bool)Base::V != 0; }

  inline __attribute__((always_inline)) operator char() const { return (char)to_int(); }

  inline __attribute__((always_inline)) operator signed char() const { return (signed char)to_int(); }

  inline __attribute__((always_inline)) operator unsigned char() const { return (unsigned char)to_uint(); }

  inline __attribute__((always_inline)) operator short() const { return (short)to_int(); }

  inline __attribute__((always_inline)) operator unsigned short() const { return (unsigned short)to_uint(); }

  inline __attribute__((always_inline)) operator int() const { return to_int(); }

  inline __attribute__((always_inline)) operator unsigned int() const { return to_uint(); }



  inline __attribute__((always_inline)) operator long() const { return (long)to_int64(); }

  inline __attribute__((always_inline)) operator unsigned long() const { return (unsigned long)to_uint64(); }






  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }

  inline __attribute__((always_inline)) operator ap_slong() const { return to_int64(); }

  inline __attribute__((always_inline)) int length() const { return _AP_W; };
# 1074 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {


    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctzll(t.V);
    } else {
      enum {__N = (_AP_W + 63) / 64};
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.range(0, 63) = this->range(_AP_W - i * 64 - 64, _AP_W - i * 64 - 1);
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        t.range(63 - (_AP_W - 1) % 64, 63) = this->range(0, (_AP_W - 1) % 64);
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::mult operator*(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::mult_base r, t;
    r.V = Base::V;
    t.V = op2.V;
    r.V *= op2.V;
    return r;
  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::div operator/(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::div_base r;
# 1144 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h"
        ap_fixed_base<_AP_W + ((_AP_W2 - _AP_I2) > (0) ? (_AP_W2 - _AP_I2) : (0)),_AP_I, _AP_S> t(*this);



        r.V = t.V / op2.V;
# 1177 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }
# 1192 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: plus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V + rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: minus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V - rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V & rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V | rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V ^ rhs.V; return ret; }
# 1210 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator *=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator *(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator /=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator /(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator +=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator +(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator -=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator -(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator &=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator &(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator |=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator |(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator ^=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator ^(op2); return *this; }





  inline __attribute__((always_inline)) ap_fixed_base& operator++() {
    operator+=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator--() {
    operator-=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator++(int) {
    ap_fixed_base r(*this);
    operator++();
    return r;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator--(int) {
    ap_fixed_base r(*this);
    operator--();
    return r;
  }



  inline __attribute__((always_inline)) ap_fixed_base operator+() { return *this; }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W + 1, _AP_I + 1, true> operator-() const {
    ap_fixed_base<_AP_W + 1, _AP_I + 1, true> r(*this);
    r.V = -r.V;
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> getNeg() {
    ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> r(*this);
    r.V = -r.V;
    return r;
  }



  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }




  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S> operator~() const {
    ap_fixed_base<_AP_W, _AP_I, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> lshift() const {
    ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }

  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> rshift() const {
    ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }





  inline __attribute__((always_inline)) ap_fixed_base operator<<(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V << sh;
# 1328 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V >> sh;
# 1350 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }


  inline __attribute__((always_inline)) ap_fixed_base operator<<(int sh) const {
    ap_fixed_base r;
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator>>(ush);
    } else {
      return operator<<(ush);
    }
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(int sh) const {
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator<<(ush);
    } else {
      return operator>>(ush);
    }
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, true>& op2) const {


    int sh = op2.to_int();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    int sh = op2.to_int();
    return operator>>(sh);
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator>>(sh);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator<<(op2.to_ap_int_base());
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator>>(op2.to_ap_int_base());
  }





  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const int sh) {
    *this = operator<<(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const unsigned int sh) {
    *this = operator<<(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const int sh) {
    *this = operator>>(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const unsigned int sh) {
    *this = operator>>(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }
# 1494 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V > op2.V; else if (_AP_F > F2) return Base::V > ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V > op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V < op2.V; else if (_AP_F > F2) return Base::V < ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V < op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V >= op2.V; else if (_AP_F > F2) return Base::V >= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V >= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V <= op2.V; else if (_AP_F > F2) return Base::V <= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V <= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator ==(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V == op2.V; else if (_AP_F > F2) return Base::V == ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V == op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator !=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V != op2.V; else if (_AP_F > F2) return Base::V != ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V != op2.V; return false; }





  inline __attribute__((always_inline)) bool operator >(double d) const { return to_double() > d; }
  inline __attribute__((always_inline)) bool operator <(double d) const { return to_double() < d; }
  inline __attribute__((always_inline)) bool operator >=(double d) const { return to_double() >= d; }
  inline __attribute__((always_inline)) bool operator <=(double d) const { return to_double() <= d; }
  inline __attribute__((always_inline)) bool operator ==(double d) const { return to_double() == d; }
  inline __attribute__((always_inline)) bool operator !=(double d) const { return to_double() != d; }


  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool operator[](unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool bit(unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> get_bit(
      const ap_int_base<_AP_W2, true>& index) {
    (static_cast<void>(0));

    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        this, index.to_int() + _AP_W - _AP_I);
  }

  inline __attribute__((always_inline)) bool get_bit(int index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index + _AP_W - _AP_I); __Result__; });

  }
# 1580 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) bool get_bit(const ap_int_base<_AP_W2, true>& index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index.to_int() + _AP_W - _AP_I); __Result__; });

  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(int Hi,
                                                                      int Lo) {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      int Hi, int Lo) const {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        const_cast<ap_fixed_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }

  inline __attribute__((always_inline)) bool is_neg() const {
    if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; })) return true;
    return false;
  }

  inline __attribute__((always_inline)) int wl() const { return _AP_W; }

  inline __attribute__((always_inline)) int iwl() const { return _AP_I; }

  inline __attribute__((always_inline)) ap_q_mode q_mode() const { return _AP_Q; }

  inline __attribute__((always_inline)) ap_o_mode o_mode() const { return _AP_O; }

  inline __attribute__((always_inline)) int n_bits() const { return _AP_N; }
# 1763 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) char* to_string(unsigned char radix = 2, bool sign = _AP_S) const {
    return 0;
  }

};

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_not(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) {
  ret.V = ~op.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_and(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V & op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_or(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V | op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_xor(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V ^ op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void neg(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
  ap_fixed_base<_AP_W2 + !_AP_S2, _AP_I2 + !_AP_S2, true, _AP_Q2, _AP_O2,
                _AP_N2>
      t;
  t.V = -op.V;
  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void lshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F2 = _AP_W2 - _AP_I2,
    _AP_I3 = ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)),
    _AP_W3 = _AP_I3 + F2,
  };

  ap_fixed_base<_AP_W3, _AP_I3, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  t.V <<= i;

  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void rshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F = _AP_W - _AP_I,
    F2 = _AP_W2 - _AP_I2,
    F3 = ((F) > (F2) ? (F) : (F2)),
    _AP_W3 = _AP_I2 + F3,
    sh = F - F2,
  };

  ap_fixed_base<_AP_W3, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  if (sh >= 0)
    t.V <<= (int) sh;
  t.V >>= i;

  ret = t;
}
# 2213 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ==(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator !=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }
# 2301 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::plus operator +( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::minus operator -( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::mult operator *( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::div operator /( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator &( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator |( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator ^( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator +=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator +=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator -=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator -=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator *=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator *=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator /=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator /=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator &=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator &=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator |=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator |=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator ^=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator ^=(op.to_ap_int_base()); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ==(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ==(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator !=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <=(op); }




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator==(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator==(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator!=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator!=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>=(op1);
}
# 56 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed.h" 2
# 1 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_ref.h" 1
# 70 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int d_index;

 public:
  inline __attribute__((always_inline)) af_bit_ref(
      const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {






  }

  inline __attribute__((always_inline)) af_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) af_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}


  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }



  inline __attribute__((always_inline)) af_bit_ref& operator=(bool val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; });
    return *this;
  }



  inline __attribute__((always_inline)) af_bit_ref& operator=(const af_bit_ref& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=(val != 0);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=(ap_int_base<_AP_W2 + _AP_W3, false>(val));
  }




  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(*this,
                                                                        op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, af_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        1, af_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() != op.get();
  }


  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 257 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:

  inline __attribute__((always_inline)) af_range_ref(
      const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}




  inline __attribute__((always_inline)) af_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {
# 287 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_ref.h"
  }

  inline __attribute__((always_inline)) af_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {
# 299 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_ref.h"
  }
# 311 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_ref.h"
  inline __attribute__((always_inline)) af_range_ref& operator=(const bool val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const signed char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_slong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_ulong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const half val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const float val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const double val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }



  inline __attribute__((always_inline)) af_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }



  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) af_range_ref& operator=(const af_range_ref& val) {
    ap_int_base<_AP_W, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    const ap_int_base<_AP_W2 + _AP_W3, false> tmp(val);
    return operator=(tmp);
  }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator<(op2));
  }





  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, op);
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                    af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  inline __attribute__((always_inline)) operator ap_ulong() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret.to_uint64();
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> to_ap_int_base() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }


  inline __attribute__((always_inline)) char to_char() const {
    return (char)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }
# 633 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2) const {
    return 0;
  }

};
# 696 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
# 742 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<1, false>(op); }
# 57 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed.h" 2





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed : ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_fixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                      _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                               _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 111 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 145 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}





  inline __attribute__((always_inline)) ap_fixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_fixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_fixed(const char* s, signed char rd) : Base(s, rd) {}






  inline __attribute__((always_inline)) ap_fixed& operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_fixed& operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }
};





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed : ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_ufixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                       _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                                _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 276 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 307 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_ufixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}




  inline __attribute__((always_inline)) ap_ufixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_ufixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_ufixed(const char* s, signed char rd) : Base(s, rd) {}


  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O,
                                                 _AP_N>& op) volatile {
    Base::V = op.V;
  }
};
# 398 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed.h"
# 1 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_special.h" 1
# 61 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}





  _Tp& real() { return _M_real; }
  const _Tp& real() const { return _M_real; }
  _Tp& imag() { return _M_imag; }
  const _Tp& imag() const { return _M_imag; }


  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 221 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 399 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_fixed.h" 2
# 368 "/opt/Xilinx/Vivado/2019.1/common/technology/autopilot/ap_int.h" 2
# 6 "./mat_coeff_gen.h" 2
# 16 "./mat_coeff_gen.h"
using namespace hls;
# 40 "./mat_coeff_gen.h"
typedef ap_uint<128> uint_128;
typedef stream<uint_128> strm_128;

void BfW_Coeff_Gen(strm_128 &mat_coeff);
# 2 "mat_coeff_gen.cpp" 2

void BfW_Coeff_Gen(strm_128 &bfw_coeff)
{
_ssdm_op_SpecInterface(0, "ap_ctrl_none", 0, 0, "", 0, 0, "", "", "", 0, 0, 0, 0, "", "");
_ssdm_op_SpecInterface(&bfw_coeff, "axis", 0, 0, "", 0, 0, "", "", "", 0, 0, 0, 0, "", "");
 const uint_128 coeff[((64*8)*64)/(128/32)]={
 ap_uint<128>("0x7555c0aa60f884fabe4851fa7af9afff",16),
 ap_uint<128>("0xd5e670e3075a8fb81aae7bddefb0df6e",16),
 ap_uint<128>("0x8c1170e8f9b3dc94a98ef5d6cec27b3b",16),
 ap_uint<128>("0x5060777b8a2a88103ab757328fbebebf",16),
 ap_uint<128>("0xe8180acf8710a1b4e49ff218961b0b83",16),
 ap_uint<128>("0xc7b76be43b9a1760ac265ab6bb07dfb9",16),
 ap_uint<128>("0x717da164cfc5f36eadfae238dc0f0ac8",16),
 ap_uint<128>("0x67bb8b94c2b4c57c2c80dcae24e3e8ee",16),
 ap_uint<128>("0x21b067ca35b1f780dc562a72ad87cf9c",16),
 ap_uint<128>("0x7eef2bdcad8c3ce4eba54a24ddbb8662",16),
 ap_uint<128>("0x1eb1dfe777f231bce2f496661153a546",16),
 ap_uint<128>("0xeb9a4f444e47646b7ea1e83907bd5632",16),
 ap_uint<128>("0x59be7573094d70704b4c6ee65d4d06e2",16),
 ap_uint<128>("0x5c875eed99a48541da8498bdf6225f17",16),
 ap_uint<128>("0xd258111720b781ceced22a4ee690e38b",16),
 ap_uint<128>("0x723d5322b476e37c9ca6bd5de7008212",16),
 ap_uint<128>("0xb9892c51bd715a8454940caa331728eb",16),
 ap_uint<128>("0x2a193306e8f40045d44f899927ddcd25",16),
 ap_uint<128>("0x3041d8bac7c6f6d7729f409897e0d331",16),
 ap_uint<128>("0x65482460fdabe4212db351ad462c6d89",16),
 ap_uint<128>("0x9cd2bf9eea26078ae84ae7d8c32f691b",16),
 ap_uint<128>("0x8844a832c0a5b535b8214901a02fa370",16),
 ap_uint<128>("0x704f65eda855424d5204c61ab8a8bad6",16),
 ap_uint<128>("0xc20ef126f901736c95c314f00194a8c4",16),
 ap_uint<128>("0x833891592e40bbf2cdfdcfba4d1ff480",16),
 ap_uint<128>("0x0afc2236ff0227fe1bdd51df95496a5c",16),
 ap_uint<128>("0x0b634d4889a2ef05fea2f93eb8d55e10",16),
 ap_uint<128>("0xb417fe1a0595b40a5b08ddda9448dd3e",16),
 ap_uint<128>("0x93ce60086202e28ddb9afdff2cc3e5c3",16),
 ap_uint<128>("0x5c210917e83671d16899e101890c13fb",16),
 ap_uint<128>("0x173e28da38797569ac79d96bb0b74ca5",16),
 ap_uint<128>("0xf58c39ad5ffda459a2ca0ef53fbcf74d",16),
 ap_uint<128>("0x01a5b22e2323e4769e0b155a42d0d4cd",16),
 ap_uint<128>("0x0e860837d76b8b2ccc733d7b6a933eb9",16),
 ap_uint<128>("0xb443678438b9394e35f91742426e0236",16),
 ap_uint<128>("0x98d9c99bb4bb41c7660c502a5071d52b",16),
 ap_uint<128>("0xd419afdf0726ed38825a48e8afd68278",16),
 ap_uint<128>("0x38260ccc2061191c64ce12a0844c62a0",16),
 ap_uint<128>("0x9cd3b208219149269873d83aa35de3f6",16),
 ap_uint<128>("0xa0755135059b5ce2149f281178b8f352",16),
 ap_uint<128>("0xfcbfe48a380d088bcc34a3cc6d23ee20",16),
 ap_uint<128>("0x53b1ec04725d5a729c3d0acfb16e3279",16),
 ap_uint<128>("0x9063bb04884fd5edbb0ec065c33c8996",16),
 ap_uint<128>("0xc0845e22326b3d20d6f50d1b3cd70c10",16),
 ap_uint<128>("0xa272770ed0b2ccb1ccc3d12d7b02ce62",16),
 ap_uint<128>("0xf0bba8ba0ee60c565b9df80f12006c13",16),
 ap_uint<128>("0x0171a75e16be083cb18a3fe2ee5f4838",16),
 ap_uint<128>("0x361b2b875e3ffc1ff0ec6774540245a9",16),
 ap_uint<128>("0x46544ceee5f9994531391aa963afeef8",16),
 ap_uint<128>("0x522128a3b21c891234bd729c325d1e5a",16),
 ap_uint<128>("0xaa2c01c83dcd6322e67bba04e7bad109",16),
 ap_uint<128>("0x7ca439d2d2ad279378ec5bf7c2e99bdb",16),
 ap_uint<128>("0x36f09064ad5407515bababe5d761b373",16),
 ap_uint<128>("0xde9ea6cb42c9e0758709ec653d16f24d",16),
 ap_uint<128>("0xf3100da32ca7e8e72687b8417cf47491",16),
 ap_uint<128>("0xe7491e5b9308f5b673dd3cb1df9bc8a6",16),
 ap_uint<128>("0x068ae20e7cdef4b7e8d52240e7dbaa0b",16),
 ap_uint<128>("0x2e85a041b80793b133a6e00f338b8047",16),
 ap_uint<128>("0x36a1a3c9570d2177b05d36cac687af2a",16),
 ap_uint<128>("0x2699f56c9b3ae38dc5dfe4e5ae6d64fc",16),
 ap_uint<128>("0x1239c98fcd05c8b048d64dad11219a2e",16),
 ap_uint<128>("0xd5245987bab0261efaf27013e238f611",16),
 ap_uint<128>("0x316b0d47e91b39a179baeb2a78af74b1",16),
 ap_uint<128>("0xecd57b22836365c0d5e61edc8701b648",16),
 ap_uint<128>("0x120e08b66efbdede9951748918bc584e",16),
 ap_uint<128>("0x80c15f411f700d0f79165f446ad84a03",16),
 ap_uint<128>("0x4bf35cb3e59a4fe0f6c2915015fe2902",16),
 ap_uint<128>("0x7cca932e16f48937524dcce331b66912",16),
 ap_uint<128>("0x09d09ecf44aae4e20e9243b61d914284",16),
 ap_uint<128>("0xac6cdb9ec03426fd4f24e8c434e4a29f",16),
 ap_uint<128>("0x01770314010c74cf757254a10c61379b",16),
 ap_uint<128>("0x312db7448fbfb22ec897288c4a24577c",16),
 ap_uint<128>("0x76a4147856c054f661e51379e866137c",16),
 ap_uint<128>("0x84623edbc50c4a702afc320bfa5b8c2e",16),
 ap_uint<128>("0x7ba44c088aef38dd0ae1cb34b960a7a5",16),
 ap_uint<128>("0xd81e7af49977f9bad41daeb43dfad369",16),
 ap_uint<128>("0xe790c6f857d150a0b4d3d028148642a1",16),
 ap_uint<128>("0xd001e326f8258cb7fad93f0e3ca7ad1b",16),
 ap_uint<128>("0x4e3389fec7a1196fb124581d45836aa3",16),
 ap_uint<128>("0x326dd932091842f8a7cfc4f82f93f0bc",16),
 ap_uint<128>("0x6ae50f42dd8810689643b07ca8f0bac7",16),
 ap_uint<128>("0x3a23dee089230b50990e73e3a43ad83f",16),
 ap_uint<128>("0xc5e6e5eae6f5618d868d84ebce3c0566",16),
 ap_uint<128>("0xab2e0127989859229e49d636b1681c58",16),
 ap_uint<128>("0x86aca08e1a23fc49233ff9b6972ef216",16),
 ap_uint<128>("0x2b7b9663b3e9d1ffb8964ba44da13e9e",16),
 ap_uint<128>("0xa9e8695cf4e7fad88680a09485626f2d",16),
 ap_uint<128>("0xf813cf628b8e4252ad46be5ca29cc684",16),
 ap_uint<128>("0x11154b12c7f68fbbc70c15ae8da1bc16",16),
 ap_uint<128>("0x78b6b246681658f3e74d41f8c9f24b93",16),
 ap_uint<128>("0xe6870a6a18e4c1b9cd2802e1c9f9301a",16),
 ap_uint<128>("0x73226e865d975c6665966bd7b2294395",16),
 ap_uint<128>("0xd9e6a43178a3ebccc137642b93284384",16),
 ap_uint<128>("0x8a553bcc2f9396a1b944b6981d586f29",16),
 ap_uint<128>("0x604e828a70a1ea1e1c5eb309e5aa293e",16),
 ap_uint<128>("0x260f082d54ad9dbdbc7f06827065e8dd",16),
 ap_uint<128>("0x97d680e873d78480b07afea79ec9138a",16),
 ap_uint<128>("0x14b9b86346b3a146fa015ab2eb2122ac",16),
 ap_uint<128>("0x015af8e1f97a842945ddf495479d3708",16),
 ap_uint<128>("0x275d720749e942aceffe372a337ac223",16),
 ap_uint<128>("0x3759a8b82bd5c0efaf7bc824ba4b747d",16),
 ap_uint<128>("0xea1d46736e17eaf86d880b9903871e94",16),
 ap_uint<128>("0xd13cc72ad7143a7184f85ade0367c067",16),
 ap_uint<128>("0x1f98d02314b0e966d2e32922492b022a",16),
 ap_uint<128>("0x6c13027d6d9a09bfda350c672f98932b",16),
 ap_uint<128>("0xa7314a45c9ce83c070b5c98684aa1865",16),
 ap_uint<128>("0x3b80c5c7b1c306eb0a77daedb9619d7a",16),
 ap_uint<128>("0x95cea04aed13ccbea35a1f4c09a7efa2",16),
 ap_uint<128>("0x0cc5898039b5f7bd4e772879ed7468c0",16),
 ap_uint<128>("0x90f64ce4bf5931155ef350c8b4b05200",16),
 ap_uint<128>("0xbc42719a3802fd78f096470f22d1fb51",16),
 ap_uint<128>("0x9d90ec755573cdc18a50859359a198da",16),
 ap_uint<128>("0x7002e05e103a1d6c15ef606441a1d3a9",16),
 ap_uint<128>("0x9972dad06a307f68044f983e7f656628",16),
 ap_uint<128>("0x97b9a298a0838f9c87e1598396769227",16),
 ap_uint<128>("0x08ff7357777c11175024b2c8260693ab",16),
 ap_uint<128>("0x2a3faf4a8728a03c00f4c6f79d118c2a",16),
 ap_uint<128>("0x98db9648ab3372e5b8b6f9bdf532d318",16),
 ap_uint<128>("0x7d6bde8df9bbd5e6e285e3cdb33c290f",16),
 ap_uint<128>("0xaa0a3d22916c1b6733d516157d7754a8",16),
 ap_uint<128>("0xf10a124c300e2b8f1bc5ae270030ece8",16),
 ap_uint<128>("0x6315bf72bb42d38d74bda240ceb077b1",16),
 ap_uint<128>("0xd0da03170882558ecdb7aebc0d79014c",16),
 ap_uint<128>("0x094843ac295fa46b381fec8bbec72de5",16),
 ap_uint<128>("0x475522a1a1a7107996c831f1130eba3f",16),
 ap_uint<128>("0xa9733829b742b4524e1ea0ca74da883b",16),
 ap_uint<128>("0x7e2dcf65605e4b145bba7d9d55883c5a",16),
 ap_uint<128>("0x5af729be03c20abb04771086af2fffaf",16),
 ap_uint<128>("0xab99de0eb5511059b8d1f0d0cb5ae35e",16),
 ap_uint<128>("0x722185190fc33f5301e2a7d871de6251",16),
 ap_uint<128>("0xc4e7b5bda48ee2b7541f90915933eb5f",16),
 ap_uint<128>("0x62634802ecf0fb4a488fbfbe210161bf",16),
 ap_uint<128>("0x371578ed0768c7c3c78f58978b32f2c3",16),
 ap_uint<128>("0x6fbb636084444a7ec3bc7f8ea29eea15",16),
 ap_uint<128>("0x330b1104551467db25da4129e02018d8",16),
 ap_uint<128>("0x1f6cc86374b8e0e090c9c5425191eb6a",16),
 ap_uint<128>("0xeb3cd9aa8b46c41f87d3e45a42a84780",16),
 ap_uint<128>("0xd28dbc57f7b1e38366e99b8be582129b",16),
 ap_uint<128>("0x6d574fba428d232392b0c8b168cfe57a",16),
 ap_uint<128>("0xc8fb069f5c27a06ec425ad3cdeb90e31",16),
 ap_uint<128>("0x5f42eae758ab044abdf3407fb271d3c7",16),
 ap_uint<128>("0x6f1bebd77315c40c1425754a24c52562",16),
 ap_uint<128>("0xb88cb4a16b617d17794149b42ec1ce25",16),
 ap_uint<128>("0xecadfb28c8f17bb6ece95c2091900936",16),
 ap_uint<128>("0xbf8ae5ea144b8b1f6ec5852273c03d4e",16),
 ap_uint<128>("0x763164895ead07f53047606ff9857add",16),
 ap_uint<128>("0x27e019651df6a1047131fb9235f77a39",16),
 ap_uint<128>("0x0c019e91007fe87750c6adca8d5c6658",16),
 ap_uint<128>("0xf0f14b2552643366142b087e754544ae",16),
 ap_uint<128>("0x29526349f1cd13e529ad6992bef92783",16),
 ap_uint<128>("0xc194762492d5b490087524e23d027d7a",16),
 ap_uint<128>("0x824059ca771cb9d13703bf6d2cebf402",16),
 ap_uint<128>("0xdd9173bc6cb106530a30782e62825456",16),
 ap_uint<128>("0x003fb759420f2c7d4b16d9fafe6af6a8",16),
 ap_uint<128>("0x40a6205032b453f77069d6c37a6ffa20",16),
 ap_uint<128>("0xb91edef5c982fbab5f241a4b90dd2356",16),
 ap_uint<128>("0x77ef3dd5e458e2846f3fe375df33a68a",16),
 ap_uint<128>("0xe246ed4240f1a2872dc66b3cf36fcc0a",16),
 ap_uint<128>("0x92ada2a0ece44c9a800d4ddb3638e4f9",16),
 ap_uint<128>("0x92b9483cd9813be8abab55d2635e20d4",16),
 ap_uint<128>("0xc7c2f2f961dd48da7ec9f31480ebbe79",16),
 ap_uint<128>("0xda679fb11ecc68f15064ca83edb6d4ab",16),
 ap_uint<128>("0x00873310f688d5fb411f912ea8c6db20",16),
 ap_uint<128>("0x822a1ad2a79b9f13a0628fe740405129",16),
 ap_uint<128>("0x092f2ef44e9fa100521202a017d1d30e",16),
 ap_uint<128>("0x1f66316f67c340ff2f53d6f8b3a471ce",16),
 ap_uint<128>("0x416bbdbb4dc33aeba22c1d682183cb2d",16),
 ap_uint<128>("0x34a18dbc3c61bd21d07209bba291710e",16),
 ap_uint<128>("0x8cada71f65335e9277509b602085162e",16),
 ap_uint<128>("0xc335680f26878962d59f8db26caf7b53",16),
 ap_uint<128>("0xd3029106f447e331ee2fbe6096e79e5f",16),
 ap_uint<128>("0x107ee91e6630206c0b32d714432bd4f0",16),
 ap_uint<128>("0x7aa88ab49d9c57854a02c6062a5cc173",16),
 ap_uint<128>("0xca44dbee591eff9f890095d9b5239540",16),
 ap_uint<128>("0xa195db3f7b8e00ea2102fd1e5ca9343f",16),
 ap_uint<128>("0x9d2d03dd38aac2aab227fb30301b6563",16),
 ap_uint<128>("0xcb336c20aff3e5dae80d4ff745a2c255",16),
 ap_uint<128>("0x3930915cef005fcc6d612595c68bcb66",16),
 ap_uint<128>("0xdd1ccb5b4c0af0e40020928848fc17fa",16),
 ap_uint<128>("0xb1d865646fc7ef60a165f76962acaf54",16),
 ap_uint<128>("0x8989ea12a59b093f51c2fddf1a2a324b",16),
 ap_uint<128>("0x364800e8e0863ca0d88c9a2459bf1f9f",16),
 ap_uint<128>("0x9b5d8ed1c476c9752d391ec880b37f09",16),
 ap_uint<128>("0x7ac92ba2470b54de8fe61703a1309204",16),
 ap_uint<128>("0x723ad8846a601234ba1304aff29e0667",16),
 ap_uint<128>("0x6f47303942717e06814895d102f9e159",16),
 ap_uint<128>("0xb3e16ac3a8d491f52a45e6a71abcebd2",16),
 ap_uint<128>("0x2adf714579d2723ecee09838829dd21e",16),
 ap_uint<128>("0x5cc327a6f7bc6ec9b00d725d27571a2b",16),
 ap_uint<128>("0x5320d4c9ebdab2c367fcce9cee5b9201",16),
 ap_uint<128>("0x9cbdb2865b36d07b3cc1ef611adae3cb",16),
 ap_uint<128>("0xbda195e989e784670057d4c0d64142eb",16),
 ap_uint<128>("0x0e60342345ad5d360a55c0d2f274acec",16),
 ap_uint<128>("0x545f1a161d8338ec55a59f294763f690",16),
 ap_uint<128>("0xa24809f1ca9b7a2e58783546c6667e7a",16),
 ap_uint<128>("0x123be52dc7d3db8714ce41e53ff1ff05",16),
 ap_uint<128>("0x90bec572333fe20befd163950e46bd6b",16),
 ap_uint<128>("0xea90e7003046bafcde0b249ea03b6571",16),
 ap_uint<128>("0x80c98cd8d8a713eeb72c45ad0177c30a",16),
 ap_uint<128>("0x4603e7fab78e26ff08a2a74c93f6218d",16),
 ap_uint<128>("0x83b8a4166e78d798e31f2390b262c468",16),
 ap_uint<128>("0xa81a6cffa69c5cea620fd04ae4cf334a",16),
 ap_uint<128>("0xac28212c3df047856f10f0a21f5f04bb",16),
 ap_uint<128>("0xe30467a1676f7e83dbad28e4cf3a59a0",16),
 ap_uint<128>("0x3ffb3c29d6ce102f4b02dfd096fe12d8",16),
 ap_uint<128>("0xcdf179322f56b5a38c424b46495e4a8e",16),
 ap_uint<128>("0x555b8ac554a103d95a1026637cd9cedc",16),
 ap_uint<128>("0x314ca1c4ba0f57055ca59c79ac235a81",16),
 ap_uint<128>("0x7d1e9bfb429dcd731ab2fae33ef4c5b2",16),
 ap_uint<128>("0x2c5ad66ce6cddd94ec77ee55bc79f863",16),
 ap_uint<128>("0x6be2e621ce5cc9cfb48fe35856d70613",16),
 ap_uint<128>("0x5cdde25131221ef2ec9839d4f56ce52b",16),
 ap_uint<128>("0x431729e17eef3654d115c3e792c60b47",16),
 ap_uint<128>("0x9e354ea7524345b0fb6996bf93107671",16),
 ap_uint<128>("0xbd22aec8c8d09c4cee3e17f5f35b5669",16),
 ap_uint<128>("0x3104b795d6306000684fd0f5d7a9ed50",16),
 ap_uint<128>("0x64a6641cd6140c772d2e93fce4fc7608",16),
 ap_uint<128>("0xde7fddef0ee384906cbacdf37496fe52",16),
 ap_uint<128>("0x6de7ab2c116df46af13bf7261c28353f",16),
 ap_uint<128>("0x906aa7caaf05e91ce373840f4be061a4",16),
 ap_uint<128>("0x5af619153d35bb6d9bfef1fe9b2d3e5a",16),
 ap_uint<128>("0x8660296f0544778935d95f463865ff63",16),
 ap_uint<128>("0xe4ff7de7af078e24b654038e3f88fd68",16),
 ap_uint<128>("0xa97f75ed42a8f4c0205f28a1ac72c7e4",16),
 ap_uint<128>("0xaa9e05d9d46dabf7ef83a5887a4d3385",16),
 ap_uint<128>("0x89dbc814910185cc801d978b5eecaec2",16),
 ap_uint<128>("0xb73a90edeb6678e8b90a8c2275482f06",16),
 ap_uint<128>("0xe10afd6b5ced13955793a57694d9f216",16),
 ap_uint<128>("0xbeb8a25f96d3a5b72bde1b8f58e126eb",16),
 ap_uint<128>("0xad19a2a76fd4135251ed6a349b878be0",16),
 ap_uint<128>("0x9d631b06349c7562797779a268f44443",16),
 ap_uint<128>("0xec04493cbf0761b25cd3d970bf82136a",16),
 ap_uint<128>("0x0051813f50b9be1aec0a3b598ac28d8c",16),
 ap_uint<128>("0x287fc7f68e5a1965df92a02714863f29",16),
 ap_uint<128>("0xb23624f3eaa54b347a625421aef1e1f4",16),
 ap_uint<128>("0x754b7ac8e99044721084d305abb88e59",16),
 ap_uint<128>("0x998c5d562bca8c5b6f2123efd90dfaf7",16),
 ap_uint<128>("0x61bccc7c48114672a8b0aa0ff0416a91",16),
 ap_uint<128>("0x19f862cc2ca62d345e83b14a9f58c60f",16),
 ap_uint<128>("0xa627f5b0b97ed10a4329c6f261a605ab",16),
 ap_uint<128>("0xbf7fc695b2cf8abc650d8df101962c9b",16),
 ap_uint<128>("0x591b4dd367133e7e1bb646e6146b9cf8",16),
 ap_uint<128>("0x4ae0e156bd37894a29af6c8c93370978",16),
 ap_uint<128>("0x45d9fdeb301514f4971d12fd7fbfd2cc",16),
 ap_uint<128>("0xf3f15db1e2f8073fde5c6b2ba86cda0d",16),
 ap_uint<128>("0x67e218cb6067219b0f3619bb0eb87540",16),
 ap_uint<128>("0x6506089eae583f50f5daa499b5a99870",16),
 ap_uint<128>("0xa6f51945791db042eed4c46fe63a59fb",16),
 ap_uint<128>("0x3438f3c41733b5081bdb85b9f037da1c",16),
 ap_uint<128>("0x0be7b96bec4e3150d9ab9f3aa73bdf74",16),
 ap_uint<128>("0x66b4543d0ca5ae64780296942bce5d35",16),
 ap_uint<128>("0xdba1995c38035134fa8a3da385ab95c4",16),
 ap_uint<128>("0x89a5ef5ce3e3bed8513e23dad7ae0a0f",16),
 ap_uint<128>("0x377277e6496bf5ab4989215f46524423",16),
 ap_uint<128>("0xa0daadf28af1d0d05d0ae4ce61e3e32c",16),
 ap_uint<128>("0x3a3e15a4e26a9bfe0fad023209375f4f",16),
 ap_uint<128>("0x199b362f6049feb7cb5c95b9a69f9961",16),
 ap_uint<128>("0x30e45a4eb3d207960b94d446f6a165ee",16),
 ap_uint<128>("0x488f488fabb56616e89ebb3e448c3270",16),
 ap_uint<128>("0xc4dffcd932f16a9f487376c3206b45b1",16),
 ap_uint<128>("0x55da19e62bffc28ecd5ee689d858bfdc",16),
 ap_uint<128>("0x6263774351d4c236519c77739685514b",16),
 ap_uint<128>("0xc74a8ba320a11e6f71e4d16838f48076",16),
 ap_uint<128>("0x6e898717ca82443d5b7c30032542b397",16),
 ap_uint<128>("0xb5a4d039eed15b69aa0c63816bfdaa73",16),
 ap_uint<128>("0x7d1d49ebe0dc2ce16ee3907f185b9687",16),
 ap_uint<128>("0x0dfdf091e6e56bfe60c3cc2cb3a5dcf8",16),
 ap_uint<128>("0xd84971b097567a868013e94ef84b6de4",16),
 ap_uint<128>("0x5a9a11b9da04d05c4c68273ff87b3d59",16),
 ap_uint<128>("0x0ad4c316f44f6d4c2d92def20b86709d",16),
 ap_uint<128>("0x963a1bbf4b40ba57e59b71e2335eaed8",16),
 ap_uint<128>("0xf5085235f908c15d2b4c1a0cbd88106a",16),
 ap_uint<128>("0xdb5242c2bb172f95505560403d31f6c0",16),
 ap_uint<128>("0xb3ca3b96987d7a522a5aa8ab93fca444",16),
 ap_uint<128>("0x9cbb11897d987283de1a859950563d00",16),
 ap_uint<128>("0xe07ac34bc8b1660c4ab53b379ab9f305",16),
 ap_uint<128>("0x0de2f9d387762779c18dc6ee642240b9",16),
 ap_uint<128>("0xb1a062f1b8c103a3370fc134fc995a3c",16),
 ap_uint<128>("0x0c55b2d1c424b53183221d36f5143f2b",16),
 ap_uint<128>("0x810ca24af1183cb1f1df9a0d83eb375c",16),
 ap_uint<128>("0x2fe2cb8a3db901be18b227c585e81c7a",16),
 ap_uint<128>("0x51aa9af662cb98e18b09ce74189c5161",16),
 ap_uint<128>("0xca82b00c914b2b0a655f9a6ac10bd6bd",16),
 ap_uint<128>("0x072f14e7ae9f5daa2d54f9685972d27d",16),
 ap_uint<128>("0x5b768df5e6f21138f0fd30fad91506a3",16),
 ap_uint<128>("0x7a9963407d1159a3772ed7f8fcfaabff",16),
 ap_uint<128>("0xe9add1f42bace8dcab5f49b8465ce525",16),
 ap_uint<128>("0x2c9fc67aa5642316ba5030eb25b2b6ec",16),
 ap_uint<128>("0xb8d926577235bd5c10d58f857a2dd215",16),
 ap_uint<128>("0xe1c12c36c99b7fab4a6dff2c7a728135",16),
 ap_uint<128>("0x0e35ecb559b32baa9c8cb6b4c2ab7e43",16),
 ap_uint<128>("0x52d6f6eb30d5ae745736a322c1fa6041",16),
 ap_uint<128>("0x45077f4813f12bc764347acddeb5cfa6",16),
 ap_uint<128>("0xca8cb84ce921ed0ad0c77ad1326ee8ab",16),
 ap_uint<128>("0x3d3d68dfe822b18a0ea15ff41e3c9f17",16),
 ap_uint<128>("0x5f72b02f0eec1710b5c6082daa317b5f",16),
 ap_uint<128>("0xa19badea8486c306f91937e8ff9be850",16),
 ap_uint<128>("0xee0d89101b20afe63cc5fc4b2fd756cc",16),
 ap_uint<128>("0x707f57cbe2fa4687b6e63861b6bc1a23",16),
 ap_uint<128>("0xef2324fc7eed1b4d5886a8f9ad473a85",16),
 ap_uint<128>("0xda7525dabc8311100d5fe35f406692f8",16),
 ap_uint<128>("0xad11ff9ef6e9bfa9f2f2d8f9bb8b4565",16),
 ap_uint<128>("0x0e6ac4b093aad5999d98a7f4992ef556",16),
 ap_uint<128>("0x61b629264180f4b607f51f5cb0c903ce",16),
 ap_uint<128>("0x1b87a7e27a3a982257f56e5231b912fb",16),
 ap_uint<128>("0xb3c694a9d8489331aa9bf540402e5067",16),
 ap_uint<128>("0x0626e8e881e29689060221a8c384d0bd",16),
 ap_uint<128>("0x36035b957269e1a84d6a08bb73e95dd2",16),
 ap_uint<128>("0x24bf290211786c9dfbee56618a3f05cf",16),
 ap_uint<128>("0x4f4641bfdc579fc696cb1e37f71c15b5",16),
 ap_uint<128>("0x3ea34664bcd8cebee22cbef4d81c8a7b",16),
 ap_uint<128>("0xd9b9f602f240270fb0ce39679a73810f",16),
 ap_uint<128>("0x0a78b1ffc139b3516e8d27d4dad3365c",16),
 ap_uint<128>("0x0f70f46b4e2496835c333695e4b96606",16),
 ap_uint<128>("0x767c1b5f8f8a6000894515ca2db224fe",16),
 ap_uint<128>("0x2a705a051deda3110b7f5fc301efb8bb",16),
 ap_uint<128>("0xc703a5d7dd2e4165724ce125d474a4ac",16),
 ap_uint<128>("0xfd471e42794e6c81566ca9fdf76691a0",16),
 ap_uint<128>("0x4a4c139ed091afe3f1d7ff1246f2d9f4",16),
 ap_uint<128>("0x7be4336756bec4545862dd0260a14e43",16),
 ap_uint<128>("0x1e14f31e918f08387ef27f5e0ab95e92",16),
 ap_uint<128>("0x6a9f5a36291c38ab12ada7e87bd307d5",16),
 ap_uint<128>("0x867e856fc555915989e4066f537a23da",16),
 ap_uint<128>("0xa82f01b7500e4ea72bbf9ef96312f665",16),
 ap_uint<128>("0xf782b3e241435fd3a5c3bfe877060728",16),
 ap_uint<128>("0x49b296a0e723d5e42612fa4065a95a3a",16),
 ap_uint<128>("0xf422d7997115554c0739af95584a82c0",16),
 ap_uint<128>("0x9b8604050cfa5b5847eb1b69f494b894",16),
 ap_uint<128>("0x3e7ca2bcbebb2605847cd7ad41217672",16),
 ap_uint<128>("0xc1f491f0b8eb9cd6a9386d3960d6720d",16),
 ap_uint<128>("0x06cc47144f8074a173081f3805e5cb02",16),
 ap_uint<128>("0xe83d6a857ebbc45478a8e0e1cf53a4de",16),
 ap_uint<128>("0x99c465eea029b3b8addcc7fd57c975e7",16),
 ap_uint<128>("0x74ab5175b6b86c5ee789d77faf474b02",16),
 ap_uint<128>("0x795deea0e9d3cc9ac417b509e0807860",16),
 ap_uint<128>("0xdd3ddfa79c9745f6286666642bea7165",16),
 ap_uint<128>("0x1a769d3f3172b6305f7aabdc035a5126",16),
 ap_uint<128>("0x12682dee1894a01c71a6b3c26b24a595",16),
 ap_uint<128>("0xbccf8e328c21df211ac76c02b849841b",16),
 ap_uint<128>("0x46a63435d3f76045ccfb33c96b94f940",16),
 ap_uint<128>("0x419129b3a72102495c2c03d1aa049676",16),
 ap_uint<128>("0x7d211b9069ffe561b80edcda80803c3e",16),
 ap_uint<128>("0xf8c9f7cd9bba4c168c53e1cb95eb6ad9",16),
 ap_uint<128>("0x7f12a774750fe89076fe771bb4a341dc",16),
 ap_uint<128>("0xc97593296cdd9c563c26eaefb0b50396",16),
 ap_uint<128>("0x2c7bf27ddd9b90f93759d0ba4eba45bb",16),
 ap_uint<128>("0x158674305208bfed94791e615e7369d7",16),
 ap_uint<128>("0xe8b2c23c34daeadab7182e58b730047a",16),
 ap_uint<128>("0x46be712f1df8bcad71caf68454aabf61",16),
 ap_uint<128>("0x8fcb880345ec560d4d2104c34de6e9b4",16),
 ap_uint<128>("0x781447af89c48e89ba09bef957aa4b6c",16),
 ap_uint<128>("0x1ba3697e00a787593896f0e749b433f7",16),
 ap_uint<128>("0x4f7386811c6c7ea2f81c0580a1627822",16),
 ap_uint<128>("0xc49c1ff05228e356f30c8b3e1486289f",16),
 ap_uint<128>("0x5170022146ded1ba2cbb0522397728b0",16),
 ap_uint<128>("0x32b6e8fa1ab53d4103866aa6925a9bf7",16),
 ap_uint<128>("0x30dd115ba2d0487921835894732f9343",16),
 ap_uint<128>("0x7b3cffc4dd80c15b5448b8290a6218b1",16),
 ap_uint<128>("0x1d7f3a2f36a3d1a09fc87764555c3c74",16),
 ap_uint<128>("0x9c0f356d7eeb320dc03b8160c0a0c75b",16),
 ap_uint<128>("0xaf01f0e4a0af0e45c47718497bdfeb1c",16),
 ap_uint<128>("0xd9abd7ac5ab14ed2feccd245740fd6ce",16),
 ap_uint<128>("0x5c6dc763b2ae57994b5e1d80d70c1816",16),
 ap_uint<128>("0xac3cc949810e8d0439001b50c50c782d",16),
 ap_uint<128>("0xb30c650f6e9791fadb291773e05e5c9a",16),
 ap_uint<128>("0x7784f375d014240a029d00d4dfd0bb29",16),
 ap_uint<128>("0x7622e34f4c869d9f9f9579309a5694fd",16),
 ap_uint<128>("0x374640da8f5d59fa574f5e5fd4638dc9",16),
 ap_uint<128>("0xced60a56f368041b538f9a58b8790367",16),
 ap_uint<128>("0x6ee7bf44478c8138babf586226f36fb3",16),
 ap_uint<128>("0xf64cef2535696e2e11b0879d4cc16fc5",16),
 ap_uint<128>("0x18933a7c575a4ae46e9447bc0db4b449",16),
 ap_uint<128>("0x58cea7c720233dde728bfcf86a6350b4",16),
 ap_uint<128>("0x722c28da6f202bdb21dbf15215bd6b56",16),
 ap_uint<128>("0x1387d12d726b9e516a386dceb5ccbeb4",16),
 ap_uint<128>("0xd2c219e8c9d84a1d15f78ba00b42b167",16),
 ap_uint<128>("0x2efe0d6a1a84b010803c47b0e8b1d815",16),
 ap_uint<128>("0x78e60199a33aa90e1bd86cc3b87f27aa",16),
 ap_uint<128>("0x6bdc952ba1440b8735e1d2798e9ea116",16),
 ap_uint<128>("0xbbab1b9ec0aa503f66e7b997a2527e94",16),
 ap_uint<128>("0x95ab10d8c7c2d631812d76c91c2948d2",16),
 ap_uint<128>("0xa8dad03f4a936182c8386bd5cf874232",16),
 ap_uint<128>("0x8c66ec94d710c702bfb551f1930633ce",16),
 ap_uint<128>("0x14884c978fa99201fb3820c26038db93",16),
 ap_uint<128>("0x77de6620fc77928aee2c8d33ea7f4e7f",16),
 ap_uint<128>("0xd4e42d1de7441e937f8d17e657e5bcf3",16),
 ap_uint<128>("0xcf3865444400923302ab211eaff64b98",16),
 ap_uint<128>("0xd97e8278454b705fe27188177fb09c45",16),
 ap_uint<128>("0x718336bb7184ef0f77c04b2bdb9625ac",16),
 ap_uint<128>("0xe931b50a9c9d80c20b901cca3c2571db",16),
 ap_uint<128>("0x2e9d31807a75eb94eb1a4d58bb230108",16),
 ap_uint<128>("0x8e731858967dbbc17e1bfd70c7f1d72e",16),
 ap_uint<128>("0x72697c812ebc65ab8af22f46488882b9",16),
 ap_uint<128>("0x9ad42292af8efcac872f02f244ca8fde",16),
 ap_uint<128>("0x5bef88226c4969692c8da146b1369ee1",16),
 ap_uint<128>("0x2b2254ced97920c88f99185fa19d84dc",16),
 ap_uint<128>("0x7d17787ccc91fb654b9553e1fa149735",16),
 ap_uint<128>("0x1ee657d77802fc856fff9a4681e24ed5",16),
 ap_uint<128>("0x4cf9e3cb80aedfcc25d415ef06db70f8",16),
 ap_uint<128>("0xcb483e2d0cfe535368907a78e7181002",16),
 ap_uint<128>("0x88166c51a0db6e164599336b9c1db10f",16),
 ap_uint<128>("0x508ba9e9c707cc78aec0d2b1c11d3012",16),
 ap_uint<128>("0x6660310e463dcd5e0dbd32022807cce0",16),
 ap_uint<128>("0x230b87a4a58e8bc85a6d708b1c1824ab",16),
 ap_uint<128>("0x288f7973bdcc12a62295f54b24848838",16),
 ap_uint<128>("0x1664f24c111e316b7f34f83ffbec90d8",16),
 ap_uint<128>("0xf79a8796c96dd5472825e1465728ea31",16),
 ap_uint<128>("0x1bfeb95df0ae5b75e20ed3d050602981",16),
 ap_uint<128>("0x15de71b0bf6b765de0aa5c54a0e32972",16),
 ap_uint<128>("0x324768d220c29ac6dd8d023dbf620319",16),
 ap_uint<128>("0xb08a908fcd914b8a93a9f70bb01e86d8",16),
 ap_uint<128>("0x2e1946c7503b97e9e620b88d4e6829b8",16),
 ap_uint<128>("0xfdfd7558481f850f7d542d34b81cb41b",16),
 ap_uint<128>("0xc42ffe662e324669a5f0921ebb4fb4ed",16),
 ap_uint<128>("0x45619b90237118ac22fecae4d8679761",16),
 ap_uint<128>("0x87e3e97c8c918293412f1cda229707f5",16),
 ap_uint<128>("0xed3a3b9c7ad4117b27a4ba56ac02dc9e",16),
 ap_uint<128>("0xfce80a2843acd18fef62238968d5c3fd",16),
 ap_uint<128>("0x025bb41f6d5dc415fc807ef5a9f784aa",16),
 ap_uint<128>("0x96a09066ea7e8d5d1b30848326b059ea",16),
 ap_uint<128>("0xf8a0b512d8ced0e17584e9666a875685",16),
 ap_uint<128>("0x973f1095c366a365617587fe0bb16eb0",16),
 ap_uint<128>("0xf74503edd447f826cbbbfbad907ab4e6",16),
 ap_uint<128>("0x9a2d15303bde47e43bd4f7e8e1e3460c",16),
 ap_uint<128>("0x126cc0cd35637de50b9bcc33dbd34b7c",16),
 ap_uint<128>("0x04afe4bfb80d942958235b739f9d3321",16),
 ap_uint<128>("0x9d3bf208b58fb1357d4b9a669590135d",16),
 ap_uint<128>("0x0420a4a4a03de68e2af3af2aa6717060",16),
 ap_uint<128>("0x11bb801f2f5f9729c2eee218f71a3dac",16),
 ap_uint<128>("0x69e9d448cc4a95dd23b7aed8a78209d0",16),
 ap_uint<128>("0xe991a8453eb4db5a7a5b1eec57276598",16),
 ap_uint<128>("0x35e8e1976170b1ed9634ea45c24af20a",16),
 ap_uint<128>("0x7e2a9a58f70f447d95b95acead2e3a50",16),
 ap_uint<128>("0x559ed4c2abe83b3f8fa7e0c537409b62",16),
 ap_uint<128>("0x93509936cd41db39addb9164649981cf",16),
 ap_uint<128>("0x1bd6955f479291f99f60d358c64cb038",16),
 ap_uint<128>("0x05969f7e0014df299aec3b3f97ece473",16),
 ap_uint<128>("0x122151176ef4b3fa5cf90a2955c78996",16),
 ap_uint<128>("0xf8ef6eb8df18c67bf17e7af128996f27",16),
 ap_uint<128>("0xa6c1f815ec9fe533529fc06e5b096e7f",16),
 ap_uint<128>("0xa3261093b6b1a831af82f7850b020087",16),
 ap_uint<128>("0x1df3317722afed5743358e746170b4cf",16),
 ap_uint<128>("0x718e2df8f6a46e161c89ccc9206b3afd",16),
 ap_uint<128>("0x965dd6482da954c228aa041a090201cb",16),
 ap_uint<128>("0x7c63575dba83e6542e05e91a25fe01ec",16),
 ap_uint<128>("0x15778032a8119c7aa116a499bf4b5928",16),
 ap_uint<128>("0xec1b10109bac2f055a5cfbf84ed28c08",16),
 ap_uint<128>("0xae899fbc30e6c2feb249cb5f595050a9",16),
 ap_uint<128>("0x554f7f34133105de47764528df4854d5",16),
 ap_uint<128>("0x6a74388833553772cb8bf62ff7782568",16),
 ap_uint<128>("0xeea9273fe5590c632cbb4f5ca56ad6d9",16),
 ap_uint<128>("0x6513f24257379b302e7b39eb92d2cb54",16),
 ap_uint<128>("0x88446558f3c956b6be08b3d1af327190",16),
 ap_uint<128>("0x7435ff90b22fe5ee2fbbc55856bcaa97",16),
 ap_uint<128>("0xaa429e61c2dc82555be53e66adf3015a",16),
 ap_uint<128>("0xd4136962bb11b59e5d422b949f981246",16),
 ap_uint<128>("0x926e15106274061bd21fd607c4d1c3e6",16),
 ap_uint<128>("0xdf611a87605b555d503f9eaaf07a317c",16),
 ap_uint<128>("0x9e76f95e384b5425287d209394d8098c",16),
 ap_uint<128>("0x1b83f8caa9d9aaf659c6f6d1918e8ea1",16),
 ap_uint<128>("0xb448643a836da1ee154e6722dc373ab2",16),
 ap_uint<128>("0x3b056f214e34b1722043b8eba1baa26c",16),
 ap_uint<128>("0x493c6884e41bfc836a72e248493ee61a",16),
 ap_uint<128>("0xc0ac8a88d2695ecfbb4d911984e50d49",16),
 ap_uint<128>("0x173a0bb9d6d393304d811c1c851ef8ee",16),
 ap_uint<128>("0x263d8a1053050a9e38a71e228ed87012",16),
 ap_uint<128>("0x22d1ca2b675508e101d98366c5ed1c4d",16),
 ap_uint<128>("0x13cc9cd238866c0658157db93586add1",16),
 ap_uint<128>("0x7368f41f1aaf6174b3798e8ce90f92eb",16),
 ap_uint<128>("0xebde8dab636cdc71d4852e941ccd8081",16),
 ap_uint<128>("0xd2de28859a34f2490a34e7751a809cba",16),
 ap_uint<128>("0xf501d561eed6a6749aa52bfd3bfd3d6b",16),
 ap_uint<128>("0x6445e4644885f5440f442218fd3bb334",16),
 ap_uint<128>("0xd4839b57a52b2a38ef1bb0b32ef34f8e",16),
 ap_uint<128>("0x9c22498babd3379aa175712594bf84f1",16),
 ap_uint<128>("0x8c36904e9e524d1ac1062317206bd423",16),
 ap_uint<128>("0x28a36938ef01591344b701d05ab26c8a",16),
 ap_uint<128>("0xcd5aebc7d9206c9efce0efb1795fa5a0",16),
 ap_uint<128>("0x2602b13cb12886906949295de021bbd6",16),
 ap_uint<128>("0x9e48f4aa99246df1e9ec5e870e6bdbb6",16),
 ap_uint<128>("0xa593449295991c5a67b6a02b65fa39ee",16),
 ap_uint<128>("0x067be26ce385f3dc0b4c68bea9c3148e",16),
 ap_uint<128>("0xe4698322794534cbc36c0d45379ac7ab",16),
 ap_uint<128>("0x8432d2a13d561b07b8bbb61fcf60e03d",16),
 ap_uint<128>("0xbac52f1d6c0eef12361647acdf9b74fd",16),
 ap_uint<128>("0x775df814e5e60f827b5c089d9f8fbedc",16),
 ap_uint<128>("0xb8873e28c67dab2b2545ada8694f9d6f",16),
 ap_uint<128>("0xcad7337b50321a186a822def0275065e",16),
 ap_uint<128>("0x6e16a70bf3ce9dbac079726c00980a81",16),
 ap_uint<128>("0x3db4db14dc37c17b2265b70d2bb33327",16),
 ap_uint<128>("0x81d58b09e5f88e8f4fcb26dfe3910ad5",16),
 ap_uint<128>("0x7d9491d2915066afea64a8a6809c1b7d",16),
 ap_uint<128>("0x6a965af53e389a3722ba75d88a3bb53f",16),
 ap_uint<128>("0x46c826e9922075fa3114842b16e48144",16),
 ap_uint<128>("0x34c285acf9ea35d717b4870d55b41819",16),
 ap_uint<128>("0x803e495e450cf97dc1a2b6693a506d41",16),
 ap_uint<128>("0x3c67703dfae1c8861be480212e1dbe38",16),
 ap_uint<128>("0x6f5ec0769936066a41edf039b20f3ef4",16),
 ap_uint<128>("0x762c8232244d055de9ba2ba3f86c8e5b",16),
 ap_uint<128>("0x67b13dd7f07ee2a5236a216be0ae3c78",16),
 ap_uint<128>("0xdbb1e99458f1eca812ea4f28180ac199",16),
 ap_uint<128>("0xca88811e9b9d44288edb635ddfa7a2a9",16),
 ap_uint<128>("0x760284f5b9a2c74930caf44652480520",16),
 ap_uint<128>("0x8780dc54d834adcc18130355a16fd2f4",16),
 ap_uint<128>("0x60f931f224d3a19e06fdd535279a1db5",16),
 ap_uint<128>("0xb8b4b79fe6b3aa400badd38e83d53ad4",16),
 ap_uint<128>("0x7ede2e3ea3a48e1358a9d60c339c0e4a",16),
 ap_uint<128>("0xd9c3fcdc1963860563141a15aebee71e",16),
 ap_uint<128>("0x8f8883f8e15e303bf7d13f92fd2d9f81",16),
 ap_uint<128>("0x3478abdd18e27d82fdb5874c00a61958",16),
 ap_uint<128>("0x01d9e83388201a49ce3776e1d5648564",16),
 ap_uint<128>("0x7da93853f304c2a2325ae9d3f272d647",16),
 ap_uint<128>("0xe53bd91d58e6674fc27dfa7aae3d39a7",16),
 ap_uint<128>("0xbb8288cee358e0d3310184c271db549c",16),
 ap_uint<128>("0x794d20ef61fb220161e103f38735325a",16),
 ap_uint<128>("0xf1421f6ed91a749da13b44d82b696c99",16),
 ap_uint<128>("0xca3bdb2db3fbeeab1a91f1cd3948a3b5",16),
 ap_uint<128>("0x0d78698f19fbc59b7113880e0452ef35",16),
 ap_uint<128>("0x7c0139910142f24028787e6c0ad25bb5",16),
 ap_uint<128>("0xb9ebdebe6214196769bfeb2a3afd03ce",16),
 ap_uint<128>("0x5a954354e0efb3347194a99e97ec0263",16),
 ap_uint<128>("0xe017eea766cd60513f43a9db8108ccea",16),
 ap_uint<128>("0x411a727edb07db7224506ca736fc70ce",16),
 ap_uint<128>("0x986355d9b33210048cebd4c5d3b9f724",16),
 ap_uint<128>("0x2104f6ccab3d534c42c3b1f713402848",16),
 ap_uint<128>("0xe1a19f7f3c43ea0fbd1b87eb87600aab",16),
 ap_uint<128>("0x45010a15077e10057c05b738c98089a2",16),
 ap_uint<128>("0x832c219fdf7800ec3f437c3f2bc5b7b8",16),
 ap_uint<128>("0x71f66f462422a1155fbc8d8269c78c85",16),
 ap_uint<128>("0xabdea8ee76101535b8c693ccc7d8edfd",16),
 ap_uint<128>("0x20ba32a072e90a504516417382f1c06e",16),
 ap_uint<128>("0x0ca938e76db61720d04d53e8adea0a7d",16),
 ap_uint<128>("0x6567d12b8a67a2178278b50ae014b002",16),
 ap_uint<128>("0xfa866f5641fb5fc9cefa7f6262eb44d0",16),
 ap_uint<128>("0x1f640147e1bd03d4ec82f53e99ef36a4",16),
 ap_uint<128>("0x0cbb286fa6d51b99720306055a90f0ce",16),
 ap_uint<128>("0x6ef2e10ab33c73fa370c3acb90d65830",16),
 ap_uint<128>("0x2786bde81467d0ea7f03f326119c69d7",16),
 ap_uint<128>("0xe6a66f29647bbd13187cac8a91548b5b",16),
 ap_uint<128>("0x9a5f63c8f2f5e87e3be685a285ee26fb",16),
 ap_uint<128>("0xb90a52bb4784595e29c0dc9427857b14",16),
 ap_uint<128>("0x4bfab91f4a50017ed93c4147a2efb256",16),
 ap_uint<128>("0x210d11fa3858947cfd2dd9385e1947c1",16),
 ap_uint<128>("0xcb575bd2d4a1e1ae6f7d649a80771ed1",16),
 ap_uint<128>("0x216b7bc8fd7a9b8ecfc802e997f1f61e",16),
 ap_uint<128>("0xc5cbf5a5566e1af140dab002522cc5b7",16),
 ap_uint<128>("0x351009b97c411cdf43b52bdcbce181b5",16),
 ap_uint<128>("0xab7bd52518744c5d97e99fd0be675df5",16),
 ap_uint<128>("0x19966e722f9d8a73a2641c6e272946b8",16),
 ap_uint<128>("0x834d095472361f62a299de45e1eea4c1",16),
 ap_uint<128>("0xf5cf74e2dcdbdc65ccdb4dfa8aa6df64",16),
 ap_uint<128>("0xcb4b600cd38b9f9ff9b2b784e93c8f0f",16),
 ap_uint<128>("0x1a609af53568d2829ed2442f82672c25",16),
 ap_uint<128>("0xb58b1609c1da0fd56b134b2e52d567ed",16),
 ap_uint<128>("0xd1c3757959156a70a18d975d5d864a60",16),
 ap_uint<128>("0xed086b9557dcbe1a49d7a0d11083705f",16),
 ap_uint<128>("0x403b282394c9e3a895b863b5f63101f2",16),
 ap_uint<128>("0xb85eb95eb21ce0f5b5247a6ed3dc9018",16),
 ap_uint<128>("0x6f03fa23a112464a290c41aeb9b50d59",16),
 ap_uint<128>("0x889e1d77bc931b25a3d7116fd90bef04",16),
 ap_uint<128>("0x213f9cba20e916cc6e8d0429b4d9251e",16),
 ap_uint<128>("0xd6ffd261559756493fe11792cbb8a1e1",16),
 ap_uint<128>("0xd993e2e1d65f0e2bc5c2cdd35c63c334",16),
 ap_uint<128>("0xa68283089a445b972c7d6e4b541fa320",16),
 ap_uint<128>("0x9a0c50b3849475382eacfa3a43e9c151",16),
 ap_uint<128>("0x38ddda8771c39ac2e2dcf35395598027",16),
 ap_uint<128>("0x7a563729624840a8b9afc5e749d3a79e",16),
 ap_uint<128>("0x531ca61954da45c5bca194310766bd51",16),
 ap_uint<128>("0x3bfcafb1e5ef98d4822c625f171226f3",16),
 ap_uint<128>("0x184645ebc017d3c05110d648dd73e917",16),
 ap_uint<128>("0x49c8b3613de23ed6e97df267592632c6",16),
 ap_uint<128>("0x1be43a64b89ed52c0d1c34f6ddd3308a",16),
 ap_uint<128>("0x967d211c45003aae7a34c99ea6a827bf",16),
 ap_uint<128>("0xb624aa358f29922e9af131222199a242",16),
 ap_uint<128>("0x3dec1c535675307d9d723e0e5052f30b",16),
 ap_uint<128>("0xdae5b1b99eb2b3d473671cf71ac29a30",16),
 ap_uint<128>("0xdd65ff0c5fdfa26b469746e4574543c3",16),
 ap_uint<128>("0xd4a82839349fdf040f1fb589dad5eadd",16),
 ap_uint<128>("0x719c5f34bbc42e5b860caeae313de166",16),
 ap_uint<128>("0x0e20d18c4e47bc49ace32c6b74ae4c8d",16),
 ap_uint<128>("0x7b27fa5fbf306319ca2d0db9f51b1841",16),
 ap_uint<128>("0xb40965a8ce25f0d76896e1130aa0926c",16),
 ap_uint<128>("0xd2dc4a719e267fd0536939d60462e593",16),
 ap_uint<128>("0x1900815ac2d3c90d469bf3727d9a8248",16),
 ap_uint<128>("0x2f9f1bf8561dd81856bece345790614b",16),
 ap_uint<128>("0x3c3f8bfd5751da11b3bb4729a20fe422",16),
 ap_uint<128>("0xed82b096f5532fd97c75cf8f529ee09f",16),
 ap_uint<128>("0x1812aff9be82283469d862a19d271584",16),
 ap_uint<128>("0xe4e5454deadcb3f66bba380323d33bd9",16),
 ap_uint<128>("0x65810e6a16954105265d73e6bf211768",16),
 ap_uint<128>("0xdaddd311c8e4ca8bfafccf4918f5db22",16),
 ap_uint<128>("0x986f2e905787a128fc66e584ca9faf4b",16),
 ap_uint<128>("0x9094ca7d0f8817ec0d6d5651f9fdd96b",16),
 ap_uint<128>("0xbd6139789638cb66e34c10f061a4592e",16),
 ap_uint<128>("0x1040471545d45a25a3bf51ebf3eb9c51",16),
 ap_uint<128>("0x7425a977abd3dd8f7f23d9c5c0f29faf",16),
 ap_uint<128>("0x791ebdad225754e3377784257214c6a4",16),
 ap_uint<128>("0x1a8423cf1b31abf4ab8d63c14c1f2945",16),
 ap_uint<128>("0x3ad868cc07adcd1d57421c29b38a0c3d",16),
 ap_uint<128>("0x29bcf34e92be394de2e33b2b32e67244",16),
 ap_uint<128>("0x74576a5317dc9bebef30f892851d6435",16),
 ap_uint<128>("0x1afb71eed3b87ec5c806b158571722ea",16),
 ap_uint<128>("0x400a89826f3a175ac83788e6a0ee7237",16),
 ap_uint<128>("0x976fe87fd931df399c35c1578b15e60e",16),
 ap_uint<128>("0xfdb6db0cabafc7a64dcc9f437b856188",16),
 ap_uint<128>("0xb24fe828d72fb4dc1ef8d7c1c55ffac1",16),
 ap_uint<128>("0x1742e473bc01e34614fa3129f114e5d9",16),
 ap_uint<128>("0x22b82fb4509cc3aedb300e10dca7bbc9",16),
 ap_uint<128>("0xf7f45ca57948a7b64643d05fc6adfde1",16),
 ap_uint<128>("0xa716a33cb3e2d41faf26dcb16529c279",16),
 ap_uint<128>("0x878b0de5e4996e6187a572fd52867ca7",16),
 ap_uint<128>("0x54262c0d100f9c0ad6d9573ca5433736",16),
 ap_uint<128>("0x9b6e4abae6fc3b55421e4059a6cf5818",16),
 ap_uint<128>("0x0dcd97abad118b435ef99adb5e60cb75",16),
 ap_uint<128>("0xf26ae2f6b362151977fef6f3f09e2b48",16),
 ap_uint<128>("0xcb79587c261526f29a3f7f21b3f1ed78",16),
 ap_uint<128>("0x1f49649a9bfc991c4a524f21bcdea8f6",16),
 ap_uint<128>("0x7b3f77b7ebf6b9f17f5347b3d9b957ce",16),
 ap_uint<128>("0xee4ae4a9a6debbeec6a1a340c112ad10",16),
 ap_uint<128>("0xff97f3f369be957906051636d8f50469",16),
 ap_uint<128>("0xda346d6e1e6e328276e385abfd1d20c8",16),
 ap_uint<128>("0x87697e93995dcee67f28df63a317a6a3",16),
 ap_uint<128>("0xa9f66b3fa0a8ac396ad1f1e1d2342e06",16),
 ap_uint<128>("0x76e755426561ff9f31453d30082bcd2a",16),
 ap_uint<128>("0xd405ccdd52b0089a620e24770be1a60a",16),
 ap_uint<128>("0x31a0fd1ceba849ff9896964ffdfd41f4",16),
 ap_uint<128>("0xc42804e027c6e9beb8178b3367eae41e",16),
 ap_uint<128>("0x7a8dfa99a1d8b79f501343f2a103561b",16),
 ap_uint<128>("0xe2b3836e6666d6ed8443eb09fb1c6dc7",16),
 ap_uint<128>("0xa2034cbcb99f875682ee063f97c29f37",16),
 ap_uint<128>("0x5d083214599daf5831ed8aae4e0fa496",16),
 ap_uint<128>("0xe33744e76c37ed5003555e15d32dd0ac",16),
 ap_uint<128>("0x732fd6913b8eded1636653e2477d7a78",16),
 ap_uint<128>("0x0b9c3abb99c0222ae25f2942e24e0329",16),
 ap_uint<128>("0xf3f92d805d6b478a92cecd376a85170f",16),
 ap_uint<128>("0xfbafdd5c0456d8da75c3ddfc19ec6ea7",16),
 ap_uint<128>("0x0739d9d1a67a46016778d7bae9f91bd2",16),
 ap_uint<128>("0x391426d70d0d54800bc005a101c5c73b",16),
 ap_uint<128>("0x14f4f7b0ce9abbdbfe4e6c377b61ac6a",16),
 ap_uint<128>("0x7519c1d0baa06ff9ac7dbcafe35488b6",16),
 ap_uint<128>("0x10ef63f62f334feea048bdf378ef473a",16),
 ap_uint<128>("0xc2d23af93c95270e81e81f26949dee1f",16),
 ap_uint<128>("0xa23fe4e663cda28db36a60c16c7943a1",16),
 ap_uint<128>("0x6f936ee7623f916a3f39277fb1a8da5e",16),
 ap_uint<128>("0x6ff104bf4af139f78cf41957ddab1b0a",16),
 ap_uint<128>("0xa51c09968a60238d9738173d2be4b8a1",16),
 ap_uint<128>("0x5b9ee57b64a4d5ee2fe305a57b47dff0",16),
 ap_uint<128>("0x3d894cf9a4d0897b09c2f9aa4bb67549",16),
 ap_uint<128>("0xf8eddd14c3fb4d69b264bdd0023a2d4b",16),
 ap_uint<128>("0x507455d69533a9fb5c6d720b598a149d",16),
 ap_uint<128>("0x2bc79cc1bbe3d498b8b08876d6579976",16),
 ap_uint<128>("0x04bf90d2293f78e1ae21bd9f00f09465",16),
 ap_uint<128>("0xda8c4ae9095f910924b9fb82d09c13df",16),
 ap_uint<128>("0x0aee83a8813e8603af29157ea616647e",16),
 ap_uint<128>("0x81592af8fbbfcbb237d276980d467c9e",16),
 ap_uint<128>("0xf42ec75c4f549bf4ed3697a56546b3bb",16),
 ap_uint<128>("0xd5475f3aafb00d87cc4fcc93beb971fc",16),
 ap_uint<128>("0x556ceb11e452381b50081e3f19cc5bd9",16),
 ap_uint<128>("0x2fd4c279196852821371de035a36feef",16),
 ap_uint<128>("0xa348b0e579aa26daa4310fa9ac94d1af",16),
 ap_uint<128>("0xfaa96e86ad00d381302e1d8f435af4e1",16),
 ap_uint<128>("0x3205f8ffd158392368e2a3a345e775f7",16),
 ap_uint<128>("0xe6cfdf5fe2ea7122d126f17ab0d09596",16),
 ap_uint<128>("0x85a32d0f0144cbbe0e7a249287309aaa",16),
 ap_uint<128>("0xfbb73c037e16b28b49f92c3abe8d041d",16),
 ap_uint<128>("0xd9901aa2b20e81dd3ea6a0ba64e9a821",16),
 ap_uint<128>("0x6cd25fe5e78fdb43daff03763366fe51",16),
 ap_uint<128>("0x445859f561ade88939c716e10f0b34a9",16),
 ap_uint<128>("0xbb1f7acce6b85ad0b280d27dd730766e",16),
 ap_uint<128>("0x218d189eae2960eaa4a0fc7e0a14bdc1",16),
 ap_uint<128>("0xca064891b9f6fc1fdd7fe062994a181f",16),
 ap_uint<128>("0x8f7bf76d8614c5c362035770f93302b5",16),
 ap_uint<128>("0xe9ff9c6e1f95ecbe28daa0c491228a67",16),
 ap_uint<128>("0x021496f9abf5a1db67f60b65f8b37973",16),
 ap_uint<128>("0xc500b41982f7085ecfc10796341b28ff",16),
 ap_uint<128>("0x860c81c87f6a1d6cacd790bffe441a02",16),
 ap_uint<128>("0x39c8819ec0154c4115ac75bcff246c18",16),
 ap_uint<128>("0xf7267bcef8dd124e286a2cc16877e6dd",16),
 ap_uint<128>("0xd506c5df89dfb8765cb0997b341a24a2",16),
 ap_uint<128>("0x7d26f3c9eecffecf55a4ed9c3a529590",16),
 ap_uint<128>("0xe4df91e78d4f82fd9ce28197cb7f1a6a",16),
 ap_uint<128>("0x5692bd43677579ad1ba16f3080083196",16),
 ap_uint<128>("0x114fdc0f00bf12710eb4ce4e9f168ea0",16),
 ap_uint<128>("0x402b0f46c6734f548a60caefd2d2f8bb",16),
 ap_uint<128>("0x97e61b0b7929eea4b2f64a4de4436711",16),
 ap_uint<128>("0x14b7023126c0c8d6e4ba7f45ea3915af",16),
 ap_uint<128>("0x39822b6819f2934bc481d5fc1188520b",16),
 ap_uint<128>("0x69875dc61a68530604954d58241b6279",16),
 ap_uint<128>("0x2a9a06a0fa415a41cdf5f2de7c4fc0fa",16),
 ap_uint<128>("0x6412fb35f387936eee90f72d62ac43d4",16),
 ap_uint<128>("0x07c02587ad46dafe9b2338aa1925651c",16),
 ap_uint<128>("0xfceed5cf1b5c5034f2f8fb8b3fdfeeed",16),
 ap_uint<128>("0x534d51ff70f0898ef2fafbddd538f9fe",16),
 ap_uint<128>("0xfdbca0bba7fa8752547bbf7f70fe8c58",16),
 ap_uint<128>("0x1b8351d83bb302f4987fe3ba81fb8391",16),
 ap_uint<128>("0x2d509c96e8217925c3d90e67043df3ce",16),
 ap_uint<128>("0x1968526de315a2496d26194efce608a1",16),
 ap_uint<128>("0xd302fedbc28f3a81b4033cdebcd82c15",16),
 ap_uint<128>("0xf7e26d38e23bc5a017ffb78da0eec383",16),
 ap_uint<128>("0x4c98bd4e4a00252d345e7b547667b78d",16),
 ap_uint<128>("0xbed18cabe0d632aa99ac707a78a05a35",16),
 ap_uint<128>("0x7565fb0042145b6068437c8d669daa7f",16),
 ap_uint<128>("0x771b3018bb0c077025e583f7680f17a9",16),
 ap_uint<128>("0xd89773f78155059603a654f1c71fba25",16),
 ap_uint<128>("0xae4847c105121aba71a085844fc905c3",16),
 ap_uint<128>("0x8e035c7f4f9e844a096257fae96b88cb",16),
 ap_uint<128>("0x7993fbc1784367cd4228ba16372d3b31",16),
 ap_uint<128>("0x6ce4499ca945b36fbf02c5d7308be19b",16),
 ap_uint<128>("0x7c1f68c40846ee0ce0db0666e7448e7c",16),
 ap_uint<128>("0x62e8d2615c0bff77850f3a228a3fd6a9",16),
 ap_uint<128>("0xe743d5ea3744365a700c596761236d03",16),
 ap_uint<128>("0xf410b3ee3eba47e917149d09f3fb5074",16),
 ap_uint<128>("0xc455882b2a86b51a752a847a4cb13dd7",16),
 ap_uint<128>("0xe6a814834b7d57da27d2858d681dae3e",16),
 ap_uint<128>("0x3f61af5ede02d35ca503873df5838861",16),
 ap_uint<128>("0x199eb5e76f92ca4a7631f33df5243548",16),
 ap_uint<128>("0x1e56ae41cde5af98de6b0d6ab5e87a32",16),
 ap_uint<128>("0x141bcb706402b3d71aef13ea21b2e188",16),
 ap_uint<128>("0x82e96cf98ce13dd82f8ec615e8139ccc",16),
 ap_uint<128>("0x04bafa4c0822842b48690637a4e83848",16),
 ap_uint<128>("0x1782e20c8e99f32f48ec86a73b9a9c18",16),
 ap_uint<128>("0x044d92c57f3a4d346dfd94c8f2ccc8b3",16),
 ap_uint<128>("0xbde0f5743152ec9da48a82b42e7f97cc",16),
 ap_uint<128>("0x77c66a110030fe28e21069bcf8639aeb",16),
 ap_uint<128>("0x458bf5ccaf4a68e58b6614885fa56df4",16),
 ap_uint<128>("0x23e980f68f1672cd2b7845befe78d256",16),
 ap_uint<128>("0x6d3d86e3296e889bb23133f7f274687a",16),
 ap_uint<128>("0xb49e50d4163f540ead9fb6efaf11a0f3",16),
 ap_uint<128>("0xc32199cca40ae5b6b97ca3241ae609a7",16),
 ap_uint<128>("0x45eda6bcd912a298dd4f7d9354c956e8",16),
 ap_uint<128>("0xdfc157913327376df0ac0afc62bf8355",16),
 ap_uint<128>("0xb5b5dcf064e0540d341ebf95e826ba17",16),
 ap_uint<128>("0xe16a0a855a00bfa2e006bb19b3b81000",16),
 ap_uint<128>("0xeb372f02b235a302ccef7446a48d41d3",16),
 ap_uint<128>("0x6c2f1eaecace2d61b376dbdb9399bef9",16),
 ap_uint<128>("0xffb65b19aa5900351225cd155249fe62",16),
 ap_uint<128>("0xf4bfd5927662bcecece5723340fb1c89",16),
 ap_uint<128>("0x5312b19addd8f0eb3f8b852d730d3e70",16),
 ap_uint<128>("0x09c3a515492f28620dc069dc288122cb",16),
 ap_uint<128>("0x9fd4d91428be89c15233e15c714b9e39",16),
 ap_uint<128>("0x380a3de074876fbec9a925a732e8edc7",16),
 ap_uint<128>("0xba6d275f01bbf13bf3bed2473d1c25df",16),
 ap_uint<128>("0x3c6589f1ea5043e720c769dbeaea6d50",16),
 ap_uint<128>("0x881cb76d6c7500d77a3d2c315754fd3f",16),
 ap_uint<128>("0xdd21e7c7a5abefd7b46c56021b2e7d5e",16),
 ap_uint<128>("0x42794623633d6ae9c5c4742045aba23a",16),
 ap_uint<128>("0x016df7ff3364e9abcbc84f63655d76b3",16),
 ap_uint<128>("0xe2071d496b1ea9e4f081434ad42cc14c",16),
 ap_uint<128>("0x116cdc7db230d0ae000ba2dac03cd758",16),
 ap_uint<128>("0x891144de5e026665359e27ae685eae7e",16),
 ap_uint<128>("0xb4082133faab0977ee33e8a325b22b2a",16),
 ap_uint<128>("0xd5fde8db32552c88dbb6f7cfa3805061",16),
 ap_uint<128>("0xbd3a2d39ecf47ffe448b1cc5d55f27b1",16),
 ap_uint<128>("0xe2ed34d6a28c94e18ae8b8c4b0f89579",16),
 ap_uint<128>("0xae6d225d2dc9d0843a7b8179090de92f",16),
 ap_uint<128>("0x0cac603c03169f68916a0faafe0f20ec",16),
 ap_uint<128>("0x0fc4c6060fed293df8efe5340123a597",16),
 ap_uint<128>("0x8aa25ea1f15560e85d6890b8cfcdc2dc",16),
 ap_uint<128>("0x209d76d8155cbc68f9615b71977249e2",16),
 ap_uint<128>("0x2f00d44716d05bd1741108e5c977ae00",16),
 ap_uint<128>("0x6dce6887745d0eb441823a42757ebffe",16),
 ap_uint<128>("0x49eade32315ecd10ca428f7f9cfeb762",16),
 ap_uint<128>("0xd1752aa80718b50605ed75ee62363cc9",16),
 ap_uint<128>("0xc2b7f83837313198cf93c7a59a5b479d",16),
 ap_uint<128>("0x01e727a820ed4a515f0c9ae62a806ffb",16),
 ap_uint<128>("0x535d4d1b3f06cb70ffdd463f0a49090c",16),
 ap_uint<128>("0x441f6aa19af3c2864f3726b347609a44",16),
 ap_uint<128>("0x2e6157126df478cbbe29d9c3fc707b1c",16),
 ap_uint<128>("0xf2f5fd726729b5fb1d995eaf2d7dc0d4",16),
 ap_uint<128>("0xf99fd481cf55578a166d440956137321",16),
 ap_uint<128>("0x0e2ea7f0b1cd42dc7ad846d79b29b22c",16),
 ap_uint<128>("0xeac6b9f48f95e0a15e5125d309fcc900",16),
 ap_uint<128>("0x7d859c7f37e7dd70793054147751a584",16),
 ap_uint<128>("0x6b6c5ff8ffd75c6af0e638195d40be66",16),
 ap_uint<128>("0x733be2dd80005b04c70fefbfe4620c92",16),
 ap_uint<128>("0x94d49d862526c65a1420ab3f808429a8",16),
 ap_uint<128>("0x6782d460c1a1b1dd11f1c5b27479796d",16),
 ap_uint<128>("0xdfaa66a20b12c929491409a74bda2a3d",16),
 ap_uint<128>("0xa99be3fc66fde9ba0f5646d929b49ae9",16),
 ap_uint<128>("0x0ffa366fe472fdf6202c791c59b284f9",16),
 ap_uint<128>("0xf4734f7ce9207d029ca77b376b1f0f1e",16),
 ap_uint<128>("0x59279d90892a5d281a1454506149901c",16),
 ap_uint<128>("0xb61bfc794e1734491f6198dbfa7e91aa",16),
 ap_uint<128>("0xbe05a8ec836059fa94946baf2c9130e1",16),
 ap_uint<128>("0x4c9f2feec8e1008fe1419dc4b8f85852",16),
 ap_uint<128>("0x22e0f0ecf36d720c2e129410de7d5796",16),
 ap_uint<128>("0xab7a784130669053d5b103981850edc9",16),
 ap_uint<128>("0x1e25eb275f8ca3559e9bfb3495ce2924",16),
 ap_uint<128>("0xb2de63a71a446cba94fac823af957ec6",16),
 ap_uint<128>("0x1f80f27016dab948566703b7b71307e3",16),
 ap_uint<128>("0x19fd6020560262fd8cdbadfc1301aed0",16),
 ap_uint<128>("0x9c21e6bc6f5a2c650ffbc0b6aa42e80d",16),
 ap_uint<128>("0x5483be914cf71ff7e550c2369bab8104",16),
 ap_uint<128>("0x96b55e0f88593b54a5036a357ea9290e",16),
 ap_uint<128>("0x4d4cf7e97cd2e36ae54e9f0f936bfc53",16),
 ap_uint<128>("0x284290b46c11e7fba28db5ccc85959ad",16),
 ap_uint<128>("0x6f698f0c7439d7af3c9ed71f8fdad7d3",16),
 ap_uint<128>("0xe5c6dd55d1ea8a78972de91936dcd535",16),
 ap_uint<128>("0x07151a7986c81190db46345d7e3ec0aa",16),
 ap_uint<128>("0x4abb2d89eb78d4aef42cc9e29a62191e",16),
 ap_uint<128>("0xda4ab52f7e001b651eb9295813eaef10",16),
 ap_uint<128>("0xe7437c14a614c407cf81b342be1bc595",16),
 ap_uint<128>("0xda7f8a2c03458c3f0412529c41d0bdff",16),
 ap_uint<128>("0xd8295d6bebe2035513f0bf68bb0095f4",16),
 ap_uint<128>("0x76a59b7e07e7a21e7de1e3499ac61a71",16),
 ap_uint<128>("0x35d014dfd874b578f959da90906479aa",16),
 ap_uint<128>("0x922349db26dcb184bbd974c985fe1164",16),
 ap_uint<128>("0x2dd1a16e80a6886fb18bc1d66f1ce75f",16),
 ap_uint<128>("0x94a4454ac7524407b26dd2cdab893654",16),
 ap_uint<128>("0x17fe1eebbfa1586a05810db6dbcd2ade",16),
 ap_uint<128>("0x020a95928edb1566c707c8a742531c92",16),
 ap_uint<128>("0x9eea9ab60216f9642b1a4ba4fe6bacd6",16),
 ap_uint<128>("0xee58a7255f6a0c2f66d51c7c436526f3",16),
 ap_uint<128>("0xe2408bb968169304e1104aac73b3f075",16),
 ap_uint<128>("0xa7a37aaebb52dd376e439891597e8c15",16),
 ap_uint<128>("0x22d2bdf1c553c828d316a6643b873ffa",16),
 ap_uint<128>("0xf818b786c3df23113d2d17de57311a1a",16),
 ap_uint<128>("0x9a808c9b566b8c929760af7dd896b1f1",16),
 ap_uint<128>("0xc708c676eb620dedb1fe6d2c256bf13d",16),
 ap_uint<128>("0x274379d84eb79ea31f68c0f2b0d21f17",16),
 ap_uint<128>("0x7e00fbba6a8247b4946d8591ef22e552",16),
 ap_uint<128>("0x7c4a3e62c202d9e26b33cda6e57298a6",16),
 ap_uint<128>("0x6634edaf2ddbcfe71906f78b0dad261a",16),
 ap_uint<128>("0xc2a62a37e137f96708b67faea9747500",16),
 ap_uint<128>("0x383a90b77a1b490228b5bcf6eb788c3a",16),
 ap_uint<128>("0xbbf28495339328732e5f479f02e9c6c6",16),
 ap_uint<128>("0x2c77b26f7337e0b4e5601b04f6ffb76b",16),
 ap_uint<128>("0xb9c7969201c52483b131a41047b73ef3",16),
 ap_uint<128>("0x4c46e0a5eaa150c4c31908dfc4cce6a5",16),
 ap_uint<128>("0xf798e16447a00ecaee8e8ef60578b4c8",16),
 ap_uint<128>("0xf6c1187a5bd65db53f364cec13e578c2",16),
 ap_uint<128>("0x76b9befc2bfbafe930f1911f1a9c1b66",16),
 ap_uint<128>("0xa44925dbdb340a9cf667898c1842762c",16),
 ap_uint<128>("0xfac13d358d38ea4a883768dc961d1b94",16),
 ap_uint<128>("0xde7b30b5909d66318f751f8dccc17dd8",16),
 ap_uint<128>("0x48f8afa49dbc224c8e47941521e68735",16),
 ap_uint<128>("0xecc384eae70086a49fe8a2c3467e4295",16),
 ap_uint<128>("0xbb21c2878fb368402536c89689bce563",16),
 ap_uint<128>("0xb6b5db1749e1ddaf579b93fe5a42d88e",16),
 ap_uint<128>("0xd445e73f6ca0c35caf8b4d30e13d3704",16),
 ap_uint<128>("0x435a8c03e878d47d07ce07ef513a623d",16),
 ap_uint<128>("0x85e398dbe8e47f4bfa5d7ec75e52276f",16),
 ap_uint<128>("0x91f036c9315ad441a5ece7b518b89b68",16),
 ap_uint<128>("0x2afe2e85b7e3a6c370b317280fee94af",16),
 ap_uint<128>("0xa4d1a848bf322c52873ea91628f971ec",16),
 ap_uint<128>("0x71eeb8f510f054eac15c42c388f00f12",16),
 ap_uint<128>("0xa956c90decb1f1a4e697ea253d41d4d7",16),
 ap_uint<128>("0xa44f3eb21c743317c9763cfa382340b2",16),
 ap_uint<128>("0x6e02066f0233b8725a4a15ffa2db6793",16),
 ap_uint<128>("0x7eb207c775dd6ed0086980819517be48",16),
 ap_uint<128>("0x6acc8f9954370ba76baceb3227dd8bc2",16),
 ap_uint<128>("0xc320e1403689cd1111a1981ade13ba7c",16),
 ap_uint<128>("0x36f9078c4e4ea3b6198dbe5a6cd81c2e",16),
 ap_uint<128>("0x5c840f5ff8649626f6b4d03cb71dca5c",16),
 ap_uint<128>("0x6dde356c720c21887023801e649ed661",16),
 ap_uint<128>("0x627f7ff680b4b58262cce41a9f8a51fc",16),
 ap_uint<128>("0x416bbb0bc04b59e20c01ba0361fb99ae",16),
 ap_uint<128>("0x737a0a02f57fce68c3815406305086fc",16),
 ap_uint<128>("0x1523151b4f57ea7863a9627da325f631",16),
 ap_uint<128>("0x058a7f7291afa2fed5b1e8977786502e",16),
 ap_uint<128>("0xec990cab54074dbc3f4604b0f627fa00",16),
 ap_uint<128>("0xbe573e2fb3082352b0733bc8117afb98",16),
 ap_uint<128>("0xcf0c38d96baafa27febd2b3efca34738",16),
 ap_uint<128>("0xf92c017d26729d1757b01c955735140b",16),
 ap_uint<128>("0xa5fb96ad1df92bff11618c235d956cc2",16),
 ap_uint<128>("0x8fcf68c07b0660bd78734b917170443d",16),
 ap_uint<128>("0x43f2e78d9e3acbf8a4272e59a190bb9f",16),
 ap_uint<128>("0x8076d8b04a64a1ea679c3360fb753fc6",16),
 ap_uint<128>("0xae5d31a48cd929c38d00c7a65214a5a9",16),
 ap_uint<128>("0xd80e6ae352576429254cd82b5ee780b0",16),
 ap_uint<128>("0xc51d560d71d2b7b1b4b0ed23de38f6ac",16),
 ap_uint<128>("0x539baaa03891fcc2c37526a1c21fb2f2",16),
 ap_uint<128>("0x7c2538e3e6fd860be5a948a1a140a918",16),
 ap_uint<128>("0xfa96370c5b2a1b326baf4499634d6d8c",16),
 ap_uint<128>("0x8db47b623bb31824ce78f60e2ee73d49",16),
 ap_uint<128>("0xebea1a560d74eb0cc4a1fd5e25e47dac",16),
 ap_uint<128>("0xfe40157b145abd1224cd2ca5ac30f729",16),
 ap_uint<128>("0x43352bd7f24a075033b4bd430e1437b0",16),
 ap_uint<128>("0x1b68314948081fe5c8c88394b75d979b",16),
 ap_uint<128>("0x2a4b3b14b6cfac7fdb32cf07b2b45f88",16),
 ap_uint<128>("0x84397154a1eb2e39e46fdf11044feae7",16),
 ap_uint<128>("0xce9e1d513984441a754828501ddb97b5",16),
 ap_uint<128>("0x8d231695a0fb62c3e56c520ae1644a05",16),
 ap_uint<128>("0x4005c91465d45669e3e1f87c80fdd095",16),
 ap_uint<128>("0xf4b15d48e511e1e4a0b297729abafbcd",16),
 ap_uint<128>("0x13796559f55bff6d7448c4218f64893c",16),
 ap_uint<128>("0x99a4434e2e514d24d1d6e30ef1ec9cfc",16),
 ap_uint<128>("0xae665f5880341cdb7127e34e2b26f158",16),
 ap_uint<128>("0xf813280df314ce3a500b03bab08035a2",16),
 ap_uint<128>("0xf772ff5ad7dbc3566bc31f2e49c00ad6",16),
 ap_uint<128>("0x66126449df18c779a1358ff4050702d1",16),
 ap_uint<128>("0x3ec8d526bbcb71ba3c8faefee2789d28",16),
 ap_uint<128>("0xa9f9fbdcfce706259007032810f1b5ee",16),
 ap_uint<128>("0x65be66ae9969ec60c840b25af0661c70",16),
 ap_uint<128>("0x214976949505cb024297997fd40e730a",16),
 ap_uint<128>("0x6e535ae74e2eabdef35a143720852bc5",16),
 ap_uint<128>("0xe635e235ce31bdcd0ed9df8ff126385f",16),
 ap_uint<128>("0x9fa3e191ed3615553a219d9cd9796c32",16),
 ap_uint<128>("0x9118679cfa47ea11fcdff183921de7c3",16),
 ap_uint<128>("0x98bbcea0df414f335f6be83fc9c46316",16),
 ap_uint<128>("0x06f04ee2b344c2cbea6b3611704e556b",16),
 ap_uint<128>("0x1adad37c496f4be71aca24ac8f6baede",16),
 ap_uint<128>("0xbab5ad21325e5f3f4f5862f4aca3322e",16),
 ap_uint<128>("0xac8ac2e10bc8a8744b2c48d7cf0f6269",16),
 ap_uint<128>("0xce7eeb1f1b49d937ef66b217d2eef738",16),
 ap_uint<128>("0xa4e37cc3547643136773fa8b8e5fb3a0",16),
 ap_uint<128>("0xbb7df3548ee46182348c4a955103a194",16),
 ap_uint<128>("0x5d98fbc0d5078937947bb6eb479c2028",16),
 ap_uint<128>("0x66d0305983ef03b6e4d1170600cc1d0c",16),
 ap_uint<128>("0x4e892dc20f89d89f4e3a594e37d02655",16),
 ap_uint<128>("0x814d9e4d47a75132cfb74458163432fc",16),
 ap_uint<128>("0x993c839227026b6cda847381ff852d26",16),
 ap_uint<128>("0x59cba1a2148303b49c905b8858a4e78b",16),
 ap_uint<128>("0x705934c99661a1204b01fc3f1540429f",16),
 ap_uint<128>("0x28af96d476c1b7b40fab95082c4e4502",16),
 ap_uint<128>("0x39ca3f6f0f73b45810626330d072f2fb",16),
 ap_uint<128>("0xe2473c07e7837420c108274d1a6b3052",16),
 ap_uint<128>("0x5622fbfa1322baea91e07285e48dbff5",16),
 ap_uint<128>("0x99fa7636f78813731497047922ee9d61",16),
 ap_uint<128>("0xc07aa1134dfc3f82c908dad0d9cb4bc1",16),
 ap_uint<128>("0xd76f882384daab8a18040c11626366c0",16),
 ap_uint<128>("0x3cb77eb1b0b4e8e9b0f29caf1fec3b49",16),
 ap_uint<128>("0x1178d773863f2bbe0d9c55ba9c951c90",16),
 ap_uint<128>("0x245063416a4e0ab5d779526e3c5ea674",16),
 ap_uint<128>("0xccd067dfe2b2d71cf8a7abe78b71fc8a",16),
 ap_uint<128>("0x182ad1047ccbfa09c862a3caed059aae",16),
 ap_uint<128>("0xbba45d167e9bd3e21463330e4f922df5",16),
 ap_uint<128>("0xe6b1075868c43b359d09d9c24b22edc3",16),
 ap_uint<128>("0x9968e78006a6608c31729fbac265d3d1",16),
 ap_uint<128>("0xa2c8f1c07a3fd7de684771698e4a6f69",16),
 ap_uint<128>("0xf99fafd97151a898e22472eed16cf96e",16),
 ap_uint<128>("0xc0a81ce8a3352df53758940eec33537f",16),
 ap_uint<128>("0xcff8ba326b78f835daf31a6b762a3e6b",16),
 ap_uint<128>("0x62f980507dde7ca5300ffc1f1bd2b01d",16),
 ap_uint<128>("0xce0cd1ae278cfc8f0fe089fb6b786a5f",16),
 ap_uint<128>("0x68bfe32172228fdb12504dcafe059176",16),
 ap_uint<128>("0x038f973e6dff547f8fc3bf1220d89a3c",16),
 ap_uint<128>("0x501abcaf0f2a57082c10cb455fe38230",16),
 ap_uint<128>("0x2edf7b872414c1cfa2ba49222ce8a4e4",16),
 ap_uint<128>("0x311ea5676bfe82de177141c514208c79",16),
 ap_uint<128>("0xf241b5b7ba8f930538a195c4e99c139e",16),
 ap_uint<128>("0x3d7678258773fc0eb827cb9795198651",16),
 ap_uint<128>("0xe2570f441ac994df1f407df3e4c59a04",16),
 ap_uint<128>("0x77e5c85998745afdcb23f1f65a232d5a",16),
 ap_uint<128>("0xe0d648b5e3e8f7837278d9c015546554",16),
 ap_uint<128>("0xab7291085c6fe7e6f5185164e72cea4e",16),
 ap_uint<128>("0xf96cf2152e215193c91fbea80567aefe",16),
 ap_uint<128>("0x9c3f5cf27571b997f678a1c2ada65e23",16),
 ap_uint<128>("0x7c218f959812e1728dc027b93c4217a7",16),
 ap_uint<128>("0x1c96a9337e281c42a3e18ba7e9717110",16),
 ap_uint<128>("0x630b8801044b643017b653c661028375",16),
 ap_uint<128>("0x0709dc89425e2ace6ddb7c403b3923a1",16),
 ap_uint<128>("0x2e9b202577d7e51dd6be241e92fc0d63",16),
 ap_uint<128>("0x8c9c527eb31a57a0a420540467c29929",16),
 ap_uint<128>("0xc492e55e787e04d972d77dd58c0b2fd6",16),
 ap_uint<128>("0x463fcad30f9e2c0a79390be0afc001b1",16),
 ap_uint<128>("0xfcbc662fcd988b4952c470f5b3fb944c",16),
 ap_uint<128>("0x8b51043a4462a7295032e40f689f29a4",16),
 ap_uint<128>("0x80761ddf5b7205d4dab3384a8a0dd562",16),
 ap_uint<128>("0xbf5015afd24b99d97dce05da0e17d80f",16),
 ap_uint<128>("0x0e7afb25227c81d4d0a4b42de424101e",16),
 ap_uint<128>("0x46dfb2791808b6e20b500fab29c33edd",16),
 ap_uint<128>("0x5b6e326f2dd4305c16fbc6a22644e1b8",16),
 ap_uint<128>("0x3e969d39f4533e9a2eedf9877c451eab",16),
 ap_uint<128>("0xbac56e05addf136bc4cf1f1eef6d19b8",16),
 ap_uint<128>("0x15d05608738f5e6c96f579b603f68218",16),
 ap_uint<128>("0x75b231efe4a651e0229e40dcfb941199",16),
 ap_uint<128>("0x61ddc4488ab678ffc4d0ad6539a16298",16),
 ap_uint<128>("0x870945a589bef73eb6de7ad88f91a90c",16),
 ap_uint<128>("0x4a014136d6bc1ef33f30f605a53c6388",16),
 ap_uint<128>("0xe988623157399534f1a4830eae0440b2",16),
 ap_uint<128>("0x238881b3cbae0e27d3261f01c4a1a81a",16),
 ap_uint<128>("0xf4dde0a3f1941028a10d48f6cc148ccd",16),
 ap_uint<128>("0x833f85659762bb2361a684e48bf20e3b",16),
 ap_uint<128>("0xb733f9fe512f7790664fbe744d0c2d97",16),
 ap_uint<128>("0x64f030e645c607a9bca2314c872cc585",16),
 ap_uint<128>("0x3fb5491853adacf86bc0c5a8dce2e0e2",16),
 ap_uint<128>("0x7f8dc819140e69473809018ae14b747d",16),
 ap_uint<128>("0x37edeb26d30c43e4312512a7ef9767c8",16),
 ap_uint<128>("0x7625075e3b13e51e9a5b6c8d8856b6c2",16),
 ap_uint<128>("0xd395f9a71fc8b8c43b882f00189ba774",16),
 ap_uint<128>("0xe31609ec809a7f40c639f48bfdbec820",16),
 ap_uint<128>("0xc0e8547e204411db347323ba88160a0a",16),
 ap_uint<128>("0xd3578fe6eda6a6bbea703095ac8f8c1e",16),
 ap_uint<128>("0x7811a2edd39ed4dd4093602fc029e470",16),
 ap_uint<128>("0xa3743602b619430ddfebfafd92ee8e6b",16),
 ap_uint<128>("0xe1a928cbffdfa16c89ee3950166a3174",16),
 ap_uint<128>("0xdbdde590caf70e7720cc329573be730a",16),
 ap_uint<128>("0x3515a81feed73d7b9f1c25153747d119",16),
 ap_uint<128>("0x562900480bb2e792460457590aae9565",16),
 ap_uint<128>("0xfae88ba4bf4f748ee4f7bcb1ae4ceb14",16),
 ap_uint<128>("0xf03a73a822d8e48abc845084c8786497",16),
 ap_uint<128>("0xa3d04f21e47c739fdeedd34733309c01",16),
 ap_uint<128>("0x6a3e30c9e6637b7d9a150796e19cdc13",16),
 ap_uint<128>("0x9c6d3b124f74afa5e94ae63efd6ff3a1",16),
 ap_uint<128>("0x450fb74bc98a18eaa964a10973c4056c",16),
 ap_uint<128>("0x779d80a4ef01f8527e3cda79f2261156",16),
 ap_uint<128>("0x10282600d6aee4c4b197bbc16af9b63e",16),
 ap_uint<128>("0x0cbc3726d3388967cf7e772e212aa4a4",16),
 ap_uint<128>("0xdee7742874dd11c27fbc15800bd01123",16),
 ap_uint<128>("0x533dfb9d0d864d4c3797a47f32997ece",16),
  ap_uint<128>("0x7555c0aa60f884fabe4851fa7af9afff",16),
 ap_uint<128>("0xd5e670e3075a8fb81aae7bddefb0df6e",16),
 ap_uint<128>("0x8c1170e8f9b3dc94a98ef5d6cec27b3b",16),
 ap_uint<128>("0x5060777b8a2a88103ab757328fbebebf",16),
 ap_uint<128>("0xe8180acf8710a1b4e49ff218961b0b83",16),
 ap_uint<128>("0xc7b76be43b9a1760ac265ab6bb07dfb9",16),
 ap_uint<128>("0x717da164cfc5f36eadfae238dc0f0ac8",16),
 ap_uint<128>("0x67bb8b94c2b4c57c2c80dcae24e3e8ee",16),
 ap_uint<128>("0x21b067ca35b1f780dc562a72ad87cf9c",16),
 ap_uint<128>("0x7eef2bdcad8c3ce4eba54a24ddbb8662",16),
 ap_uint<128>("0x1eb1dfe777f231bce2f496661153a546",16),
 ap_uint<128>("0xeb9a4f444e47646b7ea1e83907bd5632",16),
 ap_uint<128>("0x59be7573094d70704b4c6ee65d4d06e2",16),
 ap_uint<128>("0x5c875eed99a48541da8498bdf6225f17",16),
 ap_uint<128>("0xd258111720b781ceced22a4ee690e38b",16),
 ap_uint<128>("0x723d5322b476e37c9ca6bd5de7008212",16),
 ap_uint<128>("0xb9892c51bd715a8454940caa331728eb",16),
 ap_uint<128>("0x2a193306e8f40045d44f899927ddcd25",16),
 ap_uint<128>("0x3041d8bac7c6f6d7729f409897e0d331",16),
 ap_uint<128>("0x65482460fdabe4212db351ad462c6d89",16),
 ap_uint<128>("0x9cd2bf9eea26078ae84ae7d8c32f691b",16),
 ap_uint<128>("0x8844a832c0a5b535b8214901a02fa370",16),
 ap_uint<128>("0x704f65eda855424d5204c61ab8a8bad6",16),
 ap_uint<128>("0xc20ef126f901736c95c314f00194a8c4",16),
 ap_uint<128>("0x833891592e40bbf2cdfdcfba4d1ff480",16),
 ap_uint<128>("0x0afc2236ff0227fe1bdd51df95496a5c",16),
 ap_uint<128>("0x0b634d4889a2ef05fea2f93eb8d55e10",16),
 ap_uint<128>("0xb417fe1a0595b40a5b08ddda9448dd3e",16),
 ap_uint<128>("0x93ce60086202e28ddb9afdff2cc3e5c3",16),
 ap_uint<128>("0x5c210917e83671d16899e101890c13fb",16),
 ap_uint<128>("0x173e28da38797569ac79d96bb0b74ca5",16),
 ap_uint<128>("0xf58c39ad5ffda459a2ca0ef53fbcf74d",16),
 ap_uint<128>("0x01a5b22e2323e4769e0b155a42d0d4cd",16),
 ap_uint<128>("0x0e860837d76b8b2ccc733d7b6a933eb9",16),
 ap_uint<128>("0xb443678438b9394e35f91742426e0236",16),
 ap_uint<128>("0x98d9c99bb4bb41c7660c502a5071d52b",16),
 ap_uint<128>("0xd419afdf0726ed38825a48e8afd68278",16),
 ap_uint<128>("0x38260ccc2061191c64ce12a0844c62a0",16),
 ap_uint<128>("0x9cd3b208219149269873d83aa35de3f6",16),
 ap_uint<128>("0xa0755135059b5ce2149f281178b8f352",16),
 ap_uint<128>("0xfcbfe48a380d088bcc34a3cc6d23ee20",16),
 ap_uint<128>("0x53b1ec04725d5a729c3d0acfb16e3279",16),
 ap_uint<128>("0x9063bb04884fd5edbb0ec065c33c8996",16),
 ap_uint<128>("0xc0845e22326b3d20d6f50d1b3cd70c10",16),
 ap_uint<128>("0xa272770ed0b2ccb1ccc3d12d7b02ce62",16),
 ap_uint<128>("0xf0bba8ba0ee60c565b9df80f12006c13",16),
 ap_uint<128>("0x0171a75e16be083cb18a3fe2ee5f4838",16),
 ap_uint<128>("0x361b2b875e3ffc1ff0ec6774540245a9",16),
 ap_uint<128>("0x46544ceee5f9994531391aa963afeef8",16),
 ap_uint<128>("0x522128a3b21c891234bd729c325d1e5a",16),
 ap_uint<128>("0xaa2c01c83dcd6322e67bba04e7bad109",16),
 ap_uint<128>("0x7ca439d2d2ad279378ec5bf7c2e99bdb",16),
 ap_uint<128>("0x36f09064ad5407515bababe5d761b373",16),
 ap_uint<128>("0xde9ea6cb42c9e0758709ec653d16f24d",16),
 ap_uint<128>("0xf3100da32ca7e8e72687b8417cf47491",16),
 ap_uint<128>("0xe7491e5b9308f5b673dd3cb1df9bc8a6",16),
 ap_uint<128>("0x068ae20e7cdef4b7e8d52240e7dbaa0b",16),
 ap_uint<128>("0x2e85a041b80793b133a6e00f338b8047",16),
 ap_uint<128>("0x36a1a3c9570d2177b05d36cac687af2a",16),
 ap_uint<128>("0x2699f56c9b3ae38dc5dfe4e5ae6d64fc",16),
 ap_uint<128>("0x1239c98fcd05c8b048d64dad11219a2e",16),
 ap_uint<128>("0xd5245987bab0261efaf27013e238f611",16),
 ap_uint<128>("0x316b0d47e91b39a179baeb2a78af74b1",16),
 ap_uint<128>("0xecd57b22836365c0d5e61edc8701b648",16),
 ap_uint<128>("0x120e08b66efbdede9951748918bc584e",16),
 ap_uint<128>("0x80c15f411f700d0f79165f446ad84a03",16),
 ap_uint<128>("0x4bf35cb3e59a4fe0f6c2915015fe2902",16),
 ap_uint<128>("0x7cca932e16f48937524dcce331b66912",16),
 ap_uint<128>("0x09d09ecf44aae4e20e9243b61d914284",16),
 ap_uint<128>("0xac6cdb9ec03426fd4f24e8c434e4a29f",16),
 ap_uint<128>("0x01770314010c74cf757254a10c61379b",16),
 ap_uint<128>("0x312db7448fbfb22ec897288c4a24577c",16),
 ap_uint<128>("0x76a4147856c054f661e51379e866137c",16),
 ap_uint<128>("0x84623edbc50c4a702afc320bfa5b8c2e",16),
 ap_uint<128>("0x7ba44c088aef38dd0ae1cb34b960a7a5",16),
 ap_uint<128>("0xd81e7af49977f9bad41daeb43dfad369",16),
 ap_uint<128>("0xe790c6f857d150a0b4d3d028148642a1",16),
 ap_uint<128>("0xd001e326f8258cb7fad93f0e3ca7ad1b",16),
 ap_uint<128>("0x4e3389fec7a1196fb124581d45836aa3",16),
 ap_uint<128>("0x326dd932091842f8a7cfc4f82f93f0bc",16),
 ap_uint<128>("0x6ae50f42dd8810689643b07ca8f0bac7",16),
 ap_uint<128>("0x3a23dee089230b50990e73e3a43ad83f",16),
 ap_uint<128>("0xc5e6e5eae6f5618d868d84ebce3c0566",16),
 ap_uint<128>("0xab2e0127989859229e49d636b1681c58",16),
 ap_uint<128>("0x86aca08e1a23fc49233ff9b6972ef216",16),
 ap_uint<128>("0x2b7b9663b3e9d1ffb8964ba44da13e9e",16),
 ap_uint<128>("0xa9e8695cf4e7fad88680a09485626f2d",16),
 ap_uint<128>("0xf813cf628b8e4252ad46be5ca29cc684",16),
 ap_uint<128>("0x11154b12c7f68fbbc70c15ae8da1bc16",16),
 ap_uint<128>("0x78b6b246681658f3e74d41f8c9f24b93",16),
 ap_uint<128>("0xe6870a6a18e4c1b9cd2802e1c9f9301a",16),
 ap_uint<128>("0x73226e865d975c6665966bd7b2294395",16),
 ap_uint<128>("0xd9e6a43178a3ebccc137642b93284384",16),
 ap_uint<128>("0x8a553bcc2f9396a1b944b6981d586f29",16),
 ap_uint<128>("0x604e828a70a1ea1e1c5eb309e5aa293e",16),
 ap_uint<128>("0x260f082d54ad9dbdbc7f06827065e8dd",16),
 ap_uint<128>("0x97d680e873d78480b07afea79ec9138a",16),
 ap_uint<128>("0x14b9b86346b3a146fa015ab2eb2122ac",16),
 ap_uint<128>("0x015af8e1f97a842945ddf495479d3708",16),
 ap_uint<128>("0x275d720749e942aceffe372a337ac223",16),
 ap_uint<128>("0x3759a8b82bd5c0efaf7bc824ba4b747d",16),
 ap_uint<128>("0xea1d46736e17eaf86d880b9903871e94",16),
 ap_uint<128>("0xd13cc72ad7143a7184f85ade0367c067",16),
 ap_uint<128>("0x1f98d02314b0e966d2e32922492b022a",16),
 ap_uint<128>("0x6c13027d6d9a09bfda350c672f98932b",16),
 ap_uint<128>("0xa7314a45c9ce83c070b5c98684aa1865",16),
 ap_uint<128>("0x3b80c5c7b1c306eb0a77daedb9619d7a",16),
 ap_uint<128>("0x95cea04aed13ccbea35a1f4c09a7efa2",16),
 ap_uint<128>("0x0cc5898039b5f7bd4e772879ed7468c0",16),
 ap_uint<128>("0x90f64ce4bf5931155ef350c8b4b05200",16),
 ap_uint<128>("0xbc42719a3802fd78f096470f22d1fb51",16),
 ap_uint<128>("0x9d90ec755573cdc18a50859359a198da",16),
 ap_uint<128>("0x7002e05e103a1d6c15ef606441a1d3a9",16),
 ap_uint<128>("0x9972dad06a307f68044f983e7f656628",16),
 ap_uint<128>("0x97b9a298a0838f9c87e1598396769227",16),
 ap_uint<128>("0x08ff7357777c11175024b2c8260693ab",16),
 ap_uint<128>("0x2a3faf4a8728a03c00f4c6f79d118c2a",16),
 ap_uint<128>("0x98db9648ab3372e5b8b6f9bdf532d318",16),
 ap_uint<128>("0x7d6bde8df9bbd5e6e285e3cdb33c290f",16),
 ap_uint<128>("0xaa0a3d22916c1b6733d516157d7754a8",16),
 ap_uint<128>("0xf10a124c300e2b8f1bc5ae270030ece8",16),
 ap_uint<128>("0x6315bf72bb42d38d74bda240ceb077b1",16),
 ap_uint<128>("0xd0da03170882558ecdb7aebc0d79014c",16),
 ap_uint<128>("0x094843ac295fa46b381fec8bbec72de5",16),
 ap_uint<128>("0x475522a1a1a7107996c831f1130eba3f",16),
 ap_uint<128>("0xa9733829b742b4524e1ea0ca74da883b",16),
 ap_uint<128>("0x7e2dcf65605e4b145bba7d9d55883c5a",16),
 ap_uint<128>("0x5af729be03c20abb04771086af2fffaf",16),
 ap_uint<128>("0xab99de0eb5511059b8d1f0d0cb5ae35e",16),
 ap_uint<128>("0x722185190fc33f5301e2a7d871de6251",16),
 ap_uint<128>("0xc4e7b5bda48ee2b7541f90915933eb5f",16),
 ap_uint<128>("0x62634802ecf0fb4a488fbfbe210161bf",16),
 ap_uint<128>("0x371578ed0768c7c3c78f58978b32f2c3",16),
 ap_uint<128>("0x6fbb636084444a7ec3bc7f8ea29eea15",16),
 ap_uint<128>("0x330b1104551467db25da4129e02018d8",16),
 ap_uint<128>("0x1f6cc86374b8e0e090c9c5425191eb6a",16),
 ap_uint<128>("0xeb3cd9aa8b46c41f87d3e45a42a84780",16),
 ap_uint<128>("0xd28dbc57f7b1e38366e99b8be582129b",16),
 ap_uint<128>("0x6d574fba428d232392b0c8b168cfe57a",16),
 ap_uint<128>("0xc8fb069f5c27a06ec425ad3cdeb90e31",16),
 ap_uint<128>("0x5f42eae758ab044abdf3407fb271d3c7",16),
 ap_uint<128>("0x6f1bebd77315c40c1425754a24c52562",16),
 ap_uint<128>("0xb88cb4a16b617d17794149b42ec1ce25",16),
 ap_uint<128>("0xecadfb28c8f17bb6ece95c2091900936",16),
 ap_uint<128>("0xbf8ae5ea144b8b1f6ec5852273c03d4e",16),
 ap_uint<128>("0x763164895ead07f53047606ff9857add",16),
 ap_uint<128>("0x27e019651df6a1047131fb9235f77a39",16),
 ap_uint<128>("0x0c019e91007fe87750c6adca8d5c6658",16),
 ap_uint<128>("0xf0f14b2552643366142b087e754544ae",16),
 ap_uint<128>("0x29526349f1cd13e529ad6992bef92783",16),
 ap_uint<128>("0xc194762492d5b490087524e23d027d7a",16),
 ap_uint<128>("0x824059ca771cb9d13703bf6d2cebf402",16),
 ap_uint<128>("0xdd9173bc6cb106530a30782e62825456",16),
 ap_uint<128>("0x003fb759420f2c7d4b16d9fafe6af6a8",16),
 ap_uint<128>("0x40a6205032b453f77069d6c37a6ffa20",16),
 ap_uint<128>("0xb91edef5c982fbab5f241a4b90dd2356",16),
 ap_uint<128>("0x77ef3dd5e458e2846f3fe375df33a68a",16),
 ap_uint<128>("0xe246ed4240f1a2872dc66b3cf36fcc0a",16),
 ap_uint<128>("0x92ada2a0ece44c9a800d4ddb3638e4f9",16),
 ap_uint<128>("0x92b9483cd9813be8abab55d2635e20d4",16),
 ap_uint<128>("0xc7c2f2f961dd48da7ec9f31480ebbe79",16),
 ap_uint<128>("0xda679fb11ecc68f15064ca83edb6d4ab",16),
 ap_uint<128>("0x00873310f688d5fb411f912ea8c6db20",16),
 ap_uint<128>("0x822a1ad2a79b9f13a0628fe740405129",16),
 ap_uint<128>("0x092f2ef44e9fa100521202a017d1d30e",16),
 ap_uint<128>("0x1f66316f67c340ff2f53d6f8b3a471ce",16),
 ap_uint<128>("0x416bbdbb4dc33aeba22c1d682183cb2d",16),
 ap_uint<128>("0x34a18dbc3c61bd21d07209bba291710e",16),
 ap_uint<128>("0x8cada71f65335e9277509b602085162e",16),
 ap_uint<128>("0xc335680f26878962d59f8db26caf7b53",16),
 ap_uint<128>("0xd3029106f447e331ee2fbe6096e79e5f",16),
 ap_uint<128>("0x107ee91e6630206c0b32d714432bd4f0",16),
 ap_uint<128>("0x7aa88ab49d9c57854a02c6062a5cc173",16),
 ap_uint<128>("0xca44dbee591eff9f890095d9b5239540",16),
 ap_uint<128>("0xa195db3f7b8e00ea2102fd1e5ca9343f",16),
 ap_uint<128>("0x9d2d03dd38aac2aab227fb30301b6563",16),
 ap_uint<128>("0xcb336c20aff3e5dae80d4ff745a2c255",16),
 ap_uint<128>("0x3930915cef005fcc6d612595c68bcb66",16),
 ap_uint<128>("0xdd1ccb5b4c0af0e40020928848fc17fa",16),
 ap_uint<128>("0xb1d865646fc7ef60a165f76962acaf54",16),
 ap_uint<128>("0x8989ea12a59b093f51c2fddf1a2a324b",16),
 ap_uint<128>("0x364800e8e0863ca0d88c9a2459bf1f9f",16),
 ap_uint<128>("0x9b5d8ed1c476c9752d391ec880b37f09",16),
 ap_uint<128>("0x7ac92ba2470b54de8fe61703a1309204",16),
 ap_uint<128>("0x723ad8846a601234ba1304aff29e0667",16),
 ap_uint<128>("0x6f47303942717e06814895d102f9e159",16),
 ap_uint<128>("0xb3e16ac3a8d491f52a45e6a71abcebd2",16),
 ap_uint<128>("0x2adf714579d2723ecee09838829dd21e",16),
 ap_uint<128>("0x5cc327a6f7bc6ec9b00d725d27571a2b",16),
 ap_uint<128>("0x5320d4c9ebdab2c367fcce9cee5b9201",16),
 ap_uint<128>("0x9cbdb2865b36d07b3cc1ef611adae3cb",16),
 ap_uint<128>("0xbda195e989e784670057d4c0d64142eb",16),
 ap_uint<128>("0x0e60342345ad5d360a55c0d2f274acec",16),
 ap_uint<128>("0x545f1a161d8338ec55a59f294763f690",16),
 ap_uint<128>("0xa24809f1ca9b7a2e58783546c6667e7a",16),
 ap_uint<128>("0x123be52dc7d3db8714ce41e53ff1ff05",16),
 ap_uint<128>("0x90bec572333fe20befd163950e46bd6b",16),
 ap_uint<128>("0xea90e7003046bafcde0b249ea03b6571",16),
 ap_uint<128>("0x80c98cd8d8a713eeb72c45ad0177c30a",16),
 ap_uint<128>("0x4603e7fab78e26ff08a2a74c93f6218d",16),
 ap_uint<128>("0x83b8a4166e78d798e31f2390b262c468",16),
 ap_uint<128>("0xa81a6cffa69c5cea620fd04ae4cf334a",16),
 ap_uint<128>("0xac28212c3df047856f10f0a21f5f04bb",16),
 ap_uint<128>("0xe30467a1676f7e83dbad28e4cf3a59a0",16),
 ap_uint<128>("0x3ffb3c29d6ce102f4b02dfd096fe12d8",16),
 ap_uint<128>("0xcdf179322f56b5a38c424b46495e4a8e",16),
 ap_uint<128>("0x555b8ac554a103d95a1026637cd9cedc",16),
 ap_uint<128>("0x314ca1c4ba0f57055ca59c79ac235a81",16),
 ap_uint<128>("0x7d1e9bfb429dcd731ab2fae33ef4c5b2",16),
 ap_uint<128>("0x2c5ad66ce6cddd94ec77ee55bc79f863",16),
 ap_uint<128>("0x6be2e621ce5cc9cfb48fe35856d70613",16),
 ap_uint<128>("0x5cdde25131221ef2ec9839d4f56ce52b",16),
 ap_uint<128>("0x431729e17eef3654d115c3e792c60b47",16),
 ap_uint<128>("0x9e354ea7524345b0fb6996bf93107671",16),
 ap_uint<128>("0xbd22aec8c8d09c4cee3e17f5f35b5669",16),
 ap_uint<128>("0x3104b795d6306000684fd0f5d7a9ed50",16),
 ap_uint<128>("0x64a6641cd6140c772d2e93fce4fc7608",16),
 ap_uint<128>("0xde7fddef0ee384906cbacdf37496fe52",16),
 ap_uint<128>("0x6de7ab2c116df46af13bf7261c28353f",16),
 ap_uint<128>("0x906aa7caaf05e91ce373840f4be061a4",16),
 ap_uint<128>("0x5af619153d35bb6d9bfef1fe9b2d3e5a",16),
 ap_uint<128>("0x8660296f0544778935d95f463865ff63",16),
 ap_uint<128>("0xe4ff7de7af078e24b654038e3f88fd68",16),
 ap_uint<128>("0xa97f75ed42a8f4c0205f28a1ac72c7e4",16),
 ap_uint<128>("0xaa9e05d9d46dabf7ef83a5887a4d3385",16),
 ap_uint<128>("0x89dbc814910185cc801d978b5eecaec2",16),
 ap_uint<128>("0xb73a90edeb6678e8b90a8c2275482f06",16),
 ap_uint<128>("0xe10afd6b5ced13955793a57694d9f216",16),
 ap_uint<128>("0xbeb8a25f96d3a5b72bde1b8f58e126eb",16),
 ap_uint<128>("0xad19a2a76fd4135251ed6a349b878be0",16),
 ap_uint<128>("0x9d631b06349c7562797779a268f44443",16),
 ap_uint<128>("0xec04493cbf0761b25cd3d970bf82136a",16),
 ap_uint<128>("0x0051813f50b9be1aec0a3b598ac28d8c",16),
 ap_uint<128>("0x287fc7f68e5a1965df92a02714863f29",16),
 ap_uint<128>("0xb23624f3eaa54b347a625421aef1e1f4",16),
 ap_uint<128>("0x754b7ac8e99044721084d305abb88e59",16),
 ap_uint<128>("0x998c5d562bca8c5b6f2123efd90dfaf7",16),
 ap_uint<128>("0x61bccc7c48114672a8b0aa0ff0416a91",16),
 ap_uint<128>("0x19f862cc2ca62d345e83b14a9f58c60f",16),
 ap_uint<128>("0xa627f5b0b97ed10a4329c6f261a605ab",16),
 ap_uint<128>("0xbf7fc695b2cf8abc650d8df101962c9b",16),
 ap_uint<128>("0x591b4dd367133e7e1bb646e6146b9cf8",16),
 ap_uint<128>("0x4ae0e156bd37894a29af6c8c93370978",16),
 ap_uint<128>("0x45d9fdeb301514f4971d12fd7fbfd2cc",16),
 ap_uint<128>("0xf3f15db1e2f8073fde5c6b2ba86cda0d",16),
 ap_uint<128>("0x67e218cb6067219b0f3619bb0eb87540",16),
 ap_uint<128>("0x6506089eae583f50f5daa499b5a99870",16),
 ap_uint<128>("0xa6f51945791db042eed4c46fe63a59fb",16),
 ap_uint<128>("0x3438f3c41733b5081bdb85b9f037da1c",16),
 ap_uint<128>("0x0be7b96bec4e3150d9ab9f3aa73bdf74",16),
 ap_uint<128>("0x66b4543d0ca5ae64780296942bce5d35",16),
 ap_uint<128>("0xdba1995c38035134fa8a3da385ab95c4",16),
 ap_uint<128>("0x89a5ef5ce3e3bed8513e23dad7ae0a0f",16),
 ap_uint<128>("0x377277e6496bf5ab4989215f46524423",16),
 ap_uint<128>("0xa0daadf28af1d0d05d0ae4ce61e3e32c",16),
 ap_uint<128>("0x3a3e15a4e26a9bfe0fad023209375f4f",16),
 ap_uint<128>("0x199b362f6049feb7cb5c95b9a69f9961",16),
 ap_uint<128>("0x30e45a4eb3d207960b94d446f6a165ee",16),
 ap_uint<128>("0x488f488fabb56616e89ebb3e448c3270",16),
 ap_uint<128>("0xc4dffcd932f16a9f487376c3206b45b1",16),
 ap_uint<128>("0x55da19e62bffc28ecd5ee689d858bfdc",16),
 ap_uint<128>("0x6263774351d4c236519c77739685514b",16),
 ap_uint<128>("0xc74a8ba320a11e6f71e4d16838f48076",16),
 ap_uint<128>("0x6e898717ca82443d5b7c30032542b397",16),
 ap_uint<128>("0xb5a4d039eed15b69aa0c63816bfdaa73",16),
 ap_uint<128>("0x7d1d49ebe0dc2ce16ee3907f185b9687",16),
 ap_uint<128>("0x0dfdf091e6e56bfe60c3cc2cb3a5dcf8",16),
 ap_uint<128>("0xd84971b097567a868013e94ef84b6de4",16),
 ap_uint<128>("0x5a9a11b9da04d05c4c68273ff87b3d59",16),
 ap_uint<128>("0x0ad4c316f44f6d4c2d92def20b86709d",16),
 ap_uint<128>("0x963a1bbf4b40ba57e59b71e2335eaed8",16),
 ap_uint<128>("0xf5085235f908c15d2b4c1a0cbd88106a",16),
 ap_uint<128>("0xdb5242c2bb172f95505560403d31f6c0",16),
 ap_uint<128>("0xb3ca3b96987d7a522a5aa8ab93fca444",16),
 ap_uint<128>("0x9cbb11897d987283de1a859950563d00",16),
 ap_uint<128>("0xe07ac34bc8b1660c4ab53b379ab9f305",16),
 ap_uint<128>("0x0de2f9d387762779c18dc6ee642240b9",16),
 ap_uint<128>("0xb1a062f1b8c103a3370fc134fc995a3c",16),
 ap_uint<128>("0x0c55b2d1c424b53183221d36f5143f2b",16),
 ap_uint<128>("0x810ca24af1183cb1f1df9a0d83eb375c",16),
 ap_uint<128>("0x2fe2cb8a3db901be18b227c585e81c7a",16),
 ap_uint<128>("0x51aa9af662cb98e18b09ce74189c5161",16),
 ap_uint<128>("0xca82b00c914b2b0a655f9a6ac10bd6bd",16),
 ap_uint<128>("0x072f14e7ae9f5daa2d54f9685972d27d",16),
 ap_uint<128>("0x5b768df5e6f21138f0fd30fad91506a3",16),
 ap_uint<128>("0x7a9963407d1159a3772ed7f8fcfaabff",16),
 ap_uint<128>("0xe9add1f42bace8dcab5f49b8465ce525",16),
 ap_uint<128>("0x2c9fc67aa5642316ba5030eb25b2b6ec",16),
 ap_uint<128>("0xb8d926577235bd5c10d58f857a2dd215",16),
 ap_uint<128>("0xe1c12c36c99b7fab4a6dff2c7a728135",16),
 ap_uint<128>("0x0e35ecb559b32baa9c8cb6b4c2ab7e43",16),
 ap_uint<128>("0x52d6f6eb30d5ae745736a322c1fa6041",16),
 ap_uint<128>("0x45077f4813f12bc764347acddeb5cfa6",16),
 ap_uint<128>("0xca8cb84ce921ed0ad0c77ad1326ee8ab",16),
 ap_uint<128>("0x3d3d68dfe822b18a0ea15ff41e3c9f17",16),
 ap_uint<128>("0x5f72b02f0eec1710b5c6082daa317b5f",16),
 ap_uint<128>("0xa19badea8486c306f91937e8ff9be850",16),
 ap_uint<128>("0xee0d89101b20afe63cc5fc4b2fd756cc",16),
 ap_uint<128>("0x707f57cbe2fa4687b6e63861b6bc1a23",16),
 ap_uint<128>("0xef2324fc7eed1b4d5886a8f9ad473a85",16),
 ap_uint<128>("0xda7525dabc8311100d5fe35f406692f8",16),
 ap_uint<128>("0xad11ff9ef6e9bfa9f2f2d8f9bb8b4565",16),
 ap_uint<128>("0x0e6ac4b093aad5999d98a7f4992ef556",16),
 ap_uint<128>("0x61b629264180f4b607f51f5cb0c903ce",16),
 ap_uint<128>("0x1b87a7e27a3a982257f56e5231b912fb",16),
 ap_uint<128>("0xb3c694a9d8489331aa9bf540402e5067",16),
 ap_uint<128>("0x0626e8e881e29689060221a8c384d0bd",16),
 ap_uint<128>("0x36035b957269e1a84d6a08bb73e95dd2",16),
 ap_uint<128>("0x24bf290211786c9dfbee56618a3f05cf",16),
 ap_uint<128>("0x4f4641bfdc579fc696cb1e37f71c15b5",16),
 ap_uint<128>("0x3ea34664bcd8cebee22cbef4d81c8a7b",16),
 ap_uint<128>("0xd9b9f602f240270fb0ce39679a73810f",16),
 ap_uint<128>("0x0a78b1ffc139b3516e8d27d4dad3365c",16),
 ap_uint<128>("0x0f70f46b4e2496835c333695e4b96606",16),
 ap_uint<128>("0x767c1b5f8f8a6000894515ca2db224fe",16),
 ap_uint<128>("0x2a705a051deda3110b7f5fc301efb8bb",16),
 ap_uint<128>("0xc703a5d7dd2e4165724ce125d474a4ac",16),
 ap_uint<128>("0xfd471e42794e6c81566ca9fdf76691a0",16),
 ap_uint<128>("0x4a4c139ed091afe3f1d7ff1246f2d9f4",16),
 ap_uint<128>("0x7be4336756bec4545862dd0260a14e43",16),
 ap_uint<128>("0x1e14f31e918f08387ef27f5e0ab95e92",16),
 ap_uint<128>("0x6a9f5a36291c38ab12ada7e87bd307d5",16),
 ap_uint<128>("0x867e856fc555915989e4066f537a23da",16),
 ap_uint<128>("0xa82f01b7500e4ea72bbf9ef96312f665",16),
 ap_uint<128>("0xf782b3e241435fd3a5c3bfe877060728",16),
 ap_uint<128>("0x49b296a0e723d5e42612fa4065a95a3a",16),
 ap_uint<128>("0xf422d7997115554c0739af95584a82c0",16),
 ap_uint<128>("0x9b8604050cfa5b5847eb1b69f494b894",16),
 ap_uint<128>("0x3e7ca2bcbebb2605847cd7ad41217672",16),
 ap_uint<128>("0xc1f491f0b8eb9cd6a9386d3960d6720d",16),
 ap_uint<128>("0x06cc47144f8074a173081f3805e5cb02",16),
 ap_uint<128>("0xe83d6a857ebbc45478a8e0e1cf53a4de",16),
 ap_uint<128>("0x99c465eea029b3b8addcc7fd57c975e7",16),
 ap_uint<128>("0x74ab5175b6b86c5ee789d77faf474b02",16),
 ap_uint<128>("0x795deea0e9d3cc9ac417b509e0807860",16),
 ap_uint<128>("0xdd3ddfa79c9745f6286666642bea7165",16),
 ap_uint<128>("0x1a769d3f3172b6305f7aabdc035a5126",16),
 ap_uint<128>("0x12682dee1894a01c71a6b3c26b24a595",16),
 ap_uint<128>("0xbccf8e328c21df211ac76c02b849841b",16),
 ap_uint<128>("0x46a63435d3f76045ccfb33c96b94f940",16),
 ap_uint<128>("0x419129b3a72102495c2c03d1aa049676",16),
 ap_uint<128>("0x7d211b9069ffe561b80edcda80803c3e",16),
 ap_uint<128>("0xf8c9f7cd9bba4c168c53e1cb95eb6ad9",16),
 ap_uint<128>("0x7f12a774750fe89076fe771bb4a341dc",16),
 ap_uint<128>("0xc97593296cdd9c563c26eaefb0b50396",16),
 ap_uint<128>("0x2c7bf27ddd9b90f93759d0ba4eba45bb",16),
 ap_uint<128>("0x158674305208bfed94791e615e7369d7",16),
 ap_uint<128>("0xe8b2c23c34daeadab7182e58b730047a",16),
 ap_uint<128>("0x46be712f1df8bcad71caf68454aabf61",16),
 ap_uint<128>("0x8fcb880345ec560d4d2104c34de6e9b4",16),
 ap_uint<128>("0x781447af89c48e89ba09bef957aa4b6c",16),
 ap_uint<128>("0x1ba3697e00a787593896f0e749b433f7",16),
 ap_uint<128>("0x4f7386811c6c7ea2f81c0580a1627822",16),
 ap_uint<128>("0xc49c1ff05228e356f30c8b3e1486289f",16),
 ap_uint<128>("0x5170022146ded1ba2cbb0522397728b0",16),
 ap_uint<128>("0x32b6e8fa1ab53d4103866aa6925a9bf7",16),
 ap_uint<128>("0x30dd115ba2d0487921835894732f9343",16),
 ap_uint<128>("0x7b3cffc4dd80c15b5448b8290a6218b1",16),
 ap_uint<128>("0x1d7f3a2f36a3d1a09fc87764555c3c74",16),
 ap_uint<128>("0x9c0f356d7eeb320dc03b8160c0a0c75b",16),
 ap_uint<128>("0xaf01f0e4a0af0e45c47718497bdfeb1c",16),
 ap_uint<128>("0xd9abd7ac5ab14ed2feccd245740fd6ce",16),
 ap_uint<128>("0x5c6dc763b2ae57994b5e1d80d70c1816",16),
 ap_uint<128>("0xac3cc949810e8d0439001b50c50c782d",16),
 ap_uint<128>("0xb30c650f6e9791fadb291773e05e5c9a",16),
 ap_uint<128>("0x7784f375d014240a029d00d4dfd0bb29",16),
 ap_uint<128>("0x7622e34f4c869d9f9f9579309a5694fd",16),
 ap_uint<128>("0x374640da8f5d59fa574f5e5fd4638dc9",16),
 ap_uint<128>("0xced60a56f368041b538f9a58b8790367",16),
 ap_uint<128>("0x6ee7bf44478c8138babf586226f36fb3",16),
 ap_uint<128>("0xf64cef2535696e2e11b0879d4cc16fc5",16),
 ap_uint<128>("0x18933a7c575a4ae46e9447bc0db4b449",16),
 ap_uint<128>("0x58cea7c720233dde728bfcf86a6350b4",16),
 ap_uint<128>("0x722c28da6f202bdb21dbf15215bd6b56",16),
 ap_uint<128>("0x1387d12d726b9e516a386dceb5ccbeb4",16),
 ap_uint<128>("0xd2c219e8c9d84a1d15f78ba00b42b167",16),
 ap_uint<128>("0x2efe0d6a1a84b010803c47b0e8b1d815",16),
 ap_uint<128>("0x78e60199a33aa90e1bd86cc3b87f27aa",16),
 ap_uint<128>("0x6bdc952ba1440b8735e1d2798e9ea116",16),
 ap_uint<128>("0xbbab1b9ec0aa503f66e7b997a2527e94",16),
 ap_uint<128>("0x95ab10d8c7c2d631812d76c91c2948d2",16),
 ap_uint<128>("0xa8dad03f4a936182c8386bd5cf874232",16),
 ap_uint<128>("0x8c66ec94d710c702bfb551f1930633ce",16),
 ap_uint<128>("0x14884c978fa99201fb3820c26038db93",16),
 ap_uint<128>("0x77de6620fc77928aee2c8d33ea7f4e7f",16),
 ap_uint<128>("0xd4e42d1de7441e937f8d17e657e5bcf3",16),
 ap_uint<128>("0xcf3865444400923302ab211eaff64b98",16),
 ap_uint<128>("0xd97e8278454b705fe27188177fb09c45",16),
 ap_uint<128>("0x718336bb7184ef0f77c04b2bdb9625ac",16),
 ap_uint<128>("0xe931b50a9c9d80c20b901cca3c2571db",16),
 ap_uint<128>("0x2e9d31807a75eb94eb1a4d58bb230108",16),
 ap_uint<128>("0x8e731858967dbbc17e1bfd70c7f1d72e",16),
 ap_uint<128>("0x72697c812ebc65ab8af22f46488882b9",16),
 ap_uint<128>("0x9ad42292af8efcac872f02f244ca8fde",16),
 ap_uint<128>("0x5bef88226c4969692c8da146b1369ee1",16),
 ap_uint<128>("0x2b2254ced97920c88f99185fa19d84dc",16),
 ap_uint<128>("0x7d17787ccc91fb654b9553e1fa149735",16),
 ap_uint<128>("0x1ee657d77802fc856fff9a4681e24ed5",16),
 ap_uint<128>("0x4cf9e3cb80aedfcc25d415ef06db70f8",16),
 ap_uint<128>("0xcb483e2d0cfe535368907a78e7181002",16),
 ap_uint<128>("0x88166c51a0db6e164599336b9c1db10f",16),
 ap_uint<128>("0x508ba9e9c707cc78aec0d2b1c11d3012",16),
 ap_uint<128>("0x6660310e463dcd5e0dbd32022807cce0",16),
 ap_uint<128>("0x230b87a4a58e8bc85a6d708b1c1824ab",16),
 ap_uint<128>("0x288f7973bdcc12a62295f54b24848838",16),
 ap_uint<128>("0x1664f24c111e316b7f34f83ffbec90d8",16),
 ap_uint<128>("0xf79a8796c96dd5472825e1465728ea31",16),
 ap_uint<128>("0x1bfeb95df0ae5b75e20ed3d050602981",16),
 ap_uint<128>("0x15de71b0bf6b765de0aa5c54a0e32972",16),
 ap_uint<128>("0x324768d220c29ac6dd8d023dbf620319",16),
 ap_uint<128>("0xb08a908fcd914b8a93a9f70bb01e86d8",16),
 ap_uint<128>("0x2e1946c7503b97e9e620b88d4e6829b8",16),
 ap_uint<128>("0xfdfd7558481f850f7d542d34b81cb41b",16),
 ap_uint<128>("0xc42ffe662e324669a5f0921ebb4fb4ed",16),
 ap_uint<128>("0x45619b90237118ac22fecae4d8679761",16),
 ap_uint<128>("0x87e3e97c8c918293412f1cda229707f5",16),
 ap_uint<128>("0xed3a3b9c7ad4117b27a4ba56ac02dc9e",16),
 ap_uint<128>("0xfce80a2843acd18fef62238968d5c3fd",16),
 ap_uint<128>("0x025bb41f6d5dc415fc807ef5a9f784aa",16),
 ap_uint<128>("0x96a09066ea7e8d5d1b30848326b059ea",16),
 ap_uint<128>("0xf8a0b512d8ced0e17584e9666a875685",16),
 ap_uint<128>("0x973f1095c366a365617587fe0bb16eb0",16),
 ap_uint<128>("0xf74503edd447f826cbbbfbad907ab4e6",16),
 ap_uint<128>("0x9a2d15303bde47e43bd4f7e8e1e3460c",16),
 ap_uint<128>("0x126cc0cd35637de50b9bcc33dbd34b7c",16),
 ap_uint<128>("0x04afe4bfb80d942958235b739f9d3321",16),
 ap_uint<128>("0x9d3bf208b58fb1357d4b9a669590135d",16),
 ap_uint<128>("0x0420a4a4a03de68e2af3af2aa6717060",16),
 ap_uint<128>("0x11bb801f2f5f9729c2eee218f71a3dac",16),
 ap_uint<128>("0x69e9d448cc4a95dd23b7aed8a78209d0",16),
 ap_uint<128>("0xe991a8453eb4db5a7a5b1eec57276598",16),
 ap_uint<128>("0x35e8e1976170b1ed9634ea45c24af20a",16),
 ap_uint<128>("0x7e2a9a58f70f447d95b95acead2e3a50",16),
 ap_uint<128>("0x559ed4c2abe83b3f8fa7e0c537409b62",16),
 ap_uint<128>("0x93509936cd41db39addb9164649981cf",16),
 ap_uint<128>("0x1bd6955f479291f99f60d358c64cb038",16),
 ap_uint<128>("0x05969f7e0014df299aec3b3f97ece473",16),
 ap_uint<128>("0x122151176ef4b3fa5cf90a2955c78996",16),
 ap_uint<128>("0xf8ef6eb8df18c67bf17e7af128996f27",16),
 ap_uint<128>("0xa6c1f815ec9fe533529fc06e5b096e7f",16),
 ap_uint<128>("0xa3261093b6b1a831af82f7850b020087",16),
 ap_uint<128>("0x1df3317722afed5743358e746170b4cf",16),
 ap_uint<128>("0x718e2df8f6a46e161c89ccc9206b3afd",16),
 ap_uint<128>("0x965dd6482da954c228aa041a090201cb",16),
 ap_uint<128>("0x7c63575dba83e6542e05e91a25fe01ec",16),
 ap_uint<128>("0x15778032a8119c7aa116a499bf4b5928",16),
 ap_uint<128>("0xec1b10109bac2f055a5cfbf84ed28c08",16),
 ap_uint<128>("0xae899fbc30e6c2feb249cb5f595050a9",16),
 ap_uint<128>("0x554f7f34133105de47764528df4854d5",16),
 ap_uint<128>("0x6a74388833553772cb8bf62ff7782568",16),
 ap_uint<128>("0xeea9273fe5590c632cbb4f5ca56ad6d9",16),
 ap_uint<128>("0x6513f24257379b302e7b39eb92d2cb54",16),
 ap_uint<128>("0x88446558f3c956b6be08b3d1af327190",16),
 ap_uint<128>("0x7435ff90b22fe5ee2fbbc55856bcaa97",16),
 ap_uint<128>("0xaa429e61c2dc82555be53e66adf3015a",16),
 ap_uint<128>("0xd4136962bb11b59e5d422b949f981246",16),
 ap_uint<128>("0x926e15106274061bd21fd607c4d1c3e6",16),
 ap_uint<128>("0xdf611a87605b555d503f9eaaf07a317c",16),
 ap_uint<128>("0x9e76f95e384b5425287d209394d8098c",16),
 ap_uint<128>("0x1b83f8caa9d9aaf659c6f6d1918e8ea1",16),
 ap_uint<128>("0xb448643a836da1ee154e6722dc373ab2",16),
 ap_uint<128>("0x3b056f214e34b1722043b8eba1baa26c",16),
 ap_uint<128>("0x493c6884e41bfc836a72e248493ee61a",16),
 ap_uint<128>("0xc0ac8a88d2695ecfbb4d911984e50d49",16),
 ap_uint<128>("0x173a0bb9d6d393304d811c1c851ef8ee",16),
 ap_uint<128>("0x263d8a1053050a9e38a71e228ed87012",16),
 ap_uint<128>("0x22d1ca2b675508e101d98366c5ed1c4d",16),
 ap_uint<128>("0x13cc9cd238866c0658157db93586add1",16),
 ap_uint<128>("0x7368f41f1aaf6174b3798e8ce90f92eb",16),
 ap_uint<128>("0xebde8dab636cdc71d4852e941ccd8081",16),
 ap_uint<128>("0xd2de28859a34f2490a34e7751a809cba",16),
 ap_uint<128>("0xf501d561eed6a6749aa52bfd3bfd3d6b",16),
 ap_uint<128>("0x6445e4644885f5440f442218fd3bb334",16),
 ap_uint<128>("0xd4839b57a52b2a38ef1bb0b32ef34f8e",16),
 ap_uint<128>("0x9c22498babd3379aa175712594bf84f1",16),
 ap_uint<128>("0x8c36904e9e524d1ac1062317206bd423",16),
 ap_uint<128>("0x28a36938ef01591344b701d05ab26c8a",16),
 ap_uint<128>("0xcd5aebc7d9206c9efce0efb1795fa5a0",16),
 ap_uint<128>("0x2602b13cb12886906949295de021bbd6",16),
 ap_uint<128>("0x9e48f4aa99246df1e9ec5e870e6bdbb6",16),
 ap_uint<128>("0xa593449295991c5a67b6a02b65fa39ee",16),
 ap_uint<128>("0x067be26ce385f3dc0b4c68bea9c3148e",16),
 ap_uint<128>("0xe4698322794534cbc36c0d45379ac7ab",16),
 ap_uint<128>("0x8432d2a13d561b07b8bbb61fcf60e03d",16),
 ap_uint<128>("0xbac52f1d6c0eef12361647acdf9b74fd",16),
 ap_uint<128>("0x775df814e5e60f827b5c089d9f8fbedc",16),
 ap_uint<128>("0xb8873e28c67dab2b2545ada8694f9d6f",16),
 ap_uint<128>("0xcad7337b50321a186a822def0275065e",16),
 ap_uint<128>("0x6e16a70bf3ce9dbac079726c00980a81",16),
 ap_uint<128>("0x3db4db14dc37c17b2265b70d2bb33327",16),
 ap_uint<128>("0x81d58b09e5f88e8f4fcb26dfe3910ad5",16),
 ap_uint<128>("0x7d9491d2915066afea64a8a6809c1b7d",16),
 ap_uint<128>("0x6a965af53e389a3722ba75d88a3bb53f",16),
 ap_uint<128>("0x46c826e9922075fa3114842b16e48144",16),
 ap_uint<128>("0x34c285acf9ea35d717b4870d55b41819",16),
 ap_uint<128>("0x803e495e450cf97dc1a2b6693a506d41",16),
 ap_uint<128>("0x3c67703dfae1c8861be480212e1dbe38",16),
 ap_uint<128>("0x6f5ec0769936066a41edf039b20f3ef4",16),
 ap_uint<128>("0x762c8232244d055de9ba2ba3f86c8e5b",16),
 ap_uint<128>("0x67b13dd7f07ee2a5236a216be0ae3c78",16),
 ap_uint<128>("0xdbb1e99458f1eca812ea4f28180ac199",16),
 ap_uint<128>("0xca88811e9b9d44288edb635ddfa7a2a9",16),
 ap_uint<128>("0x760284f5b9a2c74930caf44652480520",16),
 ap_uint<128>("0x8780dc54d834adcc18130355a16fd2f4",16),
 ap_uint<128>("0x60f931f224d3a19e06fdd535279a1db5",16),
 ap_uint<128>("0xb8b4b79fe6b3aa400badd38e83d53ad4",16),
 ap_uint<128>("0x7ede2e3ea3a48e1358a9d60c339c0e4a",16),
 ap_uint<128>("0xd9c3fcdc1963860563141a15aebee71e",16),
 ap_uint<128>("0x8f8883f8e15e303bf7d13f92fd2d9f81",16),
 ap_uint<128>("0x3478abdd18e27d82fdb5874c00a61958",16),
 ap_uint<128>("0x01d9e83388201a49ce3776e1d5648564",16),
 ap_uint<128>("0x7da93853f304c2a2325ae9d3f272d647",16),
 ap_uint<128>("0xe53bd91d58e6674fc27dfa7aae3d39a7",16),
 ap_uint<128>("0xbb8288cee358e0d3310184c271db549c",16),
 ap_uint<128>("0x794d20ef61fb220161e103f38735325a",16),
 ap_uint<128>("0xf1421f6ed91a749da13b44d82b696c99",16),
 ap_uint<128>("0xca3bdb2db3fbeeab1a91f1cd3948a3b5",16),
 ap_uint<128>("0x0d78698f19fbc59b7113880e0452ef35",16),
 ap_uint<128>("0x7c0139910142f24028787e6c0ad25bb5",16),
 ap_uint<128>("0xb9ebdebe6214196769bfeb2a3afd03ce",16),
 ap_uint<128>("0x5a954354e0efb3347194a99e97ec0263",16),
 ap_uint<128>("0xe017eea766cd60513f43a9db8108ccea",16),
 ap_uint<128>("0x411a727edb07db7224506ca736fc70ce",16),
 ap_uint<128>("0x986355d9b33210048cebd4c5d3b9f724",16),
 ap_uint<128>("0x2104f6ccab3d534c42c3b1f713402848",16),
 ap_uint<128>("0xe1a19f7f3c43ea0fbd1b87eb87600aab",16),
 ap_uint<128>("0x45010a15077e10057c05b738c98089a2",16),
 ap_uint<128>("0x832c219fdf7800ec3f437c3f2bc5b7b8",16),
 ap_uint<128>("0x71f66f462422a1155fbc8d8269c78c85",16),
 ap_uint<128>("0xabdea8ee76101535b8c693ccc7d8edfd",16),
 ap_uint<128>("0x20ba32a072e90a504516417382f1c06e",16),
 ap_uint<128>("0x0ca938e76db61720d04d53e8adea0a7d",16),
 ap_uint<128>("0x6567d12b8a67a2178278b50ae014b002",16),
 ap_uint<128>("0xfa866f5641fb5fc9cefa7f6262eb44d0",16),
 ap_uint<128>("0x1f640147e1bd03d4ec82f53e99ef36a4",16),
 ap_uint<128>("0x0cbb286fa6d51b99720306055a90f0ce",16),
 ap_uint<128>("0x6ef2e10ab33c73fa370c3acb90d65830",16),
 ap_uint<128>("0x2786bde81467d0ea7f03f326119c69d7",16),
 ap_uint<128>("0xe6a66f29647bbd13187cac8a91548b5b",16),
 ap_uint<128>("0x9a5f63c8f2f5e87e3be685a285ee26fb",16),
 ap_uint<128>("0xb90a52bb4784595e29c0dc9427857b14",16),
 ap_uint<128>("0x4bfab91f4a50017ed93c4147a2efb256",16),
 ap_uint<128>("0x210d11fa3858947cfd2dd9385e1947c1",16),
 ap_uint<128>("0xcb575bd2d4a1e1ae6f7d649a80771ed1",16),
 ap_uint<128>("0x216b7bc8fd7a9b8ecfc802e997f1f61e",16),
 ap_uint<128>("0xc5cbf5a5566e1af140dab002522cc5b7",16),
 ap_uint<128>("0x351009b97c411cdf43b52bdcbce181b5",16),
 ap_uint<128>("0xab7bd52518744c5d97e99fd0be675df5",16),
 ap_uint<128>("0x19966e722f9d8a73a2641c6e272946b8",16),
 ap_uint<128>("0x834d095472361f62a299de45e1eea4c1",16),
 ap_uint<128>("0xf5cf74e2dcdbdc65ccdb4dfa8aa6df64",16),
 ap_uint<128>("0xcb4b600cd38b9f9ff9b2b784e93c8f0f",16),
 ap_uint<128>("0x1a609af53568d2829ed2442f82672c25",16),
 ap_uint<128>("0xb58b1609c1da0fd56b134b2e52d567ed",16),
 ap_uint<128>("0xd1c3757959156a70a18d975d5d864a60",16),
 ap_uint<128>("0xed086b9557dcbe1a49d7a0d11083705f",16),
 ap_uint<128>("0x403b282394c9e3a895b863b5f63101f2",16),
 ap_uint<128>("0xb85eb95eb21ce0f5b5247a6ed3dc9018",16),
 ap_uint<128>("0x6f03fa23a112464a290c41aeb9b50d59",16),
 ap_uint<128>("0x889e1d77bc931b25a3d7116fd90bef04",16),
 ap_uint<128>("0x213f9cba20e916cc6e8d0429b4d9251e",16),
 ap_uint<128>("0xd6ffd261559756493fe11792cbb8a1e1",16),
 ap_uint<128>("0xd993e2e1d65f0e2bc5c2cdd35c63c334",16),
 ap_uint<128>("0xa68283089a445b972c7d6e4b541fa320",16),
 ap_uint<128>("0x9a0c50b3849475382eacfa3a43e9c151",16),
 ap_uint<128>("0x38ddda8771c39ac2e2dcf35395598027",16),
 ap_uint<128>("0x7a563729624840a8b9afc5e749d3a79e",16),
 ap_uint<128>("0x531ca61954da45c5bca194310766bd51",16),
 ap_uint<128>("0x3bfcafb1e5ef98d4822c625f171226f3",16),
 ap_uint<128>("0x184645ebc017d3c05110d648dd73e917",16),
 ap_uint<128>("0x49c8b3613de23ed6e97df267592632c6",16),
 ap_uint<128>("0x1be43a64b89ed52c0d1c34f6ddd3308a",16),
 ap_uint<128>("0x967d211c45003aae7a34c99ea6a827bf",16),
 ap_uint<128>("0xb624aa358f29922e9af131222199a242",16),
 ap_uint<128>("0x3dec1c535675307d9d723e0e5052f30b",16),
 ap_uint<128>("0xdae5b1b99eb2b3d473671cf71ac29a30",16),
 ap_uint<128>("0xdd65ff0c5fdfa26b469746e4574543c3",16),
 ap_uint<128>("0xd4a82839349fdf040f1fb589dad5eadd",16),
 ap_uint<128>("0x719c5f34bbc42e5b860caeae313de166",16),
 ap_uint<128>("0x0e20d18c4e47bc49ace32c6b74ae4c8d",16),
 ap_uint<128>("0x7b27fa5fbf306319ca2d0db9f51b1841",16),
 ap_uint<128>("0xb40965a8ce25f0d76896e1130aa0926c",16),
 ap_uint<128>("0xd2dc4a719e267fd0536939d60462e593",16),
 ap_uint<128>("0x1900815ac2d3c90d469bf3727d9a8248",16),
 ap_uint<128>("0x2f9f1bf8561dd81856bece345790614b",16),
 ap_uint<128>("0x3c3f8bfd5751da11b3bb4729a20fe422",16),
 ap_uint<128>("0xed82b096f5532fd97c75cf8f529ee09f",16),
 ap_uint<128>("0x1812aff9be82283469d862a19d271584",16),
 ap_uint<128>("0xe4e5454deadcb3f66bba380323d33bd9",16),
 ap_uint<128>("0x65810e6a16954105265d73e6bf211768",16),
 ap_uint<128>("0xdaddd311c8e4ca8bfafccf4918f5db22",16),
 ap_uint<128>("0x986f2e905787a128fc66e584ca9faf4b",16),
 ap_uint<128>("0x9094ca7d0f8817ec0d6d5651f9fdd96b",16),
 ap_uint<128>("0xbd6139789638cb66e34c10f061a4592e",16),
 ap_uint<128>("0x1040471545d45a25a3bf51ebf3eb9c51",16),
 ap_uint<128>("0x7425a977abd3dd8f7f23d9c5c0f29faf",16),
 ap_uint<128>("0x791ebdad225754e3377784257214c6a4",16),
 ap_uint<128>("0x1a8423cf1b31abf4ab8d63c14c1f2945",16),
 ap_uint<128>("0x3ad868cc07adcd1d57421c29b38a0c3d",16),
 ap_uint<128>("0x29bcf34e92be394de2e33b2b32e67244",16),
 ap_uint<128>("0x74576a5317dc9bebef30f892851d6435",16),
 ap_uint<128>("0x1afb71eed3b87ec5c806b158571722ea",16),
 ap_uint<128>("0x400a89826f3a175ac83788e6a0ee7237",16),
 ap_uint<128>("0x976fe87fd931df399c35c1578b15e60e",16),
 ap_uint<128>("0xfdb6db0cabafc7a64dcc9f437b856188",16),
 ap_uint<128>("0xb24fe828d72fb4dc1ef8d7c1c55ffac1",16),
 ap_uint<128>("0x1742e473bc01e34614fa3129f114e5d9",16),
 ap_uint<128>("0x22b82fb4509cc3aedb300e10dca7bbc9",16),
 ap_uint<128>("0xf7f45ca57948a7b64643d05fc6adfde1",16),
 ap_uint<128>("0xa716a33cb3e2d41faf26dcb16529c279",16),
 ap_uint<128>("0x878b0de5e4996e6187a572fd52867ca7",16),
 ap_uint<128>("0x54262c0d100f9c0ad6d9573ca5433736",16),
 ap_uint<128>("0x9b6e4abae6fc3b55421e4059a6cf5818",16),
 ap_uint<128>("0x0dcd97abad118b435ef99adb5e60cb75",16),
 ap_uint<128>("0xf26ae2f6b362151977fef6f3f09e2b48",16),
 ap_uint<128>("0xcb79587c261526f29a3f7f21b3f1ed78",16),
 ap_uint<128>("0x1f49649a9bfc991c4a524f21bcdea8f6",16),
 ap_uint<128>("0x7b3f77b7ebf6b9f17f5347b3d9b957ce",16),
 ap_uint<128>("0xee4ae4a9a6debbeec6a1a340c112ad10",16),
 ap_uint<128>("0xff97f3f369be957906051636d8f50469",16),
 ap_uint<128>("0xda346d6e1e6e328276e385abfd1d20c8",16),
 ap_uint<128>("0x87697e93995dcee67f28df63a317a6a3",16),
 ap_uint<128>("0xa9f66b3fa0a8ac396ad1f1e1d2342e06",16),
 ap_uint<128>("0x76e755426561ff9f31453d30082bcd2a",16),
 ap_uint<128>("0xd405ccdd52b0089a620e24770be1a60a",16),
 ap_uint<128>("0x31a0fd1ceba849ff9896964ffdfd41f4",16),
 ap_uint<128>("0xc42804e027c6e9beb8178b3367eae41e",16),
 ap_uint<128>("0x7a8dfa99a1d8b79f501343f2a103561b",16),
 ap_uint<128>("0xe2b3836e6666d6ed8443eb09fb1c6dc7",16),
 ap_uint<128>("0xa2034cbcb99f875682ee063f97c29f37",16),
 ap_uint<128>("0x5d083214599daf5831ed8aae4e0fa496",16),
 ap_uint<128>("0xe33744e76c37ed5003555e15d32dd0ac",16),
 ap_uint<128>("0x732fd6913b8eded1636653e2477d7a78",16),
 ap_uint<128>("0x0b9c3abb99c0222ae25f2942e24e0329",16),
 ap_uint<128>("0xf3f92d805d6b478a92cecd376a85170f",16),
 ap_uint<128>("0xfbafdd5c0456d8da75c3ddfc19ec6ea7",16),
 ap_uint<128>("0x0739d9d1a67a46016778d7bae9f91bd2",16),
 ap_uint<128>("0x391426d70d0d54800bc005a101c5c73b",16),
 ap_uint<128>("0x14f4f7b0ce9abbdbfe4e6c377b61ac6a",16),
 ap_uint<128>("0x7519c1d0baa06ff9ac7dbcafe35488b6",16),
 ap_uint<128>("0x10ef63f62f334feea048bdf378ef473a",16),
 ap_uint<128>("0xc2d23af93c95270e81e81f26949dee1f",16),
 ap_uint<128>("0xa23fe4e663cda28db36a60c16c7943a1",16),
 ap_uint<128>("0x6f936ee7623f916a3f39277fb1a8da5e",16),
 ap_uint<128>("0x6ff104bf4af139f78cf41957ddab1b0a",16),
 ap_uint<128>("0xa51c09968a60238d9738173d2be4b8a1",16),
 ap_uint<128>("0x5b9ee57b64a4d5ee2fe305a57b47dff0",16),
 ap_uint<128>("0x3d894cf9a4d0897b09c2f9aa4bb67549",16),
 ap_uint<128>("0xf8eddd14c3fb4d69b264bdd0023a2d4b",16),
 ap_uint<128>("0x507455d69533a9fb5c6d720b598a149d",16),
 ap_uint<128>("0x2bc79cc1bbe3d498b8b08876d6579976",16),
 ap_uint<128>("0x04bf90d2293f78e1ae21bd9f00f09465",16),
 ap_uint<128>("0xda8c4ae9095f910924b9fb82d09c13df",16),
 ap_uint<128>("0x0aee83a8813e8603af29157ea616647e",16),
 ap_uint<128>("0x81592af8fbbfcbb237d276980d467c9e",16),
 ap_uint<128>("0xf42ec75c4f549bf4ed3697a56546b3bb",16),
 ap_uint<128>("0xd5475f3aafb00d87cc4fcc93beb971fc",16),
 ap_uint<128>("0x556ceb11e452381b50081e3f19cc5bd9",16),
 ap_uint<128>("0x2fd4c279196852821371de035a36feef",16),
 ap_uint<128>("0xa348b0e579aa26daa4310fa9ac94d1af",16),
 ap_uint<128>("0xfaa96e86ad00d381302e1d8f435af4e1",16),
 ap_uint<128>("0x3205f8ffd158392368e2a3a345e775f7",16),
 ap_uint<128>("0xe6cfdf5fe2ea7122d126f17ab0d09596",16),
 ap_uint<128>("0x85a32d0f0144cbbe0e7a249287309aaa",16),
 ap_uint<128>("0xfbb73c037e16b28b49f92c3abe8d041d",16),
 ap_uint<128>("0xd9901aa2b20e81dd3ea6a0ba64e9a821",16),
 ap_uint<128>("0x6cd25fe5e78fdb43daff03763366fe51",16),
 ap_uint<128>("0x445859f561ade88939c716e10f0b34a9",16),
 ap_uint<128>("0xbb1f7acce6b85ad0b280d27dd730766e",16),
 ap_uint<128>("0x218d189eae2960eaa4a0fc7e0a14bdc1",16),
 ap_uint<128>("0xca064891b9f6fc1fdd7fe062994a181f",16),
 ap_uint<128>("0x8f7bf76d8614c5c362035770f93302b5",16),
 ap_uint<128>("0xe9ff9c6e1f95ecbe28daa0c491228a67",16),
 ap_uint<128>("0x021496f9abf5a1db67f60b65f8b37973",16),
 ap_uint<128>("0xc500b41982f7085ecfc10796341b28ff",16),
 ap_uint<128>("0x860c81c87f6a1d6cacd790bffe441a02",16),
 ap_uint<128>("0x39c8819ec0154c4115ac75bcff246c18",16),
 ap_uint<128>("0xf7267bcef8dd124e286a2cc16877e6dd",16),
 ap_uint<128>("0xd506c5df89dfb8765cb0997b341a24a2",16),
 ap_uint<128>("0x7d26f3c9eecffecf55a4ed9c3a529590",16),
 ap_uint<128>("0xe4df91e78d4f82fd9ce28197cb7f1a6a",16),
 ap_uint<128>("0x5692bd43677579ad1ba16f3080083196",16),
 ap_uint<128>("0x114fdc0f00bf12710eb4ce4e9f168ea0",16),
 ap_uint<128>("0x402b0f46c6734f548a60caefd2d2f8bb",16),
 ap_uint<128>("0x97e61b0b7929eea4b2f64a4de4436711",16),
 ap_uint<128>("0x14b7023126c0c8d6e4ba7f45ea3915af",16),
 ap_uint<128>("0x39822b6819f2934bc481d5fc1188520b",16),
 ap_uint<128>("0x69875dc61a68530604954d58241b6279",16),
 ap_uint<128>("0x2a9a06a0fa415a41cdf5f2de7c4fc0fa",16),
 ap_uint<128>("0x6412fb35f387936eee90f72d62ac43d4",16),
 ap_uint<128>("0x07c02587ad46dafe9b2338aa1925651c",16),
 ap_uint<128>("0xfceed5cf1b5c5034f2f8fb8b3fdfeeed",16),
 ap_uint<128>("0x534d51ff70f0898ef2fafbddd538f9fe",16),
 ap_uint<128>("0xfdbca0bba7fa8752547bbf7f70fe8c58",16),
 ap_uint<128>("0x1b8351d83bb302f4987fe3ba81fb8391",16),
 ap_uint<128>("0x2d509c96e8217925c3d90e67043df3ce",16),
 ap_uint<128>("0x1968526de315a2496d26194efce608a1",16),
 ap_uint<128>("0xd302fedbc28f3a81b4033cdebcd82c15",16),
 ap_uint<128>("0xf7e26d38e23bc5a017ffb78da0eec383",16),
 ap_uint<128>("0x4c98bd4e4a00252d345e7b547667b78d",16),
 ap_uint<128>("0xbed18cabe0d632aa99ac707a78a05a35",16),
 ap_uint<128>("0x7565fb0042145b6068437c8d669daa7f",16),
 ap_uint<128>("0x771b3018bb0c077025e583f7680f17a9",16),
 ap_uint<128>("0xd89773f78155059603a654f1c71fba25",16),
 ap_uint<128>("0xae4847c105121aba71a085844fc905c3",16),
 ap_uint<128>("0x8e035c7f4f9e844a096257fae96b88cb",16),
 ap_uint<128>("0x7993fbc1784367cd4228ba16372d3b31",16),
 ap_uint<128>("0x6ce4499ca945b36fbf02c5d7308be19b",16),
 ap_uint<128>("0x7c1f68c40846ee0ce0db0666e7448e7c",16),
 ap_uint<128>("0x62e8d2615c0bff77850f3a228a3fd6a9",16),
 ap_uint<128>("0xe743d5ea3744365a700c596761236d03",16),
 ap_uint<128>("0xf410b3ee3eba47e917149d09f3fb5074",16),
 ap_uint<128>("0xc455882b2a86b51a752a847a4cb13dd7",16),
 ap_uint<128>("0xe6a814834b7d57da27d2858d681dae3e",16),
 ap_uint<128>("0x3f61af5ede02d35ca503873df5838861",16),
 ap_uint<128>("0x199eb5e76f92ca4a7631f33df5243548",16),
 ap_uint<128>("0x1e56ae41cde5af98de6b0d6ab5e87a32",16),
 ap_uint<128>("0x141bcb706402b3d71aef13ea21b2e188",16),
 ap_uint<128>("0x82e96cf98ce13dd82f8ec615e8139ccc",16),
 ap_uint<128>("0x04bafa4c0822842b48690637a4e83848",16),
 ap_uint<128>("0x1782e20c8e99f32f48ec86a73b9a9c18",16),
 ap_uint<128>("0x044d92c57f3a4d346dfd94c8f2ccc8b3",16),
 ap_uint<128>("0xbde0f5743152ec9da48a82b42e7f97cc",16),
 ap_uint<128>("0x77c66a110030fe28e21069bcf8639aeb",16),
 ap_uint<128>("0x458bf5ccaf4a68e58b6614885fa56df4",16),
 ap_uint<128>("0x23e980f68f1672cd2b7845befe78d256",16),
 ap_uint<128>("0x6d3d86e3296e889bb23133f7f274687a",16),
 ap_uint<128>("0xb49e50d4163f540ead9fb6efaf11a0f3",16),
 ap_uint<128>("0xc32199cca40ae5b6b97ca3241ae609a7",16),
 ap_uint<128>("0x45eda6bcd912a298dd4f7d9354c956e8",16),
 ap_uint<128>("0xdfc157913327376df0ac0afc62bf8355",16),
 ap_uint<128>("0xb5b5dcf064e0540d341ebf95e826ba17",16),
 ap_uint<128>("0xe16a0a855a00bfa2e006bb19b3b81000",16),
 ap_uint<128>("0xeb372f02b235a302ccef7446a48d41d3",16),
 ap_uint<128>("0x6c2f1eaecace2d61b376dbdb9399bef9",16),
 ap_uint<128>("0xffb65b19aa5900351225cd155249fe62",16),
 ap_uint<128>("0xf4bfd5927662bcecece5723340fb1c89",16),
 ap_uint<128>("0x5312b19addd8f0eb3f8b852d730d3e70",16),
 ap_uint<128>("0x09c3a515492f28620dc069dc288122cb",16),
 ap_uint<128>("0x9fd4d91428be89c15233e15c714b9e39",16),
 ap_uint<128>("0x380a3de074876fbec9a925a732e8edc7",16),
 ap_uint<128>("0xba6d275f01bbf13bf3bed2473d1c25df",16),
 ap_uint<128>("0x3c6589f1ea5043e720c769dbeaea6d50",16),
 ap_uint<128>("0x881cb76d6c7500d77a3d2c315754fd3f",16),
 ap_uint<128>("0xdd21e7c7a5abefd7b46c56021b2e7d5e",16),
 ap_uint<128>("0x42794623633d6ae9c5c4742045aba23a",16),
 ap_uint<128>("0x016df7ff3364e9abcbc84f63655d76b3",16),
 ap_uint<128>("0xe2071d496b1ea9e4f081434ad42cc14c",16),
 ap_uint<128>("0x116cdc7db230d0ae000ba2dac03cd758",16),
 ap_uint<128>("0x891144de5e026665359e27ae685eae7e",16),
 ap_uint<128>("0xb4082133faab0977ee33e8a325b22b2a",16),
 ap_uint<128>("0xd5fde8db32552c88dbb6f7cfa3805061",16),
 ap_uint<128>("0xbd3a2d39ecf47ffe448b1cc5d55f27b1",16),
 ap_uint<128>("0xe2ed34d6a28c94e18ae8b8c4b0f89579",16),
 ap_uint<128>("0xae6d225d2dc9d0843a7b8179090de92f",16),
 ap_uint<128>("0x0cac603c03169f68916a0faafe0f20ec",16),
 ap_uint<128>("0x0fc4c6060fed293df8efe5340123a597",16),
 ap_uint<128>("0x8aa25ea1f15560e85d6890b8cfcdc2dc",16),
 ap_uint<128>("0x209d76d8155cbc68f9615b71977249e2",16),
 ap_uint<128>("0x2f00d44716d05bd1741108e5c977ae00",16),
 ap_uint<128>("0x6dce6887745d0eb441823a42757ebffe",16),
 ap_uint<128>("0x49eade32315ecd10ca428f7f9cfeb762",16),
 ap_uint<128>("0xd1752aa80718b50605ed75ee62363cc9",16),
 ap_uint<128>("0xc2b7f83837313198cf93c7a59a5b479d",16),
 ap_uint<128>("0x01e727a820ed4a515f0c9ae62a806ffb",16),
 ap_uint<128>("0x535d4d1b3f06cb70ffdd463f0a49090c",16),
 ap_uint<128>("0x441f6aa19af3c2864f3726b347609a44",16),
 ap_uint<128>("0x2e6157126df478cbbe29d9c3fc707b1c",16),
 ap_uint<128>("0xf2f5fd726729b5fb1d995eaf2d7dc0d4",16),
 ap_uint<128>("0xf99fd481cf55578a166d440956137321",16),
 ap_uint<128>("0x0e2ea7f0b1cd42dc7ad846d79b29b22c",16),
 ap_uint<128>("0xeac6b9f48f95e0a15e5125d309fcc900",16),
 ap_uint<128>("0x7d859c7f37e7dd70793054147751a584",16),
 ap_uint<128>("0x6b6c5ff8ffd75c6af0e638195d40be66",16),
 ap_uint<128>("0x733be2dd80005b04c70fefbfe4620c92",16),
 ap_uint<128>("0x94d49d862526c65a1420ab3f808429a8",16),
 ap_uint<128>("0x6782d460c1a1b1dd11f1c5b27479796d",16),
 ap_uint<128>("0xdfaa66a20b12c929491409a74bda2a3d",16),
 ap_uint<128>("0xa99be3fc66fde9ba0f5646d929b49ae9",16),
 ap_uint<128>("0x0ffa366fe472fdf6202c791c59b284f9",16),
 ap_uint<128>("0xf4734f7ce9207d029ca77b376b1f0f1e",16),
 ap_uint<128>("0x59279d90892a5d281a1454506149901c",16),
 ap_uint<128>("0xb61bfc794e1734491f6198dbfa7e91aa",16),
 ap_uint<128>("0xbe05a8ec836059fa94946baf2c9130e1",16),
 ap_uint<128>("0x4c9f2feec8e1008fe1419dc4b8f85852",16),
 ap_uint<128>("0x22e0f0ecf36d720c2e129410de7d5796",16),
 ap_uint<128>("0xab7a784130669053d5b103981850edc9",16),
 ap_uint<128>("0x1e25eb275f8ca3559e9bfb3495ce2924",16),
 ap_uint<128>("0xb2de63a71a446cba94fac823af957ec6",16),
 ap_uint<128>("0x1f80f27016dab948566703b7b71307e3",16),
 ap_uint<128>("0x19fd6020560262fd8cdbadfc1301aed0",16),
 ap_uint<128>("0x9c21e6bc6f5a2c650ffbc0b6aa42e80d",16),
 ap_uint<128>("0x5483be914cf71ff7e550c2369bab8104",16),
 ap_uint<128>("0x96b55e0f88593b54a5036a357ea9290e",16),
 ap_uint<128>("0x4d4cf7e97cd2e36ae54e9f0f936bfc53",16),
 ap_uint<128>("0x284290b46c11e7fba28db5ccc85959ad",16),
 ap_uint<128>("0x6f698f0c7439d7af3c9ed71f8fdad7d3",16),
 ap_uint<128>("0xe5c6dd55d1ea8a78972de91936dcd535",16),
 ap_uint<128>("0x07151a7986c81190db46345d7e3ec0aa",16),
 ap_uint<128>("0x4abb2d89eb78d4aef42cc9e29a62191e",16),
 ap_uint<128>("0xda4ab52f7e001b651eb9295813eaef10",16),
 ap_uint<128>("0xe7437c14a614c407cf81b342be1bc595",16),
 ap_uint<128>("0xda7f8a2c03458c3f0412529c41d0bdff",16),
 ap_uint<128>("0xd8295d6bebe2035513f0bf68bb0095f4",16),
 ap_uint<128>("0x76a59b7e07e7a21e7de1e3499ac61a71",16),
 ap_uint<128>("0x35d014dfd874b578f959da90906479aa",16),
 ap_uint<128>("0x922349db26dcb184bbd974c985fe1164",16),
 ap_uint<128>("0x2dd1a16e80a6886fb18bc1d66f1ce75f",16),
 ap_uint<128>("0x94a4454ac7524407b26dd2cdab893654",16),
 ap_uint<128>("0x17fe1eebbfa1586a05810db6dbcd2ade",16),
 ap_uint<128>("0x020a95928edb1566c707c8a742531c92",16),
 ap_uint<128>("0x9eea9ab60216f9642b1a4ba4fe6bacd6",16),
 ap_uint<128>("0xee58a7255f6a0c2f66d51c7c436526f3",16),
 ap_uint<128>("0xe2408bb968169304e1104aac73b3f075",16),
 ap_uint<128>("0xa7a37aaebb52dd376e439891597e8c15",16),
 ap_uint<128>("0x22d2bdf1c553c828d316a6643b873ffa",16),
 ap_uint<128>("0xf818b786c3df23113d2d17de57311a1a",16),
 ap_uint<128>("0x9a808c9b566b8c929760af7dd896b1f1",16),
 ap_uint<128>("0xc708c676eb620dedb1fe6d2c256bf13d",16),
 ap_uint<128>("0x274379d84eb79ea31f68c0f2b0d21f17",16),
 ap_uint<128>("0x7e00fbba6a8247b4946d8591ef22e552",16),
 ap_uint<128>("0x7c4a3e62c202d9e26b33cda6e57298a6",16),
 ap_uint<128>("0x6634edaf2ddbcfe71906f78b0dad261a",16),
 ap_uint<128>("0xc2a62a37e137f96708b67faea9747500",16),
 ap_uint<128>("0x383a90b77a1b490228b5bcf6eb788c3a",16),
 ap_uint<128>("0xbbf28495339328732e5f479f02e9c6c6",16),
 ap_uint<128>("0x2c77b26f7337e0b4e5601b04f6ffb76b",16),
 ap_uint<128>("0xb9c7969201c52483b131a41047b73ef3",16),
 ap_uint<128>("0x4c46e0a5eaa150c4c31908dfc4cce6a5",16),
 ap_uint<128>("0xf798e16447a00ecaee8e8ef60578b4c8",16),
 ap_uint<128>("0xf6c1187a5bd65db53f364cec13e578c2",16),
 ap_uint<128>("0x76b9befc2bfbafe930f1911f1a9c1b66",16),
 ap_uint<128>("0xa44925dbdb340a9cf667898c1842762c",16),
 ap_uint<128>("0xfac13d358d38ea4a883768dc961d1b94",16),
 ap_uint<128>("0xde7b30b5909d66318f751f8dccc17dd8",16),
 ap_uint<128>("0x48f8afa49dbc224c8e47941521e68735",16),
 ap_uint<128>("0xecc384eae70086a49fe8a2c3467e4295",16),
 ap_uint<128>("0xbb21c2878fb368402536c89689bce563",16),
 ap_uint<128>("0xb6b5db1749e1ddaf579b93fe5a42d88e",16),
 ap_uint<128>("0xd445e73f6ca0c35caf8b4d30e13d3704",16),
 ap_uint<128>("0x435a8c03e878d47d07ce07ef513a623d",16),
 ap_uint<128>("0x85e398dbe8e47f4bfa5d7ec75e52276f",16),
 ap_uint<128>("0x91f036c9315ad441a5ece7b518b89b68",16),
 ap_uint<128>("0x2afe2e85b7e3a6c370b317280fee94af",16),
 ap_uint<128>("0xa4d1a848bf322c52873ea91628f971ec",16),
 ap_uint<128>("0x71eeb8f510f054eac15c42c388f00f12",16),
 ap_uint<128>("0xa956c90decb1f1a4e697ea253d41d4d7",16),
 ap_uint<128>("0xa44f3eb21c743317c9763cfa382340b2",16),
 ap_uint<128>("0x6e02066f0233b8725a4a15ffa2db6793",16),
 ap_uint<128>("0x7eb207c775dd6ed0086980819517be48",16),
 ap_uint<128>("0x6acc8f9954370ba76baceb3227dd8bc2",16),
 ap_uint<128>("0xc320e1403689cd1111a1981ade13ba7c",16),
 ap_uint<128>("0x36f9078c4e4ea3b6198dbe5a6cd81c2e",16),
 ap_uint<128>("0x5c840f5ff8649626f6b4d03cb71dca5c",16),
 ap_uint<128>("0x6dde356c720c21887023801e649ed661",16),
 ap_uint<128>("0x627f7ff680b4b58262cce41a9f8a51fc",16),
 ap_uint<128>("0x416bbb0bc04b59e20c01ba0361fb99ae",16),
 ap_uint<128>("0x737a0a02f57fce68c3815406305086fc",16),
 ap_uint<128>("0x1523151b4f57ea7863a9627da325f631",16),
 ap_uint<128>("0x058a7f7291afa2fed5b1e8977786502e",16),
 ap_uint<128>("0xec990cab54074dbc3f4604b0f627fa00",16),
 ap_uint<128>("0xbe573e2fb3082352b0733bc8117afb98",16),
 ap_uint<128>("0xcf0c38d96baafa27febd2b3efca34738",16),
 ap_uint<128>("0xf92c017d26729d1757b01c955735140b",16),
 ap_uint<128>("0xa5fb96ad1df92bff11618c235d956cc2",16),
 ap_uint<128>("0x8fcf68c07b0660bd78734b917170443d",16),
 ap_uint<128>("0x43f2e78d9e3acbf8a4272e59a190bb9f",16),
 ap_uint<128>("0x8076d8b04a64a1ea679c3360fb753fc6",16),
 ap_uint<128>("0xae5d31a48cd929c38d00c7a65214a5a9",16),
 ap_uint<128>("0xd80e6ae352576429254cd82b5ee780b0",16),
 ap_uint<128>("0xc51d560d71d2b7b1b4b0ed23de38f6ac",16),
 ap_uint<128>("0x539baaa03891fcc2c37526a1c21fb2f2",16),
 ap_uint<128>("0x7c2538e3e6fd860be5a948a1a140a918",16),
 ap_uint<128>("0xfa96370c5b2a1b326baf4499634d6d8c",16),
 ap_uint<128>("0x8db47b623bb31824ce78f60e2ee73d49",16),
 ap_uint<128>("0xebea1a560d74eb0cc4a1fd5e25e47dac",16),
 ap_uint<128>("0xfe40157b145abd1224cd2ca5ac30f729",16),
 ap_uint<128>("0x43352bd7f24a075033b4bd430e1437b0",16),
 ap_uint<128>("0x1b68314948081fe5c8c88394b75d979b",16),
 ap_uint<128>("0x2a4b3b14b6cfac7fdb32cf07b2b45f88",16),
 ap_uint<128>("0x84397154a1eb2e39e46fdf11044feae7",16),
 ap_uint<128>("0xce9e1d513984441a754828501ddb97b5",16),
 ap_uint<128>("0x8d231695a0fb62c3e56c520ae1644a05",16),
 ap_uint<128>("0x4005c91465d45669e3e1f87c80fdd095",16),
 ap_uint<128>("0xf4b15d48e511e1e4a0b297729abafbcd",16),
 ap_uint<128>("0x13796559f55bff6d7448c4218f64893c",16),
 ap_uint<128>("0x99a4434e2e514d24d1d6e30ef1ec9cfc",16),
 ap_uint<128>("0xae665f5880341cdb7127e34e2b26f158",16),
 ap_uint<128>("0xf813280df314ce3a500b03bab08035a2",16),
 ap_uint<128>("0xf772ff5ad7dbc3566bc31f2e49c00ad6",16),
 ap_uint<128>("0x66126449df18c779a1358ff4050702d1",16),
 ap_uint<128>("0x3ec8d526bbcb71ba3c8faefee2789d28",16),
 ap_uint<128>("0xa9f9fbdcfce706259007032810f1b5ee",16),
 ap_uint<128>("0x65be66ae9969ec60c840b25af0661c70",16),
 ap_uint<128>("0x214976949505cb024297997fd40e730a",16),
 ap_uint<128>("0x6e535ae74e2eabdef35a143720852bc5",16),
 ap_uint<128>("0xe635e235ce31bdcd0ed9df8ff126385f",16),
 ap_uint<128>("0x9fa3e191ed3615553a219d9cd9796c32",16),
 ap_uint<128>("0x9118679cfa47ea11fcdff183921de7c3",16),
 ap_uint<128>("0x98bbcea0df414f335f6be83fc9c46316",16),
 ap_uint<128>("0x06f04ee2b344c2cbea6b3611704e556b",16),
 ap_uint<128>("0x1adad37c496f4be71aca24ac8f6baede",16),
 ap_uint<128>("0xbab5ad21325e5f3f4f5862f4aca3322e",16),
 ap_uint<128>("0xac8ac2e10bc8a8744b2c48d7cf0f6269",16),
 ap_uint<128>("0xce7eeb1f1b49d937ef66b217d2eef738",16),
 ap_uint<128>("0xa4e37cc3547643136773fa8b8e5fb3a0",16),
 ap_uint<128>("0xbb7df3548ee46182348c4a955103a194",16),
 ap_uint<128>("0x5d98fbc0d5078937947bb6eb479c2028",16),
 ap_uint<128>("0x66d0305983ef03b6e4d1170600cc1d0c",16),
 ap_uint<128>("0x4e892dc20f89d89f4e3a594e37d02655",16),
 ap_uint<128>("0x814d9e4d47a75132cfb74458163432fc",16),
 ap_uint<128>("0x993c839227026b6cda847381ff852d26",16),
 ap_uint<128>("0x59cba1a2148303b49c905b8858a4e78b",16),
 ap_uint<128>("0x705934c99661a1204b01fc3f1540429f",16),
 ap_uint<128>("0x28af96d476c1b7b40fab95082c4e4502",16),
 ap_uint<128>("0x39ca3f6f0f73b45810626330d072f2fb",16),
 ap_uint<128>("0xe2473c07e7837420c108274d1a6b3052",16),
 ap_uint<128>("0x5622fbfa1322baea91e07285e48dbff5",16),
 ap_uint<128>("0x99fa7636f78813731497047922ee9d61",16),
 ap_uint<128>("0xc07aa1134dfc3f82c908dad0d9cb4bc1",16),
 ap_uint<128>("0xd76f882384daab8a18040c11626366c0",16),
 ap_uint<128>("0x3cb77eb1b0b4e8e9b0f29caf1fec3b49",16),
 ap_uint<128>("0x1178d773863f2bbe0d9c55ba9c951c90",16),
 ap_uint<128>("0x245063416a4e0ab5d779526e3c5ea674",16),
 ap_uint<128>("0xccd067dfe2b2d71cf8a7abe78b71fc8a",16),
 ap_uint<128>("0x182ad1047ccbfa09c862a3caed059aae",16),
 ap_uint<128>("0xbba45d167e9bd3e21463330e4f922df5",16),
 ap_uint<128>("0xe6b1075868c43b359d09d9c24b22edc3",16),
 ap_uint<128>("0x9968e78006a6608c31729fbac265d3d1",16),
 ap_uint<128>("0xa2c8f1c07a3fd7de684771698e4a6f69",16),
 ap_uint<128>("0xf99fafd97151a898e22472eed16cf96e",16),
 ap_uint<128>("0xc0a81ce8a3352df53758940eec33537f",16),
 ap_uint<128>("0xcff8ba326b78f835daf31a6b762a3e6b",16),
 ap_uint<128>("0x62f980507dde7ca5300ffc1f1bd2b01d",16),
 ap_uint<128>("0xce0cd1ae278cfc8f0fe089fb6b786a5f",16),
 ap_uint<128>("0x68bfe32172228fdb12504dcafe059176",16),
 ap_uint<128>("0x038f973e6dff547f8fc3bf1220d89a3c",16),
 ap_uint<128>("0x501abcaf0f2a57082c10cb455fe38230",16),
 ap_uint<128>("0x2edf7b872414c1cfa2ba49222ce8a4e4",16),
 ap_uint<128>("0x311ea5676bfe82de177141c514208c79",16),
 ap_uint<128>("0xf241b5b7ba8f930538a195c4e99c139e",16),
 ap_uint<128>("0x3d7678258773fc0eb827cb9795198651",16),
 ap_uint<128>("0xe2570f441ac994df1f407df3e4c59a04",16),
 ap_uint<128>("0x77e5c85998745afdcb23f1f65a232d5a",16),
 ap_uint<128>("0xe0d648b5e3e8f7837278d9c015546554",16),
 ap_uint<128>("0xab7291085c6fe7e6f5185164e72cea4e",16),
 ap_uint<128>("0xf96cf2152e215193c91fbea80567aefe",16),
 ap_uint<128>("0x9c3f5cf27571b997f678a1c2ada65e23",16),
 ap_uint<128>("0x7c218f959812e1728dc027b93c4217a7",16),
 ap_uint<128>("0x1c96a9337e281c42a3e18ba7e9717110",16),
 ap_uint<128>("0x630b8801044b643017b653c661028375",16),
 ap_uint<128>("0x0709dc89425e2ace6ddb7c403b3923a1",16),
 ap_uint<128>("0x2e9b202577d7e51dd6be241e92fc0d63",16),
 ap_uint<128>("0x8c9c527eb31a57a0a420540467c29929",16),
 ap_uint<128>("0xc492e55e787e04d972d77dd58c0b2fd6",16),
 ap_uint<128>("0x463fcad30f9e2c0a79390be0afc001b1",16),
 ap_uint<128>("0xfcbc662fcd988b4952c470f5b3fb944c",16),
 ap_uint<128>("0x8b51043a4462a7295032e40f689f29a4",16),
 ap_uint<128>("0x80761ddf5b7205d4dab3384a8a0dd562",16),
 ap_uint<128>("0xbf5015afd24b99d97dce05da0e17d80f",16),
 ap_uint<128>("0x0e7afb25227c81d4d0a4b42de424101e",16),
 ap_uint<128>("0x46dfb2791808b6e20b500fab29c33edd",16),
 ap_uint<128>("0x5b6e326f2dd4305c16fbc6a22644e1b8",16),
 ap_uint<128>("0x3e969d39f4533e9a2eedf9877c451eab",16),
 ap_uint<128>("0xbac56e05addf136bc4cf1f1eef6d19b8",16),
 ap_uint<128>("0x15d05608738f5e6c96f579b603f68218",16),
 ap_uint<128>("0x75b231efe4a651e0229e40dcfb941199",16),
 ap_uint<128>("0x61ddc4488ab678ffc4d0ad6539a16298",16),
 ap_uint<128>("0x870945a589bef73eb6de7ad88f91a90c",16),
 ap_uint<128>("0x4a014136d6bc1ef33f30f605a53c6388",16),
 ap_uint<128>("0xe988623157399534f1a4830eae0440b2",16),
 ap_uint<128>("0x238881b3cbae0e27d3261f01c4a1a81a",16),
 ap_uint<128>("0xf4dde0a3f1941028a10d48f6cc148ccd",16),
 ap_uint<128>("0x833f85659762bb2361a684e48bf20e3b",16),
 ap_uint<128>("0xb733f9fe512f7790664fbe744d0c2d97",16),
 ap_uint<128>("0x64f030e645c607a9bca2314c872cc585",16),
 ap_uint<128>("0x3fb5491853adacf86bc0c5a8dce2e0e2",16),
 ap_uint<128>("0x7f8dc819140e69473809018ae14b747d",16),
 ap_uint<128>("0x37edeb26d30c43e4312512a7ef9767c8",16),
 ap_uint<128>("0x7625075e3b13e51e9a5b6c8d8856b6c2",16),
 ap_uint<128>("0xd395f9a71fc8b8c43b882f00189ba774",16),
 ap_uint<128>("0xe31609ec809a7f40c639f48bfdbec820",16),
 ap_uint<128>("0xc0e8547e204411db347323ba88160a0a",16),
 ap_uint<128>("0xd3578fe6eda6a6bbea703095ac8f8c1e",16),
 ap_uint<128>("0x7811a2edd39ed4dd4093602fc029e470",16),
 ap_uint<128>("0xa3743602b619430ddfebfafd92ee8e6b",16),
 ap_uint<128>("0xe1a928cbffdfa16c89ee3950166a3174",16),
 ap_uint<128>("0xdbdde590caf70e7720cc329573be730a",16),
 ap_uint<128>("0x3515a81feed73d7b9f1c25153747d119",16),
 ap_uint<128>("0x562900480bb2e792460457590aae9565",16),
 ap_uint<128>("0xfae88ba4bf4f748ee4f7bcb1ae4ceb14",16),
 ap_uint<128>("0xf03a73a822d8e48abc845084c8786497",16),
 ap_uint<128>("0xa3d04f21e47c739fdeedd34733309c01",16),
 ap_uint<128>("0x6a3e30c9e6637b7d9a150796e19cdc13",16),
 ap_uint<128>("0x9c6d3b124f74afa5e94ae63efd6ff3a1",16),
 ap_uint<128>("0x450fb74bc98a18eaa964a10973c4056c",16),
 ap_uint<128>("0x779d80a4ef01f8527e3cda79f2261156",16),
 ap_uint<128>("0x10282600d6aee4c4b197bbc16af9b63e",16),
 ap_uint<128>("0x0cbc3726d3388967cf7e772e212aa4a4",16),
 ap_uint<128>("0xdee7742874dd11c27fbc15800bd01123",16),
 ap_uint<128>("0x533dfb9d0d864d4c3797a47f32997ece",16),
 ap_uint<128>("0x7555c0aa60f884fabe4851fa7af9afff",16),
 ap_uint<128>("0xd5e670e3075a8fb81aae7bddefb0df6e",16),
 ap_uint<128>("0x8c1170e8f9b3dc94a98ef5d6cec27b3b",16),
 ap_uint<128>("0x5060777b8a2a88103ab757328fbebebf",16),
 ap_uint<128>("0xe8180acf8710a1b4e49ff218961b0b83",16),
 ap_uint<128>("0xc7b76be43b9a1760ac265ab6bb07dfb9",16),
 ap_uint<128>("0x717da164cfc5f36eadfae238dc0f0ac8",16),
 ap_uint<128>("0x67bb8b94c2b4c57c2c80dcae24e3e8ee",16),
 ap_uint<128>("0x21b067ca35b1f780dc562a72ad87cf9c",16),
 ap_uint<128>("0x7eef2bdcad8c3ce4eba54a24ddbb8662",16),
 ap_uint<128>("0x1eb1dfe777f231bce2f496661153a546",16),
 ap_uint<128>("0xeb9a4f444e47646b7ea1e83907bd5632",16),
 ap_uint<128>("0x59be7573094d70704b4c6ee65d4d06e2",16),
 ap_uint<128>("0x5c875eed99a48541da8498bdf6225f17",16),
 ap_uint<128>("0xd258111720b781ceced22a4ee690e38b",16),
 ap_uint<128>("0x723d5322b476e37c9ca6bd5de7008212",16),
 ap_uint<128>("0xb9892c51bd715a8454940caa331728eb",16),
 ap_uint<128>("0x2a193306e8f40045d44f899927ddcd25",16),
 ap_uint<128>("0x3041d8bac7c6f6d7729f409897e0d331",16),
 ap_uint<128>("0x65482460fdabe4212db351ad462c6d89",16),
 ap_uint<128>("0x9cd2bf9eea26078ae84ae7d8c32f691b",16),
 ap_uint<128>("0x8844a832c0a5b535b8214901a02fa370",16),
 ap_uint<128>("0x704f65eda855424d5204c61ab8a8bad6",16),
 ap_uint<128>("0xc20ef126f901736c95c314f00194a8c4",16),
 ap_uint<128>("0x833891592e40bbf2cdfdcfba4d1ff480",16),
 ap_uint<128>("0x0afc2236ff0227fe1bdd51df95496a5c",16),
 ap_uint<128>("0x0b634d4889a2ef05fea2f93eb8d55e10",16),
 ap_uint<128>("0xb417fe1a0595b40a5b08ddda9448dd3e",16),
 ap_uint<128>("0x93ce60086202e28ddb9afdff2cc3e5c3",16),
 ap_uint<128>("0x5c210917e83671d16899e101890c13fb",16),
 ap_uint<128>("0x173e28da38797569ac79d96bb0b74ca5",16),
 ap_uint<128>("0xf58c39ad5ffda459a2ca0ef53fbcf74d",16),
 ap_uint<128>("0x01a5b22e2323e4769e0b155a42d0d4cd",16),
 ap_uint<128>("0x0e860837d76b8b2ccc733d7b6a933eb9",16),
 ap_uint<128>("0xb443678438b9394e35f91742426e0236",16),
 ap_uint<128>("0x98d9c99bb4bb41c7660c502a5071d52b",16),
 ap_uint<128>("0xd419afdf0726ed38825a48e8afd68278",16),
 ap_uint<128>("0x38260ccc2061191c64ce12a0844c62a0",16),
 ap_uint<128>("0x9cd3b208219149269873d83aa35de3f6",16),
 ap_uint<128>("0xa0755135059b5ce2149f281178b8f352",16),
 ap_uint<128>("0xfcbfe48a380d088bcc34a3cc6d23ee20",16),
 ap_uint<128>("0x53b1ec04725d5a729c3d0acfb16e3279",16),
 ap_uint<128>("0x9063bb04884fd5edbb0ec065c33c8996",16),
 ap_uint<128>("0xc0845e22326b3d20d6f50d1b3cd70c10",16),
 ap_uint<128>("0xa272770ed0b2ccb1ccc3d12d7b02ce62",16),
 ap_uint<128>("0xf0bba8ba0ee60c565b9df80f12006c13",16),
 ap_uint<128>("0x0171a75e16be083cb18a3fe2ee5f4838",16),
 ap_uint<128>("0x361b2b875e3ffc1ff0ec6774540245a9",16),
 ap_uint<128>("0x46544ceee5f9994531391aa963afeef8",16),
 ap_uint<128>("0x522128a3b21c891234bd729c325d1e5a",16),
 ap_uint<128>("0xaa2c01c83dcd6322e67bba04e7bad109",16),
 ap_uint<128>("0x7ca439d2d2ad279378ec5bf7c2e99bdb",16),
 ap_uint<128>("0x36f09064ad5407515bababe5d761b373",16),
 ap_uint<128>("0xde9ea6cb42c9e0758709ec653d16f24d",16),
 ap_uint<128>("0xf3100da32ca7e8e72687b8417cf47491",16),
 ap_uint<128>("0xe7491e5b9308f5b673dd3cb1df9bc8a6",16),
 ap_uint<128>("0x068ae20e7cdef4b7e8d52240e7dbaa0b",16),
 ap_uint<128>("0x2e85a041b80793b133a6e00f338b8047",16),
 ap_uint<128>("0x36a1a3c9570d2177b05d36cac687af2a",16),
 ap_uint<128>("0x2699f56c9b3ae38dc5dfe4e5ae6d64fc",16),
 ap_uint<128>("0x1239c98fcd05c8b048d64dad11219a2e",16),
 ap_uint<128>("0xd5245987bab0261efaf27013e238f611",16),
 ap_uint<128>("0x316b0d47e91b39a179baeb2a78af74b1",16),
 ap_uint<128>("0xecd57b22836365c0d5e61edc8701b648",16),
 ap_uint<128>("0x120e08b66efbdede9951748918bc584e",16),
 ap_uint<128>("0x80c15f411f700d0f79165f446ad84a03",16),
 ap_uint<128>("0x4bf35cb3e59a4fe0f6c2915015fe2902",16),
 ap_uint<128>("0x7cca932e16f48937524dcce331b66912",16),
 ap_uint<128>("0x09d09ecf44aae4e20e9243b61d914284",16),
 ap_uint<128>("0xac6cdb9ec03426fd4f24e8c434e4a29f",16),
 ap_uint<128>("0x01770314010c74cf757254a10c61379b",16),
 ap_uint<128>("0x312db7448fbfb22ec897288c4a24577c",16),
 ap_uint<128>("0x76a4147856c054f661e51379e866137c",16),
 ap_uint<128>("0x84623edbc50c4a702afc320bfa5b8c2e",16),
 ap_uint<128>("0x7ba44c088aef38dd0ae1cb34b960a7a5",16),
 ap_uint<128>("0xd81e7af49977f9bad41daeb43dfad369",16),
 ap_uint<128>("0xe790c6f857d150a0b4d3d028148642a1",16),
 ap_uint<128>("0xd001e326f8258cb7fad93f0e3ca7ad1b",16),
 ap_uint<128>("0x4e3389fec7a1196fb124581d45836aa3",16),
 ap_uint<128>("0x326dd932091842f8a7cfc4f82f93f0bc",16),
 ap_uint<128>("0x6ae50f42dd8810689643b07ca8f0bac7",16),
 ap_uint<128>("0x3a23dee089230b50990e73e3a43ad83f",16),
 ap_uint<128>("0xc5e6e5eae6f5618d868d84ebce3c0566",16),
 ap_uint<128>("0xab2e0127989859229e49d636b1681c58",16),
 ap_uint<128>("0x86aca08e1a23fc49233ff9b6972ef216",16),
 ap_uint<128>("0x2b7b9663b3e9d1ffb8964ba44da13e9e",16),
 ap_uint<128>("0xa9e8695cf4e7fad88680a09485626f2d",16),
 ap_uint<128>("0xf813cf628b8e4252ad46be5ca29cc684",16),
 ap_uint<128>("0x11154b12c7f68fbbc70c15ae8da1bc16",16),
 ap_uint<128>("0x78b6b246681658f3e74d41f8c9f24b93",16),
 ap_uint<128>("0xe6870a6a18e4c1b9cd2802e1c9f9301a",16),
 ap_uint<128>("0x73226e865d975c6665966bd7b2294395",16),
 ap_uint<128>("0xd9e6a43178a3ebccc137642b93284384",16),
 ap_uint<128>("0x8a553bcc2f9396a1b944b6981d586f29",16),
 ap_uint<128>("0x604e828a70a1ea1e1c5eb309e5aa293e",16),
 ap_uint<128>("0x260f082d54ad9dbdbc7f06827065e8dd",16),
 ap_uint<128>("0x97d680e873d78480b07afea79ec9138a",16),
 ap_uint<128>("0x14b9b86346b3a146fa015ab2eb2122ac",16),
 ap_uint<128>("0x015af8e1f97a842945ddf495479d3708",16),
 ap_uint<128>("0x275d720749e942aceffe372a337ac223",16),
 ap_uint<128>("0x3759a8b82bd5c0efaf7bc824ba4b747d",16),
 ap_uint<128>("0xea1d46736e17eaf86d880b9903871e94",16),
 ap_uint<128>("0xd13cc72ad7143a7184f85ade0367c067",16),
 ap_uint<128>("0x1f98d02314b0e966d2e32922492b022a",16),
 ap_uint<128>("0x6c13027d6d9a09bfda350c672f98932b",16),
 ap_uint<128>("0xa7314a45c9ce83c070b5c98684aa1865",16),
 ap_uint<128>("0x3b80c5c7b1c306eb0a77daedb9619d7a",16),
 ap_uint<128>("0x95cea04aed13ccbea35a1f4c09a7efa2",16),
 ap_uint<128>("0x0cc5898039b5f7bd4e772879ed7468c0",16),
 ap_uint<128>("0x90f64ce4bf5931155ef350c8b4b05200",16),
 ap_uint<128>("0xbc42719a3802fd78f096470f22d1fb51",16),
 ap_uint<128>("0x9d90ec755573cdc18a50859359a198da",16),
 ap_uint<128>("0x7002e05e103a1d6c15ef606441a1d3a9",16),
 ap_uint<128>("0x9972dad06a307f68044f983e7f656628",16),
 ap_uint<128>("0x97b9a298a0838f9c87e1598396769227",16),
 ap_uint<128>("0x08ff7357777c11175024b2c8260693ab",16),
 ap_uint<128>("0x2a3faf4a8728a03c00f4c6f79d118c2a",16),
 ap_uint<128>("0x98db9648ab3372e5b8b6f9bdf532d318",16),
 ap_uint<128>("0x7d6bde8df9bbd5e6e285e3cdb33c290f",16),
 ap_uint<128>("0xaa0a3d22916c1b6733d516157d7754a8",16),
 ap_uint<128>("0xf10a124c300e2b8f1bc5ae270030ece8",16),
 ap_uint<128>("0x6315bf72bb42d38d74bda240ceb077b1",16),
 ap_uint<128>("0xd0da03170882558ecdb7aebc0d79014c",16),
 ap_uint<128>("0x094843ac295fa46b381fec8bbec72de5",16),
 ap_uint<128>("0x475522a1a1a7107996c831f1130eba3f",16),
 ap_uint<128>("0xa9733829b742b4524e1ea0ca74da883b",16),
 ap_uint<128>("0x7e2dcf65605e4b145bba7d9d55883c5a",16),
 ap_uint<128>("0x5af729be03c20abb04771086af2fffaf",16),
 ap_uint<128>("0xab99de0eb5511059b8d1f0d0cb5ae35e",16),
 ap_uint<128>("0x722185190fc33f5301e2a7d871de6251",16),
 ap_uint<128>("0xc4e7b5bda48ee2b7541f90915933eb5f",16),
 ap_uint<128>("0x62634802ecf0fb4a488fbfbe210161bf",16),
 ap_uint<128>("0x371578ed0768c7c3c78f58978b32f2c3",16),
 ap_uint<128>("0x6fbb636084444a7ec3bc7f8ea29eea15",16),
 ap_uint<128>("0x330b1104551467db25da4129e02018d8",16),
 ap_uint<128>("0x1f6cc86374b8e0e090c9c5425191eb6a",16),
 ap_uint<128>("0xeb3cd9aa8b46c41f87d3e45a42a84780",16),
 ap_uint<128>("0xd28dbc57f7b1e38366e99b8be582129b",16),
 ap_uint<128>("0x6d574fba428d232392b0c8b168cfe57a",16),
 ap_uint<128>("0xc8fb069f5c27a06ec425ad3cdeb90e31",16),
 ap_uint<128>("0x5f42eae758ab044abdf3407fb271d3c7",16),
 ap_uint<128>("0x6f1bebd77315c40c1425754a24c52562",16),
 ap_uint<128>("0xb88cb4a16b617d17794149b42ec1ce25",16),
 ap_uint<128>("0xecadfb28c8f17bb6ece95c2091900936",16),
 ap_uint<128>("0xbf8ae5ea144b8b1f6ec5852273c03d4e",16),
 ap_uint<128>("0x763164895ead07f53047606ff9857add",16),
 ap_uint<128>("0x27e019651df6a1047131fb9235f77a39",16),
 ap_uint<128>("0x0c019e91007fe87750c6adca8d5c6658",16),
 ap_uint<128>("0xf0f14b2552643366142b087e754544ae",16),
 ap_uint<128>("0x29526349f1cd13e529ad6992bef92783",16),
 ap_uint<128>("0xc194762492d5b490087524e23d027d7a",16),
 ap_uint<128>("0x824059ca771cb9d13703bf6d2cebf402",16),
 ap_uint<128>("0xdd9173bc6cb106530a30782e62825456",16),
 ap_uint<128>("0x003fb759420f2c7d4b16d9fafe6af6a8",16),
 ap_uint<128>("0x40a6205032b453f77069d6c37a6ffa20",16),
 ap_uint<128>("0xb91edef5c982fbab5f241a4b90dd2356",16),
 ap_uint<128>("0x77ef3dd5e458e2846f3fe375df33a68a",16),
 ap_uint<128>("0xe246ed4240f1a2872dc66b3cf36fcc0a",16),
 ap_uint<128>("0x92ada2a0ece44c9a800d4ddb3638e4f9",16),
 ap_uint<128>("0x92b9483cd9813be8abab55d2635e20d4",16),
 ap_uint<128>("0xc7c2f2f961dd48da7ec9f31480ebbe79",16),
 ap_uint<128>("0xda679fb11ecc68f15064ca83edb6d4ab",16),
 ap_uint<128>("0x00873310f688d5fb411f912ea8c6db20",16),
 ap_uint<128>("0x822a1ad2a79b9f13a0628fe740405129",16),
 ap_uint<128>("0x092f2ef44e9fa100521202a017d1d30e",16),
 ap_uint<128>("0x1f66316f67c340ff2f53d6f8b3a471ce",16),
 ap_uint<128>("0x416bbdbb4dc33aeba22c1d682183cb2d",16),
 ap_uint<128>("0x34a18dbc3c61bd21d07209bba291710e",16),
 ap_uint<128>("0x8cada71f65335e9277509b602085162e",16),
 ap_uint<128>("0xc335680f26878962d59f8db26caf7b53",16),
 ap_uint<128>("0xd3029106f447e331ee2fbe6096e79e5f",16),
 ap_uint<128>("0x107ee91e6630206c0b32d714432bd4f0",16),
 ap_uint<128>("0x7aa88ab49d9c57854a02c6062a5cc173",16),
 ap_uint<128>("0xca44dbee591eff9f890095d9b5239540",16),
 ap_uint<128>("0xa195db3f7b8e00ea2102fd1e5ca9343f",16),
 ap_uint<128>("0x9d2d03dd38aac2aab227fb30301b6563",16),
 ap_uint<128>("0xcb336c20aff3e5dae80d4ff745a2c255",16),
 ap_uint<128>("0x3930915cef005fcc6d612595c68bcb66",16),
 ap_uint<128>("0xdd1ccb5b4c0af0e40020928848fc17fa",16),
 ap_uint<128>("0xb1d865646fc7ef60a165f76962acaf54",16),
 ap_uint<128>("0x8989ea12a59b093f51c2fddf1a2a324b",16),
 ap_uint<128>("0x364800e8e0863ca0d88c9a2459bf1f9f",16),
 ap_uint<128>("0x9b5d8ed1c476c9752d391ec880b37f09",16),
 ap_uint<128>("0x7ac92ba2470b54de8fe61703a1309204",16),
 ap_uint<128>("0x723ad8846a601234ba1304aff29e0667",16),
 ap_uint<128>("0x6f47303942717e06814895d102f9e159",16),
 ap_uint<128>("0xb3e16ac3a8d491f52a45e6a71abcebd2",16),
 ap_uint<128>("0x2adf714579d2723ecee09838829dd21e",16),
 ap_uint<128>("0x5cc327a6f7bc6ec9b00d725d27571a2b",16),
 ap_uint<128>("0x5320d4c9ebdab2c367fcce9cee5b9201",16),
 ap_uint<128>("0x9cbdb2865b36d07b3cc1ef611adae3cb",16),
 ap_uint<128>("0xbda195e989e784670057d4c0d64142eb",16),
 ap_uint<128>("0x0e60342345ad5d360a55c0d2f274acec",16),
 ap_uint<128>("0x545f1a161d8338ec55a59f294763f690",16),
 ap_uint<128>("0xa24809f1ca9b7a2e58783546c6667e7a",16),
 ap_uint<128>("0x123be52dc7d3db8714ce41e53ff1ff05",16),
 ap_uint<128>("0x90bec572333fe20befd163950e46bd6b",16),
 ap_uint<128>("0xea90e7003046bafcde0b249ea03b6571",16),
 ap_uint<128>("0x80c98cd8d8a713eeb72c45ad0177c30a",16),
 ap_uint<128>("0x4603e7fab78e26ff08a2a74c93f6218d",16),
 ap_uint<128>("0x83b8a4166e78d798e31f2390b262c468",16),
 ap_uint<128>("0xa81a6cffa69c5cea620fd04ae4cf334a",16),
 ap_uint<128>("0xac28212c3df047856f10f0a21f5f04bb",16),
 ap_uint<128>("0xe30467a1676f7e83dbad28e4cf3a59a0",16),
 ap_uint<128>("0x3ffb3c29d6ce102f4b02dfd096fe12d8",16),
 ap_uint<128>("0xcdf179322f56b5a38c424b46495e4a8e",16),
 ap_uint<128>("0x555b8ac554a103d95a1026637cd9cedc",16),
 ap_uint<128>("0x314ca1c4ba0f57055ca59c79ac235a81",16),
 ap_uint<128>("0x7d1e9bfb429dcd731ab2fae33ef4c5b2",16),
 ap_uint<128>("0x2c5ad66ce6cddd94ec77ee55bc79f863",16),
 ap_uint<128>("0x6be2e621ce5cc9cfb48fe35856d70613",16),
 ap_uint<128>("0x5cdde25131221ef2ec9839d4f56ce52b",16),
 ap_uint<128>("0x431729e17eef3654d115c3e792c60b47",16),
 ap_uint<128>("0x9e354ea7524345b0fb6996bf93107671",16),
 ap_uint<128>("0xbd22aec8c8d09c4cee3e17f5f35b5669",16),
 ap_uint<128>("0x3104b795d6306000684fd0f5d7a9ed50",16),
 ap_uint<128>("0x64a6641cd6140c772d2e93fce4fc7608",16),
 ap_uint<128>("0xde7fddef0ee384906cbacdf37496fe52",16),
 ap_uint<128>("0x6de7ab2c116df46af13bf7261c28353f",16),
 ap_uint<128>("0x906aa7caaf05e91ce373840f4be061a4",16),
 ap_uint<128>("0x5af619153d35bb6d9bfef1fe9b2d3e5a",16),
 ap_uint<128>("0x8660296f0544778935d95f463865ff63",16),
 ap_uint<128>("0xe4ff7de7af078e24b654038e3f88fd68",16),
 ap_uint<128>("0xa97f75ed42a8f4c0205f28a1ac72c7e4",16),
 ap_uint<128>("0xaa9e05d9d46dabf7ef83a5887a4d3385",16),
 ap_uint<128>("0x89dbc814910185cc801d978b5eecaec2",16),
 ap_uint<128>("0xb73a90edeb6678e8b90a8c2275482f06",16),
 ap_uint<128>("0xe10afd6b5ced13955793a57694d9f216",16),
 ap_uint<128>("0xbeb8a25f96d3a5b72bde1b8f58e126eb",16),
 ap_uint<128>("0xad19a2a76fd4135251ed6a349b878be0",16),
 ap_uint<128>("0x9d631b06349c7562797779a268f44443",16),
 ap_uint<128>("0xec04493cbf0761b25cd3d970bf82136a",16),
 ap_uint<128>("0x0051813f50b9be1aec0a3b598ac28d8c",16),
 ap_uint<128>("0x287fc7f68e5a1965df92a02714863f29",16),
 ap_uint<128>("0xb23624f3eaa54b347a625421aef1e1f4",16),
 ap_uint<128>("0x754b7ac8e99044721084d305abb88e59",16),
 ap_uint<128>("0x998c5d562bca8c5b6f2123efd90dfaf7",16),
 ap_uint<128>("0x61bccc7c48114672a8b0aa0ff0416a91",16),
 ap_uint<128>("0x19f862cc2ca62d345e83b14a9f58c60f",16),
 ap_uint<128>("0xa627f5b0b97ed10a4329c6f261a605ab",16),
 ap_uint<128>("0xbf7fc695b2cf8abc650d8df101962c9b",16),
 ap_uint<128>("0x591b4dd367133e7e1bb646e6146b9cf8",16),
 ap_uint<128>("0x4ae0e156bd37894a29af6c8c93370978",16),
 ap_uint<128>("0x45d9fdeb301514f4971d12fd7fbfd2cc",16),
 ap_uint<128>("0xf3f15db1e2f8073fde5c6b2ba86cda0d",16),
 ap_uint<128>("0x67e218cb6067219b0f3619bb0eb87540",16),
 ap_uint<128>("0x6506089eae583f50f5daa499b5a99870",16),
 ap_uint<128>("0xa6f51945791db042eed4c46fe63a59fb",16),
 ap_uint<128>("0x3438f3c41733b5081bdb85b9f037da1c",16),
 ap_uint<128>("0x0be7b96bec4e3150d9ab9f3aa73bdf74",16),
 ap_uint<128>("0x66b4543d0ca5ae64780296942bce5d35",16),
 ap_uint<128>("0xdba1995c38035134fa8a3da385ab95c4",16),
 ap_uint<128>("0x89a5ef5ce3e3bed8513e23dad7ae0a0f",16),
 ap_uint<128>("0x377277e6496bf5ab4989215f46524423",16),
 ap_uint<128>("0xa0daadf28af1d0d05d0ae4ce61e3e32c",16),
 ap_uint<128>("0x3a3e15a4e26a9bfe0fad023209375f4f",16),
 ap_uint<128>("0x199b362f6049feb7cb5c95b9a69f9961",16),
 ap_uint<128>("0x30e45a4eb3d207960b94d446f6a165ee",16),
 ap_uint<128>("0x488f488fabb56616e89ebb3e448c3270",16),
 ap_uint<128>("0xc4dffcd932f16a9f487376c3206b45b1",16),
 ap_uint<128>("0x55da19e62bffc28ecd5ee689d858bfdc",16),
 ap_uint<128>("0x6263774351d4c236519c77739685514b",16),
 ap_uint<128>("0xc74a8ba320a11e6f71e4d16838f48076",16),
 ap_uint<128>("0x6e898717ca82443d5b7c30032542b397",16),
 ap_uint<128>("0xb5a4d039eed15b69aa0c63816bfdaa73",16),
 ap_uint<128>("0x7d1d49ebe0dc2ce16ee3907f185b9687",16),
 ap_uint<128>("0x0dfdf091e6e56bfe60c3cc2cb3a5dcf8",16),
 ap_uint<128>("0xd84971b097567a868013e94ef84b6de4",16),
 ap_uint<128>("0x5a9a11b9da04d05c4c68273ff87b3d59",16),
 ap_uint<128>("0x0ad4c316f44f6d4c2d92def20b86709d",16),
 ap_uint<128>("0x963a1bbf4b40ba57e59b71e2335eaed8",16),
 ap_uint<128>("0xf5085235f908c15d2b4c1a0cbd88106a",16),
 ap_uint<128>("0xdb5242c2bb172f95505560403d31f6c0",16),
 ap_uint<128>("0xb3ca3b96987d7a522a5aa8ab93fca444",16),
 ap_uint<128>("0x9cbb11897d987283de1a859950563d00",16),
 ap_uint<128>("0xe07ac34bc8b1660c4ab53b379ab9f305",16),
 ap_uint<128>("0x0de2f9d387762779c18dc6ee642240b9",16),
 ap_uint<128>("0xb1a062f1b8c103a3370fc134fc995a3c",16),
 ap_uint<128>("0x0c55b2d1c424b53183221d36f5143f2b",16),
 ap_uint<128>("0x810ca24af1183cb1f1df9a0d83eb375c",16),
 ap_uint<128>("0x2fe2cb8a3db901be18b227c585e81c7a",16),
 ap_uint<128>("0x51aa9af662cb98e18b09ce74189c5161",16),
 ap_uint<128>("0xca82b00c914b2b0a655f9a6ac10bd6bd",16),
 ap_uint<128>("0x072f14e7ae9f5daa2d54f9685972d27d",16),
 ap_uint<128>("0x5b768df5e6f21138f0fd30fad91506a3",16),
 ap_uint<128>("0x7a9963407d1159a3772ed7f8fcfaabff",16),
 ap_uint<128>("0xe9add1f42bace8dcab5f49b8465ce525",16),
 ap_uint<128>("0x2c9fc67aa5642316ba5030eb25b2b6ec",16),
 ap_uint<128>("0xb8d926577235bd5c10d58f857a2dd215",16),
 ap_uint<128>("0xe1c12c36c99b7fab4a6dff2c7a728135",16),
 ap_uint<128>("0x0e35ecb559b32baa9c8cb6b4c2ab7e43",16),
 ap_uint<128>("0x52d6f6eb30d5ae745736a322c1fa6041",16),
 ap_uint<128>("0x45077f4813f12bc764347acddeb5cfa6",16),
 ap_uint<128>("0xca8cb84ce921ed0ad0c77ad1326ee8ab",16),
 ap_uint<128>("0x3d3d68dfe822b18a0ea15ff41e3c9f17",16),
 ap_uint<128>("0x5f72b02f0eec1710b5c6082daa317b5f",16),
 ap_uint<128>("0xa19badea8486c306f91937e8ff9be850",16),
 ap_uint<128>("0xee0d89101b20afe63cc5fc4b2fd756cc",16),
 ap_uint<128>("0x707f57cbe2fa4687b6e63861b6bc1a23",16),
 ap_uint<128>("0xef2324fc7eed1b4d5886a8f9ad473a85",16),
 ap_uint<128>("0xda7525dabc8311100d5fe35f406692f8",16),
 ap_uint<128>("0xad11ff9ef6e9bfa9f2f2d8f9bb8b4565",16),
 ap_uint<128>("0x0e6ac4b093aad5999d98a7f4992ef556",16),
 ap_uint<128>("0x61b629264180f4b607f51f5cb0c903ce",16),
 ap_uint<128>("0x1b87a7e27a3a982257f56e5231b912fb",16),
 ap_uint<128>("0xb3c694a9d8489331aa9bf540402e5067",16),
 ap_uint<128>("0x0626e8e881e29689060221a8c384d0bd",16),
 ap_uint<128>("0x36035b957269e1a84d6a08bb73e95dd2",16),
 ap_uint<128>("0x24bf290211786c9dfbee56618a3f05cf",16),
 ap_uint<128>("0x4f4641bfdc579fc696cb1e37f71c15b5",16),
 ap_uint<128>("0x3ea34664bcd8cebee22cbef4d81c8a7b",16),
 ap_uint<128>("0xd9b9f602f240270fb0ce39679a73810f",16),
 ap_uint<128>("0x0a78b1ffc139b3516e8d27d4dad3365c",16),
 ap_uint<128>("0x0f70f46b4e2496835c333695e4b96606",16),
 ap_uint<128>("0x767c1b5f8f8a6000894515ca2db224fe",16),
 ap_uint<128>("0x2a705a051deda3110b7f5fc301efb8bb",16),
 ap_uint<128>("0xc703a5d7dd2e4165724ce125d474a4ac",16),
 ap_uint<128>("0xfd471e42794e6c81566ca9fdf76691a0",16),
 ap_uint<128>("0x4a4c139ed091afe3f1d7ff1246f2d9f4",16),
 ap_uint<128>("0x7be4336756bec4545862dd0260a14e43",16),
 ap_uint<128>("0x1e14f31e918f08387ef27f5e0ab95e92",16),
 ap_uint<128>("0x6a9f5a36291c38ab12ada7e87bd307d5",16),
 ap_uint<128>("0x867e856fc555915989e4066f537a23da",16),
 ap_uint<128>("0xa82f01b7500e4ea72bbf9ef96312f665",16),
 ap_uint<128>("0xf782b3e241435fd3a5c3bfe877060728",16),
 ap_uint<128>("0x49b296a0e723d5e42612fa4065a95a3a",16),
 ap_uint<128>("0xf422d7997115554c0739af95584a82c0",16),
 ap_uint<128>("0x9b8604050cfa5b5847eb1b69f494b894",16),
 ap_uint<128>("0x3e7ca2bcbebb2605847cd7ad41217672",16),
 ap_uint<128>("0xc1f491f0b8eb9cd6a9386d3960d6720d",16),
 ap_uint<128>("0x06cc47144f8074a173081f3805e5cb02",16),
 ap_uint<128>("0xe83d6a857ebbc45478a8e0e1cf53a4de",16),
 ap_uint<128>("0x99c465eea029b3b8addcc7fd57c975e7",16),
 ap_uint<128>("0x74ab5175b6b86c5ee789d77faf474b02",16),
 ap_uint<128>("0x795deea0e9d3cc9ac417b509e0807860",16),
 ap_uint<128>("0xdd3ddfa79c9745f6286666642bea7165",16),
 ap_uint<128>("0x1a769d3f3172b6305f7aabdc035a5126",16),
 ap_uint<128>("0x12682dee1894a01c71a6b3c26b24a595",16),
 ap_uint<128>("0xbccf8e328c21df211ac76c02b849841b",16),
 ap_uint<128>("0x46a63435d3f76045ccfb33c96b94f940",16),
 ap_uint<128>("0x419129b3a72102495c2c03d1aa049676",16),
 ap_uint<128>("0x7d211b9069ffe561b80edcda80803c3e",16),
 ap_uint<128>("0xf8c9f7cd9bba4c168c53e1cb95eb6ad9",16),
 ap_uint<128>("0x7f12a774750fe89076fe771bb4a341dc",16),
 ap_uint<128>("0xc97593296cdd9c563c26eaefb0b50396",16),
 ap_uint<128>("0x2c7bf27ddd9b90f93759d0ba4eba45bb",16),
 ap_uint<128>("0x158674305208bfed94791e615e7369d7",16),
 ap_uint<128>("0xe8b2c23c34daeadab7182e58b730047a",16),
 ap_uint<128>("0x46be712f1df8bcad71caf68454aabf61",16),
 ap_uint<128>("0x8fcb880345ec560d4d2104c34de6e9b4",16),
 ap_uint<128>("0x781447af89c48e89ba09bef957aa4b6c",16),
 ap_uint<128>("0x1ba3697e00a787593896f0e749b433f7",16),
 ap_uint<128>("0x4f7386811c6c7ea2f81c0580a1627822",16),
 ap_uint<128>("0xc49c1ff05228e356f30c8b3e1486289f",16),
 ap_uint<128>("0x5170022146ded1ba2cbb0522397728b0",16),
 ap_uint<128>("0x32b6e8fa1ab53d4103866aa6925a9bf7",16),
 ap_uint<128>("0x30dd115ba2d0487921835894732f9343",16),
 ap_uint<128>("0x7b3cffc4dd80c15b5448b8290a6218b1",16),
 ap_uint<128>("0x1d7f3a2f36a3d1a09fc87764555c3c74",16),
 ap_uint<128>("0x9c0f356d7eeb320dc03b8160c0a0c75b",16),
 ap_uint<128>("0xaf01f0e4a0af0e45c47718497bdfeb1c",16),
 ap_uint<128>("0xd9abd7ac5ab14ed2feccd245740fd6ce",16),
 ap_uint<128>("0x5c6dc763b2ae57994b5e1d80d70c1816",16),
 ap_uint<128>("0xac3cc949810e8d0439001b50c50c782d",16),
 ap_uint<128>("0xb30c650f6e9791fadb291773e05e5c9a",16),
 ap_uint<128>("0x7784f375d014240a029d00d4dfd0bb29",16),
 ap_uint<128>("0x7622e34f4c869d9f9f9579309a5694fd",16),
 ap_uint<128>("0x374640da8f5d59fa574f5e5fd4638dc9",16),
 ap_uint<128>("0xced60a56f368041b538f9a58b8790367",16),
 ap_uint<128>("0x6ee7bf44478c8138babf586226f36fb3",16),
 ap_uint<128>("0xf64cef2535696e2e11b0879d4cc16fc5",16),
 ap_uint<128>("0x18933a7c575a4ae46e9447bc0db4b449",16),
 ap_uint<128>("0x58cea7c720233dde728bfcf86a6350b4",16),
 ap_uint<128>("0x722c28da6f202bdb21dbf15215bd6b56",16),
 ap_uint<128>("0x1387d12d726b9e516a386dceb5ccbeb4",16),
 ap_uint<128>("0xd2c219e8c9d84a1d15f78ba00b42b167",16),
 ap_uint<128>("0x2efe0d6a1a84b010803c47b0e8b1d815",16),
 ap_uint<128>("0x78e60199a33aa90e1bd86cc3b87f27aa",16),
 ap_uint<128>("0x6bdc952ba1440b8735e1d2798e9ea116",16),
 ap_uint<128>("0xbbab1b9ec0aa503f66e7b997a2527e94",16),
 ap_uint<128>("0x95ab10d8c7c2d631812d76c91c2948d2",16),
 ap_uint<128>("0xa8dad03f4a936182c8386bd5cf874232",16),
 ap_uint<128>("0x8c66ec94d710c702bfb551f1930633ce",16),
 ap_uint<128>("0x14884c978fa99201fb3820c26038db93",16),
 ap_uint<128>("0x77de6620fc77928aee2c8d33ea7f4e7f",16),
 ap_uint<128>("0xd4e42d1de7441e937f8d17e657e5bcf3",16),
 ap_uint<128>("0xcf3865444400923302ab211eaff64b98",16),
 ap_uint<128>("0xd97e8278454b705fe27188177fb09c45",16),
 ap_uint<128>("0x718336bb7184ef0f77c04b2bdb9625ac",16),
 ap_uint<128>("0xe931b50a9c9d80c20b901cca3c2571db",16),
 ap_uint<128>("0x2e9d31807a75eb94eb1a4d58bb230108",16),
 ap_uint<128>("0x8e731858967dbbc17e1bfd70c7f1d72e",16),
 ap_uint<128>("0x72697c812ebc65ab8af22f46488882b9",16),
 ap_uint<128>("0x9ad42292af8efcac872f02f244ca8fde",16),
 ap_uint<128>("0x5bef88226c4969692c8da146b1369ee1",16),
 ap_uint<128>("0x2b2254ced97920c88f99185fa19d84dc",16),
 ap_uint<128>("0x7d17787ccc91fb654b9553e1fa149735",16),
 ap_uint<128>("0x1ee657d77802fc856fff9a4681e24ed5",16),
 ap_uint<128>("0x4cf9e3cb80aedfcc25d415ef06db70f8",16),
 ap_uint<128>("0xcb483e2d0cfe535368907a78e7181002",16),
 ap_uint<128>("0x88166c51a0db6e164599336b9c1db10f",16),
 ap_uint<128>("0x508ba9e9c707cc78aec0d2b1c11d3012",16),
 ap_uint<128>("0x6660310e463dcd5e0dbd32022807cce0",16),
 ap_uint<128>("0x230b87a4a58e8bc85a6d708b1c1824ab",16),
 ap_uint<128>("0x288f7973bdcc12a62295f54b24848838",16),
 ap_uint<128>("0x1664f24c111e316b7f34f83ffbec90d8",16),
 ap_uint<128>("0xf79a8796c96dd5472825e1465728ea31",16),
 ap_uint<128>("0x1bfeb95df0ae5b75e20ed3d050602981",16),
 ap_uint<128>("0x15de71b0bf6b765de0aa5c54a0e32972",16),
 ap_uint<128>("0x324768d220c29ac6dd8d023dbf620319",16),
 ap_uint<128>("0xb08a908fcd914b8a93a9f70bb01e86d8",16),
 ap_uint<128>("0x2e1946c7503b97e9e620b88d4e6829b8",16),
 ap_uint<128>("0xfdfd7558481f850f7d542d34b81cb41b",16),
 ap_uint<128>("0xc42ffe662e324669a5f0921ebb4fb4ed",16),
 ap_uint<128>("0x45619b90237118ac22fecae4d8679761",16),
 ap_uint<128>("0x87e3e97c8c918293412f1cda229707f5",16),
 ap_uint<128>("0xed3a3b9c7ad4117b27a4ba56ac02dc9e",16),
 ap_uint<128>("0xfce80a2843acd18fef62238968d5c3fd",16),
 ap_uint<128>("0x025bb41f6d5dc415fc807ef5a9f784aa",16),
 ap_uint<128>("0x96a09066ea7e8d5d1b30848326b059ea",16),
 ap_uint<128>("0xf8a0b512d8ced0e17584e9666a875685",16),
 ap_uint<128>("0x973f1095c366a365617587fe0bb16eb0",16),
 ap_uint<128>("0xf74503edd447f826cbbbfbad907ab4e6",16),
 ap_uint<128>("0x9a2d15303bde47e43bd4f7e8e1e3460c",16),
 ap_uint<128>("0x126cc0cd35637de50b9bcc33dbd34b7c",16),
 ap_uint<128>("0x04afe4bfb80d942958235b739f9d3321",16),
 ap_uint<128>("0x9d3bf208b58fb1357d4b9a669590135d",16),
 ap_uint<128>("0x0420a4a4a03de68e2af3af2aa6717060",16),
 ap_uint<128>("0x11bb801f2f5f9729c2eee218f71a3dac",16),
 ap_uint<128>("0x69e9d448cc4a95dd23b7aed8a78209d0",16),
 ap_uint<128>("0xe991a8453eb4db5a7a5b1eec57276598",16),
 ap_uint<128>("0x35e8e1976170b1ed9634ea45c24af20a",16),
 ap_uint<128>("0x7e2a9a58f70f447d95b95acead2e3a50",16),
 ap_uint<128>("0x559ed4c2abe83b3f8fa7e0c537409b62",16),
 ap_uint<128>("0x93509936cd41db39addb9164649981cf",16),
 ap_uint<128>("0x1bd6955f479291f99f60d358c64cb038",16),
 ap_uint<128>("0x05969f7e0014df299aec3b3f97ece473",16),
 ap_uint<128>("0x122151176ef4b3fa5cf90a2955c78996",16),
 ap_uint<128>("0xf8ef6eb8df18c67bf17e7af128996f27",16),
 ap_uint<128>("0xa6c1f815ec9fe533529fc06e5b096e7f",16),
 ap_uint<128>("0xa3261093b6b1a831af82f7850b020087",16),
 ap_uint<128>("0x1df3317722afed5743358e746170b4cf",16),
 ap_uint<128>("0x718e2df8f6a46e161c89ccc9206b3afd",16),
 ap_uint<128>("0x965dd6482da954c228aa041a090201cb",16),
 ap_uint<128>("0x7c63575dba83e6542e05e91a25fe01ec",16),
 ap_uint<128>("0x15778032a8119c7aa116a499bf4b5928",16),
 ap_uint<128>("0xec1b10109bac2f055a5cfbf84ed28c08",16),
 ap_uint<128>("0xae899fbc30e6c2feb249cb5f595050a9",16),
 ap_uint<128>("0x554f7f34133105de47764528df4854d5",16),
 ap_uint<128>("0x6a74388833553772cb8bf62ff7782568",16),
 ap_uint<128>("0xeea9273fe5590c632cbb4f5ca56ad6d9",16),
 ap_uint<128>("0x6513f24257379b302e7b39eb92d2cb54",16),
 ap_uint<128>("0x88446558f3c956b6be08b3d1af327190",16),
 ap_uint<128>("0x7435ff90b22fe5ee2fbbc55856bcaa97",16),
 ap_uint<128>("0xaa429e61c2dc82555be53e66adf3015a",16),
 ap_uint<128>("0xd4136962bb11b59e5d422b949f981246",16),
 ap_uint<128>("0x926e15106274061bd21fd607c4d1c3e6",16),
 ap_uint<128>("0xdf611a87605b555d503f9eaaf07a317c",16),
 ap_uint<128>("0x9e76f95e384b5425287d209394d8098c",16),
 ap_uint<128>("0x1b83f8caa9d9aaf659c6f6d1918e8ea1",16),
 ap_uint<128>("0xb448643a836da1ee154e6722dc373ab2",16),
 ap_uint<128>("0x3b056f214e34b1722043b8eba1baa26c",16),
 ap_uint<128>("0x493c6884e41bfc836a72e248493ee61a",16),
 ap_uint<128>("0xc0ac8a88d2695ecfbb4d911984e50d49",16),
 ap_uint<128>("0x173a0bb9d6d393304d811c1c851ef8ee",16),
 ap_uint<128>("0x263d8a1053050a9e38a71e228ed87012",16),
 ap_uint<128>("0x22d1ca2b675508e101d98366c5ed1c4d",16),
 ap_uint<128>("0x13cc9cd238866c0658157db93586add1",16),
 ap_uint<128>("0x7368f41f1aaf6174b3798e8ce90f92eb",16),
 ap_uint<128>("0xebde8dab636cdc71d4852e941ccd8081",16),
 ap_uint<128>("0xd2de28859a34f2490a34e7751a809cba",16),
 ap_uint<128>("0xf501d561eed6a6749aa52bfd3bfd3d6b",16),
 ap_uint<128>("0x6445e4644885f5440f442218fd3bb334",16),
 ap_uint<128>("0xd4839b57a52b2a38ef1bb0b32ef34f8e",16),
 ap_uint<128>("0x9c22498babd3379aa175712594bf84f1",16),
 ap_uint<128>("0x8c36904e9e524d1ac1062317206bd423",16),
 ap_uint<128>("0x28a36938ef01591344b701d05ab26c8a",16),
 ap_uint<128>("0xcd5aebc7d9206c9efce0efb1795fa5a0",16),
 ap_uint<128>("0x2602b13cb12886906949295de021bbd6",16),
 ap_uint<128>("0x9e48f4aa99246df1e9ec5e870e6bdbb6",16),
 ap_uint<128>("0xa593449295991c5a67b6a02b65fa39ee",16),
 ap_uint<128>("0x067be26ce385f3dc0b4c68bea9c3148e",16),
 ap_uint<128>("0xe4698322794534cbc36c0d45379ac7ab",16),
 ap_uint<128>("0x8432d2a13d561b07b8bbb61fcf60e03d",16),
 ap_uint<128>("0xbac52f1d6c0eef12361647acdf9b74fd",16),
 ap_uint<128>("0x775df814e5e60f827b5c089d9f8fbedc",16),
 ap_uint<128>("0xb8873e28c67dab2b2545ada8694f9d6f",16),
 ap_uint<128>("0xcad7337b50321a186a822def0275065e",16),
 ap_uint<128>("0x6e16a70bf3ce9dbac079726c00980a81",16),
 ap_uint<128>("0x3db4db14dc37c17b2265b70d2bb33327",16),
 ap_uint<128>("0x81d58b09e5f88e8f4fcb26dfe3910ad5",16),
 ap_uint<128>("0x7d9491d2915066afea64a8a6809c1b7d",16),
 ap_uint<128>("0x6a965af53e389a3722ba75d88a3bb53f",16),
 ap_uint<128>("0x46c826e9922075fa3114842b16e48144",16),
 ap_uint<128>("0x34c285acf9ea35d717b4870d55b41819",16),
 ap_uint<128>("0x803e495e450cf97dc1a2b6693a506d41",16),
 ap_uint<128>("0x3c67703dfae1c8861be480212e1dbe38",16),
 ap_uint<128>("0x6f5ec0769936066a41edf039b20f3ef4",16),
 ap_uint<128>("0x762c8232244d055de9ba2ba3f86c8e5b",16),
 ap_uint<128>("0x67b13dd7f07ee2a5236a216be0ae3c78",16),
 ap_uint<128>("0xdbb1e99458f1eca812ea4f28180ac199",16),
 ap_uint<128>("0xca88811e9b9d44288edb635ddfa7a2a9",16),
 ap_uint<128>("0x760284f5b9a2c74930caf44652480520",16),
 ap_uint<128>("0x8780dc54d834adcc18130355a16fd2f4",16),
 ap_uint<128>("0x60f931f224d3a19e06fdd535279a1db5",16),
 ap_uint<128>("0xb8b4b79fe6b3aa400badd38e83d53ad4",16),
 ap_uint<128>("0x7ede2e3ea3a48e1358a9d60c339c0e4a",16),
 ap_uint<128>("0xd9c3fcdc1963860563141a15aebee71e",16),
 ap_uint<128>("0x8f8883f8e15e303bf7d13f92fd2d9f81",16),
 ap_uint<128>("0x3478abdd18e27d82fdb5874c00a61958",16),
 ap_uint<128>("0x01d9e83388201a49ce3776e1d5648564",16),
 ap_uint<128>("0x7da93853f304c2a2325ae9d3f272d647",16),
 ap_uint<128>("0xe53bd91d58e6674fc27dfa7aae3d39a7",16),
 ap_uint<128>("0xbb8288cee358e0d3310184c271db549c",16),
 ap_uint<128>("0x794d20ef61fb220161e103f38735325a",16),
 ap_uint<128>("0xf1421f6ed91a749da13b44d82b696c99",16),
 ap_uint<128>("0xca3bdb2db3fbeeab1a91f1cd3948a3b5",16),
 ap_uint<128>("0x0d78698f19fbc59b7113880e0452ef35",16),
 ap_uint<128>("0x7c0139910142f24028787e6c0ad25bb5",16),
 ap_uint<128>("0xb9ebdebe6214196769bfeb2a3afd03ce",16),
 ap_uint<128>("0x5a954354e0efb3347194a99e97ec0263",16),
 ap_uint<128>("0xe017eea766cd60513f43a9db8108ccea",16),
 ap_uint<128>("0x411a727edb07db7224506ca736fc70ce",16),
 ap_uint<128>("0x986355d9b33210048cebd4c5d3b9f724",16),
 ap_uint<128>("0x2104f6ccab3d534c42c3b1f713402848",16),
 ap_uint<128>("0xe1a19f7f3c43ea0fbd1b87eb87600aab",16),
 ap_uint<128>("0x45010a15077e10057c05b738c98089a2",16),
 ap_uint<128>("0x832c219fdf7800ec3f437c3f2bc5b7b8",16),
 ap_uint<128>("0x71f66f462422a1155fbc8d8269c78c85",16),
 ap_uint<128>("0xabdea8ee76101535b8c693ccc7d8edfd",16),
 ap_uint<128>("0x20ba32a072e90a504516417382f1c06e",16),
 ap_uint<128>("0x0ca938e76db61720d04d53e8adea0a7d",16),
 ap_uint<128>("0x6567d12b8a67a2178278b50ae014b002",16),
 ap_uint<128>("0xfa866f5641fb5fc9cefa7f6262eb44d0",16),
 ap_uint<128>("0x1f640147e1bd03d4ec82f53e99ef36a4",16),
 ap_uint<128>("0x0cbb286fa6d51b99720306055a90f0ce",16),
 ap_uint<128>("0x6ef2e10ab33c73fa370c3acb90d65830",16),
 ap_uint<128>("0x2786bde81467d0ea7f03f326119c69d7",16),
 ap_uint<128>("0xe6a66f29647bbd13187cac8a91548b5b",16),
 ap_uint<128>("0x9a5f63c8f2f5e87e3be685a285ee26fb",16),
 ap_uint<128>("0xb90a52bb4784595e29c0dc9427857b14",16),
 ap_uint<128>("0x4bfab91f4a50017ed93c4147a2efb256",16),
 ap_uint<128>("0x210d11fa3858947cfd2dd9385e1947c1",16),
 ap_uint<128>("0xcb575bd2d4a1e1ae6f7d649a80771ed1",16),
 ap_uint<128>("0x216b7bc8fd7a9b8ecfc802e997f1f61e",16),
 ap_uint<128>("0xc5cbf5a5566e1af140dab002522cc5b7",16),
 ap_uint<128>("0x351009b97c411cdf43b52bdcbce181b5",16),
 ap_uint<128>("0xab7bd52518744c5d97e99fd0be675df5",16),
 ap_uint<128>("0x19966e722f9d8a73a2641c6e272946b8",16),
 ap_uint<128>("0x834d095472361f62a299de45e1eea4c1",16),
 ap_uint<128>("0xf5cf74e2dcdbdc65ccdb4dfa8aa6df64",16),
 ap_uint<128>("0xcb4b600cd38b9f9ff9b2b784e93c8f0f",16),
 ap_uint<128>("0x1a609af53568d2829ed2442f82672c25",16),
 ap_uint<128>("0xb58b1609c1da0fd56b134b2e52d567ed",16),
 ap_uint<128>("0xd1c3757959156a70a18d975d5d864a60",16),
 ap_uint<128>("0xed086b9557dcbe1a49d7a0d11083705f",16),
 ap_uint<128>("0x403b282394c9e3a895b863b5f63101f2",16),
 ap_uint<128>("0xb85eb95eb21ce0f5b5247a6ed3dc9018",16),
 ap_uint<128>("0x6f03fa23a112464a290c41aeb9b50d59",16),
 ap_uint<128>("0x889e1d77bc931b25a3d7116fd90bef04",16),
 ap_uint<128>("0x213f9cba20e916cc6e8d0429b4d9251e",16),
 ap_uint<128>("0xd6ffd261559756493fe11792cbb8a1e1",16),
 ap_uint<128>("0xd993e2e1d65f0e2bc5c2cdd35c63c334",16),
 ap_uint<128>("0xa68283089a445b972c7d6e4b541fa320",16),
 ap_uint<128>("0x9a0c50b3849475382eacfa3a43e9c151",16),
 ap_uint<128>("0x38ddda8771c39ac2e2dcf35395598027",16),
 ap_uint<128>("0x7a563729624840a8b9afc5e749d3a79e",16),
 ap_uint<128>("0x531ca61954da45c5bca194310766bd51",16),
 ap_uint<128>("0x3bfcafb1e5ef98d4822c625f171226f3",16),
 ap_uint<128>("0x184645ebc017d3c05110d648dd73e917",16),
 ap_uint<128>("0x49c8b3613de23ed6e97df267592632c6",16),
 ap_uint<128>("0x1be43a64b89ed52c0d1c34f6ddd3308a",16),
 ap_uint<128>("0x967d211c45003aae7a34c99ea6a827bf",16),
 ap_uint<128>("0xb624aa358f29922e9af131222199a242",16),
 ap_uint<128>("0x3dec1c535675307d9d723e0e5052f30b",16),
 ap_uint<128>("0xdae5b1b99eb2b3d473671cf71ac29a30",16),
 ap_uint<128>("0xdd65ff0c5fdfa26b469746e4574543c3",16),
 ap_uint<128>("0xd4a82839349fdf040f1fb589dad5eadd",16),
 ap_uint<128>("0x719c5f34bbc42e5b860caeae313de166",16),
 ap_uint<128>("0x0e20d18c4e47bc49ace32c6b74ae4c8d",16),
 ap_uint<128>("0x7b27fa5fbf306319ca2d0db9f51b1841",16),
 ap_uint<128>("0xb40965a8ce25f0d76896e1130aa0926c",16),
 ap_uint<128>("0xd2dc4a719e267fd0536939d60462e593",16),
 ap_uint<128>("0x1900815ac2d3c90d469bf3727d9a8248",16),
 ap_uint<128>("0x2f9f1bf8561dd81856bece345790614b",16),
 ap_uint<128>("0x3c3f8bfd5751da11b3bb4729a20fe422",16),
 ap_uint<128>("0xed82b096f5532fd97c75cf8f529ee09f",16),
 ap_uint<128>("0x1812aff9be82283469d862a19d271584",16),
 ap_uint<128>("0xe4e5454deadcb3f66bba380323d33bd9",16),
 ap_uint<128>("0x65810e6a16954105265d73e6bf211768",16),
 ap_uint<128>("0xdaddd311c8e4ca8bfafccf4918f5db22",16),
 ap_uint<128>("0x986f2e905787a128fc66e584ca9faf4b",16),
 ap_uint<128>("0x9094ca7d0f8817ec0d6d5651f9fdd96b",16),
 ap_uint<128>("0xbd6139789638cb66e34c10f061a4592e",16),
 ap_uint<128>("0x1040471545d45a25a3bf51ebf3eb9c51",16),
 ap_uint<128>("0x7425a977abd3dd8f7f23d9c5c0f29faf",16),
 ap_uint<128>("0x791ebdad225754e3377784257214c6a4",16),
 ap_uint<128>("0x1a8423cf1b31abf4ab8d63c14c1f2945",16),
 ap_uint<128>("0x3ad868cc07adcd1d57421c29b38a0c3d",16),
 ap_uint<128>("0x29bcf34e92be394de2e33b2b32e67244",16),
 ap_uint<128>("0x74576a5317dc9bebef30f892851d6435",16),
 ap_uint<128>("0x1afb71eed3b87ec5c806b158571722ea",16),
 ap_uint<128>("0x400a89826f3a175ac83788e6a0ee7237",16),
 ap_uint<128>("0x976fe87fd931df399c35c1578b15e60e",16),
 ap_uint<128>("0xfdb6db0cabafc7a64dcc9f437b856188",16),
 ap_uint<128>("0xb24fe828d72fb4dc1ef8d7c1c55ffac1",16),
 ap_uint<128>("0x1742e473bc01e34614fa3129f114e5d9",16),
 ap_uint<128>("0x22b82fb4509cc3aedb300e10dca7bbc9",16),
 ap_uint<128>("0xf7f45ca57948a7b64643d05fc6adfde1",16),
 ap_uint<128>("0xa716a33cb3e2d41faf26dcb16529c279",16),
 ap_uint<128>("0x878b0de5e4996e6187a572fd52867ca7",16),
 ap_uint<128>("0x54262c0d100f9c0ad6d9573ca5433736",16),
 ap_uint<128>("0x9b6e4abae6fc3b55421e4059a6cf5818",16),
 ap_uint<128>("0x0dcd97abad118b435ef99adb5e60cb75",16),
 ap_uint<128>("0xf26ae2f6b362151977fef6f3f09e2b48",16),
 ap_uint<128>("0xcb79587c261526f29a3f7f21b3f1ed78",16),
 ap_uint<128>("0x1f49649a9bfc991c4a524f21bcdea8f6",16),
 ap_uint<128>("0x7b3f77b7ebf6b9f17f5347b3d9b957ce",16),
 ap_uint<128>("0xee4ae4a9a6debbeec6a1a340c112ad10",16),
 ap_uint<128>("0xff97f3f369be957906051636d8f50469",16),
 ap_uint<128>("0xda346d6e1e6e328276e385abfd1d20c8",16),
 ap_uint<128>("0x87697e93995dcee67f28df63a317a6a3",16),
 ap_uint<128>("0xa9f66b3fa0a8ac396ad1f1e1d2342e06",16),
 ap_uint<128>("0x76e755426561ff9f31453d30082bcd2a",16),
 ap_uint<128>("0xd405ccdd52b0089a620e24770be1a60a",16),
 ap_uint<128>("0x31a0fd1ceba849ff9896964ffdfd41f4",16),
 ap_uint<128>("0xc42804e027c6e9beb8178b3367eae41e",16),
 ap_uint<128>("0x7a8dfa99a1d8b79f501343f2a103561b",16),
 ap_uint<128>("0xe2b3836e6666d6ed8443eb09fb1c6dc7",16),
 ap_uint<128>("0xa2034cbcb99f875682ee063f97c29f37",16),
 ap_uint<128>("0x5d083214599daf5831ed8aae4e0fa496",16),
 ap_uint<128>("0xe33744e76c37ed5003555e15d32dd0ac",16),
 ap_uint<128>("0x732fd6913b8eded1636653e2477d7a78",16),
 ap_uint<128>("0x0b9c3abb99c0222ae25f2942e24e0329",16),
 ap_uint<128>("0xf3f92d805d6b478a92cecd376a85170f",16),
 ap_uint<128>("0xfbafdd5c0456d8da75c3ddfc19ec6ea7",16),
 ap_uint<128>("0x0739d9d1a67a46016778d7bae9f91bd2",16),
 ap_uint<128>("0x391426d70d0d54800bc005a101c5c73b",16),
 ap_uint<128>("0x14f4f7b0ce9abbdbfe4e6c377b61ac6a",16),
 ap_uint<128>("0x7519c1d0baa06ff9ac7dbcafe35488b6",16),
 ap_uint<128>("0x10ef63f62f334feea048bdf378ef473a",16),
 ap_uint<128>("0xc2d23af93c95270e81e81f26949dee1f",16),
 ap_uint<128>("0xa23fe4e663cda28db36a60c16c7943a1",16),
 ap_uint<128>("0x6f936ee7623f916a3f39277fb1a8da5e",16),
 ap_uint<128>("0x6ff104bf4af139f78cf41957ddab1b0a",16),
 ap_uint<128>("0xa51c09968a60238d9738173d2be4b8a1",16),
 ap_uint<128>("0x5b9ee57b64a4d5ee2fe305a57b47dff0",16),
 ap_uint<128>("0x3d894cf9a4d0897b09c2f9aa4bb67549",16),
 ap_uint<128>("0xf8eddd14c3fb4d69b264bdd0023a2d4b",16),
 ap_uint<128>("0x507455d69533a9fb5c6d720b598a149d",16),
 ap_uint<128>("0x2bc79cc1bbe3d498b8b08876d6579976",16),
 ap_uint<128>("0x04bf90d2293f78e1ae21bd9f00f09465",16),
 ap_uint<128>("0xda8c4ae9095f910924b9fb82d09c13df",16),
 ap_uint<128>("0x0aee83a8813e8603af29157ea616647e",16),
 ap_uint<128>("0x81592af8fbbfcbb237d276980d467c9e",16),
 ap_uint<128>("0xf42ec75c4f549bf4ed3697a56546b3bb",16),
 ap_uint<128>("0xd5475f3aafb00d87cc4fcc93beb971fc",16),
 ap_uint<128>("0x556ceb11e452381b50081e3f19cc5bd9",16),
 ap_uint<128>("0x2fd4c279196852821371de035a36feef",16),
 ap_uint<128>("0xa348b0e579aa26daa4310fa9ac94d1af",16),
 ap_uint<128>("0xfaa96e86ad00d381302e1d8f435af4e1",16),
 ap_uint<128>("0x3205f8ffd158392368e2a3a345e775f7",16),
 ap_uint<128>("0xe6cfdf5fe2ea7122d126f17ab0d09596",16),
 ap_uint<128>("0x85a32d0f0144cbbe0e7a249287309aaa",16),
 ap_uint<128>("0xfbb73c037e16b28b49f92c3abe8d041d",16),
 ap_uint<128>("0xd9901aa2b20e81dd3ea6a0ba64e9a821",16),
 ap_uint<128>("0x6cd25fe5e78fdb43daff03763366fe51",16),
 ap_uint<128>("0x445859f561ade88939c716e10f0b34a9",16),
 ap_uint<128>("0xbb1f7acce6b85ad0b280d27dd730766e",16),
 ap_uint<128>("0x218d189eae2960eaa4a0fc7e0a14bdc1",16),
 ap_uint<128>("0xca064891b9f6fc1fdd7fe062994a181f",16),
 ap_uint<128>("0x8f7bf76d8614c5c362035770f93302b5",16),
 ap_uint<128>("0xe9ff9c6e1f95ecbe28daa0c491228a67",16),
 ap_uint<128>("0x021496f9abf5a1db67f60b65f8b37973",16),
 ap_uint<128>("0xc500b41982f7085ecfc10796341b28ff",16),
 ap_uint<128>("0x860c81c87f6a1d6cacd790bffe441a02",16),
 ap_uint<128>("0x39c8819ec0154c4115ac75bcff246c18",16),
 ap_uint<128>("0xf7267bcef8dd124e286a2cc16877e6dd",16),
 ap_uint<128>("0xd506c5df89dfb8765cb0997b341a24a2",16),
 ap_uint<128>("0x7d26f3c9eecffecf55a4ed9c3a529590",16),
 ap_uint<128>("0xe4df91e78d4f82fd9ce28197cb7f1a6a",16),
 ap_uint<128>("0x5692bd43677579ad1ba16f3080083196",16),
 ap_uint<128>("0x114fdc0f00bf12710eb4ce4e9f168ea0",16),
 ap_uint<128>("0x402b0f46c6734f548a60caefd2d2f8bb",16),
 ap_uint<128>("0x97e61b0b7929eea4b2f64a4de4436711",16),
 ap_uint<128>("0x14b7023126c0c8d6e4ba7f45ea3915af",16),
 ap_uint<128>("0x39822b6819f2934bc481d5fc1188520b",16),
 ap_uint<128>("0x69875dc61a68530604954d58241b6279",16),
 ap_uint<128>("0x2a9a06a0fa415a41cdf5f2de7c4fc0fa",16),
 ap_uint<128>("0x6412fb35f387936eee90f72d62ac43d4",16),
 ap_uint<128>("0x07c02587ad46dafe9b2338aa1925651c",16),
 ap_uint<128>("0xfceed5cf1b5c5034f2f8fb8b3fdfeeed",16),
 ap_uint<128>("0x534d51ff70f0898ef2fafbddd538f9fe",16),
 ap_uint<128>("0xfdbca0bba7fa8752547bbf7f70fe8c58",16),
 ap_uint<128>("0x1b8351d83bb302f4987fe3ba81fb8391",16),
 ap_uint<128>("0x2d509c96e8217925c3d90e67043df3ce",16),
 ap_uint<128>("0x1968526de315a2496d26194efce608a1",16),
 ap_uint<128>("0xd302fedbc28f3a81b4033cdebcd82c15",16),
 ap_uint<128>("0xf7e26d38e23bc5a017ffb78da0eec383",16),
 ap_uint<128>("0x4c98bd4e4a00252d345e7b547667b78d",16),
 ap_uint<128>("0xbed18cabe0d632aa99ac707a78a05a35",16),
 ap_uint<128>("0x7565fb0042145b6068437c8d669daa7f",16),
 ap_uint<128>("0x771b3018bb0c077025e583f7680f17a9",16),
 ap_uint<128>("0xd89773f78155059603a654f1c71fba25",16),
 ap_uint<128>("0xae4847c105121aba71a085844fc905c3",16),
 ap_uint<128>("0x8e035c7f4f9e844a096257fae96b88cb",16),
 ap_uint<128>("0x7993fbc1784367cd4228ba16372d3b31",16),
 ap_uint<128>("0x6ce4499ca945b36fbf02c5d7308be19b",16),
 ap_uint<128>("0x7c1f68c40846ee0ce0db0666e7448e7c",16),
 ap_uint<128>("0x62e8d2615c0bff77850f3a228a3fd6a9",16),
 ap_uint<128>("0xe743d5ea3744365a700c596761236d03",16),
 ap_uint<128>("0xf410b3ee3eba47e917149d09f3fb5074",16),
 ap_uint<128>("0xc455882b2a86b51a752a847a4cb13dd7",16),
 ap_uint<128>("0xe6a814834b7d57da27d2858d681dae3e",16),
 ap_uint<128>("0x3f61af5ede02d35ca503873df5838861",16),
 ap_uint<128>("0x199eb5e76f92ca4a7631f33df5243548",16),
 ap_uint<128>("0x1e56ae41cde5af98de6b0d6ab5e87a32",16),
 ap_uint<128>("0x141bcb706402b3d71aef13ea21b2e188",16),
 ap_uint<128>("0x82e96cf98ce13dd82f8ec615e8139ccc",16),
 ap_uint<128>("0x04bafa4c0822842b48690637a4e83848",16),
 ap_uint<128>("0x1782e20c8e99f32f48ec86a73b9a9c18",16),
 ap_uint<128>("0x044d92c57f3a4d346dfd94c8f2ccc8b3",16),
 ap_uint<128>("0xbde0f5743152ec9da48a82b42e7f97cc",16),
 ap_uint<128>("0x77c66a110030fe28e21069bcf8639aeb",16),
 ap_uint<128>("0x458bf5ccaf4a68e58b6614885fa56df4",16),
 ap_uint<128>("0x23e980f68f1672cd2b7845befe78d256",16),
 ap_uint<128>("0x6d3d86e3296e889bb23133f7f274687a",16),
 ap_uint<128>("0xb49e50d4163f540ead9fb6efaf11a0f3",16),
 ap_uint<128>("0xc32199cca40ae5b6b97ca3241ae609a7",16),
 ap_uint<128>("0x45eda6bcd912a298dd4f7d9354c956e8",16),
 ap_uint<128>("0xdfc157913327376df0ac0afc62bf8355",16),
 ap_uint<128>("0xb5b5dcf064e0540d341ebf95e826ba17",16),
 ap_uint<128>("0xe16a0a855a00bfa2e006bb19b3b81000",16),
 ap_uint<128>("0xeb372f02b235a302ccef7446a48d41d3",16),
 ap_uint<128>("0x6c2f1eaecace2d61b376dbdb9399bef9",16),
 ap_uint<128>("0xffb65b19aa5900351225cd155249fe62",16),
 ap_uint<128>("0xf4bfd5927662bcecece5723340fb1c89",16),
 ap_uint<128>("0x5312b19addd8f0eb3f8b852d730d3e70",16),
 ap_uint<128>("0x09c3a515492f28620dc069dc288122cb",16),
 ap_uint<128>("0x9fd4d91428be89c15233e15c714b9e39",16),
 ap_uint<128>("0x380a3de074876fbec9a925a732e8edc7",16),
 ap_uint<128>("0xba6d275f01bbf13bf3bed2473d1c25df",16),
 ap_uint<128>("0x3c6589f1ea5043e720c769dbeaea6d50",16),
 ap_uint<128>("0x881cb76d6c7500d77a3d2c315754fd3f",16),
 ap_uint<128>("0xdd21e7c7a5abefd7b46c56021b2e7d5e",16),
 ap_uint<128>("0x42794623633d6ae9c5c4742045aba23a",16),
 ap_uint<128>("0x016df7ff3364e9abcbc84f63655d76b3",16),
 ap_uint<128>("0xe2071d496b1ea9e4f081434ad42cc14c",16),
 ap_uint<128>("0x116cdc7db230d0ae000ba2dac03cd758",16),
 ap_uint<128>("0x891144de5e026665359e27ae685eae7e",16),
 ap_uint<128>("0xb4082133faab0977ee33e8a325b22b2a",16),
 ap_uint<128>("0xd5fde8db32552c88dbb6f7cfa3805061",16),
 ap_uint<128>("0xbd3a2d39ecf47ffe448b1cc5d55f27b1",16),
 ap_uint<128>("0xe2ed34d6a28c94e18ae8b8c4b0f89579",16),
 ap_uint<128>("0xae6d225d2dc9d0843a7b8179090de92f",16),
 ap_uint<128>("0x0cac603c03169f68916a0faafe0f20ec",16),
 ap_uint<128>("0x0fc4c6060fed293df8efe5340123a597",16),
 ap_uint<128>("0x8aa25ea1f15560e85d6890b8cfcdc2dc",16),
 ap_uint<128>("0x209d76d8155cbc68f9615b71977249e2",16),
 ap_uint<128>("0x2f00d44716d05bd1741108e5c977ae00",16),
 ap_uint<128>("0x6dce6887745d0eb441823a42757ebffe",16),
 ap_uint<128>("0x49eade32315ecd10ca428f7f9cfeb762",16),
 ap_uint<128>("0xd1752aa80718b50605ed75ee62363cc9",16),
 ap_uint<128>("0xc2b7f83837313198cf93c7a59a5b479d",16),
 ap_uint<128>("0x01e727a820ed4a515f0c9ae62a806ffb",16),
 ap_uint<128>("0x535d4d1b3f06cb70ffdd463f0a49090c",16),
 ap_uint<128>("0x441f6aa19af3c2864f3726b347609a44",16),
 ap_uint<128>("0x2e6157126df478cbbe29d9c3fc707b1c",16),
 ap_uint<128>("0xf2f5fd726729b5fb1d995eaf2d7dc0d4",16),
 ap_uint<128>("0xf99fd481cf55578a166d440956137321",16),
 ap_uint<128>("0x0e2ea7f0b1cd42dc7ad846d79b29b22c",16),
 ap_uint<128>("0xeac6b9f48f95e0a15e5125d309fcc900",16),
 ap_uint<128>("0x7d859c7f37e7dd70793054147751a584",16),
 ap_uint<128>("0x6b6c5ff8ffd75c6af0e638195d40be66",16),
 ap_uint<128>("0x733be2dd80005b04c70fefbfe4620c92",16),
 ap_uint<128>("0x94d49d862526c65a1420ab3f808429a8",16),
 ap_uint<128>("0x6782d460c1a1b1dd11f1c5b27479796d",16),
 ap_uint<128>("0xdfaa66a20b12c929491409a74bda2a3d",16),
 ap_uint<128>("0xa99be3fc66fde9ba0f5646d929b49ae9",16),
 ap_uint<128>("0x0ffa366fe472fdf6202c791c59b284f9",16),
 ap_uint<128>("0xf4734f7ce9207d029ca77b376b1f0f1e",16),
 ap_uint<128>("0x59279d90892a5d281a1454506149901c",16),
 ap_uint<128>("0xb61bfc794e1734491f6198dbfa7e91aa",16),
 ap_uint<128>("0xbe05a8ec836059fa94946baf2c9130e1",16),
 ap_uint<128>("0x4c9f2feec8e1008fe1419dc4b8f85852",16),
 ap_uint<128>("0x22e0f0ecf36d720c2e129410de7d5796",16),
 ap_uint<128>("0xab7a784130669053d5b103981850edc9",16),
 ap_uint<128>("0x1e25eb275f8ca3559e9bfb3495ce2924",16),
 ap_uint<128>("0xb2de63a71a446cba94fac823af957ec6",16),
 ap_uint<128>("0x1f80f27016dab948566703b7b71307e3",16),
 ap_uint<128>("0x19fd6020560262fd8cdbadfc1301aed0",16),
 ap_uint<128>("0x9c21e6bc6f5a2c650ffbc0b6aa42e80d",16),
 ap_uint<128>("0x5483be914cf71ff7e550c2369bab8104",16),
 ap_uint<128>("0x96b55e0f88593b54a5036a357ea9290e",16),
 ap_uint<128>("0x4d4cf7e97cd2e36ae54e9f0f936bfc53",16),
 ap_uint<128>("0x284290b46c11e7fba28db5ccc85959ad",16),
 ap_uint<128>("0x6f698f0c7439d7af3c9ed71f8fdad7d3",16),
 ap_uint<128>("0xe5c6dd55d1ea8a78972de91936dcd535",16),
 ap_uint<128>("0x07151a7986c81190db46345d7e3ec0aa",16),
 ap_uint<128>("0x4abb2d89eb78d4aef42cc9e29a62191e",16),
 ap_uint<128>("0xda4ab52f7e001b651eb9295813eaef10",16),
 ap_uint<128>("0xe7437c14a614c407cf81b342be1bc595",16),
 ap_uint<128>("0xda7f8a2c03458c3f0412529c41d0bdff",16),
 ap_uint<128>("0xd8295d6bebe2035513f0bf68bb0095f4",16),
 ap_uint<128>("0x76a59b7e07e7a21e7de1e3499ac61a71",16),
 ap_uint<128>("0x35d014dfd874b578f959da90906479aa",16),
 ap_uint<128>("0x922349db26dcb184bbd974c985fe1164",16),
 ap_uint<128>("0x2dd1a16e80a6886fb18bc1d66f1ce75f",16),
 ap_uint<128>("0x94a4454ac7524407b26dd2cdab893654",16),
 ap_uint<128>("0x17fe1eebbfa1586a05810db6dbcd2ade",16),
 ap_uint<128>("0x020a95928edb1566c707c8a742531c92",16),
 ap_uint<128>("0x9eea9ab60216f9642b1a4ba4fe6bacd6",16),
 ap_uint<128>("0xee58a7255f6a0c2f66d51c7c436526f3",16),
 ap_uint<128>("0xe2408bb968169304e1104aac73b3f075",16),
 ap_uint<128>("0xa7a37aaebb52dd376e439891597e8c15",16),
 ap_uint<128>("0x22d2bdf1c553c828d316a6643b873ffa",16),
 ap_uint<128>("0xf818b786c3df23113d2d17de57311a1a",16),
 ap_uint<128>("0x9a808c9b566b8c929760af7dd896b1f1",16),
 ap_uint<128>("0xc708c676eb620dedb1fe6d2c256bf13d",16),
 ap_uint<128>("0x274379d84eb79ea31f68c0f2b0d21f17",16),
 ap_uint<128>("0x7e00fbba6a8247b4946d8591ef22e552",16),
 ap_uint<128>("0x7c4a3e62c202d9e26b33cda6e57298a6",16),
 ap_uint<128>("0x6634edaf2ddbcfe71906f78b0dad261a",16),
 ap_uint<128>("0xc2a62a37e137f96708b67faea9747500",16),
 ap_uint<128>("0x383a90b77a1b490228b5bcf6eb788c3a",16),
 ap_uint<128>("0xbbf28495339328732e5f479f02e9c6c6",16),
 ap_uint<128>("0x2c77b26f7337e0b4e5601b04f6ffb76b",16),
 ap_uint<128>("0xb9c7969201c52483b131a41047b73ef3",16),
 ap_uint<128>("0x4c46e0a5eaa150c4c31908dfc4cce6a5",16),
 ap_uint<128>("0xf798e16447a00ecaee8e8ef60578b4c8",16),
 ap_uint<128>("0xf6c1187a5bd65db53f364cec13e578c2",16),
 ap_uint<128>("0x76b9befc2bfbafe930f1911f1a9c1b66",16),
 ap_uint<128>("0xa44925dbdb340a9cf667898c1842762c",16),
 ap_uint<128>("0xfac13d358d38ea4a883768dc961d1b94",16),
 ap_uint<128>("0xde7b30b5909d66318f751f8dccc17dd8",16),
 ap_uint<128>("0x48f8afa49dbc224c8e47941521e68735",16),
 ap_uint<128>("0xecc384eae70086a49fe8a2c3467e4295",16),
 ap_uint<128>("0xbb21c2878fb368402536c89689bce563",16),
 ap_uint<128>("0xb6b5db1749e1ddaf579b93fe5a42d88e",16),
 ap_uint<128>("0xd445e73f6ca0c35caf8b4d30e13d3704",16),
 ap_uint<128>("0x435a8c03e878d47d07ce07ef513a623d",16),
 ap_uint<128>("0x85e398dbe8e47f4bfa5d7ec75e52276f",16),
 ap_uint<128>("0x91f036c9315ad441a5ece7b518b89b68",16),
 ap_uint<128>("0x2afe2e85b7e3a6c370b317280fee94af",16),
 ap_uint<128>("0xa4d1a848bf322c52873ea91628f971ec",16),
 ap_uint<128>("0x71eeb8f510f054eac15c42c388f00f12",16),
 ap_uint<128>("0xa956c90decb1f1a4e697ea253d41d4d7",16),
 ap_uint<128>("0xa44f3eb21c743317c9763cfa382340b2",16),
 ap_uint<128>("0x6e02066f0233b8725a4a15ffa2db6793",16),
 ap_uint<128>("0x7eb207c775dd6ed0086980819517be48",16),
 ap_uint<128>("0x6acc8f9954370ba76baceb3227dd8bc2",16),
 ap_uint<128>("0xc320e1403689cd1111a1981ade13ba7c",16),
 ap_uint<128>("0x36f9078c4e4ea3b6198dbe5a6cd81c2e",16),
 ap_uint<128>("0x5c840f5ff8649626f6b4d03cb71dca5c",16),
 ap_uint<128>("0x6dde356c720c21887023801e649ed661",16),
 ap_uint<128>("0x627f7ff680b4b58262cce41a9f8a51fc",16),
 ap_uint<128>("0x416bbb0bc04b59e20c01ba0361fb99ae",16),
 ap_uint<128>("0x737a0a02f57fce68c3815406305086fc",16),
 ap_uint<128>("0x1523151b4f57ea7863a9627da325f631",16),
 ap_uint<128>("0x058a7f7291afa2fed5b1e8977786502e",16),
 ap_uint<128>("0xec990cab54074dbc3f4604b0f627fa00",16),
 ap_uint<128>("0xbe573e2fb3082352b0733bc8117afb98",16),
 ap_uint<128>("0xcf0c38d96baafa27febd2b3efca34738",16),
 ap_uint<128>("0xf92c017d26729d1757b01c955735140b",16),
 ap_uint<128>("0xa5fb96ad1df92bff11618c235d956cc2",16),
 ap_uint<128>("0x8fcf68c07b0660bd78734b917170443d",16),
 ap_uint<128>("0x43f2e78d9e3acbf8a4272e59a190bb9f",16),
 ap_uint<128>("0x8076d8b04a64a1ea679c3360fb753fc6",16),
 ap_uint<128>("0xae5d31a48cd929c38d00c7a65214a5a9",16),
 ap_uint<128>("0xd80e6ae352576429254cd82b5ee780b0",16),
 ap_uint<128>("0xc51d560d71d2b7b1b4b0ed23de38f6ac",16),
 ap_uint<128>("0x539baaa03891fcc2c37526a1c21fb2f2",16),
 ap_uint<128>("0x7c2538e3e6fd860be5a948a1a140a918",16),
 ap_uint<128>("0xfa96370c5b2a1b326baf4499634d6d8c",16),
 ap_uint<128>("0x8db47b623bb31824ce78f60e2ee73d49",16),
 ap_uint<128>("0xebea1a560d74eb0cc4a1fd5e25e47dac",16),
 ap_uint<128>("0xfe40157b145abd1224cd2ca5ac30f729",16),
 ap_uint<128>("0x43352bd7f24a075033b4bd430e1437b0",16),
 ap_uint<128>("0x1b68314948081fe5c8c88394b75d979b",16),
 ap_uint<128>("0x2a4b3b14b6cfac7fdb32cf07b2b45f88",16),
 ap_uint<128>("0x84397154a1eb2e39e46fdf11044feae7",16),
 ap_uint<128>("0xce9e1d513984441a754828501ddb97b5",16),
 ap_uint<128>("0x8d231695a0fb62c3e56c520ae1644a05",16),
 ap_uint<128>("0x4005c91465d45669e3e1f87c80fdd095",16),
 ap_uint<128>("0xf4b15d48e511e1e4a0b297729abafbcd",16),
 ap_uint<128>("0x13796559f55bff6d7448c4218f64893c",16),
 ap_uint<128>("0x99a4434e2e514d24d1d6e30ef1ec9cfc",16),
 ap_uint<128>("0xae665f5880341cdb7127e34e2b26f158",16),
 ap_uint<128>("0xf813280df314ce3a500b03bab08035a2",16),
 ap_uint<128>("0xf772ff5ad7dbc3566bc31f2e49c00ad6",16),
 ap_uint<128>("0x66126449df18c779a1358ff4050702d1",16),
 ap_uint<128>("0x3ec8d526bbcb71ba3c8faefee2789d28",16),
 ap_uint<128>("0xa9f9fbdcfce706259007032810f1b5ee",16),
 ap_uint<128>("0x65be66ae9969ec60c840b25af0661c70",16),
 ap_uint<128>("0x214976949505cb024297997fd40e730a",16),
 ap_uint<128>("0x6e535ae74e2eabdef35a143720852bc5",16),
 ap_uint<128>("0xe635e235ce31bdcd0ed9df8ff126385f",16),
 ap_uint<128>("0x9fa3e191ed3615553a219d9cd9796c32",16),
 ap_uint<128>("0x9118679cfa47ea11fcdff183921de7c3",16),
 ap_uint<128>("0x98bbcea0df414f335f6be83fc9c46316",16),
 ap_uint<128>("0x06f04ee2b344c2cbea6b3611704e556b",16),
 ap_uint<128>("0x1adad37c496f4be71aca24ac8f6baede",16),
 ap_uint<128>("0xbab5ad21325e5f3f4f5862f4aca3322e",16),
 ap_uint<128>("0xac8ac2e10bc8a8744b2c48d7cf0f6269",16),
 ap_uint<128>("0xce7eeb1f1b49d937ef66b217d2eef738",16),
 ap_uint<128>("0xa4e37cc3547643136773fa8b8e5fb3a0",16),
 ap_uint<128>("0xbb7df3548ee46182348c4a955103a194",16),
 ap_uint<128>("0x5d98fbc0d5078937947bb6eb479c2028",16),
 ap_uint<128>("0x66d0305983ef03b6e4d1170600cc1d0c",16),
 ap_uint<128>("0x4e892dc20f89d89f4e3a594e37d02655",16),
 ap_uint<128>("0x814d9e4d47a75132cfb74458163432fc",16),
 ap_uint<128>("0x993c839227026b6cda847381ff852d26",16),
 ap_uint<128>("0x59cba1a2148303b49c905b8858a4e78b",16),
 ap_uint<128>("0x705934c99661a1204b01fc3f1540429f",16),
 ap_uint<128>("0x28af96d476c1b7b40fab95082c4e4502",16),
 ap_uint<128>("0x39ca3f6f0f73b45810626330d072f2fb",16),
 ap_uint<128>("0xe2473c07e7837420c108274d1a6b3052",16),
 ap_uint<128>("0x5622fbfa1322baea91e07285e48dbff5",16),
 ap_uint<128>("0x99fa7636f78813731497047922ee9d61",16),
 ap_uint<128>("0xc07aa1134dfc3f82c908dad0d9cb4bc1",16),
 ap_uint<128>("0xd76f882384daab8a18040c11626366c0",16),
 ap_uint<128>("0x3cb77eb1b0b4e8e9b0f29caf1fec3b49",16),
 ap_uint<128>("0x1178d773863f2bbe0d9c55ba9c951c90",16),
 ap_uint<128>("0x245063416a4e0ab5d779526e3c5ea674",16),
 ap_uint<128>("0xccd067dfe2b2d71cf8a7abe78b71fc8a",16),
 ap_uint<128>("0x182ad1047ccbfa09c862a3caed059aae",16),
 ap_uint<128>("0xbba45d167e9bd3e21463330e4f922df5",16),
 ap_uint<128>("0xe6b1075868c43b359d09d9c24b22edc3",16),
 ap_uint<128>("0x9968e78006a6608c31729fbac265d3d1",16),
 ap_uint<128>("0xa2c8f1c07a3fd7de684771698e4a6f69",16),
 ap_uint<128>("0xf99fafd97151a898e22472eed16cf96e",16),
 ap_uint<128>("0xc0a81ce8a3352df53758940eec33537f",16),
 ap_uint<128>("0xcff8ba326b78f835daf31a6b762a3e6b",16),
 ap_uint<128>("0x62f980507dde7ca5300ffc1f1bd2b01d",16),
 ap_uint<128>("0xce0cd1ae278cfc8f0fe089fb6b786a5f",16),
 ap_uint<128>("0x68bfe32172228fdb12504dcafe059176",16),
 ap_uint<128>("0x038f973e6dff547f8fc3bf1220d89a3c",16),
 ap_uint<128>("0x501abcaf0f2a57082c10cb455fe38230",16),
 ap_uint<128>("0x2edf7b872414c1cfa2ba49222ce8a4e4",16),
 ap_uint<128>("0x311ea5676bfe82de177141c514208c79",16),
 ap_uint<128>("0xf241b5b7ba8f930538a195c4e99c139e",16),
 ap_uint<128>("0x3d7678258773fc0eb827cb9795198651",16),
 ap_uint<128>("0xe2570f441ac994df1f407df3e4c59a04",16),
 ap_uint<128>("0x77e5c85998745afdcb23f1f65a232d5a",16),
 ap_uint<128>("0xe0d648b5e3e8f7837278d9c015546554",16),
 ap_uint<128>("0xab7291085c6fe7e6f5185164e72cea4e",16),
 ap_uint<128>("0xf96cf2152e215193c91fbea80567aefe",16),
 ap_uint<128>("0x9c3f5cf27571b997f678a1c2ada65e23",16),
 ap_uint<128>("0x7c218f959812e1728dc027b93c4217a7",16),
 ap_uint<128>("0x1c96a9337e281c42a3e18ba7e9717110",16),
 ap_uint<128>("0x630b8801044b643017b653c661028375",16),
 ap_uint<128>("0x0709dc89425e2ace6ddb7c403b3923a1",16),
 ap_uint<128>("0x2e9b202577d7e51dd6be241e92fc0d63",16),
 ap_uint<128>("0x8c9c527eb31a57a0a420540467c29929",16),
 ap_uint<128>("0xc492e55e787e04d972d77dd58c0b2fd6",16),
 ap_uint<128>("0x463fcad30f9e2c0a79390be0afc001b1",16),
 ap_uint<128>("0xfcbc662fcd988b4952c470f5b3fb944c",16),
 ap_uint<128>("0x8b51043a4462a7295032e40f689f29a4",16),
 ap_uint<128>("0x80761ddf5b7205d4dab3384a8a0dd562",16),
 ap_uint<128>("0xbf5015afd24b99d97dce05da0e17d80f",16),
 ap_uint<128>("0x0e7afb25227c81d4d0a4b42de424101e",16),
 ap_uint<128>("0x46dfb2791808b6e20b500fab29c33edd",16),
 ap_uint<128>("0x5b6e326f2dd4305c16fbc6a22644e1b8",16),
 ap_uint<128>("0x3e969d39f4533e9a2eedf9877c451eab",16),
 ap_uint<128>("0xbac56e05addf136bc4cf1f1eef6d19b8",16),
 ap_uint<128>("0x15d05608738f5e6c96f579b603f68218",16),
 ap_uint<128>("0x75b231efe4a651e0229e40dcfb941199",16),
 ap_uint<128>("0x61ddc4488ab678ffc4d0ad6539a16298",16),
 ap_uint<128>("0x870945a589bef73eb6de7ad88f91a90c",16),
 ap_uint<128>("0x4a014136d6bc1ef33f30f605a53c6388",16),
 ap_uint<128>("0xe988623157399534f1a4830eae0440b2",16),
 ap_uint<128>("0x238881b3cbae0e27d3261f01c4a1a81a",16),
 ap_uint<128>("0xf4dde0a3f1941028a10d48f6cc148ccd",16),
 ap_uint<128>("0x833f85659762bb2361a684e48bf20e3b",16),
 ap_uint<128>("0xb733f9fe512f7790664fbe744d0c2d97",16),
 ap_uint<128>("0x64f030e645c607a9bca2314c872cc585",16),
 ap_uint<128>("0x3fb5491853adacf86bc0c5a8dce2e0e2",16),
 ap_uint<128>("0x7f8dc819140e69473809018ae14b747d",16),
 ap_uint<128>("0x37edeb26d30c43e4312512a7ef9767c8",16),
 ap_uint<128>("0x7625075e3b13e51e9a5b6c8d8856b6c2",16),
 ap_uint<128>("0xd395f9a71fc8b8c43b882f00189ba774",16),
 ap_uint<128>("0xe31609ec809a7f40c639f48bfdbec820",16),
 ap_uint<128>("0xc0e8547e204411db347323ba88160a0a",16),
 ap_uint<128>("0xd3578fe6eda6a6bbea703095ac8f8c1e",16),
 ap_uint<128>("0x7811a2edd39ed4dd4093602fc029e470",16),
 ap_uint<128>("0xa3743602b619430ddfebfafd92ee8e6b",16),
 ap_uint<128>("0xe1a928cbffdfa16c89ee3950166a3174",16),
 ap_uint<128>("0xdbdde590caf70e7720cc329573be730a",16),
 ap_uint<128>("0x3515a81feed73d7b9f1c25153747d119",16),
 ap_uint<128>("0x562900480bb2e792460457590aae9565",16),
 ap_uint<128>("0xfae88ba4bf4f748ee4f7bcb1ae4ceb14",16),
 ap_uint<128>("0xf03a73a822d8e48abc845084c8786497",16),
 ap_uint<128>("0xa3d04f21e47c739fdeedd34733309c01",16),
 ap_uint<128>("0x6a3e30c9e6637b7d9a150796e19cdc13",16),
 ap_uint<128>("0x9c6d3b124f74afa5e94ae63efd6ff3a1",16),
 ap_uint<128>("0x450fb74bc98a18eaa964a10973c4056c",16),
 ap_uint<128>("0x779d80a4ef01f8527e3cda79f2261156",16),
 ap_uint<128>("0x10282600d6aee4c4b197bbc16af9b63e",16),
 ap_uint<128>("0x0cbc3726d3388967cf7e772e212aa4a4",16),
 ap_uint<128>("0xdee7742874dd11c27fbc15800bd01123",16),
 ap_uint<128>("0x533dfb9d0d864d4c3797a47f32997ece",16),
 ap_uint<128>("0x7555c0aa60f884fabe4851fa7af9afff",16),
 ap_uint<128>("0xd5e670e3075a8fb81aae7bddefb0df6e",16),
 ap_uint<128>("0x8c1170e8f9b3dc94a98ef5d6cec27b3b",16),
 ap_uint<128>("0x5060777b8a2a88103ab757328fbebebf",16),
 ap_uint<128>("0xe8180acf8710a1b4e49ff218961b0b83",16),
 ap_uint<128>("0xc7b76be43b9a1760ac265ab6bb07dfb9",16),
 ap_uint<128>("0x717da164cfc5f36eadfae238dc0f0ac8",16),
 ap_uint<128>("0x67bb8b94c2b4c57c2c80dcae24e3e8ee",16),
 ap_uint<128>("0x21b067ca35b1f780dc562a72ad87cf9c",16),
 ap_uint<128>("0x7eef2bdcad8c3ce4eba54a24ddbb8662",16),
 ap_uint<128>("0x1eb1dfe777f231bce2f496661153a546",16),
 ap_uint<128>("0xeb9a4f444e47646b7ea1e83907bd5632",16),
 ap_uint<128>("0x59be7573094d70704b4c6ee65d4d06e2",16),
 ap_uint<128>("0x5c875eed99a48541da8498bdf6225f17",16),
 ap_uint<128>("0xd258111720b781ceced22a4ee690e38b",16),
 ap_uint<128>("0x723d5322b476e37c9ca6bd5de7008212",16),
 ap_uint<128>("0xb9892c51bd715a8454940caa331728eb",16),
 ap_uint<128>("0x2a193306e8f40045d44f899927ddcd25",16),
 ap_uint<128>("0x3041d8bac7c6f6d7729f409897e0d331",16),
 ap_uint<128>("0x65482460fdabe4212db351ad462c6d89",16),
 ap_uint<128>("0x9cd2bf9eea26078ae84ae7d8c32f691b",16),
 ap_uint<128>("0x8844a832c0a5b535b8214901a02fa370",16),
 ap_uint<128>("0x704f65eda855424d5204c61ab8a8bad6",16),
 ap_uint<128>("0xc20ef126f901736c95c314f00194a8c4",16),
 ap_uint<128>("0x833891592e40bbf2cdfdcfba4d1ff480",16),
 ap_uint<128>("0x0afc2236ff0227fe1bdd51df95496a5c",16),
 ap_uint<128>("0x0b634d4889a2ef05fea2f93eb8d55e10",16),
 ap_uint<128>("0xb417fe1a0595b40a5b08ddda9448dd3e",16),
 ap_uint<128>("0x93ce60086202e28ddb9afdff2cc3e5c3",16),
 ap_uint<128>("0x5c210917e83671d16899e101890c13fb",16),
 ap_uint<128>("0x173e28da38797569ac79d96bb0b74ca5",16),
 ap_uint<128>("0xf58c39ad5ffda459a2ca0ef53fbcf74d",16),
 ap_uint<128>("0x01a5b22e2323e4769e0b155a42d0d4cd",16),
 ap_uint<128>("0x0e860837d76b8b2ccc733d7b6a933eb9",16),
 ap_uint<128>("0xb443678438b9394e35f91742426e0236",16),
 ap_uint<128>("0x98d9c99bb4bb41c7660c502a5071d52b",16),
 ap_uint<128>("0xd419afdf0726ed38825a48e8afd68278",16),
 ap_uint<128>("0x38260ccc2061191c64ce12a0844c62a0",16),
 ap_uint<128>("0x9cd3b208219149269873d83aa35de3f6",16),
 ap_uint<128>("0xa0755135059b5ce2149f281178b8f352",16),
 ap_uint<128>("0xfcbfe48a380d088bcc34a3cc6d23ee20",16),
 ap_uint<128>("0x53b1ec04725d5a729c3d0acfb16e3279",16),
 ap_uint<128>("0x9063bb04884fd5edbb0ec065c33c8996",16),
 ap_uint<128>("0xc0845e22326b3d20d6f50d1b3cd70c10",16),
 ap_uint<128>("0xa272770ed0b2ccb1ccc3d12d7b02ce62",16),
 ap_uint<128>("0xf0bba8ba0ee60c565b9df80f12006c13",16),
 ap_uint<128>("0x0171a75e16be083cb18a3fe2ee5f4838",16),
 ap_uint<128>("0x361b2b875e3ffc1ff0ec6774540245a9",16),
 ap_uint<128>("0x46544ceee5f9994531391aa963afeef8",16),
 ap_uint<128>("0x522128a3b21c891234bd729c325d1e5a",16),
 ap_uint<128>("0xaa2c01c83dcd6322e67bba04e7bad109",16),
 ap_uint<128>("0x7ca439d2d2ad279378ec5bf7c2e99bdb",16),
 ap_uint<128>("0x36f09064ad5407515bababe5d761b373",16),
 ap_uint<128>("0xde9ea6cb42c9e0758709ec653d16f24d",16),
 ap_uint<128>("0xf3100da32ca7e8e72687b8417cf47491",16),
 ap_uint<128>("0xe7491e5b9308f5b673dd3cb1df9bc8a6",16),
 ap_uint<128>("0x068ae20e7cdef4b7e8d52240e7dbaa0b",16),
 ap_uint<128>("0x2e85a041b80793b133a6e00f338b8047",16),
 ap_uint<128>("0x36a1a3c9570d2177b05d36cac687af2a",16),
 ap_uint<128>("0x2699f56c9b3ae38dc5dfe4e5ae6d64fc",16),
 ap_uint<128>("0x1239c98fcd05c8b048d64dad11219a2e",16),
 ap_uint<128>("0xd5245987bab0261efaf27013e238f611",16),
 ap_uint<128>("0x316b0d47e91b39a179baeb2a78af74b1",16),
 ap_uint<128>("0xecd57b22836365c0d5e61edc8701b648",16),
 ap_uint<128>("0x120e08b66efbdede9951748918bc584e",16),
 ap_uint<128>("0x80c15f411f700d0f79165f446ad84a03",16),
 ap_uint<128>("0x4bf35cb3e59a4fe0f6c2915015fe2902",16),
 ap_uint<128>("0x7cca932e16f48937524dcce331b66912",16),
 ap_uint<128>("0x09d09ecf44aae4e20e9243b61d914284",16),
 ap_uint<128>("0xac6cdb9ec03426fd4f24e8c434e4a29f",16),
 ap_uint<128>("0x01770314010c74cf757254a10c61379b",16),
 ap_uint<128>("0x312db7448fbfb22ec897288c4a24577c",16),
 ap_uint<128>("0x76a4147856c054f661e51379e866137c",16),
 ap_uint<128>("0x84623edbc50c4a702afc320bfa5b8c2e",16),
 ap_uint<128>("0x7ba44c088aef38dd0ae1cb34b960a7a5",16),
 ap_uint<128>("0xd81e7af49977f9bad41daeb43dfad369",16),
 ap_uint<128>("0xe790c6f857d150a0b4d3d028148642a1",16),
 ap_uint<128>("0xd001e326f8258cb7fad93f0e3ca7ad1b",16),
 ap_uint<128>("0x4e3389fec7a1196fb124581d45836aa3",16),
 ap_uint<128>("0x326dd932091842f8a7cfc4f82f93f0bc",16),
 ap_uint<128>("0x6ae50f42dd8810689643b07ca8f0bac7",16),
 ap_uint<128>("0x3a23dee089230b50990e73e3a43ad83f",16),
 ap_uint<128>("0xc5e6e5eae6f5618d868d84ebce3c0566",16),
 ap_uint<128>("0xab2e0127989859229e49d636b1681c58",16),
 ap_uint<128>("0x86aca08e1a23fc49233ff9b6972ef216",16),
 ap_uint<128>("0x2b7b9663b3e9d1ffb8964ba44da13e9e",16),
 ap_uint<128>("0xa9e8695cf4e7fad88680a09485626f2d",16),
 ap_uint<128>("0xf813cf628b8e4252ad46be5ca29cc684",16),
 ap_uint<128>("0x11154b12c7f68fbbc70c15ae8da1bc16",16),
 ap_uint<128>("0x78b6b246681658f3e74d41f8c9f24b93",16),
 ap_uint<128>("0xe6870a6a18e4c1b9cd2802e1c9f9301a",16),
 ap_uint<128>("0x73226e865d975c6665966bd7b2294395",16),
 ap_uint<128>("0xd9e6a43178a3ebccc137642b93284384",16),
 ap_uint<128>("0x8a553bcc2f9396a1b944b6981d586f29",16),
 ap_uint<128>("0x604e828a70a1ea1e1c5eb309e5aa293e",16),
 ap_uint<128>("0x260f082d54ad9dbdbc7f06827065e8dd",16),
 ap_uint<128>("0x97d680e873d78480b07afea79ec9138a",16),
 ap_uint<128>("0x14b9b86346b3a146fa015ab2eb2122ac",16),
 ap_uint<128>("0x015af8e1f97a842945ddf495479d3708",16),
 ap_uint<128>("0x275d720749e942aceffe372a337ac223",16),
 ap_uint<128>("0x3759a8b82bd5c0efaf7bc824ba4b747d",16),
 ap_uint<128>("0xea1d46736e17eaf86d880b9903871e94",16),
 ap_uint<128>("0xd13cc72ad7143a7184f85ade0367c067",16),
 ap_uint<128>("0x1f98d02314b0e966d2e32922492b022a",16),
 ap_uint<128>("0x6c13027d6d9a09bfda350c672f98932b",16),
 ap_uint<128>("0xa7314a45c9ce83c070b5c98684aa1865",16),
 ap_uint<128>("0x3b80c5c7b1c306eb0a77daedb9619d7a",16),
 ap_uint<128>("0x95cea04aed13ccbea35a1f4c09a7efa2",16),
 ap_uint<128>("0x0cc5898039b5f7bd4e772879ed7468c0",16),
 ap_uint<128>("0x90f64ce4bf5931155ef350c8b4b05200",16),
 ap_uint<128>("0xbc42719a3802fd78f096470f22d1fb51",16),
 ap_uint<128>("0x9d90ec755573cdc18a50859359a198da",16),
 ap_uint<128>("0x7002e05e103a1d6c15ef606441a1d3a9",16),
 ap_uint<128>("0x9972dad06a307f68044f983e7f656628",16),
 ap_uint<128>("0x97b9a298a0838f9c87e1598396769227",16),
 ap_uint<128>("0x08ff7357777c11175024b2c8260693ab",16),
 ap_uint<128>("0x2a3faf4a8728a03c00f4c6f79d118c2a",16),
 ap_uint<128>("0x98db9648ab3372e5b8b6f9bdf532d318",16),
 ap_uint<128>("0x7d6bde8df9bbd5e6e285e3cdb33c290f",16),
 ap_uint<128>("0xaa0a3d22916c1b6733d516157d7754a8",16),
 ap_uint<128>("0xf10a124c300e2b8f1bc5ae270030ece8",16),
 ap_uint<128>("0x6315bf72bb42d38d74bda240ceb077b1",16),
 ap_uint<128>("0xd0da03170882558ecdb7aebc0d79014c",16),
 ap_uint<128>("0x094843ac295fa46b381fec8bbec72de5",16),
 ap_uint<128>("0x475522a1a1a7107996c831f1130eba3f",16),
 ap_uint<128>("0xa9733829b742b4524e1ea0ca74da883b",16),
 ap_uint<128>("0x7e2dcf65605e4b145bba7d9d55883c5a",16),
 ap_uint<128>("0x5af729be03c20abb04771086af2fffaf",16),
 ap_uint<128>("0xab99de0eb5511059b8d1f0d0cb5ae35e",16),
 ap_uint<128>("0x722185190fc33f5301e2a7d871de6251",16),
 ap_uint<128>("0xc4e7b5bda48ee2b7541f90915933eb5f",16),
 ap_uint<128>("0x62634802ecf0fb4a488fbfbe210161bf",16),
 ap_uint<128>("0x371578ed0768c7c3c78f58978b32f2c3",16),
 ap_uint<128>("0x6fbb636084444a7ec3bc7f8ea29eea15",16),
 ap_uint<128>("0x330b1104551467db25da4129e02018d8",16),
 ap_uint<128>("0x1f6cc86374b8e0e090c9c5425191eb6a",16),
 ap_uint<128>("0xeb3cd9aa8b46c41f87d3e45a42a84780",16),
 ap_uint<128>("0xd28dbc57f7b1e38366e99b8be582129b",16),
 ap_uint<128>("0x6d574fba428d232392b0c8b168cfe57a",16),
 ap_uint<128>("0xc8fb069f5c27a06ec425ad3cdeb90e31",16),
 ap_uint<128>("0x5f42eae758ab044abdf3407fb271d3c7",16),
 ap_uint<128>("0x6f1bebd77315c40c1425754a24c52562",16),
 ap_uint<128>("0xb88cb4a16b617d17794149b42ec1ce25",16),
 ap_uint<128>("0xecadfb28c8f17bb6ece95c2091900936",16),
 ap_uint<128>("0xbf8ae5ea144b8b1f6ec5852273c03d4e",16),
 ap_uint<128>("0x763164895ead07f53047606ff9857add",16),
 ap_uint<128>("0x27e019651df6a1047131fb9235f77a39",16),
 ap_uint<128>("0x0c019e91007fe87750c6adca8d5c6658",16),
 ap_uint<128>("0xf0f14b2552643366142b087e754544ae",16),
 ap_uint<128>("0x29526349f1cd13e529ad6992bef92783",16),
 ap_uint<128>("0xc194762492d5b490087524e23d027d7a",16),
 ap_uint<128>("0x824059ca771cb9d13703bf6d2cebf402",16),
 ap_uint<128>("0xdd9173bc6cb106530a30782e62825456",16),
 ap_uint<128>("0x003fb759420f2c7d4b16d9fafe6af6a8",16),
 ap_uint<128>("0x40a6205032b453f77069d6c37a6ffa20",16),
 ap_uint<128>("0xb91edef5c982fbab5f241a4b90dd2356",16),
 ap_uint<128>("0x77ef3dd5e458e2846f3fe375df33a68a",16),
 ap_uint<128>("0xe246ed4240f1a2872dc66b3cf36fcc0a",16),
 ap_uint<128>("0x92ada2a0ece44c9a800d4ddb3638e4f9",16),
 ap_uint<128>("0x92b9483cd9813be8abab55d2635e20d4",16),
 ap_uint<128>("0xc7c2f2f961dd48da7ec9f31480ebbe79",16),
 ap_uint<128>("0xda679fb11ecc68f15064ca83edb6d4ab",16),
 ap_uint<128>("0x00873310f688d5fb411f912ea8c6db20",16),
 ap_uint<128>("0x822a1ad2a79b9f13a0628fe740405129",16),
 ap_uint<128>("0x092f2ef44e9fa100521202a017d1d30e",16),
 ap_uint<128>("0x1f66316f67c340ff2f53d6f8b3a471ce",16),
 ap_uint<128>("0x416bbdbb4dc33aeba22c1d682183cb2d",16),
 ap_uint<128>("0x34a18dbc3c61bd21d07209bba291710e",16),
 ap_uint<128>("0x8cada71f65335e9277509b602085162e",16),
 ap_uint<128>("0xc335680f26878962d59f8db26caf7b53",16),
 ap_uint<128>("0xd3029106f447e331ee2fbe6096e79e5f",16),
 ap_uint<128>("0x107ee91e6630206c0b32d714432bd4f0",16),
 ap_uint<128>("0x7aa88ab49d9c57854a02c6062a5cc173",16),
 ap_uint<128>("0xca44dbee591eff9f890095d9b5239540",16),
 ap_uint<128>("0xa195db3f7b8e00ea2102fd1e5ca9343f",16),
 ap_uint<128>("0x9d2d03dd38aac2aab227fb30301b6563",16),
 ap_uint<128>("0xcb336c20aff3e5dae80d4ff745a2c255",16),
 ap_uint<128>("0x3930915cef005fcc6d612595c68bcb66",16),
 ap_uint<128>("0xdd1ccb5b4c0af0e40020928848fc17fa",16),
 ap_uint<128>("0xb1d865646fc7ef60a165f76962acaf54",16),
 ap_uint<128>("0x8989ea12a59b093f51c2fddf1a2a324b",16),
 ap_uint<128>("0x364800e8e0863ca0d88c9a2459bf1f9f",16),
 ap_uint<128>("0x9b5d8ed1c476c9752d391ec880b37f09",16),
 ap_uint<128>("0x7ac92ba2470b54de8fe61703a1309204",16),
 ap_uint<128>("0x723ad8846a601234ba1304aff29e0667",16),
 ap_uint<128>("0x6f47303942717e06814895d102f9e159",16),
 ap_uint<128>("0xb3e16ac3a8d491f52a45e6a71abcebd2",16),
 ap_uint<128>("0x2adf714579d2723ecee09838829dd21e",16),
 ap_uint<128>("0x5cc327a6f7bc6ec9b00d725d27571a2b",16),
 ap_uint<128>("0x5320d4c9ebdab2c367fcce9cee5b9201",16),
 ap_uint<128>("0x9cbdb2865b36d07b3cc1ef611adae3cb",16),
 ap_uint<128>("0xbda195e989e784670057d4c0d64142eb",16),
 ap_uint<128>("0x0e60342345ad5d360a55c0d2f274acec",16),
 ap_uint<128>("0x545f1a161d8338ec55a59f294763f690",16),
 ap_uint<128>("0xa24809f1ca9b7a2e58783546c6667e7a",16),
 ap_uint<128>("0x123be52dc7d3db8714ce41e53ff1ff05",16),
 ap_uint<128>("0x90bec572333fe20befd163950e46bd6b",16),
 ap_uint<128>("0xea90e7003046bafcde0b249ea03b6571",16),
 ap_uint<128>("0x80c98cd8d8a713eeb72c45ad0177c30a",16),
 ap_uint<128>("0x4603e7fab78e26ff08a2a74c93f6218d",16),
 ap_uint<128>("0x83b8a4166e78d798e31f2390b262c468",16),
 ap_uint<128>("0xa81a6cffa69c5cea620fd04ae4cf334a",16),
 ap_uint<128>("0xac28212c3df047856f10f0a21f5f04bb",16),
 ap_uint<128>("0xe30467a1676f7e83dbad28e4cf3a59a0",16),
 ap_uint<128>("0x3ffb3c29d6ce102f4b02dfd096fe12d8",16),
 ap_uint<128>("0xcdf179322f56b5a38c424b46495e4a8e",16),
 ap_uint<128>("0x555b8ac554a103d95a1026637cd9cedc",16),
 ap_uint<128>("0x314ca1c4ba0f57055ca59c79ac235a81",16),
 ap_uint<128>("0x7d1e9bfb429dcd731ab2fae33ef4c5b2",16),
 ap_uint<128>("0x2c5ad66ce6cddd94ec77ee55bc79f863",16),
 ap_uint<128>("0x6be2e621ce5cc9cfb48fe35856d70613",16),
 ap_uint<128>("0x5cdde25131221ef2ec9839d4f56ce52b",16),
 ap_uint<128>("0x431729e17eef3654d115c3e792c60b47",16),
 ap_uint<128>("0x9e354ea7524345b0fb6996bf93107671",16),
 ap_uint<128>("0xbd22aec8c8d09c4cee3e17f5f35b5669",16),
 ap_uint<128>("0x3104b795d6306000684fd0f5d7a9ed50",16),
 ap_uint<128>("0x64a6641cd6140c772d2e93fce4fc7608",16),
 ap_uint<128>("0xde7fddef0ee384906cbacdf37496fe52",16),
 ap_uint<128>("0x6de7ab2c116df46af13bf7261c28353f",16),
 ap_uint<128>("0x906aa7caaf05e91ce373840f4be061a4",16),
 ap_uint<128>("0x5af619153d35bb6d9bfef1fe9b2d3e5a",16),
 ap_uint<128>("0x8660296f0544778935d95f463865ff63",16),
 ap_uint<128>("0xe4ff7de7af078e24b654038e3f88fd68",16),
 ap_uint<128>("0xa97f75ed42a8f4c0205f28a1ac72c7e4",16),
 ap_uint<128>("0xaa9e05d9d46dabf7ef83a5887a4d3385",16),
 ap_uint<128>("0x89dbc814910185cc801d978b5eecaec2",16),
 ap_uint<128>("0xb73a90edeb6678e8b90a8c2275482f06",16),
 ap_uint<128>("0xe10afd6b5ced13955793a57694d9f216",16),
 ap_uint<128>("0xbeb8a25f96d3a5b72bde1b8f58e126eb",16),
 ap_uint<128>("0xad19a2a76fd4135251ed6a349b878be0",16),
 ap_uint<128>("0x9d631b06349c7562797779a268f44443",16),
 ap_uint<128>("0xec04493cbf0761b25cd3d970bf82136a",16),
 ap_uint<128>("0x0051813f50b9be1aec0a3b598ac28d8c",16),
 ap_uint<128>("0x287fc7f68e5a1965df92a02714863f29",16),
 ap_uint<128>("0xb23624f3eaa54b347a625421aef1e1f4",16),
 ap_uint<128>("0x754b7ac8e99044721084d305abb88e59",16),
 ap_uint<128>("0x998c5d562bca8c5b6f2123efd90dfaf7",16),
 ap_uint<128>("0x61bccc7c48114672a8b0aa0ff0416a91",16),
 ap_uint<128>("0x19f862cc2ca62d345e83b14a9f58c60f",16),
 ap_uint<128>("0xa627f5b0b97ed10a4329c6f261a605ab",16),
 ap_uint<128>("0xbf7fc695b2cf8abc650d8df101962c9b",16),
 ap_uint<128>("0x591b4dd367133e7e1bb646e6146b9cf8",16),
 ap_uint<128>("0x4ae0e156bd37894a29af6c8c93370978",16),
 ap_uint<128>("0x45d9fdeb301514f4971d12fd7fbfd2cc",16),
 ap_uint<128>("0xf3f15db1e2f8073fde5c6b2ba86cda0d",16),
 ap_uint<128>("0x67e218cb6067219b0f3619bb0eb87540",16),
 ap_uint<128>("0x6506089eae583f50f5daa499b5a99870",16),
 ap_uint<128>("0xa6f51945791db042eed4c46fe63a59fb",16),
 ap_uint<128>("0x3438f3c41733b5081bdb85b9f037da1c",16),
 ap_uint<128>("0x0be7b96bec4e3150d9ab9f3aa73bdf74",16),
 ap_uint<128>("0x66b4543d0ca5ae64780296942bce5d35",16),
 ap_uint<128>("0xdba1995c38035134fa8a3da385ab95c4",16),
 ap_uint<128>("0x89a5ef5ce3e3bed8513e23dad7ae0a0f",16),
 ap_uint<128>("0x377277e6496bf5ab4989215f46524423",16),
 ap_uint<128>("0xa0daadf28af1d0d05d0ae4ce61e3e32c",16),
 ap_uint<128>("0x3a3e15a4e26a9bfe0fad023209375f4f",16),
 ap_uint<128>("0x199b362f6049feb7cb5c95b9a69f9961",16),
 ap_uint<128>("0x30e45a4eb3d207960b94d446f6a165ee",16),
 ap_uint<128>("0x488f488fabb56616e89ebb3e448c3270",16),
 ap_uint<128>("0xc4dffcd932f16a9f487376c3206b45b1",16),
 ap_uint<128>("0x55da19e62bffc28ecd5ee689d858bfdc",16),
 ap_uint<128>("0x6263774351d4c236519c77739685514b",16),
 ap_uint<128>("0xc74a8ba320a11e6f71e4d16838f48076",16),
 ap_uint<128>("0x6e898717ca82443d5b7c30032542b397",16),
 ap_uint<128>("0xb5a4d039eed15b69aa0c63816bfdaa73",16),
 ap_uint<128>("0x7d1d49ebe0dc2ce16ee3907f185b9687",16),
 ap_uint<128>("0x0dfdf091e6e56bfe60c3cc2cb3a5dcf8",16),
 ap_uint<128>("0xd84971b097567a868013e94ef84b6de4",16),
 ap_uint<128>("0x5a9a11b9da04d05c4c68273ff87b3d59",16),
 ap_uint<128>("0x0ad4c316f44f6d4c2d92def20b86709d",16),
 ap_uint<128>("0x963a1bbf4b40ba57e59b71e2335eaed8",16),
 ap_uint<128>("0xf5085235f908c15d2b4c1a0cbd88106a",16),
 ap_uint<128>("0xdb5242c2bb172f95505560403d31f6c0",16),
 ap_uint<128>("0xb3ca3b96987d7a522a5aa8ab93fca444",16),
 ap_uint<128>("0x9cbb11897d987283de1a859950563d00",16),
 ap_uint<128>("0xe07ac34bc8b1660c4ab53b379ab9f305",16),
 ap_uint<128>("0x0de2f9d387762779c18dc6ee642240b9",16),
 ap_uint<128>("0xb1a062f1b8c103a3370fc134fc995a3c",16),
 ap_uint<128>("0x0c55b2d1c424b53183221d36f5143f2b",16),
 ap_uint<128>("0x810ca24af1183cb1f1df9a0d83eb375c",16),
 ap_uint<128>("0x2fe2cb8a3db901be18b227c585e81c7a",16),
 ap_uint<128>("0x51aa9af662cb98e18b09ce74189c5161",16),
 ap_uint<128>("0xca82b00c914b2b0a655f9a6ac10bd6bd",16),
 ap_uint<128>("0x072f14e7ae9f5daa2d54f9685972d27d",16),
 ap_uint<128>("0x5b768df5e6f21138f0fd30fad91506a3",16),
 ap_uint<128>("0x7a9963407d1159a3772ed7f8fcfaabff",16),
 ap_uint<128>("0xe9add1f42bace8dcab5f49b8465ce525",16),
 ap_uint<128>("0x2c9fc67aa5642316ba5030eb25b2b6ec",16),
 ap_uint<128>("0xb8d926577235bd5c10d58f857a2dd215",16),
 ap_uint<128>("0xe1c12c36c99b7fab4a6dff2c7a728135",16),
 ap_uint<128>("0x0e35ecb559b32baa9c8cb6b4c2ab7e43",16),
 ap_uint<128>("0x52d6f6eb30d5ae745736a322c1fa6041",16),
 ap_uint<128>("0x45077f4813f12bc764347acddeb5cfa6",16),
 ap_uint<128>("0xca8cb84ce921ed0ad0c77ad1326ee8ab",16),
 ap_uint<128>("0x3d3d68dfe822b18a0ea15ff41e3c9f17",16),
 ap_uint<128>("0x5f72b02f0eec1710b5c6082daa317b5f",16),
 ap_uint<128>("0xa19badea8486c306f91937e8ff9be850",16),
 ap_uint<128>("0xee0d89101b20afe63cc5fc4b2fd756cc",16),
 ap_uint<128>("0x707f57cbe2fa4687b6e63861b6bc1a23",16),
 ap_uint<128>("0xef2324fc7eed1b4d5886a8f9ad473a85",16),
 ap_uint<128>("0xda7525dabc8311100d5fe35f406692f8",16),
 ap_uint<128>("0xad11ff9ef6e9bfa9f2f2d8f9bb8b4565",16),
 ap_uint<128>("0x0e6ac4b093aad5999d98a7f4992ef556",16),
 ap_uint<128>("0x61b629264180f4b607f51f5cb0c903ce",16),
 ap_uint<128>("0x1b87a7e27a3a982257f56e5231b912fb",16),
 ap_uint<128>("0xb3c694a9d8489331aa9bf540402e5067",16),
 ap_uint<128>("0x0626e8e881e29689060221a8c384d0bd",16),
 ap_uint<128>("0x36035b957269e1a84d6a08bb73e95dd2",16),
 ap_uint<128>("0x24bf290211786c9dfbee56618a3f05cf",16),
 ap_uint<128>("0x4f4641bfdc579fc696cb1e37f71c15b5",16),
 ap_uint<128>("0x3ea34664bcd8cebee22cbef4d81c8a7b",16),
 ap_uint<128>("0xd9b9f602f240270fb0ce39679a73810f",16),
 ap_uint<128>("0x0a78b1ffc139b3516e8d27d4dad3365c",16),
 ap_uint<128>("0x0f70f46b4e2496835c333695e4b96606",16),
 ap_uint<128>("0x767c1b5f8f8a6000894515ca2db224fe",16),
 ap_uint<128>("0x2a705a051deda3110b7f5fc301efb8bb",16),
 ap_uint<128>("0xc703a5d7dd2e4165724ce125d474a4ac",16),
 ap_uint<128>("0xfd471e42794e6c81566ca9fdf76691a0",16),
 ap_uint<128>("0x4a4c139ed091afe3f1d7ff1246f2d9f4",16),
 ap_uint<128>("0x7be4336756bec4545862dd0260a14e43",16),
 ap_uint<128>("0x1e14f31e918f08387ef27f5e0ab95e92",16),
 ap_uint<128>("0x6a9f5a36291c38ab12ada7e87bd307d5",16),
 ap_uint<128>("0x867e856fc555915989e4066f537a23da",16),
 ap_uint<128>("0xa82f01b7500e4ea72bbf9ef96312f665",16),
 ap_uint<128>("0xf782b3e241435fd3a5c3bfe877060728",16),
 ap_uint<128>("0x49b296a0e723d5e42612fa4065a95a3a",16),
 ap_uint<128>("0xf422d7997115554c0739af95584a82c0",16),
 ap_uint<128>("0x9b8604050cfa5b5847eb1b69f494b894",16),
 ap_uint<128>("0x3e7ca2bcbebb2605847cd7ad41217672",16),
 ap_uint<128>("0xc1f491f0b8eb9cd6a9386d3960d6720d",16),
 ap_uint<128>("0x06cc47144f8074a173081f3805e5cb02",16),
 ap_uint<128>("0xe83d6a857ebbc45478a8e0e1cf53a4de",16),
 ap_uint<128>("0x99c465eea029b3b8addcc7fd57c975e7",16),
 ap_uint<128>("0x74ab5175b6b86c5ee789d77faf474b02",16),
 ap_uint<128>("0x795deea0e9d3cc9ac417b509e0807860",16),
 ap_uint<128>("0xdd3ddfa79c9745f6286666642bea7165",16),
 ap_uint<128>("0x1a769d3f3172b6305f7aabdc035a5126",16),
 ap_uint<128>("0x12682dee1894a01c71a6b3c26b24a595",16),
 ap_uint<128>("0xbccf8e328c21df211ac76c02b849841b",16),
 ap_uint<128>("0x46a63435d3f76045ccfb33c96b94f940",16),
 ap_uint<128>("0x419129b3a72102495c2c03d1aa049676",16),
 ap_uint<128>("0x7d211b9069ffe561b80edcda80803c3e",16),
 ap_uint<128>("0xf8c9f7cd9bba4c168c53e1cb95eb6ad9",16),
 ap_uint<128>("0x7f12a774750fe89076fe771bb4a341dc",16),
 ap_uint<128>("0xc97593296cdd9c563c26eaefb0b50396",16),
 ap_uint<128>("0x2c7bf27ddd9b90f93759d0ba4eba45bb",16),
 ap_uint<128>("0x158674305208bfed94791e615e7369d7",16),
 ap_uint<128>("0xe8b2c23c34daeadab7182e58b730047a",16),
 ap_uint<128>("0x46be712f1df8bcad71caf68454aabf61",16),
 ap_uint<128>("0x8fcb880345ec560d4d2104c34de6e9b4",16),
 ap_uint<128>("0x781447af89c48e89ba09bef957aa4b6c",16),
 ap_uint<128>("0x1ba3697e00a787593896f0e749b433f7",16),
 ap_uint<128>("0x4f7386811c6c7ea2f81c0580a1627822",16),
 ap_uint<128>("0xc49c1ff05228e356f30c8b3e1486289f",16),
 ap_uint<128>("0x5170022146ded1ba2cbb0522397728b0",16),
 ap_uint<128>("0x32b6e8fa1ab53d4103866aa6925a9bf7",16),
 ap_uint<128>("0x30dd115ba2d0487921835894732f9343",16),
 ap_uint<128>("0x7b3cffc4dd80c15b5448b8290a6218b1",16),
 ap_uint<128>("0x1d7f3a2f36a3d1a09fc87764555c3c74",16),
 ap_uint<128>("0x9c0f356d7eeb320dc03b8160c0a0c75b",16),
 ap_uint<128>("0xaf01f0e4a0af0e45c47718497bdfeb1c",16),
 ap_uint<128>("0xd9abd7ac5ab14ed2feccd245740fd6ce",16),
 ap_uint<128>("0x5c6dc763b2ae57994b5e1d80d70c1816",16),
 ap_uint<128>("0xac3cc949810e8d0439001b50c50c782d",16),
 ap_uint<128>("0xb30c650f6e9791fadb291773e05e5c9a",16),
 ap_uint<128>("0x7784f375d014240a029d00d4dfd0bb29",16),
 ap_uint<128>("0x7622e34f4c869d9f9f9579309a5694fd",16),
 ap_uint<128>("0x374640da8f5d59fa574f5e5fd4638dc9",16),
 ap_uint<128>("0xced60a56f368041b538f9a58b8790367",16),
 ap_uint<128>("0x6ee7bf44478c8138babf586226f36fb3",16),
 ap_uint<128>("0xf64cef2535696e2e11b0879d4cc16fc5",16),
 ap_uint<128>("0x18933a7c575a4ae46e9447bc0db4b449",16),
 ap_uint<128>("0x58cea7c720233dde728bfcf86a6350b4",16),
 ap_uint<128>("0x722c28da6f202bdb21dbf15215bd6b56",16),
 ap_uint<128>("0x1387d12d726b9e516a386dceb5ccbeb4",16),
 ap_uint<128>("0xd2c219e8c9d84a1d15f78ba00b42b167",16),
 ap_uint<128>("0x2efe0d6a1a84b010803c47b0e8b1d815",16),
 ap_uint<128>("0x78e60199a33aa90e1bd86cc3b87f27aa",16),
 ap_uint<128>("0x6bdc952ba1440b8735e1d2798e9ea116",16),
 ap_uint<128>("0xbbab1b9ec0aa503f66e7b997a2527e94",16),
 ap_uint<128>("0x95ab10d8c7c2d631812d76c91c2948d2",16),
 ap_uint<128>("0xa8dad03f4a936182c8386bd5cf874232",16),
 ap_uint<128>("0x8c66ec94d710c702bfb551f1930633ce",16),
 ap_uint<128>("0x14884c978fa99201fb3820c26038db93",16),
 ap_uint<128>("0x77de6620fc77928aee2c8d33ea7f4e7f",16),
 ap_uint<128>("0xd4e42d1de7441e937f8d17e657e5bcf3",16),
 ap_uint<128>("0xcf3865444400923302ab211eaff64b98",16),
 ap_uint<128>("0xd97e8278454b705fe27188177fb09c45",16),
 ap_uint<128>("0x718336bb7184ef0f77c04b2bdb9625ac",16),
 ap_uint<128>("0xe931b50a9c9d80c20b901cca3c2571db",16),
 ap_uint<128>("0x2e9d31807a75eb94eb1a4d58bb230108",16),
 ap_uint<128>("0x8e731858967dbbc17e1bfd70c7f1d72e",16),
 ap_uint<128>("0x72697c812ebc65ab8af22f46488882b9",16),
 ap_uint<128>("0x9ad42292af8efcac872f02f244ca8fde",16),
 ap_uint<128>("0x5bef88226c4969692c8da146b1369ee1",16),
 ap_uint<128>("0x2b2254ced97920c88f99185fa19d84dc",16),
 ap_uint<128>("0x7d17787ccc91fb654b9553e1fa149735",16),
 ap_uint<128>("0x1ee657d77802fc856fff9a4681e24ed5",16),
 ap_uint<128>("0x4cf9e3cb80aedfcc25d415ef06db70f8",16),
 ap_uint<128>("0xcb483e2d0cfe535368907a78e7181002",16),
 ap_uint<128>("0x88166c51a0db6e164599336b9c1db10f",16),
 ap_uint<128>("0x508ba9e9c707cc78aec0d2b1c11d3012",16),
 ap_uint<128>("0x6660310e463dcd5e0dbd32022807cce0",16),
 ap_uint<128>("0x230b87a4a58e8bc85a6d708b1c1824ab",16),
 ap_uint<128>("0x288f7973bdcc12a62295f54b24848838",16),
 ap_uint<128>("0x1664f24c111e316b7f34f83ffbec90d8",16),
 ap_uint<128>("0xf79a8796c96dd5472825e1465728ea31",16),
 ap_uint<128>("0x1bfeb95df0ae5b75e20ed3d050602981",16),
 ap_uint<128>("0x15de71b0bf6b765de0aa5c54a0e32972",16),
 ap_uint<128>("0x324768d220c29ac6dd8d023dbf620319",16),
 ap_uint<128>("0xb08a908fcd914b8a93a9f70bb01e86d8",16),
 ap_uint<128>("0x2e1946c7503b97e9e620b88d4e6829b8",16),
 ap_uint<128>("0xfdfd7558481f850f7d542d34b81cb41b",16),
 ap_uint<128>("0xc42ffe662e324669a5f0921ebb4fb4ed",16),
 ap_uint<128>("0x45619b90237118ac22fecae4d8679761",16),
 ap_uint<128>("0x87e3e97c8c918293412f1cda229707f5",16),
 ap_uint<128>("0xed3a3b9c7ad4117b27a4ba56ac02dc9e",16),
 ap_uint<128>("0xfce80a2843acd18fef62238968d5c3fd",16),
 ap_uint<128>("0x025bb41f6d5dc415fc807ef5a9f784aa",16),
 ap_uint<128>("0x96a09066ea7e8d5d1b30848326b059ea",16),
 ap_uint<128>("0xf8a0b512d8ced0e17584e9666a875685",16),
 ap_uint<128>("0x973f1095c366a365617587fe0bb16eb0",16),
 ap_uint<128>("0xf74503edd447f826cbbbfbad907ab4e6",16),
 ap_uint<128>("0x9a2d15303bde47e43bd4f7e8e1e3460c",16),
 ap_uint<128>("0x126cc0cd35637de50b9bcc33dbd34b7c",16),
 ap_uint<128>("0x04afe4bfb80d942958235b739f9d3321",16),
 ap_uint<128>("0x9d3bf208b58fb1357d4b9a669590135d",16),
 ap_uint<128>("0x0420a4a4a03de68e2af3af2aa6717060",16),
 ap_uint<128>("0x11bb801f2f5f9729c2eee218f71a3dac",16),
 ap_uint<128>("0x69e9d448cc4a95dd23b7aed8a78209d0",16),
 ap_uint<128>("0xe991a8453eb4db5a7a5b1eec57276598",16),
 ap_uint<128>("0x35e8e1976170b1ed9634ea45c24af20a",16),
 ap_uint<128>("0x7e2a9a58f70f447d95b95acead2e3a50",16),
 ap_uint<128>("0x559ed4c2abe83b3f8fa7e0c537409b62",16),
 ap_uint<128>("0x93509936cd41db39addb9164649981cf",16),
 ap_uint<128>("0x1bd6955f479291f99f60d358c64cb038",16),
 ap_uint<128>("0x05969f7e0014df299aec3b3f97ece473",16),
 ap_uint<128>("0x122151176ef4b3fa5cf90a2955c78996",16),
 ap_uint<128>("0xf8ef6eb8df18c67bf17e7af128996f27",16),
 ap_uint<128>("0xa6c1f815ec9fe533529fc06e5b096e7f",16),
 ap_uint<128>("0xa3261093b6b1a831af82f7850b020087",16),
 ap_uint<128>("0x1df3317722afed5743358e746170b4cf",16),
 ap_uint<128>("0x718e2df8f6a46e161c89ccc9206b3afd",16),
 ap_uint<128>("0x965dd6482da954c228aa041a090201cb",16),
 ap_uint<128>("0x7c63575dba83e6542e05e91a25fe01ec",16),
 ap_uint<128>("0x15778032a8119c7aa116a499bf4b5928",16),
 ap_uint<128>("0xec1b10109bac2f055a5cfbf84ed28c08",16),
 ap_uint<128>("0xae899fbc30e6c2feb249cb5f595050a9",16),
 ap_uint<128>("0x554f7f34133105de47764528df4854d5",16),
 ap_uint<128>("0x6a74388833553772cb8bf62ff7782568",16),
 ap_uint<128>("0xeea9273fe5590c632cbb4f5ca56ad6d9",16),
 ap_uint<128>("0x6513f24257379b302e7b39eb92d2cb54",16),
 ap_uint<128>("0x88446558f3c956b6be08b3d1af327190",16),
 ap_uint<128>("0x7435ff90b22fe5ee2fbbc55856bcaa97",16),
 ap_uint<128>("0xaa429e61c2dc82555be53e66adf3015a",16),
 ap_uint<128>("0xd4136962bb11b59e5d422b949f981246",16),
 ap_uint<128>("0x926e15106274061bd21fd607c4d1c3e6",16),
 ap_uint<128>("0xdf611a87605b555d503f9eaaf07a317c",16),
 ap_uint<128>("0x9e76f95e384b5425287d209394d8098c",16),
 ap_uint<128>("0x1b83f8caa9d9aaf659c6f6d1918e8ea1",16),
 ap_uint<128>("0xb448643a836da1ee154e6722dc373ab2",16),
 ap_uint<128>("0x3b056f214e34b1722043b8eba1baa26c",16),
 ap_uint<128>("0x493c6884e41bfc836a72e248493ee61a",16),
 ap_uint<128>("0xc0ac8a88d2695ecfbb4d911984e50d49",16),
 ap_uint<128>("0x173a0bb9d6d393304d811c1c851ef8ee",16),
 ap_uint<128>("0x263d8a1053050a9e38a71e228ed87012",16),
 ap_uint<128>("0x22d1ca2b675508e101d98366c5ed1c4d",16),
 ap_uint<128>("0x13cc9cd238866c0658157db93586add1",16),
 ap_uint<128>("0x7368f41f1aaf6174b3798e8ce90f92eb",16),
 ap_uint<128>("0xebde8dab636cdc71d4852e941ccd8081",16),
 ap_uint<128>("0xd2de28859a34f2490a34e7751a809cba",16),
 ap_uint<128>("0xf501d561eed6a6749aa52bfd3bfd3d6b",16),
 ap_uint<128>("0x6445e4644885f5440f442218fd3bb334",16),
 ap_uint<128>("0xd4839b57a52b2a38ef1bb0b32ef34f8e",16),
 ap_uint<128>("0x9c22498babd3379aa175712594bf84f1",16),
 ap_uint<128>("0x8c36904e9e524d1ac1062317206bd423",16),
 ap_uint<128>("0x28a36938ef01591344b701d05ab26c8a",16),
 ap_uint<128>("0xcd5aebc7d9206c9efce0efb1795fa5a0",16),
 ap_uint<128>("0x2602b13cb12886906949295de021bbd6",16),
 ap_uint<128>("0x9e48f4aa99246df1e9ec5e870e6bdbb6",16),
 ap_uint<128>("0xa593449295991c5a67b6a02b65fa39ee",16),
 ap_uint<128>("0x067be26ce385f3dc0b4c68bea9c3148e",16),
 ap_uint<128>("0xe4698322794534cbc36c0d45379ac7ab",16),
 ap_uint<128>("0x8432d2a13d561b07b8bbb61fcf60e03d",16),
 ap_uint<128>("0xbac52f1d6c0eef12361647acdf9b74fd",16),
 ap_uint<128>("0x775df814e5e60f827b5c089d9f8fbedc",16),
 ap_uint<128>("0xb8873e28c67dab2b2545ada8694f9d6f",16),
 ap_uint<128>("0xcad7337b50321a186a822def0275065e",16),
 ap_uint<128>("0x6e16a70bf3ce9dbac079726c00980a81",16),
 ap_uint<128>("0x3db4db14dc37c17b2265b70d2bb33327",16),
 ap_uint<128>("0x81d58b09e5f88e8f4fcb26dfe3910ad5",16),
 ap_uint<128>("0x7d9491d2915066afea64a8a6809c1b7d",16),
 ap_uint<128>("0x6a965af53e389a3722ba75d88a3bb53f",16),
 ap_uint<128>("0x46c826e9922075fa3114842b16e48144",16),
 ap_uint<128>("0x34c285acf9ea35d717b4870d55b41819",16),
 ap_uint<128>("0x803e495e450cf97dc1a2b6693a506d41",16),
 ap_uint<128>("0x3c67703dfae1c8861be480212e1dbe38",16),
 ap_uint<128>("0x6f5ec0769936066a41edf039b20f3ef4",16),
 ap_uint<128>("0x762c8232244d055de9ba2ba3f86c8e5b",16),
 ap_uint<128>("0x67b13dd7f07ee2a5236a216be0ae3c78",16),
 ap_uint<128>("0xdbb1e99458f1eca812ea4f28180ac199",16),
 ap_uint<128>("0xca88811e9b9d44288edb635ddfa7a2a9",16),
 ap_uint<128>("0x760284f5b9a2c74930caf44652480520",16),
 ap_uint<128>("0x8780dc54d834adcc18130355a16fd2f4",16),
 ap_uint<128>("0x60f931f224d3a19e06fdd535279a1db5",16),
 ap_uint<128>("0xb8b4b79fe6b3aa400badd38e83d53ad4",16),
 ap_uint<128>("0x7ede2e3ea3a48e1358a9d60c339c0e4a",16),
 ap_uint<128>("0xd9c3fcdc1963860563141a15aebee71e",16),
 ap_uint<128>("0x8f8883f8e15e303bf7d13f92fd2d9f81",16),
 ap_uint<128>("0x3478abdd18e27d82fdb5874c00a61958",16),
 ap_uint<128>("0x01d9e83388201a49ce3776e1d5648564",16),
 ap_uint<128>("0x7da93853f304c2a2325ae9d3f272d647",16),
 ap_uint<128>("0xe53bd91d58e6674fc27dfa7aae3d39a7",16),
 ap_uint<128>("0xbb8288cee358e0d3310184c271db549c",16),
 ap_uint<128>("0x794d20ef61fb220161e103f38735325a",16),
 ap_uint<128>("0xf1421f6ed91a749da13b44d82b696c99",16),
 ap_uint<128>("0xca3bdb2db3fbeeab1a91f1cd3948a3b5",16),
 ap_uint<128>("0x0d78698f19fbc59b7113880e0452ef35",16),
 ap_uint<128>("0x7c0139910142f24028787e6c0ad25bb5",16),
 ap_uint<128>("0xb9ebdebe6214196769bfeb2a3afd03ce",16),
 ap_uint<128>("0x5a954354e0efb3347194a99e97ec0263",16),
 ap_uint<128>("0xe017eea766cd60513f43a9db8108ccea",16),
 ap_uint<128>("0x411a727edb07db7224506ca736fc70ce",16),
 ap_uint<128>("0x986355d9b33210048cebd4c5d3b9f724",16),
 ap_uint<128>("0x2104f6ccab3d534c42c3b1f713402848",16),
 ap_uint<128>("0xe1a19f7f3c43ea0fbd1b87eb87600aab",16),
 ap_uint<128>("0x45010a15077e10057c05b738c98089a2",16),
 ap_uint<128>("0x832c219fdf7800ec3f437c3f2bc5b7b8",16),
 ap_uint<128>("0x71f66f462422a1155fbc8d8269c78c85",16),
 ap_uint<128>("0xabdea8ee76101535b8c693ccc7d8edfd",16),
 ap_uint<128>("0x20ba32a072e90a504516417382f1c06e",16),
 ap_uint<128>("0x0ca938e76db61720d04d53e8adea0a7d",16),
 ap_uint<128>("0x6567d12b8a67a2178278b50ae014b002",16),
 ap_uint<128>("0xfa866f5641fb5fc9cefa7f6262eb44d0",16),
 ap_uint<128>("0x1f640147e1bd03d4ec82f53e99ef36a4",16),
 ap_uint<128>("0x0cbb286fa6d51b99720306055a90f0ce",16),
 ap_uint<128>("0x6ef2e10ab33c73fa370c3acb90d65830",16),
 ap_uint<128>("0x2786bde81467d0ea7f03f326119c69d7",16),
 ap_uint<128>("0xe6a66f29647bbd13187cac8a91548b5b",16),
 ap_uint<128>("0x9a5f63c8f2f5e87e3be685a285ee26fb",16),
 ap_uint<128>("0xb90a52bb4784595e29c0dc9427857b14",16),
 ap_uint<128>("0x4bfab91f4a50017ed93c4147a2efb256",16),
 ap_uint<128>("0x210d11fa3858947cfd2dd9385e1947c1",16),
 ap_uint<128>("0xcb575bd2d4a1e1ae6f7d649a80771ed1",16),
 ap_uint<128>("0x216b7bc8fd7a9b8ecfc802e997f1f61e",16),
 ap_uint<128>("0xc5cbf5a5566e1af140dab002522cc5b7",16),
 ap_uint<128>("0x351009b97c411cdf43b52bdcbce181b5",16),
 ap_uint<128>("0xab7bd52518744c5d97e99fd0be675df5",16),
 ap_uint<128>("0x19966e722f9d8a73a2641c6e272946b8",16),
 ap_uint<128>("0x834d095472361f62a299de45e1eea4c1",16),
 ap_uint<128>("0xf5cf74e2dcdbdc65ccdb4dfa8aa6df64",16),
 ap_uint<128>("0xcb4b600cd38b9f9ff9b2b784e93c8f0f",16),
 ap_uint<128>("0x1a609af53568d2829ed2442f82672c25",16),
 ap_uint<128>("0xb58b1609c1da0fd56b134b2e52d567ed",16),
 ap_uint<128>("0xd1c3757959156a70a18d975d5d864a60",16),
 ap_uint<128>("0xed086b9557dcbe1a49d7a0d11083705f",16),
 ap_uint<128>("0x403b282394c9e3a895b863b5f63101f2",16),
 ap_uint<128>("0xb85eb95eb21ce0f5b5247a6ed3dc9018",16),
 ap_uint<128>("0x6f03fa23a112464a290c41aeb9b50d59",16),
 ap_uint<128>("0x889e1d77bc931b25a3d7116fd90bef04",16),
 ap_uint<128>("0x213f9cba20e916cc6e8d0429b4d9251e",16),
 ap_uint<128>("0xd6ffd261559756493fe11792cbb8a1e1",16),
 ap_uint<128>("0xd993e2e1d65f0e2bc5c2cdd35c63c334",16),
 ap_uint<128>("0xa68283089a445b972c7d6e4b541fa320",16),
 ap_uint<128>("0x9a0c50b3849475382eacfa3a43e9c151",16),
 ap_uint<128>("0x38ddda8771c39ac2e2dcf35395598027",16),
 ap_uint<128>("0x7a563729624840a8b9afc5e749d3a79e",16),
 ap_uint<128>("0x531ca61954da45c5bca194310766bd51",16),
 ap_uint<128>("0x3bfcafb1e5ef98d4822c625f171226f3",16),
 ap_uint<128>("0x184645ebc017d3c05110d648dd73e917",16),
 ap_uint<128>("0x49c8b3613de23ed6e97df267592632c6",16),
 ap_uint<128>("0x1be43a64b89ed52c0d1c34f6ddd3308a",16),
 ap_uint<128>("0x967d211c45003aae7a34c99ea6a827bf",16),
 ap_uint<128>("0xb624aa358f29922e9af131222199a242",16),
 ap_uint<128>("0x3dec1c535675307d9d723e0e5052f30b",16),
 ap_uint<128>("0xdae5b1b99eb2b3d473671cf71ac29a30",16),
 ap_uint<128>("0xdd65ff0c5fdfa26b469746e4574543c3",16),
 ap_uint<128>("0xd4a82839349fdf040f1fb589dad5eadd",16),
 ap_uint<128>("0x719c5f34bbc42e5b860caeae313de166",16),
 ap_uint<128>("0x0e20d18c4e47bc49ace32c6b74ae4c8d",16),
 ap_uint<128>("0x7b27fa5fbf306319ca2d0db9f51b1841",16),
 ap_uint<128>("0xb40965a8ce25f0d76896e1130aa0926c",16),
 ap_uint<128>("0xd2dc4a719e267fd0536939d60462e593",16),
 ap_uint<128>("0x1900815ac2d3c90d469bf3727d9a8248",16),
 ap_uint<128>("0x2f9f1bf8561dd81856bece345790614b",16),
 ap_uint<128>("0x3c3f8bfd5751da11b3bb4729a20fe422",16),
 ap_uint<128>("0xed82b096f5532fd97c75cf8f529ee09f",16),
 ap_uint<128>("0x1812aff9be82283469d862a19d271584",16),
 ap_uint<128>("0xe4e5454deadcb3f66bba380323d33bd9",16),
 ap_uint<128>("0x65810e6a16954105265d73e6bf211768",16),
 ap_uint<128>("0xdaddd311c8e4ca8bfafccf4918f5db22",16),
 ap_uint<128>("0x986f2e905787a128fc66e584ca9faf4b",16),
 ap_uint<128>("0x9094ca7d0f8817ec0d6d5651f9fdd96b",16),
 ap_uint<128>("0xbd6139789638cb66e34c10f061a4592e",16),
 ap_uint<128>("0x1040471545d45a25a3bf51ebf3eb9c51",16),
 ap_uint<128>("0x7425a977abd3dd8f7f23d9c5c0f29faf",16),
 ap_uint<128>("0x791ebdad225754e3377784257214c6a4",16),
 ap_uint<128>("0x1a8423cf1b31abf4ab8d63c14c1f2945",16),
 ap_uint<128>("0x3ad868cc07adcd1d57421c29b38a0c3d",16),
 ap_uint<128>("0x29bcf34e92be394de2e33b2b32e67244",16),
 ap_uint<128>("0x74576a5317dc9bebef30f892851d6435",16),
 ap_uint<128>("0x1afb71eed3b87ec5c806b158571722ea",16),
 ap_uint<128>("0x400a89826f3a175ac83788e6a0ee7237",16),
 ap_uint<128>("0x976fe87fd931df399c35c1578b15e60e",16),
 ap_uint<128>("0xfdb6db0cabafc7a64dcc9f437b856188",16),
 ap_uint<128>("0xb24fe828d72fb4dc1ef8d7c1c55ffac1",16),
 ap_uint<128>("0x1742e473bc01e34614fa3129f114e5d9",16),
 ap_uint<128>("0x22b82fb4509cc3aedb300e10dca7bbc9",16),
 ap_uint<128>("0xf7f45ca57948a7b64643d05fc6adfde1",16),
 ap_uint<128>("0xa716a33cb3e2d41faf26dcb16529c279",16),
 ap_uint<128>("0x878b0de5e4996e6187a572fd52867ca7",16),
 ap_uint<128>("0x54262c0d100f9c0ad6d9573ca5433736",16),
 ap_uint<128>("0x9b6e4abae6fc3b55421e4059a6cf5818",16),
 ap_uint<128>("0x0dcd97abad118b435ef99adb5e60cb75",16),
 ap_uint<128>("0xf26ae2f6b362151977fef6f3f09e2b48",16),
 ap_uint<128>("0xcb79587c261526f29a3f7f21b3f1ed78",16),
 ap_uint<128>("0x1f49649a9bfc991c4a524f21bcdea8f6",16),
 ap_uint<128>("0x7b3f77b7ebf6b9f17f5347b3d9b957ce",16),
 ap_uint<128>("0xee4ae4a9a6debbeec6a1a340c112ad10",16),
 ap_uint<128>("0xff97f3f369be957906051636d8f50469",16),
 ap_uint<128>("0xda346d6e1e6e328276e385abfd1d20c8",16),
 ap_uint<128>("0x87697e93995dcee67f28df63a317a6a3",16),
 ap_uint<128>("0xa9f66b3fa0a8ac396ad1f1e1d2342e06",16),
 ap_uint<128>("0x76e755426561ff9f31453d30082bcd2a",16),
 ap_uint<128>("0xd405ccdd52b0089a620e24770be1a60a",16),
 ap_uint<128>("0x31a0fd1ceba849ff9896964ffdfd41f4",16),
 ap_uint<128>("0xc42804e027c6e9beb8178b3367eae41e",16),
 ap_uint<128>("0x7a8dfa99a1d8b79f501343f2a103561b",16),
 ap_uint<128>("0xe2b3836e6666d6ed8443eb09fb1c6dc7",16),
 ap_uint<128>("0xa2034cbcb99f875682ee063f97c29f37",16),
 ap_uint<128>("0x5d083214599daf5831ed8aae4e0fa496",16),
 ap_uint<128>("0xe33744e76c37ed5003555e15d32dd0ac",16),
 ap_uint<128>("0x732fd6913b8eded1636653e2477d7a78",16),
 ap_uint<128>("0x0b9c3abb99c0222ae25f2942e24e0329",16),
 ap_uint<128>("0xf3f92d805d6b478a92cecd376a85170f",16),
 ap_uint<128>("0xfbafdd5c0456d8da75c3ddfc19ec6ea7",16),
 ap_uint<128>("0x0739d9d1a67a46016778d7bae9f91bd2",16),
 ap_uint<128>("0x391426d70d0d54800bc005a101c5c73b",16),
 ap_uint<128>("0x14f4f7b0ce9abbdbfe4e6c377b61ac6a",16),
 ap_uint<128>("0x7519c1d0baa06ff9ac7dbcafe35488b6",16),
 ap_uint<128>("0x10ef63f62f334feea048bdf378ef473a",16),
 ap_uint<128>("0xc2d23af93c95270e81e81f26949dee1f",16),
 ap_uint<128>("0xa23fe4e663cda28db36a60c16c7943a1",16),
 ap_uint<128>("0x6f936ee7623f916a3f39277fb1a8da5e",16),
 ap_uint<128>("0x6ff104bf4af139f78cf41957ddab1b0a",16),
 ap_uint<128>("0xa51c09968a60238d9738173d2be4b8a1",16),
 ap_uint<128>("0x5b9ee57b64a4d5ee2fe305a57b47dff0",16),
 ap_uint<128>("0x3d894cf9a4d0897b09c2f9aa4bb67549",16),
 ap_uint<128>("0xf8eddd14c3fb4d69b264bdd0023a2d4b",16),
 ap_uint<128>("0x507455d69533a9fb5c6d720b598a149d",16),
 ap_uint<128>("0x2bc79cc1bbe3d498b8b08876d6579976",16),
 ap_uint<128>("0x04bf90d2293f78e1ae21bd9f00f09465",16),
 ap_uint<128>("0xda8c4ae9095f910924b9fb82d09c13df",16),
 ap_uint<128>("0x0aee83a8813e8603af29157ea616647e",16),
 ap_uint<128>("0x81592af8fbbfcbb237d276980d467c9e",16),
 ap_uint<128>("0xf42ec75c4f549bf4ed3697a56546b3bb",16),
 ap_uint<128>("0xd5475f3aafb00d87cc4fcc93beb971fc",16),
 ap_uint<128>("0x556ceb11e452381b50081e3f19cc5bd9",16),
 ap_uint<128>("0x2fd4c279196852821371de035a36feef",16),
 ap_uint<128>("0xa348b0e579aa26daa4310fa9ac94d1af",16),
 ap_uint<128>("0xfaa96e86ad00d381302e1d8f435af4e1",16),
 ap_uint<128>("0x3205f8ffd158392368e2a3a345e775f7",16),
 ap_uint<128>("0xe6cfdf5fe2ea7122d126f17ab0d09596",16),
 ap_uint<128>("0x85a32d0f0144cbbe0e7a249287309aaa",16),
 ap_uint<128>("0xfbb73c037e16b28b49f92c3abe8d041d",16),
 ap_uint<128>("0xd9901aa2b20e81dd3ea6a0ba64e9a821",16),
 ap_uint<128>("0x6cd25fe5e78fdb43daff03763366fe51",16),
 ap_uint<128>("0x445859f561ade88939c716e10f0b34a9",16),
 ap_uint<128>("0xbb1f7acce6b85ad0b280d27dd730766e",16),
 ap_uint<128>("0x218d189eae2960eaa4a0fc7e0a14bdc1",16),
 ap_uint<128>("0xca064891b9f6fc1fdd7fe062994a181f",16),
 ap_uint<128>("0x8f7bf76d8614c5c362035770f93302b5",16),
 ap_uint<128>("0xe9ff9c6e1f95ecbe28daa0c491228a67",16),
 ap_uint<128>("0x021496f9abf5a1db67f60b65f8b37973",16),
 ap_uint<128>("0xc500b41982f7085ecfc10796341b28ff",16),
 ap_uint<128>("0x860c81c87f6a1d6cacd790bffe441a02",16),
 ap_uint<128>("0x39c8819ec0154c4115ac75bcff246c18",16),
 ap_uint<128>("0xf7267bcef8dd124e286a2cc16877e6dd",16),
 ap_uint<128>("0xd506c5df89dfb8765cb0997b341a24a2",16),
 ap_uint<128>("0x7d26f3c9eecffecf55a4ed9c3a529590",16),
 ap_uint<128>("0xe4df91e78d4f82fd9ce28197cb7f1a6a",16),
 ap_uint<128>("0x5692bd43677579ad1ba16f3080083196",16),
 ap_uint<128>("0x114fdc0f00bf12710eb4ce4e9f168ea0",16),
 ap_uint<128>("0x402b0f46c6734f548a60caefd2d2f8bb",16),
 ap_uint<128>("0x97e61b0b7929eea4b2f64a4de4436711",16),
 ap_uint<128>("0x14b7023126c0c8d6e4ba7f45ea3915af",16),
 ap_uint<128>("0x39822b6819f2934bc481d5fc1188520b",16),
 ap_uint<128>("0x69875dc61a68530604954d58241b6279",16),
 ap_uint<128>("0x2a9a06a0fa415a41cdf5f2de7c4fc0fa",16),
 ap_uint<128>("0x6412fb35f387936eee90f72d62ac43d4",16),
 ap_uint<128>("0x07c02587ad46dafe9b2338aa1925651c",16),
 ap_uint<128>("0xfceed5cf1b5c5034f2f8fb8b3fdfeeed",16),
 ap_uint<128>("0x534d51ff70f0898ef2fafbddd538f9fe",16),
 ap_uint<128>("0xfdbca0bba7fa8752547bbf7f70fe8c58",16),
 ap_uint<128>("0x1b8351d83bb302f4987fe3ba81fb8391",16),
 ap_uint<128>("0x2d509c96e8217925c3d90e67043df3ce",16),
 ap_uint<128>("0x1968526de315a2496d26194efce608a1",16),
 ap_uint<128>("0xd302fedbc28f3a81b4033cdebcd82c15",16),
 ap_uint<128>("0xf7e26d38e23bc5a017ffb78da0eec383",16),
 ap_uint<128>("0x4c98bd4e4a00252d345e7b547667b78d",16),
 ap_uint<128>("0xbed18cabe0d632aa99ac707a78a05a35",16),
 ap_uint<128>("0x7565fb0042145b6068437c8d669daa7f",16),
 ap_uint<128>("0x771b3018bb0c077025e583f7680f17a9",16),
 ap_uint<128>("0xd89773f78155059603a654f1c71fba25",16),
 ap_uint<128>("0xae4847c105121aba71a085844fc905c3",16),
 ap_uint<128>("0x8e035c7f4f9e844a096257fae96b88cb",16),
 ap_uint<128>("0x7993fbc1784367cd4228ba16372d3b31",16),
 ap_uint<128>("0x6ce4499ca945b36fbf02c5d7308be19b",16),
 ap_uint<128>("0x7c1f68c40846ee0ce0db0666e7448e7c",16),
 ap_uint<128>("0x62e8d2615c0bff77850f3a228a3fd6a9",16),
 ap_uint<128>("0xe743d5ea3744365a700c596761236d03",16),
 ap_uint<128>("0xf410b3ee3eba47e917149d09f3fb5074",16),
 ap_uint<128>("0xc455882b2a86b51a752a847a4cb13dd7",16),
 ap_uint<128>("0xe6a814834b7d57da27d2858d681dae3e",16),
 ap_uint<128>("0x3f61af5ede02d35ca503873df5838861",16),
 ap_uint<128>("0x199eb5e76f92ca4a7631f33df5243548",16),
 ap_uint<128>("0x1e56ae41cde5af98de6b0d6ab5e87a32",16),
 ap_uint<128>("0x141bcb706402b3d71aef13ea21b2e188",16),
 ap_uint<128>("0x82e96cf98ce13dd82f8ec615e8139ccc",16),
 ap_uint<128>("0x04bafa4c0822842b48690637a4e83848",16),
 ap_uint<128>("0x1782e20c8e99f32f48ec86a73b9a9c18",16),
 ap_uint<128>("0x044d92c57f3a4d346dfd94c8f2ccc8b3",16),
 ap_uint<128>("0xbde0f5743152ec9da48a82b42e7f97cc",16),
 ap_uint<128>("0x77c66a110030fe28e21069bcf8639aeb",16),
 ap_uint<128>("0x458bf5ccaf4a68e58b6614885fa56df4",16),
 ap_uint<128>("0x23e980f68f1672cd2b7845befe78d256",16),
 ap_uint<128>("0x6d3d86e3296e889bb23133f7f274687a",16),
 ap_uint<128>("0xb49e50d4163f540ead9fb6efaf11a0f3",16),
 ap_uint<128>("0xc32199cca40ae5b6b97ca3241ae609a7",16),
 ap_uint<128>("0x45eda6bcd912a298dd4f7d9354c956e8",16),
 ap_uint<128>("0xdfc157913327376df0ac0afc62bf8355",16),
 ap_uint<128>("0xb5b5dcf064e0540d341ebf95e826ba17",16),
 ap_uint<128>("0xe16a0a855a00bfa2e006bb19b3b81000",16),
 ap_uint<128>("0xeb372f02b235a302ccef7446a48d41d3",16),
 ap_uint<128>("0x6c2f1eaecace2d61b376dbdb9399bef9",16),
 ap_uint<128>("0xffb65b19aa5900351225cd155249fe62",16),
 ap_uint<128>("0xf4bfd5927662bcecece5723340fb1c89",16),
 ap_uint<128>("0x5312b19addd8f0eb3f8b852d730d3e70",16),
 ap_uint<128>("0x09c3a515492f28620dc069dc288122cb",16),
 ap_uint<128>("0x9fd4d91428be89c15233e15c714b9e39",16),
 ap_uint<128>("0x380a3de074876fbec9a925a732e8edc7",16),
 ap_uint<128>("0xba6d275f01bbf13bf3bed2473d1c25df",16),
 ap_uint<128>("0x3c6589f1ea5043e720c769dbeaea6d50",16),
 ap_uint<128>("0x881cb76d6c7500d77a3d2c315754fd3f",16),
 ap_uint<128>("0xdd21e7c7a5abefd7b46c56021b2e7d5e",16),
 ap_uint<128>("0x42794623633d6ae9c5c4742045aba23a",16),
 ap_uint<128>("0x016df7ff3364e9abcbc84f63655d76b3",16),
 ap_uint<128>("0xe2071d496b1ea9e4f081434ad42cc14c",16),
 ap_uint<128>("0x116cdc7db230d0ae000ba2dac03cd758",16),
 ap_uint<128>("0x891144de5e026665359e27ae685eae7e",16),
 ap_uint<128>("0xb4082133faab0977ee33e8a325b22b2a",16),
 ap_uint<128>("0xd5fde8db32552c88dbb6f7cfa3805061",16),
 ap_uint<128>("0xbd3a2d39ecf47ffe448b1cc5d55f27b1",16),
 ap_uint<128>("0xe2ed34d6a28c94e18ae8b8c4b0f89579",16),
 ap_uint<128>("0xae6d225d2dc9d0843a7b8179090de92f",16),
 ap_uint<128>("0x0cac603c03169f68916a0faafe0f20ec",16),
 ap_uint<128>("0x0fc4c6060fed293df8efe5340123a597",16),
 ap_uint<128>("0x8aa25ea1f15560e85d6890b8cfcdc2dc",16),
 ap_uint<128>("0x209d76d8155cbc68f9615b71977249e2",16),
 ap_uint<128>("0x2f00d44716d05bd1741108e5c977ae00",16),
 ap_uint<128>("0x6dce6887745d0eb441823a42757ebffe",16),
 ap_uint<128>("0x49eade32315ecd10ca428f7f9cfeb762",16),
 ap_uint<128>("0xd1752aa80718b50605ed75ee62363cc9",16),
 ap_uint<128>("0xc2b7f83837313198cf93c7a59a5b479d",16),
 ap_uint<128>("0x01e727a820ed4a515f0c9ae62a806ffb",16),
 ap_uint<128>("0x535d4d1b3f06cb70ffdd463f0a49090c",16),
 ap_uint<128>("0x441f6aa19af3c2864f3726b347609a44",16),
 ap_uint<128>("0x2e6157126df478cbbe29d9c3fc707b1c",16),
 ap_uint<128>("0xf2f5fd726729b5fb1d995eaf2d7dc0d4",16),
 ap_uint<128>("0xf99fd481cf55578a166d440956137321",16),
 ap_uint<128>("0x0e2ea7f0b1cd42dc7ad846d79b29b22c",16),
 ap_uint<128>("0xeac6b9f48f95e0a15e5125d309fcc900",16),
 ap_uint<128>("0x7d859c7f37e7dd70793054147751a584",16),
 ap_uint<128>("0x6b6c5ff8ffd75c6af0e638195d40be66",16),
 ap_uint<128>("0x733be2dd80005b04c70fefbfe4620c92",16),
 ap_uint<128>("0x94d49d862526c65a1420ab3f808429a8",16),
 ap_uint<128>("0x6782d460c1a1b1dd11f1c5b27479796d",16),
 ap_uint<128>("0xdfaa66a20b12c929491409a74bda2a3d",16),
 ap_uint<128>("0xa99be3fc66fde9ba0f5646d929b49ae9",16),
 ap_uint<128>("0x0ffa366fe472fdf6202c791c59b284f9",16),
 ap_uint<128>("0xf4734f7ce9207d029ca77b376b1f0f1e",16),
 ap_uint<128>("0x59279d90892a5d281a1454506149901c",16),
 ap_uint<128>("0xb61bfc794e1734491f6198dbfa7e91aa",16),
 ap_uint<128>("0xbe05a8ec836059fa94946baf2c9130e1",16),
 ap_uint<128>("0x4c9f2feec8e1008fe1419dc4b8f85852",16),
 ap_uint<128>("0x22e0f0ecf36d720c2e129410de7d5796",16),
 ap_uint<128>("0xab7a784130669053d5b103981850edc9",16),
 ap_uint<128>("0x1e25eb275f8ca3559e9bfb3495ce2924",16),
 ap_uint<128>("0xb2de63a71a446cba94fac823af957ec6",16),
 ap_uint<128>("0x1f80f27016dab948566703b7b71307e3",16),
 ap_uint<128>("0x19fd6020560262fd8cdbadfc1301aed0",16),
 ap_uint<128>("0x9c21e6bc6f5a2c650ffbc0b6aa42e80d",16),
 ap_uint<128>("0x5483be914cf71ff7e550c2369bab8104",16),
 ap_uint<128>("0x96b55e0f88593b54a5036a357ea9290e",16),
 ap_uint<128>("0x4d4cf7e97cd2e36ae54e9f0f936bfc53",16),
 ap_uint<128>("0x284290b46c11e7fba28db5ccc85959ad",16),
 ap_uint<128>("0x6f698f0c7439d7af3c9ed71f8fdad7d3",16),
 ap_uint<128>("0xe5c6dd55d1ea8a78972de91936dcd535",16),
 ap_uint<128>("0x07151a7986c81190db46345d7e3ec0aa",16),
 ap_uint<128>("0x4abb2d89eb78d4aef42cc9e29a62191e",16),
 ap_uint<128>("0xda4ab52f7e001b651eb9295813eaef10",16),
 ap_uint<128>("0xe7437c14a614c407cf81b342be1bc595",16),
 ap_uint<128>("0xda7f8a2c03458c3f0412529c41d0bdff",16),
 ap_uint<128>("0xd8295d6bebe2035513f0bf68bb0095f4",16),
 ap_uint<128>("0x76a59b7e07e7a21e7de1e3499ac61a71",16),
 ap_uint<128>("0x35d014dfd874b578f959da90906479aa",16),
 ap_uint<128>("0x922349db26dcb184bbd974c985fe1164",16),
 ap_uint<128>("0x2dd1a16e80a6886fb18bc1d66f1ce75f",16),
 ap_uint<128>("0x94a4454ac7524407b26dd2cdab893654",16),
 ap_uint<128>("0x17fe1eebbfa1586a05810db6dbcd2ade",16),
 ap_uint<128>("0x020a95928edb1566c707c8a742531c92",16),
 ap_uint<128>("0x9eea9ab60216f9642b1a4ba4fe6bacd6",16),
 ap_uint<128>("0xee58a7255f6a0c2f66d51c7c436526f3",16),
 ap_uint<128>("0xe2408bb968169304e1104aac73b3f075",16),
 ap_uint<128>("0xa7a37aaebb52dd376e439891597e8c15",16),
 ap_uint<128>("0x22d2bdf1c553c828d316a6643b873ffa",16),
 ap_uint<128>("0xf818b786c3df23113d2d17de57311a1a",16),
 ap_uint<128>("0x9a808c9b566b8c929760af7dd896b1f1",16),
 ap_uint<128>("0xc708c676eb620dedb1fe6d2c256bf13d",16),
 ap_uint<128>("0x274379d84eb79ea31f68c0f2b0d21f17",16),
 ap_uint<128>("0x7e00fbba6a8247b4946d8591ef22e552",16),
 ap_uint<128>("0x7c4a3e62c202d9e26b33cda6e57298a6",16),
 ap_uint<128>("0x6634edaf2ddbcfe71906f78b0dad261a",16),
 ap_uint<128>("0xc2a62a37e137f96708b67faea9747500",16),
 ap_uint<128>("0x383a90b77a1b490228b5bcf6eb788c3a",16),
 ap_uint<128>("0xbbf28495339328732e5f479f02e9c6c6",16),
 ap_uint<128>("0x2c77b26f7337e0b4e5601b04f6ffb76b",16),
 ap_uint<128>("0xb9c7969201c52483b131a41047b73ef3",16),
 ap_uint<128>("0x4c46e0a5eaa150c4c31908dfc4cce6a5",16),
 ap_uint<128>("0xf798e16447a00ecaee8e8ef60578b4c8",16),
 ap_uint<128>("0xf6c1187a5bd65db53f364cec13e578c2",16),
 ap_uint<128>("0x76b9befc2bfbafe930f1911f1a9c1b66",16),
 ap_uint<128>("0xa44925dbdb340a9cf667898c1842762c",16),
 ap_uint<128>("0xfac13d358d38ea4a883768dc961d1b94",16),
 ap_uint<128>("0xde7b30b5909d66318f751f8dccc17dd8",16),
 ap_uint<128>("0x48f8afa49dbc224c8e47941521e68735",16),
 ap_uint<128>("0xecc384eae70086a49fe8a2c3467e4295",16),
 ap_uint<128>("0xbb21c2878fb368402536c89689bce563",16),
 ap_uint<128>("0xb6b5db1749e1ddaf579b93fe5a42d88e",16),
 ap_uint<128>("0xd445e73f6ca0c35caf8b4d30e13d3704",16),
 ap_uint<128>("0x435a8c03e878d47d07ce07ef513a623d",16),
 ap_uint<128>("0x85e398dbe8e47f4bfa5d7ec75e52276f",16),
 ap_uint<128>("0x91f036c9315ad441a5ece7b518b89b68",16),
 ap_uint<128>("0x2afe2e85b7e3a6c370b317280fee94af",16),
 ap_uint<128>("0xa4d1a848bf322c52873ea91628f971ec",16),
 ap_uint<128>("0x71eeb8f510f054eac15c42c388f00f12",16),
 ap_uint<128>("0xa956c90decb1f1a4e697ea253d41d4d7",16),
 ap_uint<128>("0xa44f3eb21c743317c9763cfa382340b2",16),
 ap_uint<128>("0x6e02066f0233b8725a4a15ffa2db6793",16),
 ap_uint<128>("0x7eb207c775dd6ed0086980819517be48",16),
 ap_uint<128>("0x6acc8f9954370ba76baceb3227dd8bc2",16),
 ap_uint<128>("0xc320e1403689cd1111a1981ade13ba7c",16),
 ap_uint<128>("0x36f9078c4e4ea3b6198dbe5a6cd81c2e",16),
 ap_uint<128>("0x5c840f5ff8649626f6b4d03cb71dca5c",16),
 ap_uint<128>("0x6dde356c720c21887023801e649ed661",16),
 ap_uint<128>("0x627f7ff680b4b58262cce41a9f8a51fc",16),
 ap_uint<128>("0x416bbb0bc04b59e20c01ba0361fb99ae",16),
 ap_uint<128>("0x737a0a02f57fce68c3815406305086fc",16),
 ap_uint<128>("0x1523151b4f57ea7863a9627da325f631",16),
 ap_uint<128>("0x058a7f7291afa2fed5b1e8977786502e",16),
 ap_uint<128>("0xec990cab54074dbc3f4604b0f627fa00",16),
 ap_uint<128>("0xbe573e2fb3082352b0733bc8117afb98",16),
 ap_uint<128>("0xcf0c38d96baafa27febd2b3efca34738",16),
 ap_uint<128>("0xf92c017d26729d1757b01c955735140b",16),
 ap_uint<128>("0xa5fb96ad1df92bff11618c235d956cc2",16),
 ap_uint<128>("0x8fcf68c07b0660bd78734b917170443d",16),
 ap_uint<128>("0x43f2e78d9e3acbf8a4272e59a190bb9f",16),
 ap_uint<128>("0x8076d8b04a64a1ea679c3360fb753fc6",16),
 ap_uint<128>("0xae5d31a48cd929c38d00c7a65214a5a9",16),
 ap_uint<128>("0xd80e6ae352576429254cd82b5ee780b0",16),
 ap_uint<128>("0xc51d560d71d2b7b1b4b0ed23de38f6ac",16),
 ap_uint<128>("0x539baaa03891fcc2c37526a1c21fb2f2",16),
 ap_uint<128>("0x7c2538e3e6fd860be5a948a1a140a918",16),
 ap_uint<128>("0xfa96370c5b2a1b326baf4499634d6d8c",16),
 ap_uint<128>("0x8db47b623bb31824ce78f60e2ee73d49",16),
 ap_uint<128>("0xebea1a560d74eb0cc4a1fd5e25e47dac",16),
 ap_uint<128>("0xfe40157b145abd1224cd2ca5ac30f729",16),
 ap_uint<128>("0x43352bd7f24a075033b4bd430e1437b0",16),
 ap_uint<128>("0x1b68314948081fe5c8c88394b75d979b",16),
 ap_uint<128>("0x2a4b3b14b6cfac7fdb32cf07b2b45f88",16),
 ap_uint<128>("0x84397154a1eb2e39e46fdf11044feae7",16),
 ap_uint<128>("0xce9e1d513984441a754828501ddb97b5",16),
 ap_uint<128>("0x8d231695a0fb62c3e56c520ae1644a05",16),
 ap_uint<128>("0x4005c91465d45669e3e1f87c80fdd095",16),
 ap_uint<128>("0xf4b15d48e511e1e4a0b297729abafbcd",16),
 ap_uint<128>("0x13796559f55bff6d7448c4218f64893c",16),
 ap_uint<128>("0x99a4434e2e514d24d1d6e30ef1ec9cfc",16),
 ap_uint<128>("0xae665f5880341cdb7127e34e2b26f158",16),
 ap_uint<128>("0xf813280df314ce3a500b03bab08035a2",16),
 ap_uint<128>("0xf772ff5ad7dbc3566bc31f2e49c00ad6",16),
 ap_uint<128>("0x66126449df18c779a1358ff4050702d1",16),
 ap_uint<128>("0x3ec8d526bbcb71ba3c8faefee2789d28",16),
 ap_uint<128>("0xa9f9fbdcfce706259007032810f1b5ee",16),
 ap_uint<128>("0x65be66ae9969ec60c840b25af0661c70",16),
 ap_uint<128>("0x214976949505cb024297997fd40e730a",16),
 ap_uint<128>("0x6e535ae74e2eabdef35a143720852bc5",16),
 ap_uint<128>("0xe635e235ce31bdcd0ed9df8ff126385f",16),
 ap_uint<128>("0x9fa3e191ed3615553a219d9cd9796c32",16),
 ap_uint<128>("0x9118679cfa47ea11fcdff183921de7c3",16),
 ap_uint<128>("0x98bbcea0df414f335f6be83fc9c46316",16),
 ap_uint<128>("0x06f04ee2b344c2cbea6b3611704e556b",16),
 ap_uint<128>("0x1adad37c496f4be71aca24ac8f6baede",16),
 ap_uint<128>("0xbab5ad21325e5f3f4f5862f4aca3322e",16),
 ap_uint<128>("0xac8ac2e10bc8a8744b2c48d7cf0f6269",16),
 ap_uint<128>("0xce7eeb1f1b49d937ef66b217d2eef738",16),
 ap_uint<128>("0xa4e37cc3547643136773fa8b8e5fb3a0",16),
 ap_uint<128>("0xbb7df3548ee46182348c4a955103a194",16),
 ap_uint<128>("0x5d98fbc0d5078937947bb6eb479c2028",16),
 ap_uint<128>("0x66d0305983ef03b6e4d1170600cc1d0c",16),
 ap_uint<128>("0x4e892dc20f89d89f4e3a594e37d02655",16),
 ap_uint<128>("0x814d9e4d47a75132cfb74458163432fc",16),
 ap_uint<128>("0x993c839227026b6cda847381ff852d26",16),
 ap_uint<128>("0x59cba1a2148303b49c905b8858a4e78b",16),
 ap_uint<128>("0x705934c99661a1204b01fc3f1540429f",16),
 ap_uint<128>("0x28af96d476c1b7b40fab95082c4e4502",16),
 ap_uint<128>("0x39ca3f6f0f73b45810626330d072f2fb",16),
 ap_uint<128>("0xe2473c07e7837420c108274d1a6b3052",16),
 ap_uint<128>("0x5622fbfa1322baea91e07285e48dbff5",16),
 ap_uint<128>("0x99fa7636f78813731497047922ee9d61",16),
 ap_uint<128>("0xc07aa1134dfc3f82c908dad0d9cb4bc1",16),
 ap_uint<128>("0xd76f882384daab8a18040c11626366c0",16),
 ap_uint<128>("0x3cb77eb1b0b4e8e9b0f29caf1fec3b49",16),
 ap_uint<128>("0x1178d773863f2bbe0d9c55ba9c951c90",16),
 ap_uint<128>("0x245063416a4e0ab5d779526e3c5ea674",16),
 ap_uint<128>("0xccd067dfe2b2d71cf8a7abe78b71fc8a",16),
 ap_uint<128>("0x182ad1047ccbfa09c862a3caed059aae",16),
 ap_uint<128>("0xbba45d167e9bd3e21463330e4f922df5",16),
 ap_uint<128>("0xe6b1075868c43b359d09d9c24b22edc3",16),
 ap_uint<128>("0x9968e78006a6608c31729fbac265d3d1",16),
 ap_uint<128>("0xa2c8f1c07a3fd7de684771698e4a6f69",16),
 ap_uint<128>("0xf99fafd97151a898e22472eed16cf96e",16),
 ap_uint<128>("0xc0a81ce8a3352df53758940eec33537f",16),
 ap_uint<128>("0xcff8ba326b78f835daf31a6b762a3e6b",16),
 ap_uint<128>("0x62f980507dde7ca5300ffc1f1bd2b01d",16),
 ap_uint<128>("0xce0cd1ae278cfc8f0fe089fb6b786a5f",16),
 ap_uint<128>("0x68bfe32172228fdb12504dcafe059176",16),
 ap_uint<128>("0x038f973e6dff547f8fc3bf1220d89a3c",16),
 ap_uint<128>("0x501abcaf0f2a57082c10cb455fe38230",16),
 ap_uint<128>("0x2edf7b872414c1cfa2ba49222ce8a4e4",16),
 ap_uint<128>("0x311ea5676bfe82de177141c514208c79",16),
 ap_uint<128>("0xf241b5b7ba8f930538a195c4e99c139e",16),
 ap_uint<128>("0x3d7678258773fc0eb827cb9795198651",16),
 ap_uint<128>("0xe2570f441ac994df1f407df3e4c59a04",16),
 ap_uint<128>("0x77e5c85998745afdcb23f1f65a232d5a",16),
 ap_uint<128>("0xe0d648b5e3e8f7837278d9c015546554",16),
 ap_uint<128>("0xab7291085c6fe7e6f5185164e72cea4e",16),
 ap_uint<128>("0xf96cf2152e215193c91fbea80567aefe",16),
 ap_uint<128>("0x9c3f5cf27571b997f678a1c2ada65e23",16),
 ap_uint<128>("0x7c218f959812e1728dc027b93c4217a7",16),
 ap_uint<128>("0x1c96a9337e281c42a3e18ba7e9717110",16),
 ap_uint<128>("0x630b8801044b643017b653c661028375",16),
 ap_uint<128>("0x0709dc89425e2ace6ddb7c403b3923a1",16),
 ap_uint<128>("0x2e9b202577d7e51dd6be241e92fc0d63",16),
 ap_uint<128>("0x8c9c527eb31a57a0a420540467c29929",16),
 ap_uint<128>("0xc492e55e787e04d972d77dd58c0b2fd6",16),
 ap_uint<128>("0x463fcad30f9e2c0a79390be0afc001b1",16),
 ap_uint<128>("0xfcbc662fcd988b4952c470f5b3fb944c",16),
 ap_uint<128>("0x8b51043a4462a7295032e40f689f29a4",16),
 ap_uint<128>("0x80761ddf5b7205d4dab3384a8a0dd562",16),
 ap_uint<128>("0xbf5015afd24b99d97dce05da0e17d80f",16),
 ap_uint<128>("0x0e7afb25227c81d4d0a4b42de424101e",16),
 ap_uint<128>("0x46dfb2791808b6e20b500fab29c33edd",16),
 ap_uint<128>("0x5b6e326f2dd4305c16fbc6a22644e1b8",16),
 ap_uint<128>("0x3e969d39f4533e9a2eedf9877c451eab",16),
 ap_uint<128>("0xbac56e05addf136bc4cf1f1eef6d19b8",16),
 ap_uint<128>("0x15d05608738f5e6c96f579b603f68218",16),
 ap_uint<128>("0x75b231efe4a651e0229e40dcfb941199",16),
 ap_uint<128>("0x61ddc4488ab678ffc4d0ad6539a16298",16),
 ap_uint<128>("0x870945a589bef73eb6de7ad88f91a90c",16),
 ap_uint<128>("0x4a014136d6bc1ef33f30f605a53c6388",16),
 ap_uint<128>("0xe988623157399534f1a4830eae0440b2",16),
 ap_uint<128>("0x238881b3cbae0e27d3261f01c4a1a81a",16),
 ap_uint<128>("0xf4dde0a3f1941028a10d48f6cc148ccd",16),
 ap_uint<128>("0x833f85659762bb2361a684e48bf20e3b",16),
 ap_uint<128>("0xb733f9fe512f7790664fbe744d0c2d97",16),
 ap_uint<128>("0x64f030e645c607a9bca2314c872cc585",16),
 ap_uint<128>("0x3fb5491853adacf86bc0c5a8dce2e0e2",16),
 ap_uint<128>("0x7f8dc819140e69473809018ae14b747d",16),
 ap_uint<128>("0x37edeb26d30c43e4312512a7ef9767c8",16),
 ap_uint<128>("0x7625075e3b13e51e9a5b6c8d8856b6c2",16),
 ap_uint<128>("0xd395f9a71fc8b8c43b882f00189ba774",16),
 ap_uint<128>("0xe31609ec809a7f40c639f48bfdbec820",16),
 ap_uint<128>("0xc0e8547e204411db347323ba88160a0a",16),
 ap_uint<128>("0xd3578fe6eda6a6bbea703095ac8f8c1e",16),
 ap_uint<128>("0x7811a2edd39ed4dd4093602fc029e470",16),
 ap_uint<128>("0xa3743602b619430ddfebfafd92ee8e6b",16),
 ap_uint<128>("0xe1a928cbffdfa16c89ee3950166a3174",16),
 ap_uint<128>("0xdbdde590caf70e7720cc329573be730a",16),
 ap_uint<128>("0x3515a81feed73d7b9f1c25153747d119",16),
 ap_uint<128>("0x562900480bb2e792460457590aae9565",16),
 ap_uint<128>("0xfae88ba4bf4f748ee4f7bcb1ae4ceb14",16),
 ap_uint<128>("0xf03a73a822d8e48abc845084c8786497",16),
 ap_uint<128>("0xa3d04f21e47c739fdeedd34733309c01",16),
 ap_uint<128>("0x6a3e30c9e6637b7d9a150796e19cdc13",16),
 ap_uint<128>("0x9c6d3b124f74afa5e94ae63efd6ff3a1",16),
 ap_uint<128>("0x450fb74bc98a18eaa964a10973c4056c",16),
 ap_uint<128>("0x779d80a4ef01f8527e3cda79f2261156",16),
 ap_uint<128>("0x10282600d6aee4c4b197bbc16af9b63e",16),
 ap_uint<128>("0x0cbc3726d3388967cf7e772e212aa4a4",16),
 ap_uint<128>("0xdee7742874dd11c27fbc15800bd01123",16),
 ap_uint<128>("0x533dfb9d0d864d4c3797a47f32997ece",16),
 ap_uint<128>("0x7555c0aa60f884fabe4851fa7af9afff",16),
 ap_uint<128>("0xd5e670e3075a8fb81aae7bddefb0df6e",16),
 ap_uint<128>("0x8c1170e8f9b3dc94a98ef5d6cec27b3b",16),
 ap_uint<128>("0x5060777b8a2a88103ab757328fbebebf",16),
 ap_uint<128>("0xe8180acf8710a1b4e49ff218961b0b83",16),
 ap_uint<128>("0xc7b76be43b9a1760ac265ab6bb07dfb9",16),
 ap_uint<128>("0x717da164cfc5f36eadfae238dc0f0ac8",16),
 ap_uint<128>("0x67bb8b94c2b4c57c2c80dcae24e3e8ee",16),
 ap_uint<128>("0x21b067ca35b1f780dc562a72ad87cf9c",16),
 ap_uint<128>("0x7eef2bdcad8c3ce4eba54a24ddbb8662",16),
 ap_uint<128>("0x1eb1dfe777f231bce2f496661153a546",16),
 ap_uint<128>("0xeb9a4f444e47646b7ea1e83907bd5632",16),
 ap_uint<128>("0x59be7573094d70704b4c6ee65d4d06e2",16),
 ap_uint<128>("0x5c875eed99a48541da8498bdf6225f17",16),
 ap_uint<128>("0xd258111720b781ceced22a4ee690e38b",16),
 ap_uint<128>("0x723d5322b476e37c9ca6bd5de7008212",16),
 ap_uint<128>("0xb9892c51bd715a8454940caa331728eb",16),
 ap_uint<128>("0x2a193306e8f40045d44f899927ddcd25",16),
 ap_uint<128>("0x3041d8bac7c6f6d7729f409897e0d331",16),
 ap_uint<128>("0x65482460fdabe4212db351ad462c6d89",16),
 ap_uint<128>("0x9cd2bf9eea26078ae84ae7d8c32f691b",16),
 ap_uint<128>("0x8844a832c0a5b535b8214901a02fa370",16),
 ap_uint<128>("0x704f65eda855424d5204c61ab8a8bad6",16),
 ap_uint<128>("0xc20ef126f901736c95c314f00194a8c4",16),
 ap_uint<128>("0x833891592e40bbf2cdfdcfba4d1ff480",16),
 ap_uint<128>("0x0afc2236ff0227fe1bdd51df95496a5c",16),
 ap_uint<128>("0x0b634d4889a2ef05fea2f93eb8d55e10",16),
 ap_uint<128>("0xb417fe1a0595b40a5b08ddda9448dd3e",16),
 ap_uint<128>("0x93ce60086202e28ddb9afdff2cc3e5c3",16),
 ap_uint<128>("0x5c210917e83671d16899e101890c13fb",16),
 ap_uint<128>("0x173e28da38797569ac79d96bb0b74ca5",16),
 ap_uint<128>("0xf58c39ad5ffda459a2ca0ef53fbcf74d",16),
 ap_uint<128>("0x01a5b22e2323e4769e0b155a42d0d4cd",16),
 ap_uint<128>("0x0e860837d76b8b2ccc733d7b6a933eb9",16),
 ap_uint<128>("0xb443678438b9394e35f91742426e0236",16),
 ap_uint<128>("0x98d9c99bb4bb41c7660c502a5071d52b",16),
 ap_uint<128>("0xd419afdf0726ed38825a48e8afd68278",16),
 ap_uint<128>("0x38260ccc2061191c64ce12a0844c62a0",16),
 ap_uint<128>("0x9cd3b208219149269873d83aa35de3f6",16),
 ap_uint<128>("0xa0755135059b5ce2149f281178b8f352",16),
 ap_uint<128>("0xfcbfe48a380d088bcc34a3cc6d23ee20",16),
 ap_uint<128>("0x53b1ec04725d5a729c3d0acfb16e3279",16),
 ap_uint<128>("0x9063bb04884fd5edbb0ec065c33c8996",16),
 ap_uint<128>("0xc0845e22326b3d20d6f50d1b3cd70c10",16),
 ap_uint<128>("0xa272770ed0b2ccb1ccc3d12d7b02ce62",16),
 ap_uint<128>("0xf0bba8ba0ee60c565b9df80f12006c13",16),
 ap_uint<128>("0x0171a75e16be083cb18a3fe2ee5f4838",16),
 ap_uint<128>("0x361b2b875e3ffc1ff0ec6774540245a9",16),
 ap_uint<128>("0x46544ceee5f9994531391aa963afeef8",16),
 ap_uint<128>("0x522128a3b21c891234bd729c325d1e5a",16),
 ap_uint<128>("0xaa2c01c83dcd6322e67bba04e7bad109",16),
 ap_uint<128>("0x7ca439d2d2ad279378ec5bf7c2e99bdb",16),
 ap_uint<128>("0x36f09064ad5407515bababe5d761b373",16),
 ap_uint<128>("0xde9ea6cb42c9e0758709ec653d16f24d",16),
 ap_uint<128>("0xf3100da32ca7e8e72687b8417cf47491",16),
 ap_uint<128>("0xe7491e5b9308f5b673dd3cb1df9bc8a6",16),
 ap_uint<128>("0x068ae20e7cdef4b7e8d52240e7dbaa0b",16),
 ap_uint<128>("0x2e85a041b80793b133a6e00f338b8047",16),
 ap_uint<128>("0x36a1a3c9570d2177b05d36cac687af2a",16),
 ap_uint<128>("0x2699f56c9b3ae38dc5dfe4e5ae6d64fc",16),
 ap_uint<128>("0x1239c98fcd05c8b048d64dad11219a2e",16),
 ap_uint<128>("0xd5245987bab0261efaf27013e238f611",16),
 ap_uint<128>("0x316b0d47e91b39a179baeb2a78af74b1",16),
 ap_uint<128>("0xecd57b22836365c0d5e61edc8701b648",16),
 ap_uint<128>("0x120e08b66efbdede9951748918bc584e",16),
 ap_uint<128>("0x80c15f411f700d0f79165f446ad84a03",16),
 ap_uint<128>("0x4bf35cb3e59a4fe0f6c2915015fe2902",16),
 ap_uint<128>("0x7cca932e16f48937524dcce331b66912",16),
 ap_uint<128>("0x09d09ecf44aae4e20e9243b61d914284",16),
 ap_uint<128>("0xac6cdb9ec03426fd4f24e8c434e4a29f",16),
 ap_uint<128>("0x01770314010c74cf757254a10c61379b",16),
 ap_uint<128>("0x312db7448fbfb22ec897288c4a24577c",16),
 ap_uint<128>("0x76a4147856c054f661e51379e866137c",16),
 ap_uint<128>("0x84623edbc50c4a702afc320bfa5b8c2e",16),
 ap_uint<128>("0x7ba44c088aef38dd0ae1cb34b960a7a5",16),
 ap_uint<128>("0xd81e7af49977f9bad41daeb43dfad369",16),
 ap_uint<128>("0xe790c6f857d150a0b4d3d028148642a1",16),
 ap_uint<128>("0xd001e326f8258cb7fad93f0e3ca7ad1b",16),
 ap_uint<128>("0x4e3389fec7a1196fb124581d45836aa3",16),
 ap_uint<128>("0x326dd932091842f8a7cfc4f82f93f0bc",16),
 ap_uint<128>("0x6ae50f42dd8810689643b07ca8f0bac7",16),
 ap_uint<128>("0x3a23dee089230b50990e73e3a43ad83f",16),
 ap_uint<128>("0xc5e6e5eae6f5618d868d84ebce3c0566",16),
 ap_uint<128>("0xab2e0127989859229e49d636b1681c58",16),
 ap_uint<128>("0x86aca08e1a23fc49233ff9b6972ef216",16),
 ap_uint<128>("0x2b7b9663b3e9d1ffb8964ba44da13e9e",16),
 ap_uint<128>("0xa9e8695cf4e7fad88680a09485626f2d",16),
 ap_uint<128>("0xf813cf628b8e4252ad46be5ca29cc684",16),
 ap_uint<128>("0x11154b12c7f68fbbc70c15ae8da1bc16",16),
 ap_uint<128>("0x78b6b246681658f3e74d41f8c9f24b93",16),
 ap_uint<128>("0xe6870a6a18e4c1b9cd2802e1c9f9301a",16),
 ap_uint<128>("0x73226e865d975c6665966bd7b2294395",16),
 ap_uint<128>("0xd9e6a43178a3ebccc137642b93284384",16),
 ap_uint<128>("0x8a553bcc2f9396a1b944b6981d586f29",16),
 ap_uint<128>("0x604e828a70a1ea1e1c5eb309e5aa293e",16),
 ap_uint<128>("0x260f082d54ad9dbdbc7f06827065e8dd",16),
 ap_uint<128>("0x97d680e873d78480b07afea79ec9138a",16),
 ap_uint<128>("0x14b9b86346b3a146fa015ab2eb2122ac",16),
 ap_uint<128>("0x015af8e1f97a842945ddf495479d3708",16),
 ap_uint<128>("0x275d720749e942aceffe372a337ac223",16),
 ap_uint<128>("0x3759a8b82bd5c0efaf7bc824ba4b747d",16),
 ap_uint<128>("0xea1d46736e17eaf86d880b9903871e94",16),
 ap_uint<128>("0xd13cc72ad7143a7184f85ade0367c067",16),
 ap_uint<128>("0x1f98d02314b0e966d2e32922492b022a",16),
 ap_uint<128>("0x6c13027d6d9a09bfda350c672f98932b",16),
 ap_uint<128>("0xa7314a45c9ce83c070b5c98684aa1865",16),
 ap_uint<128>("0x3b80c5c7b1c306eb0a77daedb9619d7a",16),
 ap_uint<128>("0x95cea04aed13ccbea35a1f4c09a7efa2",16),
 ap_uint<128>("0x0cc5898039b5f7bd4e772879ed7468c0",16),
 ap_uint<128>("0x90f64ce4bf5931155ef350c8b4b05200",16),
 ap_uint<128>("0xbc42719a3802fd78f096470f22d1fb51",16),
 ap_uint<128>("0x9d90ec755573cdc18a50859359a198da",16),
 ap_uint<128>("0x7002e05e103a1d6c15ef606441a1d3a9",16),
 ap_uint<128>("0x9972dad06a307f68044f983e7f656628",16),
 ap_uint<128>("0x97b9a298a0838f9c87e1598396769227",16),
 ap_uint<128>("0x08ff7357777c11175024b2c8260693ab",16),
 ap_uint<128>("0x2a3faf4a8728a03c00f4c6f79d118c2a",16),
 ap_uint<128>("0x98db9648ab3372e5b8b6f9bdf532d318",16),
 ap_uint<128>("0x7d6bde8df9bbd5e6e285e3cdb33c290f",16),
 ap_uint<128>("0xaa0a3d22916c1b6733d516157d7754a8",16),
 ap_uint<128>("0xf10a124c300e2b8f1bc5ae270030ece8",16),
 ap_uint<128>("0x6315bf72bb42d38d74bda240ceb077b1",16),
 ap_uint<128>("0xd0da03170882558ecdb7aebc0d79014c",16),
 ap_uint<128>("0x094843ac295fa46b381fec8bbec72de5",16),
 ap_uint<128>("0x475522a1a1a7107996c831f1130eba3f",16),
 ap_uint<128>("0xa9733829b742b4524e1ea0ca74da883b",16),
 ap_uint<128>("0x7e2dcf65605e4b145bba7d9d55883c5a",16),
 ap_uint<128>("0x5af729be03c20abb04771086af2fffaf",16),
 ap_uint<128>("0xab99de0eb5511059b8d1f0d0cb5ae35e",16),
 ap_uint<128>("0x722185190fc33f5301e2a7d871de6251",16),
 ap_uint<128>("0xc4e7b5bda48ee2b7541f90915933eb5f",16),
 ap_uint<128>("0x62634802ecf0fb4a488fbfbe210161bf",16),
 ap_uint<128>("0x371578ed0768c7c3c78f58978b32f2c3",16),
 ap_uint<128>("0x6fbb636084444a7ec3bc7f8ea29eea15",16),
 ap_uint<128>("0x330b1104551467db25da4129e02018d8",16),
 ap_uint<128>("0x1f6cc86374b8e0e090c9c5425191eb6a",16),
 ap_uint<128>("0xeb3cd9aa8b46c41f87d3e45a42a84780",16),
 ap_uint<128>("0xd28dbc57f7b1e38366e99b8be582129b",16),
 ap_uint<128>("0x6d574fba428d232392b0c8b168cfe57a",16),
 ap_uint<128>("0xc8fb069f5c27a06ec425ad3cdeb90e31",16),
 ap_uint<128>("0x5f42eae758ab044abdf3407fb271d3c7",16),
 ap_uint<128>("0x6f1bebd77315c40c1425754a24c52562",16),
 ap_uint<128>("0xb88cb4a16b617d17794149b42ec1ce25",16),
 ap_uint<128>("0xecadfb28c8f17bb6ece95c2091900936",16),
 ap_uint<128>("0xbf8ae5ea144b8b1f6ec5852273c03d4e",16),
 ap_uint<128>("0x763164895ead07f53047606ff9857add",16),
 ap_uint<128>("0x27e019651df6a1047131fb9235f77a39",16),
 ap_uint<128>("0x0c019e91007fe87750c6adca8d5c6658",16),
 ap_uint<128>("0xf0f14b2552643366142b087e754544ae",16),
 ap_uint<128>("0x29526349f1cd13e529ad6992bef92783",16),
 ap_uint<128>("0xc194762492d5b490087524e23d027d7a",16),
 ap_uint<128>("0x824059ca771cb9d13703bf6d2cebf402",16),
 ap_uint<128>("0xdd9173bc6cb106530a30782e62825456",16),
 ap_uint<128>("0x003fb759420f2c7d4b16d9fafe6af6a8",16),
 ap_uint<128>("0x40a6205032b453f77069d6c37a6ffa20",16),
 ap_uint<128>("0xb91edef5c982fbab5f241a4b90dd2356",16),
 ap_uint<128>("0x77ef3dd5e458e2846f3fe375df33a68a",16),
 ap_uint<128>("0xe246ed4240f1a2872dc66b3cf36fcc0a",16),
 ap_uint<128>("0x92ada2a0ece44c9a800d4ddb3638e4f9",16),
 ap_uint<128>("0x92b9483cd9813be8abab55d2635e20d4",16),
 ap_uint<128>("0xc7c2f2f961dd48da7ec9f31480ebbe79",16),
 ap_uint<128>("0xda679fb11ecc68f15064ca83edb6d4ab",16),
 ap_uint<128>("0x00873310f688d5fb411f912ea8c6db20",16),
 ap_uint<128>("0x822a1ad2a79b9f13a0628fe740405129",16),
 ap_uint<128>("0x092f2ef44e9fa100521202a017d1d30e",16),
 ap_uint<128>("0x1f66316f67c340ff2f53d6f8b3a471ce",16),
 ap_uint<128>("0x416bbdbb4dc33aeba22c1d682183cb2d",16),
 ap_uint<128>("0x34a18dbc3c61bd21d07209bba291710e",16),
 ap_uint<128>("0x8cada71f65335e9277509b602085162e",16),
 ap_uint<128>("0xc335680f26878962d59f8db26caf7b53",16),
 ap_uint<128>("0xd3029106f447e331ee2fbe6096e79e5f",16),
 ap_uint<128>("0x107ee91e6630206c0b32d714432bd4f0",16),
 ap_uint<128>("0x7aa88ab49d9c57854a02c6062a5cc173",16),
 ap_uint<128>("0xca44dbee591eff9f890095d9b5239540",16),
 ap_uint<128>("0xa195db3f7b8e00ea2102fd1e5ca9343f",16),
 ap_uint<128>("0x9d2d03dd38aac2aab227fb30301b6563",16),
 ap_uint<128>("0xcb336c20aff3e5dae80d4ff745a2c255",16),
 ap_uint<128>("0x3930915cef005fcc6d612595c68bcb66",16),
 ap_uint<128>("0xdd1ccb5b4c0af0e40020928848fc17fa",16),
 ap_uint<128>("0xb1d865646fc7ef60a165f76962acaf54",16),
 ap_uint<128>("0x8989ea12a59b093f51c2fddf1a2a324b",16),
 ap_uint<128>("0x364800e8e0863ca0d88c9a2459bf1f9f",16),
 ap_uint<128>("0x9b5d8ed1c476c9752d391ec880b37f09",16),
 ap_uint<128>("0x7ac92ba2470b54de8fe61703a1309204",16),
 ap_uint<128>("0x723ad8846a601234ba1304aff29e0667",16),
 ap_uint<128>("0x6f47303942717e06814895d102f9e159",16),
 ap_uint<128>("0xb3e16ac3a8d491f52a45e6a71abcebd2",16),
 ap_uint<128>("0x2adf714579d2723ecee09838829dd21e",16),
 ap_uint<128>("0x5cc327a6f7bc6ec9b00d725d27571a2b",16),
 ap_uint<128>("0x5320d4c9ebdab2c367fcce9cee5b9201",16),
 ap_uint<128>("0x9cbdb2865b36d07b3cc1ef611adae3cb",16),
 ap_uint<128>("0xbda195e989e784670057d4c0d64142eb",16),
 ap_uint<128>("0x0e60342345ad5d360a55c0d2f274acec",16),
 ap_uint<128>("0x545f1a161d8338ec55a59f294763f690",16),
 ap_uint<128>("0xa24809f1ca9b7a2e58783546c6667e7a",16),
 ap_uint<128>("0x123be52dc7d3db8714ce41e53ff1ff05",16),
 ap_uint<128>("0x90bec572333fe20befd163950e46bd6b",16),
 ap_uint<128>("0xea90e7003046bafcde0b249ea03b6571",16),
 ap_uint<128>("0x80c98cd8d8a713eeb72c45ad0177c30a",16),
 ap_uint<128>("0x4603e7fab78e26ff08a2a74c93f6218d",16),
 ap_uint<128>("0x83b8a4166e78d798e31f2390b262c468",16),
 ap_uint<128>("0xa81a6cffa69c5cea620fd04ae4cf334a",16),
 ap_uint<128>("0xac28212c3df047856f10f0a21f5f04bb",16),
 ap_uint<128>("0xe30467a1676f7e83dbad28e4cf3a59a0",16),
 ap_uint<128>("0x3ffb3c29d6ce102f4b02dfd096fe12d8",16),
 ap_uint<128>("0xcdf179322f56b5a38c424b46495e4a8e",16),
 ap_uint<128>("0x555b8ac554a103d95a1026637cd9cedc",16),
 ap_uint<128>("0x314ca1c4ba0f57055ca59c79ac235a81",16),
 ap_uint<128>("0x7d1e9bfb429dcd731ab2fae33ef4c5b2",16),
 ap_uint<128>("0x2c5ad66ce6cddd94ec77ee55bc79f863",16),
 ap_uint<128>("0x6be2e621ce5cc9cfb48fe35856d70613",16),
 ap_uint<128>("0x5cdde25131221ef2ec9839d4f56ce52b",16),
 ap_uint<128>("0x431729e17eef3654d115c3e792c60b47",16),
 ap_uint<128>("0x9e354ea7524345b0fb6996bf93107671",16),
 ap_uint<128>("0xbd22aec8c8d09c4cee3e17f5f35b5669",16),
 ap_uint<128>("0x3104b795d6306000684fd0f5d7a9ed50",16),
 ap_uint<128>("0x64a6641cd6140c772d2e93fce4fc7608",16),
 ap_uint<128>("0xde7fddef0ee384906cbacdf37496fe52",16),
 ap_uint<128>("0x6de7ab2c116df46af13bf7261c28353f",16),
 ap_uint<128>("0x906aa7caaf05e91ce373840f4be061a4",16),
 ap_uint<128>("0x5af619153d35bb6d9bfef1fe9b2d3e5a",16),
 ap_uint<128>("0x8660296f0544778935d95f463865ff63",16),
 ap_uint<128>("0xe4ff7de7af078e24b654038e3f88fd68",16),
 ap_uint<128>("0xa97f75ed42a8f4c0205f28a1ac72c7e4",16),
 ap_uint<128>("0xaa9e05d9d46dabf7ef83a5887a4d3385",16),
 ap_uint<128>("0x89dbc814910185cc801d978b5eecaec2",16),
 ap_uint<128>("0xb73a90edeb6678e8b90a8c2275482f06",16),
 ap_uint<128>("0xe10afd6b5ced13955793a57694d9f216",16),
 ap_uint<128>("0xbeb8a25f96d3a5b72bde1b8f58e126eb",16),
 ap_uint<128>("0xad19a2a76fd4135251ed6a349b878be0",16),
 ap_uint<128>("0x9d631b06349c7562797779a268f44443",16),
 ap_uint<128>("0xec04493cbf0761b25cd3d970bf82136a",16),
 ap_uint<128>("0x0051813f50b9be1aec0a3b598ac28d8c",16),
 ap_uint<128>("0x287fc7f68e5a1965df92a02714863f29",16),
 ap_uint<128>("0xb23624f3eaa54b347a625421aef1e1f4",16),
 ap_uint<128>("0x754b7ac8e99044721084d305abb88e59",16),
 ap_uint<128>("0x998c5d562bca8c5b6f2123efd90dfaf7",16),
 ap_uint<128>("0x61bccc7c48114672a8b0aa0ff0416a91",16),
 ap_uint<128>("0x19f862cc2ca62d345e83b14a9f58c60f",16),
 ap_uint<128>("0xa627f5b0b97ed10a4329c6f261a605ab",16),
 ap_uint<128>("0xbf7fc695b2cf8abc650d8df101962c9b",16),
 ap_uint<128>("0x591b4dd367133e7e1bb646e6146b9cf8",16),
 ap_uint<128>("0x4ae0e156bd37894a29af6c8c93370978",16),
 ap_uint<128>("0x45d9fdeb301514f4971d12fd7fbfd2cc",16),
 ap_uint<128>("0xf3f15db1e2f8073fde5c6b2ba86cda0d",16),
 ap_uint<128>("0x67e218cb6067219b0f3619bb0eb87540",16),
 ap_uint<128>("0x6506089eae583f50f5daa499b5a99870",16),
 ap_uint<128>("0xa6f51945791db042eed4c46fe63a59fb",16),
 ap_uint<128>("0x3438f3c41733b5081bdb85b9f037da1c",16),
 ap_uint<128>("0x0be7b96bec4e3150d9ab9f3aa73bdf74",16),
 ap_uint<128>("0x66b4543d0ca5ae64780296942bce5d35",16),
 ap_uint<128>("0xdba1995c38035134fa8a3da385ab95c4",16),
 ap_uint<128>("0x89a5ef5ce3e3bed8513e23dad7ae0a0f",16),
 ap_uint<128>("0x377277e6496bf5ab4989215f46524423",16),
 ap_uint<128>("0xa0daadf28af1d0d05d0ae4ce61e3e32c",16),
 ap_uint<128>("0x3a3e15a4e26a9bfe0fad023209375f4f",16),
 ap_uint<128>("0x199b362f6049feb7cb5c95b9a69f9961",16),
 ap_uint<128>("0x30e45a4eb3d207960b94d446f6a165ee",16),
 ap_uint<128>("0x488f488fabb56616e89ebb3e448c3270",16),
 ap_uint<128>("0xc4dffcd932f16a9f487376c3206b45b1",16),
 ap_uint<128>("0x55da19e62bffc28ecd5ee689d858bfdc",16),
 ap_uint<128>("0x6263774351d4c236519c77739685514b",16),
 ap_uint<128>("0xc74a8ba320a11e6f71e4d16838f48076",16),
 ap_uint<128>("0x6e898717ca82443d5b7c30032542b397",16),
 ap_uint<128>("0xb5a4d039eed15b69aa0c63816bfdaa73",16),
 ap_uint<128>("0x7d1d49ebe0dc2ce16ee3907f185b9687",16),
 ap_uint<128>("0x0dfdf091e6e56bfe60c3cc2cb3a5dcf8",16),
 ap_uint<128>("0xd84971b097567a868013e94ef84b6de4",16),
 ap_uint<128>("0x5a9a11b9da04d05c4c68273ff87b3d59",16),
 ap_uint<128>("0x0ad4c316f44f6d4c2d92def20b86709d",16),
 ap_uint<128>("0x963a1bbf4b40ba57e59b71e2335eaed8",16),
 ap_uint<128>("0xf5085235f908c15d2b4c1a0cbd88106a",16),
 ap_uint<128>("0xdb5242c2bb172f95505560403d31f6c0",16),
 ap_uint<128>("0xb3ca3b96987d7a522a5aa8ab93fca444",16),
 ap_uint<128>("0x9cbb11897d987283de1a859950563d00",16),
 ap_uint<128>("0xe07ac34bc8b1660c4ab53b379ab9f305",16),
 ap_uint<128>("0x0de2f9d387762779c18dc6ee642240b9",16),
 ap_uint<128>("0xb1a062f1b8c103a3370fc134fc995a3c",16),
 ap_uint<128>("0x0c55b2d1c424b53183221d36f5143f2b",16),
 ap_uint<128>("0x810ca24af1183cb1f1df9a0d83eb375c",16),
 ap_uint<128>("0x2fe2cb8a3db901be18b227c585e81c7a",16),
 ap_uint<128>("0x51aa9af662cb98e18b09ce74189c5161",16),
 ap_uint<128>("0xca82b00c914b2b0a655f9a6ac10bd6bd",16),
 ap_uint<128>("0x072f14e7ae9f5daa2d54f9685972d27d",16),
 ap_uint<128>("0x5b768df5e6f21138f0fd30fad91506a3",16),
 ap_uint<128>("0x7a9963407d1159a3772ed7f8fcfaabff",16),
 ap_uint<128>("0xe9add1f42bace8dcab5f49b8465ce525",16),
 ap_uint<128>("0x2c9fc67aa5642316ba5030eb25b2b6ec",16),
 ap_uint<128>("0xb8d926577235bd5c10d58f857a2dd215",16),
 ap_uint<128>("0xe1c12c36c99b7fab4a6dff2c7a728135",16),
 ap_uint<128>("0x0e35ecb559b32baa9c8cb6b4c2ab7e43",16),
 ap_uint<128>("0x52d6f6eb30d5ae745736a322c1fa6041",16),
 ap_uint<128>("0x45077f4813f12bc764347acddeb5cfa6",16),
 ap_uint<128>("0xca8cb84ce921ed0ad0c77ad1326ee8ab",16),
 ap_uint<128>("0x3d3d68dfe822b18a0ea15ff41e3c9f17",16),
 ap_uint<128>("0x5f72b02f0eec1710b5c6082daa317b5f",16),
 ap_uint<128>("0xa19badea8486c306f91937e8ff9be850",16),
 ap_uint<128>("0xee0d89101b20afe63cc5fc4b2fd756cc",16),
 ap_uint<128>("0x707f57cbe2fa4687b6e63861b6bc1a23",16),
 ap_uint<128>("0xef2324fc7eed1b4d5886a8f9ad473a85",16),
 ap_uint<128>("0xda7525dabc8311100d5fe35f406692f8",16),
 ap_uint<128>("0xad11ff9ef6e9bfa9f2f2d8f9bb8b4565",16),
 ap_uint<128>("0x0e6ac4b093aad5999d98a7f4992ef556",16),
 ap_uint<128>("0x61b629264180f4b607f51f5cb0c903ce",16),
 ap_uint<128>("0x1b87a7e27a3a982257f56e5231b912fb",16),
 ap_uint<128>("0xb3c694a9d8489331aa9bf540402e5067",16),
 ap_uint<128>("0x0626e8e881e29689060221a8c384d0bd",16),
 ap_uint<128>("0x36035b957269e1a84d6a08bb73e95dd2",16),
 ap_uint<128>("0x24bf290211786c9dfbee56618a3f05cf",16),
 ap_uint<128>("0x4f4641bfdc579fc696cb1e37f71c15b5",16),
 ap_uint<128>("0x3ea34664bcd8cebee22cbef4d81c8a7b",16),
 ap_uint<128>("0xd9b9f602f240270fb0ce39679a73810f",16),
 ap_uint<128>("0x0a78b1ffc139b3516e8d27d4dad3365c",16),
 ap_uint<128>("0x0f70f46b4e2496835c333695e4b96606",16),
 ap_uint<128>("0x767c1b5f8f8a6000894515ca2db224fe",16),
 ap_uint<128>("0x2a705a051deda3110b7f5fc301efb8bb",16),
 ap_uint<128>("0xc703a5d7dd2e4165724ce125d474a4ac",16),
 ap_uint<128>("0xfd471e42794e6c81566ca9fdf76691a0",16),
 ap_uint<128>("0x4a4c139ed091afe3f1d7ff1246f2d9f4",16),
 ap_uint<128>("0x7be4336756bec4545862dd0260a14e43",16),
 ap_uint<128>("0x1e14f31e918f08387ef27f5e0ab95e92",16),
 ap_uint<128>("0x6a9f5a36291c38ab12ada7e87bd307d5",16),
 ap_uint<128>("0x867e856fc555915989e4066f537a23da",16),
 ap_uint<128>("0xa82f01b7500e4ea72bbf9ef96312f665",16),
 ap_uint<128>("0xf782b3e241435fd3a5c3bfe877060728",16),
 ap_uint<128>("0x49b296a0e723d5e42612fa4065a95a3a",16),
 ap_uint<128>("0xf422d7997115554c0739af95584a82c0",16),
 ap_uint<128>("0x9b8604050cfa5b5847eb1b69f494b894",16),
 ap_uint<128>("0x3e7ca2bcbebb2605847cd7ad41217672",16),
 ap_uint<128>("0xc1f491f0b8eb9cd6a9386d3960d6720d",16),
 ap_uint<128>("0x06cc47144f8074a173081f3805e5cb02",16),
 ap_uint<128>("0xe83d6a857ebbc45478a8e0e1cf53a4de",16),
 ap_uint<128>("0x99c465eea029b3b8addcc7fd57c975e7",16),
 ap_uint<128>("0x74ab5175b6b86c5ee789d77faf474b02",16),
 ap_uint<128>("0x795deea0e9d3cc9ac417b509e0807860",16),
 ap_uint<128>("0xdd3ddfa79c9745f6286666642bea7165",16),
 ap_uint<128>("0x1a769d3f3172b6305f7aabdc035a5126",16),
 ap_uint<128>("0x12682dee1894a01c71a6b3c26b24a595",16),
 ap_uint<128>("0xbccf8e328c21df211ac76c02b849841b",16),
 ap_uint<128>("0x46a63435d3f76045ccfb33c96b94f940",16),
 ap_uint<128>("0x419129b3a72102495c2c03d1aa049676",16),
 ap_uint<128>("0x7d211b9069ffe561b80edcda80803c3e",16),
 ap_uint<128>("0xf8c9f7cd9bba4c168c53e1cb95eb6ad9",16),
 ap_uint<128>("0x7f12a774750fe89076fe771bb4a341dc",16),
 ap_uint<128>("0xc97593296cdd9c563c26eaefb0b50396",16),
 ap_uint<128>("0x2c7bf27ddd9b90f93759d0ba4eba45bb",16),
 ap_uint<128>("0x158674305208bfed94791e615e7369d7",16),
 ap_uint<128>("0xe8b2c23c34daeadab7182e58b730047a",16),
 ap_uint<128>("0x46be712f1df8bcad71caf68454aabf61",16),
 ap_uint<128>("0x8fcb880345ec560d4d2104c34de6e9b4",16),
 ap_uint<128>("0x781447af89c48e89ba09bef957aa4b6c",16),
 ap_uint<128>("0x1ba3697e00a787593896f0e749b433f7",16),
 ap_uint<128>("0x4f7386811c6c7ea2f81c0580a1627822",16),
 ap_uint<128>("0xc49c1ff05228e356f30c8b3e1486289f",16),
 ap_uint<128>("0x5170022146ded1ba2cbb0522397728b0",16),
 ap_uint<128>("0x32b6e8fa1ab53d4103866aa6925a9bf7",16),
 ap_uint<128>("0x30dd115ba2d0487921835894732f9343",16),
 ap_uint<128>("0x7b3cffc4dd80c15b5448b8290a6218b1",16),
 ap_uint<128>("0x1d7f3a2f36a3d1a09fc87764555c3c74",16),
 ap_uint<128>("0x9c0f356d7eeb320dc03b8160c0a0c75b",16),
 ap_uint<128>("0xaf01f0e4a0af0e45c47718497bdfeb1c",16),
 ap_uint<128>("0xd9abd7ac5ab14ed2feccd245740fd6ce",16),
 ap_uint<128>("0x5c6dc763b2ae57994b5e1d80d70c1816",16),
 ap_uint<128>("0xac3cc949810e8d0439001b50c50c782d",16),
 ap_uint<128>("0xb30c650f6e9791fadb291773e05e5c9a",16),
 ap_uint<128>("0x7784f375d014240a029d00d4dfd0bb29",16),
 ap_uint<128>("0x7622e34f4c869d9f9f9579309a5694fd",16),
 ap_uint<128>("0x374640da8f5d59fa574f5e5fd4638dc9",16),
 ap_uint<128>("0xced60a56f368041b538f9a58b8790367",16),
 ap_uint<128>("0x6ee7bf44478c8138babf586226f36fb3",16),
 ap_uint<128>("0xf64cef2535696e2e11b0879d4cc16fc5",16),
 ap_uint<128>("0x18933a7c575a4ae46e9447bc0db4b449",16),
 ap_uint<128>("0x58cea7c720233dde728bfcf86a6350b4",16),
 ap_uint<128>("0x722c28da6f202bdb21dbf15215bd6b56",16),
 ap_uint<128>("0x1387d12d726b9e516a386dceb5ccbeb4",16),
 ap_uint<128>("0xd2c219e8c9d84a1d15f78ba00b42b167",16),
 ap_uint<128>("0x2efe0d6a1a84b010803c47b0e8b1d815",16),
 ap_uint<128>("0x78e60199a33aa90e1bd86cc3b87f27aa",16),
 ap_uint<128>("0x6bdc952ba1440b8735e1d2798e9ea116",16),
 ap_uint<128>("0xbbab1b9ec0aa503f66e7b997a2527e94",16),
 ap_uint<128>("0x95ab10d8c7c2d631812d76c91c2948d2",16),
 ap_uint<128>("0xa8dad03f4a936182c8386bd5cf874232",16),
 ap_uint<128>("0x8c66ec94d710c702bfb551f1930633ce",16),
 ap_uint<128>("0x14884c978fa99201fb3820c26038db93",16),
 ap_uint<128>("0x77de6620fc77928aee2c8d33ea7f4e7f",16),
 ap_uint<128>("0xd4e42d1de7441e937f8d17e657e5bcf3",16),
 ap_uint<128>("0xcf3865444400923302ab211eaff64b98",16),
 ap_uint<128>("0xd97e8278454b705fe27188177fb09c45",16),
 ap_uint<128>("0x718336bb7184ef0f77c04b2bdb9625ac",16),
 ap_uint<128>("0xe931b50a9c9d80c20b901cca3c2571db",16),
 ap_uint<128>("0x2e9d31807a75eb94eb1a4d58bb230108",16),
 ap_uint<128>("0x8e731858967dbbc17e1bfd70c7f1d72e",16),
 ap_uint<128>("0x72697c812ebc65ab8af22f46488882b9",16),
 ap_uint<128>("0x9ad42292af8efcac872f02f244ca8fde",16),
 ap_uint<128>("0x5bef88226c4969692c8da146b1369ee1",16),
 ap_uint<128>("0x2b2254ced97920c88f99185fa19d84dc",16),
 ap_uint<128>("0x7d17787ccc91fb654b9553e1fa149735",16),
 ap_uint<128>("0x1ee657d77802fc856fff9a4681e24ed5",16),
 ap_uint<128>("0x4cf9e3cb80aedfcc25d415ef06db70f8",16),
 ap_uint<128>("0xcb483e2d0cfe535368907a78e7181002",16),
 ap_uint<128>("0x88166c51a0db6e164599336b9c1db10f",16),
 ap_uint<128>("0x508ba9e9c707cc78aec0d2b1c11d3012",16),
 ap_uint<128>("0x6660310e463dcd5e0dbd32022807cce0",16),
 ap_uint<128>("0x230b87a4a58e8bc85a6d708b1c1824ab",16),
 ap_uint<128>("0x288f7973bdcc12a62295f54b24848838",16),
 ap_uint<128>("0x1664f24c111e316b7f34f83ffbec90d8",16),
 ap_uint<128>("0xf79a8796c96dd5472825e1465728ea31",16),
 ap_uint<128>("0x1bfeb95df0ae5b75e20ed3d050602981",16),
 ap_uint<128>("0x15de71b0bf6b765de0aa5c54a0e32972",16),
 ap_uint<128>("0x324768d220c29ac6dd8d023dbf620319",16),
 ap_uint<128>("0xb08a908fcd914b8a93a9f70bb01e86d8",16),
 ap_uint<128>("0x2e1946c7503b97e9e620b88d4e6829b8",16),
 ap_uint<128>("0xfdfd7558481f850f7d542d34b81cb41b",16),
 ap_uint<128>("0xc42ffe662e324669a5f0921ebb4fb4ed",16),
 ap_uint<128>("0x45619b90237118ac22fecae4d8679761",16),
 ap_uint<128>("0x87e3e97c8c918293412f1cda229707f5",16),
 ap_uint<128>("0xed3a3b9c7ad4117b27a4ba56ac02dc9e",16),
 ap_uint<128>("0xfce80a2843acd18fef62238968d5c3fd",16),
 ap_uint<128>("0x025bb41f6d5dc415fc807ef5a9f784aa",16),
 ap_uint<128>("0x96a09066ea7e8d5d1b30848326b059ea",16),
 ap_uint<128>("0xf8a0b512d8ced0e17584e9666a875685",16),
 ap_uint<128>("0x973f1095c366a365617587fe0bb16eb0",16),
 ap_uint<128>("0xf74503edd447f826cbbbfbad907ab4e6",16),
 ap_uint<128>("0x9a2d15303bde47e43bd4f7e8e1e3460c",16),
 ap_uint<128>("0x126cc0cd35637de50b9bcc33dbd34b7c",16),
 ap_uint<128>("0x04afe4bfb80d942958235b739f9d3321",16),
 ap_uint<128>("0x9d3bf208b58fb1357d4b9a669590135d",16),
 ap_uint<128>("0x0420a4a4a03de68e2af3af2aa6717060",16),
 ap_uint<128>("0x11bb801f2f5f9729c2eee218f71a3dac",16),
 ap_uint<128>("0x69e9d448cc4a95dd23b7aed8a78209d0",16),
 ap_uint<128>("0xe991a8453eb4db5a7a5b1eec57276598",16),
 ap_uint<128>("0x35e8e1976170b1ed9634ea45c24af20a",16),
 ap_uint<128>("0x7e2a9a58f70f447d95b95acead2e3a50",16),
 ap_uint<128>("0x559ed4c2abe83b3f8fa7e0c537409b62",16),
 ap_uint<128>("0x93509936cd41db39addb9164649981cf",16),
 ap_uint<128>("0x1bd6955f479291f99f60d358c64cb038",16),
 ap_uint<128>("0x05969f7e0014df299aec3b3f97ece473",16),
 ap_uint<128>("0x122151176ef4b3fa5cf90a2955c78996",16),
 ap_uint<128>("0xf8ef6eb8df18c67bf17e7af128996f27",16),
 ap_uint<128>("0xa6c1f815ec9fe533529fc06e5b096e7f",16),
 ap_uint<128>("0xa3261093b6b1a831af82f7850b020087",16),
 ap_uint<128>("0x1df3317722afed5743358e746170b4cf",16),
 ap_uint<128>("0x718e2df8f6a46e161c89ccc9206b3afd",16),
 ap_uint<128>("0x965dd6482da954c228aa041a090201cb",16),
 ap_uint<128>("0x7c63575dba83e6542e05e91a25fe01ec",16),
 ap_uint<128>("0x15778032a8119c7aa116a499bf4b5928",16),
 ap_uint<128>("0xec1b10109bac2f055a5cfbf84ed28c08",16),
 ap_uint<128>("0xae899fbc30e6c2feb249cb5f595050a9",16),
 ap_uint<128>("0x554f7f34133105de47764528df4854d5",16),
 ap_uint<128>("0x6a74388833553772cb8bf62ff7782568",16),
 ap_uint<128>("0xeea9273fe5590c632cbb4f5ca56ad6d9",16),
 ap_uint<128>("0x6513f24257379b302e7b39eb92d2cb54",16),
 ap_uint<128>("0x88446558f3c956b6be08b3d1af327190",16),
 ap_uint<128>("0x7435ff90b22fe5ee2fbbc55856bcaa97",16),
 ap_uint<128>("0xaa429e61c2dc82555be53e66adf3015a",16),
 ap_uint<128>("0xd4136962bb11b59e5d422b949f981246",16),
 ap_uint<128>("0x926e15106274061bd21fd607c4d1c3e6",16),
 ap_uint<128>("0xdf611a87605b555d503f9eaaf07a317c",16),
 ap_uint<128>("0x9e76f95e384b5425287d209394d8098c",16),
 ap_uint<128>("0x1b83f8caa9d9aaf659c6f6d1918e8ea1",16),
 ap_uint<128>("0xb448643a836da1ee154e6722dc373ab2",16),
 ap_uint<128>("0x3b056f214e34b1722043b8eba1baa26c",16),
 ap_uint<128>("0x493c6884e41bfc836a72e248493ee61a",16),
 ap_uint<128>("0xc0ac8a88d2695ecfbb4d911984e50d49",16),
 ap_uint<128>("0x173a0bb9d6d393304d811c1c851ef8ee",16),
 ap_uint<128>("0x263d8a1053050a9e38a71e228ed87012",16),
 ap_uint<128>("0x22d1ca2b675508e101d98366c5ed1c4d",16),
 ap_uint<128>("0x13cc9cd238866c0658157db93586add1",16),
 ap_uint<128>("0x7368f41f1aaf6174b3798e8ce90f92eb",16),
 ap_uint<128>("0xebde8dab636cdc71d4852e941ccd8081",16),
 ap_uint<128>("0xd2de28859a34f2490a34e7751a809cba",16),
 ap_uint<128>("0xf501d561eed6a6749aa52bfd3bfd3d6b",16),
 ap_uint<128>("0x6445e4644885f5440f442218fd3bb334",16),
 ap_uint<128>("0xd4839b57a52b2a38ef1bb0b32ef34f8e",16),
 ap_uint<128>("0x9c22498babd3379aa175712594bf84f1",16),
 ap_uint<128>("0x8c36904e9e524d1ac1062317206bd423",16),
 ap_uint<128>("0x28a36938ef01591344b701d05ab26c8a",16),
 ap_uint<128>("0xcd5aebc7d9206c9efce0efb1795fa5a0",16),
 ap_uint<128>("0x2602b13cb12886906949295de021bbd6",16),
 ap_uint<128>("0x9e48f4aa99246df1e9ec5e870e6bdbb6",16),
 ap_uint<128>("0xa593449295991c5a67b6a02b65fa39ee",16),
 ap_uint<128>("0x067be26ce385f3dc0b4c68bea9c3148e",16),
 ap_uint<128>("0xe4698322794534cbc36c0d45379ac7ab",16),
 ap_uint<128>("0x8432d2a13d561b07b8bbb61fcf60e03d",16),
 ap_uint<128>("0xbac52f1d6c0eef12361647acdf9b74fd",16),
 ap_uint<128>("0x775df814e5e60f827b5c089d9f8fbedc",16),
 ap_uint<128>("0xb8873e28c67dab2b2545ada8694f9d6f",16),
 ap_uint<128>("0xcad7337b50321a186a822def0275065e",16),
 ap_uint<128>("0x6e16a70bf3ce9dbac079726c00980a81",16),
 ap_uint<128>("0x3db4db14dc37c17b2265b70d2bb33327",16),
 ap_uint<128>("0x81d58b09e5f88e8f4fcb26dfe3910ad5",16),
 ap_uint<128>("0x7d9491d2915066afea64a8a6809c1b7d",16),
 ap_uint<128>("0x6a965af53e389a3722ba75d88a3bb53f",16),
 ap_uint<128>("0x46c826e9922075fa3114842b16e48144",16),
 ap_uint<128>("0x34c285acf9ea35d717b4870d55b41819",16),
 ap_uint<128>("0x803e495e450cf97dc1a2b6693a506d41",16),
 ap_uint<128>("0x3c67703dfae1c8861be480212e1dbe38",16),
 ap_uint<128>("0x6f5ec0769936066a41edf039b20f3ef4",16),
 ap_uint<128>("0x762c8232244d055de9ba2ba3f86c8e5b",16),
 ap_uint<128>("0x67b13dd7f07ee2a5236a216be0ae3c78",16),
 ap_uint<128>("0xdbb1e99458f1eca812ea4f28180ac199",16),
 ap_uint<128>("0xca88811e9b9d44288edb635ddfa7a2a9",16),
 ap_uint<128>("0x760284f5b9a2c74930caf44652480520",16),
 ap_uint<128>("0x8780dc54d834adcc18130355a16fd2f4",16),
 ap_uint<128>("0x60f931f224d3a19e06fdd535279a1db5",16),
 ap_uint<128>("0xb8b4b79fe6b3aa400badd38e83d53ad4",16),
 ap_uint<128>("0x7ede2e3ea3a48e1358a9d60c339c0e4a",16),
 ap_uint<128>("0xd9c3fcdc1963860563141a15aebee71e",16),
 ap_uint<128>("0x8f8883f8e15e303bf7d13f92fd2d9f81",16),
 ap_uint<128>("0x3478abdd18e27d82fdb5874c00a61958",16),
 ap_uint<128>("0x01d9e83388201a49ce3776e1d5648564",16),
 ap_uint<128>("0x7da93853f304c2a2325ae9d3f272d647",16),
 ap_uint<128>("0xe53bd91d58e6674fc27dfa7aae3d39a7",16),
 ap_uint<128>("0xbb8288cee358e0d3310184c271db549c",16),
 ap_uint<128>("0x794d20ef61fb220161e103f38735325a",16),
 ap_uint<128>("0xf1421f6ed91a749da13b44d82b696c99",16),
 ap_uint<128>("0xca3bdb2db3fbeeab1a91f1cd3948a3b5",16),
 ap_uint<128>("0x0d78698f19fbc59b7113880e0452ef35",16),
 ap_uint<128>("0x7c0139910142f24028787e6c0ad25bb5",16),
 ap_uint<128>("0xb9ebdebe6214196769bfeb2a3afd03ce",16),
 ap_uint<128>("0x5a954354e0efb3347194a99e97ec0263",16),
 ap_uint<128>("0xe017eea766cd60513f43a9db8108ccea",16),
 ap_uint<128>("0x411a727edb07db7224506ca736fc70ce",16),
 ap_uint<128>("0x986355d9b33210048cebd4c5d3b9f724",16),
 ap_uint<128>("0x2104f6ccab3d534c42c3b1f713402848",16),
 ap_uint<128>("0xe1a19f7f3c43ea0fbd1b87eb87600aab",16),
 ap_uint<128>("0x45010a15077e10057c05b738c98089a2",16),
 ap_uint<128>("0x832c219fdf7800ec3f437c3f2bc5b7b8",16),
 ap_uint<128>("0x71f66f462422a1155fbc8d8269c78c85",16),
 ap_uint<128>("0xabdea8ee76101535b8c693ccc7d8edfd",16),
 ap_uint<128>("0x20ba32a072e90a504516417382f1c06e",16),
 ap_uint<128>("0x0ca938e76db61720d04d53e8adea0a7d",16),
 ap_uint<128>("0x6567d12b8a67a2178278b50ae014b002",16),
 ap_uint<128>("0xfa866f5641fb5fc9cefa7f6262eb44d0",16),
 ap_uint<128>("0x1f640147e1bd03d4ec82f53e99ef36a4",16),
 ap_uint<128>("0x0cbb286fa6d51b99720306055a90f0ce",16),
 ap_uint<128>("0x6ef2e10ab33c73fa370c3acb90d65830",16),
 ap_uint<128>("0x2786bde81467d0ea7f03f326119c69d7",16),
 ap_uint<128>("0xe6a66f29647bbd13187cac8a91548b5b",16),
 ap_uint<128>("0x9a5f63c8f2f5e87e3be685a285ee26fb",16),
 ap_uint<128>("0xb90a52bb4784595e29c0dc9427857b14",16),
 ap_uint<128>("0x4bfab91f4a50017ed93c4147a2efb256",16),
 ap_uint<128>("0x210d11fa3858947cfd2dd9385e1947c1",16),
 ap_uint<128>("0xcb575bd2d4a1e1ae6f7d649a80771ed1",16),
 ap_uint<128>("0x216b7bc8fd7a9b8ecfc802e997f1f61e",16),
 ap_uint<128>("0xc5cbf5a5566e1af140dab002522cc5b7",16),
 ap_uint<128>("0x351009b97c411cdf43b52bdcbce181b5",16),
 ap_uint<128>("0xab7bd52518744c5d97e99fd0be675df5",16),
 ap_uint<128>("0x19966e722f9d8a73a2641c6e272946b8",16),
 ap_uint<128>("0x834d095472361f62a299de45e1eea4c1",16),
 ap_uint<128>("0xf5cf74e2dcdbdc65ccdb4dfa8aa6df64",16),
 ap_uint<128>("0xcb4b600cd38b9f9ff9b2b784e93c8f0f",16),
 ap_uint<128>("0x1a609af53568d2829ed2442f82672c25",16),
 ap_uint<128>("0xb58b1609c1da0fd56b134b2e52d567ed",16),
 ap_uint<128>("0xd1c3757959156a70a18d975d5d864a60",16),
 ap_uint<128>("0xed086b9557dcbe1a49d7a0d11083705f",16),
 ap_uint<128>("0x403b282394c9e3a895b863b5f63101f2",16),
 ap_uint<128>("0xb85eb95eb21ce0f5b5247a6ed3dc9018",16),
 ap_uint<128>("0x6f03fa23a112464a290c41aeb9b50d59",16),
 ap_uint<128>("0x889e1d77bc931b25a3d7116fd90bef04",16),
 ap_uint<128>("0x213f9cba20e916cc6e8d0429b4d9251e",16),
 ap_uint<128>("0xd6ffd261559756493fe11792cbb8a1e1",16),
 ap_uint<128>("0xd993e2e1d65f0e2bc5c2cdd35c63c334",16),
 ap_uint<128>("0xa68283089a445b972c7d6e4b541fa320",16),
 ap_uint<128>("0x9a0c50b3849475382eacfa3a43e9c151",16),
 ap_uint<128>("0x38ddda8771c39ac2e2dcf35395598027",16),
 ap_uint<128>("0x7a563729624840a8b9afc5e749d3a79e",16),
 ap_uint<128>("0x531ca61954da45c5bca194310766bd51",16),
 ap_uint<128>("0x3bfcafb1e5ef98d4822c625f171226f3",16),
 ap_uint<128>("0x184645ebc017d3c05110d648dd73e917",16),
 ap_uint<128>("0x49c8b3613de23ed6e97df267592632c6",16),
 ap_uint<128>("0x1be43a64b89ed52c0d1c34f6ddd3308a",16),
 ap_uint<128>("0x967d211c45003aae7a34c99ea6a827bf",16),
 ap_uint<128>("0xb624aa358f29922e9af131222199a242",16),
 ap_uint<128>("0x3dec1c535675307d9d723e0e5052f30b",16),
 ap_uint<128>("0xdae5b1b99eb2b3d473671cf71ac29a30",16),
 ap_uint<128>("0xdd65ff0c5fdfa26b469746e4574543c3",16),
 ap_uint<128>("0xd4a82839349fdf040f1fb589dad5eadd",16),
 ap_uint<128>("0x719c5f34bbc42e5b860caeae313de166",16),
 ap_uint<128>("0x0e20d18c4e47bc49ace32c6b74ae4c8d",16),
 ap_uint<128>("0x7b27fa5fbf306319ca2d0db9f51b1841",16),
 ap_uint<128>("0xb40965a8ce25f0d76896e1130aa0926c",16),
 ap_uint<128>("0xd2dc4a719e267fd0536939d60462e593",16),
 ap_uint<128>("0x1900815ac2d3c90d469bf3727d9a8248",16),
 ap_uint<128>("0x2f9f1bf8561dd81856bece345790614b",16),
 ap_uint<128>("0x3c3f8bfd5751da11b3bb4729a20fe422",16),
 ap_uint<128>("0xed82b096f5532fd97c75cf8f529ee09f",16),
 ap_uint<128>("0x1812aff9be82283469d862a19d271584",16),
 ap_uint<128>("0xe4e5454deadcb3f66bba380323d33bd9",16),
 ap_uint<128>("0x65810e6a16954105265d73e6bf211768",16),
 ap_uint<128>("0xdaddd311c8e4ca8bfafccf4918f5db22",16),
 ap_uint<128>("0x986f2e905787a128fc66e584ca9faf4b",16),
 ap_uint<128>("0x9094ca7d0f8817ec0d6d5651f9fdd96b",16),
 ap_uint<128>("0xbd6139789638cb66e34c10f061a4592e",16),
 ap_uint<128>("0x1040471545d45a25a3bf51ebf3eb9c51",16),
 ap_uint<128>("0x7425a977abd3dd8f7f23d9c5c0f29faf",16),
 ap_uint<128>("0x791ebdad225754e3377784257214c6a4",16),
 ap_uint<128>("0x1a8423cf1b31abf4ab8d63c14c1f2945",16),
 ap_uint<128>("0x3ad868cc07adcd1d57421c29b38a0c3d",16),
 ap_uint<128>("0x29bcf34e92be394de2e33b2b32e67244",16),
 ap_uint<128>("0x74576a5317dc9bebef30f892851d6435",16),
 ap_uint<128>("0x1afb71eed3b87ec5c806b158571722ea",16),
 ap_uint<128>("0x400a89826f3a175ac83788e6a0ee7237",16),
 ap_uint<128>("0x976fe87fd931df399c35c1578b15e60e",16),
 ap_uint<128>("0xfdb6db0cabafc7a64dcc9f437b856188",16),
 ap_uint<128>("0xb24fe828d72fb4dc1ef8d7c1c55ffac1",16),
 ap_uint<128>("0x1742e473bc01e34614fa3129f114e5d9",16),
 ap_uint<128>("0x22b82fb4509cc3aedb300e10dca7bbc9",16),
 ap_uint<128>("0xf7f45ca57948a7b64643d05fc6adfde1",16),
 ap_uint<128>("0xa716a33cb3e2d41faf26dcb16529c279",16),
 ap_uint<128>("0x878b0de5e4996e6187a572fd52867ca7",16),
 ap_uint<128>("0x54262c0d100f9c0ad6d9573ca5433736",16),
 ap_uint<128>("0x9b6e4abae6fc3b55421e4059a6cf5818",16),
 ap_uint<128>("0x0dcd97abad118b435ef99adb5e60cb75",16),
 ap_uint<128>("0xf26ae2f6b362151977fef6f3f09e2b48",16),
 ap_uint<128>("0xcb79587c261526f29a3f7f21b3f1ed78",16),
 ap_uint<128>("0x1f49649a9bfc991c4a524f21bcdea8f6",16),
 ap_uint<128>("0x7b3f77b7ebf6b9f17f5347b3d9b957ce",16),
 ap_uint<128>("0xee4ae4a9a6debbeec6a1a340c112ad10",16),
 ap_uint<128>("0xff97f3f369be957906051636d8f50469",16),
 ap_uint<128>("0xda346d6e1e6e328276e385abfd1d20c8",16),
 ap_uint<128>("0x87697e93995dcee67f28df63a317a6a3",16),
 ap_uint<128>("0xa9f66b3fa0a8ac396ad1f1e1d2342e06",16),
 ap_uint<128>("0x76e755426561ff9f31453d30082bcd2a",16),
 ap_uint<128>("0xd405ccdd52b0089a620e24770be1a60a",16),
 ap_uint<128>("0x31a0fd1ceba849ff9896964ffdfd41f4",16),
 ap_uint<128>("0xc42804e027c6e9beb8178b3367eae41e",16),
 ap_uint<128>("0x7a8dfa99a1d8b79f501343f2a103561b",16),
 ap_uint<128>("0xe2b3836e6666d6ed8443eb09fb1c6dc7",16),
 ap_uint<128>("0xa2034cbcb99f875682ee063f97c29f37",16),
 ap_uint<128>("0x5d083214599daf5831ed8aae4e0fa496",16),
 ap_uint<128>("0xe33744e76c37ed5003555e15d32dd0ac",16),
 ap_uint<128>("0x732fd6913b8eded1636653e2477d7a78",16),
 ap_uint<128>("0x0b9c3abb99c0222ae25f2942e24e0329",16),
 ap_uint<128>("0xf3f92d805d6b478a92cecd376a85170f",16),
 ap_uint<128>("0xfbafdd5c0456d8da75c3ddfc19ec6ea7",16),
 ap_uint<128>("0x0739d9d1a67a46016778d7bae9f91bd2",16),
 ap_uint<128>("0x391426d70d0d54800bc005a101c5c73b",16),
 ap_uint<128>("0x14f4f7b0ce9abbdbfe4e6c377b61ac6a",16),
 ap_uint<128>("0x7519c1d0baa06ff9ac7dbcafe35488b6",16),
 ap_uint<128>("0x10ef63f62f334feea048bdf378ef473a",16),
 ap_uint<128>("0xc2d23af93c95270e81e81f26949dee1f",16),
 ap_uint<128>("0xa23fe4e663cda28db36a60c16c7943a1",16),
 ap_uint<128>("0x6f936ee7623f916a3f39277fb1a8da5e",16),
 ap_uint<128>("0x6ff104bf4af139f78cf41957ddab1b0a",16),
 ap_uint<128>("0xa51c09968a60238d9738173d2be4b8a1",16),
 ap_uint<128>("0x5b9ee57b64a4d5ee2fe305a57b47dff0",16),
 ap_uint<128>("0x3d894cf9a4d0897b09c2f9aa4bb67549",16),
 ap_uint<128>("0xf8eddd14c3fb4d69b264bdd0023a2d4b",16),
 ap_uint<128>("0x507455d69533a9fb5c6d720b598a149d",16),
 ap_uint<128>("0x2bc79cc1bbe3d498b8b08876d6579976",16),
 ap_uint<128>("0x04bf90d2293f78e1ae21bd9f00f09465",16),
 ap_uint<128>("0xda8c4ae9095f910924b9fb82d09c13df",16),
 ap_uint<128>("0x0aee83a8813e8603af29157ea616647e",16),
 ap_uint<128>("0x81592af8fbbfcbb237d276980d467c9e",16),
 ap_uint<128>("0xf42ec75c4f549bf4ed3697a56546b3bb",16),
 ap_uint<128>("0xd5475f3aafb00d87cc4fcc93beb971fc",16),
 ap_uint<128>("0x556ceb11e452381b50081e3f19cc5bd9",16),
 ap_uint<128>("0x2fd4c279196852821371de035a36feef",16),
 ap_uint<128>("0xa348b0e579aa26daa4310fa9ac94d1af",16),
 ap_uint<128>("0xfaa96e86ad00d381302e1d8f435af4e1",16),
 ap_uint<128>("0x3205f8ffd158392368e2a3a345e775f7",16),
 ap_uint<128>("0xe6cfdf5fe2ea7122d126f17ab0d09596",16),
 ap_uint<128>("0x85a32d0f0144cbbe0e7a249287309aaa",16),
 ap_uint<128>("0xfbb73c037e16b28b49f92c3abe8d041d",16),
 ap_uint<128>("0xd9901aa2b20e81dd3ea6a0ba64e9a821",16),
 ap_uint<128>("0x6cd25fe5e78fdb43daff03763366fe51",16),
 ap_uint<128>("0x445859f561ade88939c716e10f0b34a9",16),
 ap_uint<128>("0xbb1f7acce6b85ad0b280d27dd730766e",16),
 ap_uint<128>("0x218d189eae2960eaa4a0fc7e0a14bdc1",16),
 ap_uint<128>("0xca064891b9f6fc1fdd7fe062994a181f",16),
 ap_uint<128>("0x8f7bf76d8614c5c362035770f93302b5",16),
 ap_uint<128>("0xe9ff9c6e1f95ecbe28daa0c491228a67",16),
 ap_uint<128>("0x021496f9abf5a1db67f60b65f8b37973",16),
 ap_uint<128>("0xc500b41982f7085ecfc10796341b28ff",16),
 ap_uint<128>("0x860c81c87f6a1d6cacd790bffe441a02",16),
 ap_uint<128>("0x39c8819ec0154c4115ac75bcff246c18",16),
 ap_uint<128>("0xf7267bcef8dd124e286a2cc16877e6dd",16),
 ap_uint<128>("0xd506c5df89dfb8765cb0997b341a24a2",16),
 ap_uint<128>("0x7d26f3c9eecffecf55a4ed9c3a529590",16),
 ap_uint<128>("0xe4df91e78d4f82fd9ce28197cb7f1a6a",16),
 ap_uint<128>("0x5692bd43677579ad1ba16f3080083196",16),
 ap_uint<128>("0x114fdc0f00bf12710eb4ce4e9f168ea0",16),
 ap_uint<128>("0x402b0f46c6734f548a60caefd2d2f8bb",16),
 ap_uint<128>("0x97e61b0b7929eea4b2f64a4de4436711",16),
 ap_uint<128>("0x14b7023126c0c8d6e4ba7f45ea3915af",16),
 ap_uint<128>("0x39822b6819f2934bc481d5fc1188520b",16),
 ap_uint<128>("0x69875dc61a68530604954d58241b6279",16),
 ap_uint<128>("0x2a9a06a0fa415a41cdf5f2de7c4fc0fa",16),
 ap_uint<128>("0x6412fb35f387936eee90f72d62ac43d4",16),
 ap_uint<128>("0x07c02587ad46dafe9b2338aa1925651c",16),
 ap_uint<128>("0xfceed5cf1b5c5034f2f8fb8b3fdfeeed",16),
 ap_uint<128>("0x534d51ff70f0898ef2fafbddd538f9fe",16),
 ap_uint<128>("0xfdbca0bba7fa8752547bbf7f70fe8c58",16),
 ap_uint<128>("0x1b8351d83bb302f4987fe3ba81fb8391",16),
 ap_uint<128>("0x2d509c96e8217925c3d90e67043df3ce",16),
 ap_uint<128>("0x1968526de315a2496d26194efce608a1",16),
 ap_uint<128>("0xd302fedbc28f3a81b4033cdebcd82c15",16),
 ap_uint<128>("0xf7e26d38e23bc5a017ffb78da0eec383",16),
 ap_uint<128>("0x4c98bd4e4a00252d345e7b547667b78d",16),
 ap_uint<128>("0xbed18cabe0d632aa99ac707a78a05a35",16),
 ap_uint<128>("0x7565fb0042145b6068437c8d669daa7f",16),
 ap_uint<128>("0x771b3018bb0c077025e583f7680f17a9",16),
 ap_uint<128>("0xd89773f78155059603a654f1c71fba25",16),
 ap_uint<128>("0xae4847c105121aba71a085844fc905c3",16),
 ap_uint<128>("0x8e035c7f4f9e844a096257fae96b88cb",16),
 ap_uint<128>("0x7993fbc1784367cd4228ba16372d3b31",16),
 ap_uint<128>("0x6ce4499ca945b36fbf02c5d7308be19b",16),
 ap_uint<128>("0x7c1f68c40846ee0ce0db0666e7448e7c",16),
 ap_uint<128>("0x62e8d2615c0bff77850f3a228a3fd6a9",16),
 ap_uint<128>("0xe743d5ea3744365a700c596761236d03",16),
 ap_uint<128>("0xf410b3ee3eba47e917149d09f3fb5074",16),
 ap_uint<128>("0xc455882b2a86b51a752a847a4cb13dd7",16),
 ap_uint<128>("0xe6a814834b7d57da27d2858d681dae3e",16),
 ap_uint<128>("0x3f61af5ede02d35ca503873df5838861",16),
 ap_uint<128>("0x199eb5e76f92ca4a7631f33df5243548",16),
 ap_uint<128>("0x1e56ae41cde5af98de6b0d6ab5e87a32",16),
 ap_uint<128>("0x141bcb706402b3d71aef13ea21b2e188",16),
 ap_uint<128>("0x82e96cf98ce13dd82f8ec615e8139ccc",16),
 ap_uint<128>("0x04bafa4c0822842b48690637a4e83848",16),
 ap_uint<128>("0x1782e20c8e99f32f48ec86a73b9a9c18",16),
 ap_uint<128>("0x044d92c57f3a4d346dfd94c8f2ccc8b3",16),
 ap_uint<128>("0xbde0f5743152ec9da48a82b42e7f97cc",16),
 ap_uint<128>("0x77c66a110030fe28e21069bcf8639aeb",16),
 ap_uint<128>("0x458bf5ccaf4a68e58b6614885fa56df4",16),
 ap_uint<128>("0x23e980f68f1672cd2b7845befe78d256",16),
 ap_uint<128>("0x6d3d86e3296e889bb23133f7f274687a",16),
 ap_uint<128>("0xb49e50d4163f540ead9fb6efaf11a0f3",16),
 ap_uint<128>("0xc32199cca40ae5b6b97ca3241ae609a7",16),
 ap_uint<128>("0x45eda6bcd912a298dd4f7d9354c956e8",16),
 ap_uint<128>("0xdfc157913327376df0ac0afc62bf8355",16),
 ap_uint<128>("0xb5b5dcf064e0540d341ebf95e826ba17",16),
 ap_uint<128>("0xe16a0a855a00bfa2e006bb19b3b81000",16),
 ap_uint<128>("0xeb372f02b235a302ccef7446a48d41d3",16),
 ap_uint<128>("0x6c2f1eaecace2d61b376dbdb9399bef9",16),
 ap_uint<128>("0xffb65b19aa5900351225cd155249fe62",16),
 ap_uint<128>("0xf4bfd5927662bcecece5723340fb1c89",16),
 ap_uint<128>("0x5312b19addd8f0eb3f8b852d730d3e70",16),
 ap_uint<128>("0x09c3a515492f28620dc069dc288122cb",16),
 ap_uint<128>("0x9fd4d91428be89c15233e15c714b9e39",16),
 ap_uint<128>("0x380a3de074876fbec9a925a732e8edc7",16),
 ap_uint<128>("0xba6d275f01bbf13bf3bed2473d1c25df",16),
 ap_uint<128>("0x3c6589f1ea5043e720c769dbeaea6d50",16),
 ap_uint<128>("0x881cb76d6c7500d77a3d2c315754fd3f",16),
 ap_uint<128>("0xdd21e7c7a5abefd7b46c56021b2e7d5e",16),
 ap_uint<128>("0x42794623633d6ae9c5c4742045aba23a",16),
 ap_uint<128>("0x016df7ff3364e9abcbc84f63655d76b3",16),
 ap_uint<128>("0xe2071d496b1ea9e4f081434ad42cc14c",16),
 ap_uint<128>("0x116cdc7db230d0ae000ba2dac03cd758",16),
 ap_uint<128>("0x891144de5e026665359e27ae685eae7e",16),
 ap_uint<128>("0xb4082133faab0977ee33e8a325b22b2a",16),
 ap_uint<128>("0xd5fde8db32552c88dbb6f7cfa3805061",16),
 ap_uint<128>("0xbd3a2d39ecf47ffe448b1cc5d55f27b1",16),
 ap_uint<128>("0xe2ed34d6a28c94e18ae8b8c4b0f89579",16),
 ap_uint<128>("0xae6d225d2dc9d0843a7b8179090de92f",16),
 ap_uint<128>("0x0cac603c03169f68916a0faafe0f20ec",16),
 ap_uint<128>("0x0fc4c6060fed293df8efe5340123a597",16),
 ap_uint<128>("0x8aa25ea1f15560e85d6890b8cfcdc2dc",16),
 ap_uint<128>("0x209d76d8155cbc68f9615b71977249e2",16),
 ap_uint<128>("0x2f00d44716d05bd1741108e5c977ae00",16),
 ap_uint<128>("0x6dce6887745d0eb441823a42757ebffe",16),
 ap_uint<128>("0x49eade32315ecd10ca428f7f9cfeb762",16),
 ap_uint<128>("0xd1752aa80718b50605ed75ee62363cc9",16),
 ap_uint<128>("0xc2b7f83837313198cf93c7a59a5b479d",16),
 ap_uint<128>("0x01e727a820ed4a515f0c9ae62a806ffb",16),
 ap_uint<128>("0x535d4d1b3f06cb70ffdd463f0a49090c",16),
 ap_uint<128>("0x441f6aa19af3c2864f3726b347609a44",16),
 ap_uint<128>("0x2e6157126df478cbbe29d9c3fc707b1c",16),
 ap_uint<128>("0xf2f5fd726729b5fb1d995eaf2d7dc0d4",16),
 ap_uint<128>("0xf99fd481cf55578a166d440956137321",16),
 ap_uint<128>("0x0e2ea7f0b1cd42dc7ad846d79b29b22c",16),
 ap_uint<128>("0xeac6b9f48f95e0a15e5125d309fcc900",16),
 ap_uint<128>("0x7d859c7f37e7dd70793054147751a584",16),
 ap_uint<128>("0x6b6c5ff8ffd75c6af0e638195d40be66",16),
 ap_uint<128>("0x733be2dd80005b04c70fefbfe4620c92",16),
 ap_uint<128>("0x94d49d862526c65a1420ab3f808429a8",16),
 ap_uint<128>("0x6782d460c1a1b1dd11f1c5b27479796d",16),
 ap_uint<128>("0xdfaa66a20b12c929491409a74bda2a3d",16),
 ap_uint<128>("0xa99be3fc66fde9ba0f5646d929b49ae9",16),
 ap_uint<128>("0x0ffa366fe472fdf6202c791c59b284f9",16),
 ap_uint<128>("0xf4734f7ce9207d029ca77b376b1f0f1e",16),
 ap_uint<128>("0x59279d90892a5d281a1454506149901c",16),
 ap_uint<128>("0xb61bfc794e1734491f6198dbfa7e91aa",16),
 ap_uint<128>("0xbe05a8ec836059fa94946baf2c9130e1",16),
 ap_uint<128>("0x4c9f2feec8e1008fe1419dc4b8f85852",16),
 ap_uint<128>("0x22e0f0ecf36d720c2e129410de7d5796",16),
 ap_uint<128>("0xab7a784130669053d5b103981850edc9",16),
 ap_uint<128>("0x1e25eb275f8ca3559e9bfb3495ce2924",16),
 ap_uint<128>("0xb2de63a71a446cba94fac823af957ec6",16),
 ap_uint<128>("0x1f80f27016dab948566703b7b71307e3",16),
 ap_uint<128>("0x19fd6020560262fd8cdbadfc1301aed0",16),
 ap_uint<128>("0x9c21e6bc6f5a2c650ffbc0b6aa42e80d",16),
 ap_uint<128>("0x5483be914cf71ff7e550c2369bab8104",16),
 ap_uint<128>("0x96b55e0f88593b54a5036a357ea9290e",16),
 ap_uint<128>("0x4d4cf7e97cd2e36ae54e9f0f936bfc53",16),
 ap_uint<128>("0x284290b46c11e7fba28db5ccc85959ad",16),
 ap_uint<128>("0x6f698f0c7439d7af3c9ed71f8fdad7d3",16),
 ap_uint<128>("0xe5c6dd55d1ea8a78972de91936dcd535",16),
 ap_uint<128>("0x07151a7986c81190db46345d7e3ec0aa",16),
 ap_uint<128>("0x4abb2d89eb78d4aef42cc9e29a62191e",16),
 ap_uint<128>("0xda4ab52f7e001b651eb9295813eaef10",16),
 ap_uint<128>("0xe7437c14a614c407cf81b342be1bc595",16),
 ap_uint<128>("0xda7f8a2c03458c3f0412529c41d0bdff",16),
 ap_uint<128>("0xd8295d6bebe2035513f0bf68bb0095f4",16),
 ap_uint<128>("0x76a59b7e07e7a21e7de1e3499ac61a71",16),
 ap_uint<128>("0x35d014dfd874b578f959da90906479aa",16),
 ap_uint<128>("0x922349db26dcb184bbd974c985fe1164",16),
 ap_uint<128>("0x2dd1a16e80a6886fb18bc1d66f1ce75f",16),
 ap_uint<128>("0x94a4454ac7524407b26dd2cdab893654",16),
 ap_uint<128>("0x17fe1eebbfa1586a05810db6dbcd2ade",16),
 ap_uint<128>("0x020a95928edb1566c707c8a742531c92",16),
 ap_uint<128>("0x9eea9ab60216f9642b1a4ba4fe6bacd6",16),
 ap_uint<128>("0xee58a7255f6a0c2f66d51c7c436526f3",16),
 ap_uint<128>("0xe2408bb968169304e1104aac73b3f075",16),
 ap_uint<128>("0xa7a37aaebb52dd376e439891597e8c15",16),
 ap_uint<128>("0x22d2bdf1c553c828d316a6643b873ffa",16),
 ap_uint<128>("0xf818b786c3df23113d2d17de57311a1a",16),
 ap_uint<128>("0x9a808c9b566b8c929760af7dd896b1f1",16),
 ap_uint<128>("0xc708c676eb620dedb1fe6d2c256bf13d",16),
 ap_uint<128>("0x274379d84eb79ea31f68c0f2b0d21f17",16),
 ap_uint<128>("0x7e00fbba6a8247b4946d8591ef22e552",16),
 ap_uint<128>("0x7c4a3e62c202d9e26b33cda6e57298a6",16),
 ap_uint<128>("0x6634edaf2ddbcfe71906f78b0dad261a",16),
 ap_uint<128>("0xc2a62a37e137f96708b67faea9747500",16),
 ap_uint<128>("0x383a90b77a1b490228b5bcf6eb788c3a",16),
 ap_uint<128>("0xbbf28495339328732e5f479f02e9c6c6",16),
 ap_uint<128>("0x2c77b26f7337e0b4e5601b04f6ffb76b",16),
 ap_uint<128>("0xb9c7969201c52483b131a41047b73ef3",16),
 ap_uint<128>("0x4c46e0a5eaa150c4c31908dfc4cce6a5",16),
 ap_uint<128>("0xf798e16447a00ecaee8e8ef60578b4c8",16),
 ap_uint<128>("0xf6c1187a5bd65db53f364cec13e578c2",16),
 ap_uint<128>("0x76b9befc2bfbafe930f1911f1a9c1b66",16),
 ap_uint<128>("0xa44925dbdb340a9cf667898c1842762c",16),
 ap_uint<128>("0xfac13d358d38ea4a883768dc961d1b94",16),
 ap_uint<128>("0xde7b30b5909d66318f751f8dccc17dd8",16),
 ap_uint<128>("0x48f8afa49dbc224c8e47941521e68735",16),
 ap_uint<128>("0xecc384eae70086a49fe8a2c3467e4295",16),
 ap_uint<128>("0xbb21c2878fb368402536c89689bce563",16),
 ap_uint<128>("0xb6b5db1749e1ddaf579b93fe5a42d88e",16),
 ap_uint<128>("0xd445e73f6ca0c35caf8b4d30e13d3704",16),
 ap_uint<128>("0x435a8c03e878d47d07ce07ef513a623d",16),
 ap_uint<128>("0x85e398dbe8e47f4bfa5d7ec75e52276f",16),
 ap_uint<128>("0x91f036c9315ad441a5ece7b518b89b68",16),
 ap_uint<128>("0x2afe2e85b7e3a6c370b317280fee94af",16),
 ap_uint<128>("0xa4d1a848bf322c52873ea91628f971ec",16),
 ap_uint<128>("0x71eeb8f510f054eac15c42c388f00f12",16),
 ap_uint<128>("0xa956c90decb1f1a4e697ea253d41d4d7",16),
 ap_uint<128>("0xa44f3eb21c743317c9763cfa382340b2",16),
 ap_uint<128>("0x6e02066f0233b8725a4a15ffa2db6793",16),
 ap_uint<128>("0x7eb207c775dd6ed0086980819517be48",16),
 ap_uint<128>("0x6acc8f9954370ba76baceb3227dd8bc2",16),
 ap_uint<128>("0xc320e1403689cd1111a1981ade13ba7c",16),
 ap_uint<128>("0x36f9078c4e4ea3b6198dbe5a6cd81c2e",16),
 ap_uint<128>("0x5c840f5ff8649626f6b4d03cb71dca5c",16),
 ap_uint<128>("0x6dde356c720c21887023801e649ed661",16),
 ap_uint<128>("0x627f7ff680b4b58262cce41a9f8a51fc",16),
 ap_uint<128>("0x416bbb0bc04b59e20c01ba0361fb99ae",16),
 ap_uint<128>("0x737a0a02f57fce68c3815406305086fc",16),
 ap_uint<128>("0x1523151b4f57ea7863a9627da325f631",16),
 ap_uint<128>("0x058a7f7291afa2fed5b1e8977786502e",16),
 ap_uint<128>("0xec990cab54074dbc3f4604b0f627fa00",16),
 ap_uint<128>("0xbe573e2fb3082352b0733bc8117afb98",16),
 ap_uint<128>("0xcf0c38d96baafa27febd2b3efca34738",16),
 ap_uint<128>("0xf92c017d26729d1757b01c955735140b",16),
 ap_uint<128>("0xa5fb96ad1df92bff11618c235d956cc2",16),
 ap_uint<128>("0x8fcf68c07b0660bd78734b917170443d",16),
 ap_uint<128>("0x43f2e78d9e3acbf8a4272e59a190bb9f",16),
 ap_uint<128>("0x8076d8b04a64a1ea679c3360fb753fc6",16),
 ap_uint<128>("0xae5d31a48cd929c38d00c7a65214a5a9",16),
 ap_uint<128>("0xd80e6ae352576429254cd82b5ee780b0",16),
 ap_uint<128>("0xc51d560d71d2b7b1b4b0ed23de38f6ac",16),
 ap_uint<128>("0x539baaa03891fcc2c37526a1c21fb2f2",16),
 ap_uint<128>("0x7c2538e3e6fd860be5a948a1a140a918",16),
 ap_uint<128>("0xfa96370c5b2a1b326baf4499634d6d8c",16),
 ap_uint<128>("0x8db47b623bb31824ce78f60e2ee73d49",16),
 ap_uint<128>("0xebea1a560d74eb0cc4a1fd5e25e47dac",16),
 ap_uint<128>("0xfe40157b145abd1224cd2ca5ac30f729",16),
 ap_uint<128>("0x43352bd7f24a075033b4bd430e1437b0",16),
 ap_uint<128>("0x1b68314948081fe5c8c88394b75d979b",16),
 ap_uint<128>("0x2a4b3b14b6cfac7fdb32cf07b2b45f88",16),
 ap_uint<128>("0x84397154a1eb2e39e46fdf11044feae7",16),
 ap_uint<128>("0xce9e1d513984441a754828501ddb97b5",16),
 ap_uint<128>("0x8d231695a0fb62c3e56c520ae1644a05",16),
 ap_uint<128>("0x4005c91465d45669e3e1f87c80fdd095",16),
 ap_uint<128>("0xf4b15d48e511e1e4a0b297729abafbcd",16),
 ap_uint<128>("0x13796559f55bff6d7448c4218f64893c",16),
 ap_uint<128>("0x99a4434e2e514d24d1d6e30ef1ec9cfc",16),
 ap_uint<128>("0xae665f5880341cdb7127e34e2b26f158",16),
 ap_uint<128>("0xf813280df314ce3a500b03bab08035a2",16),
 ap_uint<128>("0xf772ff5ad7dbc3566bc31f2e49c00ad6",16),
 ap_uint<128>("0x66126449df18c779a1358ff4050702d1",16),
 ap_uint<128>("0x3ec8d526bbcb71ba3c8faefee2789d28",16),
 ap_uint<128>("0xa9f9fbdcfce706259007032810f1b5ee",16),
 ap_uint<128>("0x65be66ae9969ec60c840b25af0661c70",16),
 ap_uint<128>("0x214976949505cb024297997fd40e730a",16),
 ap_uint<128>("0x6e535ae74e2eabdef35a143720852bc5",16),
 ap_uint<128>("0xe635e235ce31bdcd0ed9df8ff126385f",16),
 ap_uint<128>("0x9fa3e191ed3615553a219d9cd9796c32",16),
 ap_uint<128>("0x9118679cfa47ea11fcdff183921de7c3",16),
 ap_uint<128>("0x98bbcea0df414f335f6be83fc9c46316",16),
 ap_uint<128>("0x06f04ee2b344c2cbea6b3611704e556b",16),
 ap_uint<128>("0x1adad37c496f4be71aca24ac8f6baede",16),
 ap_uint<128>("0xbab5ad21325e5f3f4f5862f4aca3322e",16),
 ap_uint<128>("0xac8ac2e10bc8a8744b2c48d7cf0f6269",16),
 ap_uint<128>("0xce7eeb1f1b49d937ef66b217d2eef738",16),
 ap_uint<128>("0xa4e37cc3547643136773fa8b8e5fb3a0",16),
 ap_uint<128>("0xbb7df3548ee46182348c4a955103a194",16),
 ap_uint<128>("0x5d98fbc0d5078937947bb6eb479c2028",16),
 ap_uint<128>("0x66d0305983ef03b6e4d1170600cc1d0c",16),
 ap_uint<128>("0x4e892dc20f89d89f4e3a594e37d02655",16),
 ap_uint<128>("0x814d9e4d47a75132cfb74458163432fc",16),
 ap_uint<128>("0x993c839227026b6cda847381ff852d26",16),
 ap_uint<128>("0x59cba1a2148303b49c905b8858a4e78b",16),
 ap_uint<128>("0x705934c99661a1204b01fc3f1540429f",16),
 ap_uint<128>("0x28af96d476c1b7b40fab95082c4e4502",16),
 ap_uint<128>("0x39ca3f6f0f73b45810626330d072f2fb",16),
 ap_uint<128>("0xe2473c07e7837420c108274d1a6b3052",16),
 ap_uint<128>("0x5622fbfa1322baea91e07285e48dbff5",16),
 ap_uint<128>("0x99fa7636f78813731497047922ee9d61",16),
 ap_uint<128>("0xc07aa1134dfc3f82c908dad0d9cb4bc1",16),
 ap_uint<128>("0xd76f882384daab8a18040c11626366c0",16),
 ap_uint<128>("0x3cb77eb1b0b4e8e9b0f29caf1fec3b49",16),
 ap_uint<128>("0x1178d773863f2bbe0d9c55ba9c951c90",16),
 ap_uint<128>("0x245063416a4e0ab5d779526e3c5ea674",16),
 ap_uint<128>("0xccd067dfe2b2d71cf8a7abe78b71fc8a",16),
 ap_uint<128>("0x182ad1047ccbfa09c862a3caed059aae",16),
 ap_uint<128>("0xbba45d167e9bd3e21463330e4f922df5",16),
 ap_uint<128>("0xe6b1075868c43b359d09d9c24b22edc3",16),
 ap_uint<128>("0x9968e78006a6608c31729fbac265d3d1",16),
 ap_uint<128>("0xa2c8f1c07a3fd7de684771698e4a6f69",16),
 ap_uint<128>("0xf99fafd97151a898e22472eed16cf96e",16),
 ap_uint<128>("0xc0a81ce8a3352df53758940eec33537f",16),
 ap_uint<128>("0xcff8ba326b78f835daf31a6b762a3e6b",16),
 ap_uint<128>("0x62f980507dde7ca5300ffc1f1bd2b01d",16),
 ap_uint<128>("0xce0cd1ae278cfc8f0fe089fb6b786a5f",16),
 ap_uint<128>("0x68bfe32172228fdb12504dcafe059176",16),
 ap_uint<128>("0x038f973e6dff547f8fc3bf1220d89a3c",16),
 ap_uint<128>("0x501abcaf0f2a57082c10cb455fe38230",16),
 ap_uint<128>("0x2edf7b872414c1cfa2ba49222ce8a4e4",16),
 ap_uint<128>("0x311ea5676bfe82de177141c514208c79",16),
 ap_uint<128>("0xf241b5b7ba8f930538a195c4e99c139e",16),
 ap_uint<128>("0x3d7678258773fc0eb827cb9795198651",16),
 ap_uint<128>("0xe2570f441ac994df1f407df3e4c59a04",16),
 ap_uint<128>("0x77e5c85998745afdcb23f1f65a232d5a",16),
 ap_uint<128>("0xe0d648b5e3e8f7837278d9c015546554",16),
 ap_uint<128>("0xab7291085c6fe7e6f5185164e72cea4e",16),
 ap_uint<128>("0xf96cf2152e215193c91fbea80567aefe",16),
 ap_uint<128>("0x9c3f5cf27571b997f678a1c2ada65e23",16),
 ap_uint<128>("0x7c218f959812e1728dc027b93c4217a7",16),
 ap_uint<128>("0x1c96a9337e281c42a3e18ba7e9717110",16),
 ap_uint<128>("0x630b8801044b643017b653c661028375",16),
 ap_uint<128>("0x0709dc89425e2ace6ddb7c403b3923a1",16),
 ap_uint<128>("0x2e9b202577d7e51dd6be241e92fc0d63",16),
 ap_uint<128>("0x8c9c527eb31a57a0a420540467c29929",16),
 ap_uint<128>("0xc492e55e787e04d972d77dd58c0b2fd6",16),
 ap_uint<128>("0x463fcad30f9e2c0a79390be0afc001b1",16),
 ap_uint<128>("0xfcbc662fcd988b4952c470f5b3fb944c",16),
 ap_uint<128>("0x8b51043a4462a7295032e40f689f29a4",16),
 ap_uint<128>("0x80761ddf5b7205d4dab3384a8a0dd562",16),
 ap_uint<128>("0xbf5015afd24b99d97dce05da0e17d80f",16),
 ap_uint<128>("0x0e7afb25227c81d4d0a4b42de424101e",16),
 ap_uint<128>("0x46dfb2791808b6e20b500fab29c33edd",16),
 ap_uint<128>("0x5b6e326f2dd4305c16fbc6a22644e1b8",16),
 ap_uint<128>("0x3e969d39f4533e9a2eedf9877c451eab",16),
 ap_uint<128>("0xbac56e05addf136bc4cf1f1eef6d19b8",16),
 ap_uint<128>("0x15d05608738f5e6c96f579b603f68218",16),
 ap_uint<128>("0x75b231efe4a651e0229e40dcfb941199",16),
 ap_uint<128>("0x61ddc4488ab678ffc4d0ad6539a16298",16),
 ap_uint<128>("0x870945a589bef73eb6de7ad88f91a90c",16),
 ap_uint<128>("0x4a014136d6bc1ef33f30f605a53c6388",16),
 ap_uint<128>("0xe988623157399534f1a4830eae0440b2",16),
 ap_uint<128>("0x238881b3cbae0e27d3261f01c4a1a81a",16),
 ap_uint<128>("0xf4dde0a3f1941028a10d48f6cc148ccd",16),
 ap_uint<128>("0x833f85659762bb2361a684e48bf20e3b",16),
 ap_uint<128>("0xb733f9fe512f7790664fbe744d0c2d97",16),
 ap_uint<128>("0x64f030e645c607a9bca2314c872cc585",16),
 ap_uint<128>("0x3fb5491853adacf86bc0c5a8dce2e0e2",16),
 ap_uint<128>("0x7f8dc819140e69473809018ae14b747d",16),
 ap_uint<128>("0x37edeb26d30c43e4312512a7ef9767c8",16),
 ap_uint<128>("0x7625075e3b13e51e9a5b6c8d8856b6c2",16),
 ap_uint<128>("0xd395f9a71fc8b8c43b882f00189ba774",16),
 ap_uint<128>("0xe31609ec809a7f40c639f48bfdbec820",16),
 ap_uint<128>("0xc0e8547e204411db347323ba88160a0a",16),
 ap_uint<128>("0xd3578fe6eda6a6bbea703095ac8f8c1e",16),
 ap_uint<128>("0x7811a2edd39ed4dd4093602fc029e470",16),
 ap_uint<128>("0xa3743602b619430ddfebfafd92ee8e6b",16),
 ap_uint<128>("0xe1a928cbffdfa16c89ee3950166a3174",16),
 ap_uint<128>("0xdbdde590caf70e7720cc329573be730a",16),
 ap_uint<128>("0x3515a81feed73d7b9f1c25153747d119",16),
 ap_uint<128>("0x562900480bb2e792460457590aae9565",16),
 ap_uint<128>("0xfae88ba4bf4f748ee4f7bcb1ae4ceb14",16),
 ap_uint<128>("0xf03a73a822d8e48abc845084c8786497",16),
 ap_uint<128>("0xa3d04f21e47c739fdeedd34733309c01",16),
 ap_uint<128>("0x6a3e30c9e6637b7d9a150796e19cdc13",16),
 ap_uint<128>("0x9c6d3b124f74afa5e94ae63efd6ff3a1",16),
 ap_uint<128>("0x450fb74bc98a18eaa964a10973c4056c",16),
 ap_uint<128>("0x779d80a4ef01f8527e3cda79f2261156",16),
 ap_uint<128>("0x10282600d6aee4c4b197bbc16af9b63e",16),
 ap_uint<128>("0x0cbc3726d3388967cf7e772e212aa4a4",16),
 ap_uint<128>("0xdee7742874dd11c27fbc15800bd01123",16),
 ap_uint<128>("0x533dfb9d0d864d4c3797a47f32997ece",16),
 ap_uint<128>("0x7555c0aa60f884fabe4851fa7af9afff",16),
 ap_uint<128>("0xd5e670e3075a8fb81aae7bddefb0df6e",16),
 ap_uint<128>("0x8c1170e8f9b3dc94a98ef5d6cec27b3b",16),
 ap_uint<128>("0x5060777b8a2a88103ab757328fbebebf",16),
 ap_uint<128>("0xe8180acf8710a1b4e49ff218961b0b83",16),
 ap_uint<128>("0xc7b76be43b9a1760ac265ab6bb07dfb9",16),
 ap_uint<128>("0x717da164cfc5f36eadfae238dc0f0ac8",16),
 ap_uint<128>("0x67bb8b94c2b4c57c2c80dcae24e3e8ee",16),
 ap_uint<128>("0x21b067ca35b1f780dc562a72ad87cf9c",16),
 ap_uint<128>("0x7eef2bdcad8c3ce4eba54a24ddbb8662",16),
 ap_uint<128>("0x1eb1dfe777f231bce2f496661153a546",16),
 ap_uint<128>("0xeb9a4f444e47646b7ea1e83907bd5632",16),
 ap_uint<128>("0x59be7573094d70704b4c6ee65d4d06e2",16),
 ap_uint<128>("0x5c875eed99a48541da8498bdf6225f17",16),
 ap_uint<128>("0xd258111720b781ceced22a4ee690e38b",16),
 ap_uint<128>("0x723d5322b476e37c9ca6bd5de7008212",16),
 ap_uint<128>("0xb9892c51bd715a8454940caa331728eb",16),
 ap_uint<128>("0x2a193306e8f40045d44f899927ddcd25",16),
 ap_uint<128>("0x3041d8bac7c6f6d7729f409897e0d331",16),
 ap_uint<128>("0x65482460fdabe4212db351ad462c6d89",16),
 ap_uint<128>("0x9cd2bf9eea26078ae84ae7d8c32f691b",16),
 ap_uint<128>("0x8844a832c0a5b535b8214901a02fa370",16),
 ap_uint<128>("0x704f65eda855424d5204c61ab8a8bad6",16),
 ap_uint<128>("0xc20ef126f901736c95c314f00194a8c4",16),
 ap_uint<128>("0x833891592e40bbf2cdfdcfba4d1ff480",16),
 ap_uint<128>("0x0afc2236ff0227fe1bdd51df95496a5c",16),
 ap_uint<128>("0x0b634d4889a2ef05fea2f93eb8d55e10",16),
 ap_uint<128>("0xb417fe1a0595b40a5b08ddda9448dd3e",16),
 ap_uint<128>("0x93ce60086202e28ddb9afdff2cc3e5c3",16),
 ap_uint<128>("0x5c210917e83671d16899e101890c13fb",16),
 ap_uint<128>("0x173e28da38797569ac79d96bb0b74ca5",16),
 ap_uint<128>("0xf58c39ad5ffda459a2ca0ef53fbcf74d",16),
 ap_uint<128>("0x01a5b22e2323e4769e0b155a42d0d4cd",16),
 ap_uint<128>("0x0e860837d76b8b2ccc733d7b6a933eb9",16),
 ap_uint<128>("0xb443678438b9394e35f91742426e0236",16),
 ap_uint<128>("0x98d9c99bb4bb41c7660c502a5071d52b",16),
 ap_uint<128>("0xd419afdf0726ed38825a48e8afd68278",16),
 ap_uint<128>("0x38260ccc2061191c64ce12a0844c62a0",16),
 ap_uint<128>("0x9cd3b208219149269873d83aa35de3f6",16),
 ap_uint<128>("0xa0755135059b5ce2149f281178b8f352",16),
 ap_uint<128>("0xfcbfe48a380d088bcc34a3cc6d23ee20",16),
 ap_uint<128>("0x53b1ec04725d5a729c3d0acfb16e3279",16),
 ap_uint<128>("0x9063bb04884fd5edbb0ec065c33c8996",16),
 ap_uint<128>("0xc0845e22326b3d20d6f50d1b3cd70c10",16),
 ap_uint<128>("0xa272770ed0b2ccb1ccc3d12d7b02ce62",16),
 ap_uint<128>("0xf0bba8ba0ee60c565b9df80f12006c13",16),
 ap_uint<128>("0x0171a75e16be083cb18a3fe2ee5f4838",16),
 ap_uint<128>("0x361b2b875e3ffc1ff0ec6774540245a9",16),
 ap_uint<128>("0x46544ceee5f9994531391aa963afeef8",16),
 ap_uint<128>("0x522128a3b21c891234bd729c325d1e5a",16),
 ap_uint<128>("0xaa2c01c83dcd6322e67bba04e7bad109",16),
 ap_uint<128>("0x7ca439d2d2ad279378ec5bf7c2e99bdb",16),
 ap_uint<128>("0x36f09064ad5407515bababe5d761b373",16),
 ap_uint<128>("0xde9ea6cb42c9e0758709ec653d16f24d",16),
 ap_uint<128>("0xf3100da32ca7e8e72687b8417cf47491",16),
 ap_uint<128>("0xe7491e5b9308f5b673dd3cb1df9bc8a6",16),
 ap_uint<128>("0x068ae20e7cdef4b7e8d52240e7dbaa0b",16),
 ap_uint<128>("0x2e85a041b80793b133a6e00f338b8047",16),
 ap_uint<128>("0x36a1a3c9570d2177b05d36cac687af2a",16),
 ap_uint<128>("0x2699f56c9b3ae38dc5dfe4e5ae6d64fc",16),
 ap_uint<128>("0x1239c98fcd05c8b048d64dad11219a2e",16),
 ap_uint<128>("0xd5245987bab0261efaf27013e238f611",16),
 ap_uint<128>("0x316b0d47e91b39a179baeb2a78af74b1",16),
 ap_uint<128>("0xecd57b22836365c0d5e61edc8701b648",16),
 ap_uint<128>("0x120e08b66efbdede9951748918bc584e",16),
 ap_uint<128>("0x80c15f411f700d0f79165f446ad84a03",16),
 ap_uint<128>("0x4bf35cb3e59a4fe0f6c2915015fe2902",16),
 ap_uint<128>("0x7cca932e16f48937524dcce331b66912",16),
 ap_uint<128>("0x09d09ecf44aae4e20e9243b61d914284",16),
 ap_uint<128>("0xac6cdb9ec03426fd4f24e8c434e4a29f",16),
 ap_uint<128>("0x01770314010c74cf757254a10c61379b",16),
 ap_uint<128>("0x312db7448fbfb22ec897288c4a24577c",16),
 ap_uint<128>("0x76a4147856c054f661e51379e866137c",16),
 ap_uint<128>("0x84623edbc50c4a702afc320bfa5b8c2e",16),
 ap_uint<128>("0x7ba44c088aef38dd0ae1cb34b960a7a5",16),
 ap_uint<128>("0xd81e7af49977f9bad41daeb43dfad369",16),
 ap_uint<128>("0xe790c6f857d150a0b4d3d028148642a1",16),
 ap_uint<128>("0xd001e326f8258cb7fad93f0e3ca7ad1b",16),
 ap_uint<128>("0x4e3389fec7a1196fb124581d45836aa3",16),
 ap_uint<128>("0x326dd932091842f8a7cfc4f82f93f0bc",16),
 ap_uint<128>("0x6ae50f42dd8810689643b07ca8f0bac7",16),
 ap_uint<128>("0x3a23dee089230b50990e73e3a43ad83f",16),
 ap_uint<128>("0xc5e6e5eae6f5618d868d84ebce3c0566",16),
 ap_uint<128>("0xab2e0127989859229e49d636b1681c58",16),
 ap_uint<128>("0x86aca08e1a23fc49233ff9b6972ef216",16),
 ap_uint<128>("0x2b7b9663b3e9d1ffb8964ba44da13e9e",16),
 ap_uint<128>("0xa9e8695cf4e7fad88680a09485626f2d",16),
 ap_uint<128>("0xf813cf628b8e4252ad46be5ca29cc684",16),
 ap_uint<128>("0x11154b12c7f68fbbc70c15ae8da1bc16",16),
 ap_uint<128>("0x78b6b246681658f3e74d41f8c9f24b93",16),
 ap_uint<128>("0xe6870a6a18e4c1b9cd2802e1c9f9301a",16),
 ap_uint<128>("0x73226e865d975c6665966bd7b2294395",16),
 ap_uint<128>("0xd9e6a43178a3ebccc137642b93284384",16),
 ap_uint<128>("0x8a553bcc2f9396a1b944b6981d586f29",16),
 ap_uint<128>("0x604e828a70a1ea1e1c5eb309e5aa293e",16),
 ap_uint<128>("0x260f082d54ad9dbdbc7f06827065e8dd",16),
 ap_uint<128>("0x97d680e873d78480b07afea79ec9138a",16),
 ap_uint<128>("0x14b9b86346b3a146fa015ab2eb2122ac",16),
 ap_uint<128>("0x015af8e1f97a842945ddf495479d3708",16),
 ap_uint<128>("0x275d720749e942aceffe372a337ac223",16),
 ap_uint<128>("0x3759a8b82bd5c0efaf7bc824ba4b747d",16),
 ap_uint<128>("0xea1d46736e17eaf86d880b9903871e94",16),
 ap_uint<128>("0xd13cc72ad7143a7184f85ade0367c067",16),
 ap_uint<128>("0x1f98d02314b0e966d2e32922492b022a",16),
 ap_uint<128>("0x6c13027d6d9a09bfda350c672f98932b",16),
 ap_uint<128>("0xa7314a45c9ce83c070b5c98684aa1865",16),
 ap_uint<128>("0x3b80c5c7b1c306eb0a77daedb9619d7a",16),
 ap_uint<128>("0x95cea04aed13ccbea35a1f4c09a7efa2",16),
 ap_uint<128>("0x0cc5898039b5f7bd4e772879ed7468c0",16),
 ap_uint<128>("0x90f64ce4bf5931155ef350c8b4b05200",16),
 ap_uint<128>("0xbc42719a3802fd78f096470f22d1fb51",16),
 ap_uint<128>("0x9d90ec755573cdc18a50859359a198da",16),
 ap_uint<128>("0x7002e05e103a1d6c15ef606441a1d3a9",16),
 ap_uint<128>("0x9972dad06a307f68044f983e7f656628",16),
 ap_uint<128>("0x97b9a298a0838f9c87e1598396769227",16),
 ap_uint<128>("0x08ff7357777c11175024b2c8260693ab",16),
 ap_uint<128>("0x2a3faf4a8728a03c00f4c6f79d118c2a",16),
 ap_uint<128>("0x98db9648ab3372e5b8b6f9bdf532d318",16),
 ap_uint<128>("0x7d6bde8df9bbd5e6e285e3cdb33c290f",16),
 ap_uint<128>("0xaa0a3d22916c1b6733d516157d7754a8",16),
 ap_uint<128>("0xf10a124c300e2b8f1bc5ae270030ece8",16),
 ap_uint<128>("0x6315bf72bb42d38d74bda240ceb077b1",16),
 ap_uint<128>("0xd0da03170882558ecdb7aebc0d79014c",16),
 ap_uint<128>("0x094843ac295fa46b381fec8bbec72de5",16),
 ap_uint<128>("0x475522a1a1a7107996c831f1130eba3f",16),
 ap_uint<128>("0xa9733829b742b4524e1ea0ca74da883b",16),
 ap_uint<128>("0x7e2dcf65605e4b145bba7d9d55883c5a",16),
 ap_uint<128>("0x5af729be03c20abb04771086af2fffaf",16),
 ap_uint<128>("0xab99de0eb5511059b8d1f0d0cb5ae35e",16),
 ap_uint<128>("0x722185190fc33f5301e2a7d871de6251",16),
 ap_uint<128>("0xc4e7b5bda48ee2b7541f90915933eb5f",16),
 ap_uint<128>("0x62634802ecf0fb4a488fbfbe210161bf",16),
 ap_uint<128>("0x371578ed0768c7c3c78f58978b32f2c3",16),
 ap_uint<128>("0x6fbb636084444a7ec3bc7f8ea29eea15",16),
 ap_uint<128>("0x330b1104551467db25da4129e02018d8",16),
 ap_uint<128>("0x1f6cc86374b8e0e090c9c5425191eb6a",16),
 ap_uint<128>("0xeb3cd9aa8b46c41f87d3e45a42a84780",16),
 ap_uint<128>("0xd28dbc57f7b1e38366e99b8be582129b",16),
 ap_uint<128>("0x6d574fba428d232392b0c8b168cfe57a",16),
 ap_uint<128>("0xc8fb069f5c27a06ec425ad3cdeb90e31",16),
 ap_uint<128>("0x5f42eae758ab044abdf3407fb271d3c7",16),
 ap_uint<128>("0x6f1bebd77315c40c1425754a24c52562",16),
 ap_uint<128>("0xb88cb4a16b617d17794149b42ec1ce25",16),
 ap_uint<128>("0xecadfb28c8f17bb6ece95c2091900936",16),
 ap_uint<128>("0xbf8ae5ea144b8b1f6ec5852273c03d4e",16),
 ap_uint<128>("0x763164895ead07f53047606ff9857add",16),
 ap_uint<128>("0x27e019651df6a1047131fb9235f77a39",16),
 ap_uint<128>("0x0c019e91007fe87750c6adca8d5c6658",16),
 ap_uint<128>("0xf0f14b2552643366142b087e754544ae",16),
 ap_uint<128>("0x29526349f1cd13e529ad6992bef92783",16),
 ap_uint<128>("0xc194762492d5b490087524e23d027d7a",16),
 ap_uint<128>("0x824059ca771cb9d13703bf6d2cebf402",16),
 ap_uint<128>("0xdd9173bc6cb106530a30782e62825456",16),
 ap_uint<128>("0x003fb759420f2c7d4b16d9fafe6af6a8",16),
 ap_uint<128>("0x40a6205032b453f77069d6c37a6ffa20",16),
 ap_uint<128>("0xb91edef5c982fbab5f241a4b90dd2356",16),
 ap_uint<128>("0x77ef3dd5e458e2846f3fe375df33a68a",16),
 ap_uint<128>("0xe246ed4240f1a2872dc66b3cf36fcc0a",16),
 ap_uint<128>("0x92ada2a0ece44c9a800d4ddb3638e4f9",16),
 ap_uint<128>("0x92b9483cd9813be8abab55d2635e20d4",16),
 ap_uint<128>("0xc7c2f2f961dd48da7ec9f31480ebbe79",16),
 ap_uint<128>("0xda679fb11ecc68f15064ca83edb6d4ab",16),
 ap_uint<128>("0x00873310f688d5fb411f912ea8c6db20",16),
 ap_uint<128>("0x822a1ad2a79b9f13a0628fe740405129",16),
 ap_uint<128>("0x092f2ef44e9fa100521202a017d1d30e",16),
 ap_uint<128>("0x1f66316f67c340ff2f53d6f8b3a471ce",16),
 ap_uint<128>("0x416bbdbb4dc33aeba22c1d682183cb2d",16),
 ap_uint<128>("0x34a18dbc3c61bd21d07209bba291710e",16),
 ap_uint<128>("0x8cada71f65335e9277509b602085162e",16),
 ap_uint<128>("0xc335680f26878962d59f8db26caf7b53",16),
 ap_uint<128>("0xd3029106f447e331ee2fbe6096e79e5f",16),
 ap_uint<128>("0x107ee91e6630206c0b32d714432bd4f0",16),
 ap_uint<128>("0x7aa88ab49d9c57854a02c6062a5cc173",16),
 ap_uint<128>("0xca44dbee591eff9f890095d9b5239540",16),
 ap_uint<128>("0xa195db3f7b8e00ea2102fd1e5ca9343f",16),
 ap_uint<128>("0x9d2d03dd38aac2aab227fb30301b6563",16),
 ap_uint<128>("0xcb336c20aff3e5dae80d4ff745a2c255",16),
 ap_uint<128>("0x3930915cef005fcc6d612595c68bcb66",16),
 ap_uint<128>("0xdd1ccb5b4c0af0e40020928848fc17fa",16),
 ap_uint<128>("0xb1d865646fc7ef60a165f76962acaf54",16),
 ap_uint<128>("0x8989ea12a59b093f51c2fddf1a2a324b",16),
 ap_uint<128>("0x364800e8e0863ca0d88c9a2459bf1f9f",16),
 ap_uint<128>("0x9b5d8ed1c476c9752d391ec880b37f09",16),
 ap_uint<128>("0x7ac92ba2470b54de8fe61703a1309204",16),
 ap_uint<128>("0x723ad8846a601234ba1304aff29e0667",16),
 ap_uint<128>("0x6f47303942717e06814895d102f9e159",16),
 ap_uint<128>("0xb3e16ac3a8d491f52a45e6a71abcebd2",16),
 ap_uint<128>("0x2adf714579d2723ecee09838829dd21e",16),
 ap_uint<128>("0x5cc327a6f7bc6ec9b00d725d27571a2b",16),
 ap_uint<128>("0x5320d4c9ebdab2c367fcce9cee5b9201",16),
 ap_uint<128>("0x9cbdb2865b36d07b3cc1ef611adae3cb",16),
 ap_uint<128>("0xbda195e989e784670057d4c0d64142eb",16),
 ap_uint<128>("0x0e60342345ad5d360a55c0d2f274acec",16),
 ap_uint<128>("0x545f1a161d8338ec55a59f294763f690",16),
 ap_uint<128>("0xa24809f1ca9b7a2e58783546c6667e7a",16),
 ap_uint<128>("0x123be52dc7d3db8714ce41e53ff1ff05",16),
 ap_uint<128>("0x90bec572333fe20befd163950e46bd6b",16),
 ap_uint<128>("0xea90e7003046bafcde0b249ea03b6571",16),
 ap_uint<128>("0x80c98cd8d8a713eeb72c45ad0177c30a",16),
 ap_uint<128>("0x4603e7fab78e26ff08a2a74c93f6218d",16),
 ap_uint<128>("0x83b8a4166e78d798e31f2390b262c468",16),
 ap_uint<128>("0xa81a6cffa69c5cea620fd04ae4cf334a",16),
 ap_uint<128>("0xac28212c3df047856f10f0a21f5f04bb",16),
 ap_uint<128>("0xe30467a1676f7e83dbad28e4cf3a59a0",16),
 ap_uint<128>("0x3ffb3c29d6ce102f4b02dfd096fe12d8",16),
 ap_uint<128>("0xcdf179322f56b5a38c424b46495e4a8e",16),
 ap_uint<128>("0x555b8ac554a103d95a1026637cd9cedc",16),
 ap_uint<128>("0x314ca1c4ba0f57055ca59c79ac235a81",16),
 ap_uint<128>("0x7d1e9bfb429dcd731ab2fae33ef4c5b2",16),
 ap_uint<128>("0x2c5ad66ce6cddd94ec77ee55bc79f863",16),
 ap_uint<128>("0x6be2e621ce5cc9cfb48fe35856d70613",16),
 ap_uint<128>("0x5cdde25131221ef2ec9839d4f56ce52b",16),
 ap_uint<128>("0x431729e17eef3654d115c3e792c60b47",16),
 ap_uint<128>("0x9e354ea7524345b0fb6996bf93107671",16),
 ap_uint<128>("0xbd22aec8c8d09c4cee3e17f5f35b5669",16),
 ap_uint<128>("0x3104b795d6306000684fd0f5d7a9ed50",16),
 ap_uint<128>("0x64a6641cd6140c772d2e93fce4fc7608",16),
 ap_uint<128>("0xde7fddef0ee384906cbacdf37496fe52",16),
 ap_uint<128>("0x6de7ab2c116df46af13bf7261c28353f",16),
 ap_uint<128>("0x906aa7caaf05e91ce373840f4be061a4",16),
 ap_uint<128>("0x5af619153d35bb6d9bfef1fe9b2d3e5a",16),
 ap_uint<128>("0x8660296f0544778935d95f463865ff63",16),
 ap_uint<128>("0xe4ff7de7af078e24b654038e3f88fd68",16),
 ap_uint<128>("0xa97f75ed42a8f4c0205f28a1ac72c7e4",16),
 ap_uint<128>("0xaa9e05d9d46dabf7ef83a5887a4d3385",16),
 ap_uint<128>("0x89dbc814910185cc801d978b5eecaec2",16),
 ap_uint<128>("0xb73a90edeb6678e8b90a8c2275482f06",16),
 ap_uint<128>("0xe10afd6b5ced13955793a57694d9f216",16),
 ap_uint<128>("0xbeb8a25f96d3a5b72bde1b8f58e126eb",16),
 ap_uint<128>("0xad19a2a76fd4135251ed6a349b878be0",16),
 ap_uint<128>("0x9d631b06349c7562797779a268f44443",16),
 ap_uint<128>("0xec04493cbf0761b25cd3d970bf82136a",16),
 ap_uint<128>("0x0051813f50b9be1aec0a3b598ac28d8c",16),
 ap_uint<128>("0x287fc7f68e5a1965df92a02714863f29",16),
 ap_uint<128>("0xb23624f3eaa54b347a625421aef1e1f4",16),
 ap_uint<128>("0x754b7ac8e99044721084d305abb88e59",16),
 ap_uint<128>("0x998c5d562bca8c5b6f2123efd90dfaf7",16),
 ap_uint<128>("0x61bccc7c48114672a8b0aa0ff0416a91",16),
 ap_uint<128>("0x19f862cc2ca62d345e83b14a9f58c60f",16),
 ap_uint<128>("0xa627f5b0b97ed10a4329c6f261a605ab",16),
 ap_uint<128>("0xbf7fc695b2cf8abc650d8df101962c9b",16),
 ap_uint<128>("0x591b4dd367133e7e1bb646e6146b9cf8",16),
 ap_uint<128>("0x4ae0e156bd37894a29af6c8c93370978",16),
 ap_uint<128>("0x45d9fdeb301514f4971d12fd7fbfd2cc",16),
 ap_uint<128>("0xf3f15db1e2f8073fde5c6b2ba86cda0d",16),
 ap_uint<128>("0x67e218cb6067219b0f3619bb0eb87540",16),
 ap_uint<128>("0x6506089eae583f50f5daa499b5a99870",16),
 ap_uint<128>("0xa6f51945791db042eed4c46fe63a59fb",16),
 ap_uint<128>("0x3438f3c41733b5081bdb85b9f037da1c",16),
 ap_uint<128>("0x0be7b96bec4e3150d9ab9f3aa73bdf74",16),
 ap_uint<128>("0x66b4543d0ca5ae64780296942bce5d35",16),
 ap_uint<128>("0xdba1995c38035134fa8a3da385ab95c4",16),
 ap_uint<128>("0x89a5ef5ce3e3bed8513e23dad7ae0a0f",16),
 ap_uint<128>("0x377277e6496bf5ab4989215f46524423",16),
 ap_uint<128>("0xa0daadf28af1d0d05d0ae4ce61e3e32c",16),
 ap_uint<128>("0x3a3e15a4e26a9bfe0fad023209375f4f",16),
 ap_uint<128>("0x199b362f6049feb7cb5c95b9a69f9961",16),
 ap_uint<128>("0x30e45a4eb3d207960b94d446f6a165ee",16),
 ap_uint<128>("0x488f488fabb56616e89ebb3e448c3270",16),
 ap_uint<128>("0xc4dffcd932f16a9f487376c3206b45b1",16),
 ap_uint<128>("0x55da19e62bffc28ecd5ee689d858bfdc",16),
 ap_uint<128>("0x6263774351d4c236519c77739685514b",16),
 ap_uint<128>("0xc74a8ba320a11e6f71e4d16838f48076",16),
 ap_uint<128>("0x6e898717ca82443d5b7c30032542b397",16),
 ap_uint<128>("0xb5a4d039eed15b69aa0c63816bfdaa73",16),
 ap_uint<128>("0x7d1d49ebe0dc2ce16ee3907f185b9687",16),
 ap_uint<128>("0x0dfdf091e6e56bfe60c3cc2cb3a5dcf8",16),
 ap_uint<128>("0xd84971b097567a868013e94ef84b6de4",16),
 ap_uint<128>("0x5a9a11b9da04d05c4c68273ff87b3d59",16),
 ap_uint<128>("0x0ad4c316f44f6d4c2d92def20b86709d",16),
 ap_uint<128>("0x963a1bbf4b40ba57e59b71e2335eaed8",16),
 ap_uint<128>("0xf5085235f908c15d2b4c1a0cbd88106a",16),
 ap_uint<128>("0xdb5242c2bb172f95505560403d31f6c0",16),
 ap_uint<128>("0xb3ca3b96987d7a522a5aa8ab93fca444",16),
 ap_uint<128>("0x9cbb11897d987283de1a859950563d00",16),
 ap_uint<128>("0xe07ac34bc8b1660c4ab53b379ab9f305",16),
 ap_uint<128>("0x0de2f9d387762779c18dc6ee642240b9",16),
 ap_uint<128>("0xb1a062f1b8c103a3370fc134fc995a3c",16),
 ap_uint<128>("0x0c55b2d1c424b53183221d36f5143f2b",16),
 ap_uint<128>("0x810ca24af1183cb1f1df9a0d83eb375c",16),
 ap_uint<128>("0x2fe2cb8a3db901be18b227c585e81c7a",16),
 ap_uint<128>("0x51aa9af662cb98e18b09ce74189c5161",16),
 ap_uint<128>("0xca82b00c914b2b0a655f9a6ac10bd6bd",16),
 ap_uint<128>("0x072f14e7ae9f5daa2d54f9685972d27d",16),
 ap_uint<128>("0x5b768df5e6f21138f0fd30fad91506a3",16),
 ap_uint<128>("0x7a9963407d1159a3772ed7f8fcfaabff",16),
 ap_uint<128>("0xe9add1f42bace8dcab5f49b8465ce525",16),
 ap_uint<128>("0x2c9fc67aa5642316ba5030eb25b2b6ec",16),
 ap_uint<128>("0xb8d926577235bd5c10d58f857a2dd215",16),
 ap_uint<128>("0xe1c12c36c99b7fab4a6dff2c7a728135",16),
 ap_uint<128>("0x0e35ecb559b32baa9c8cb6b4c2ab7e43",16),
 ap_uint<128>("0x52d6f6eb30d5ae745736a322c1fa6041",16),
 ap_uint<128>("0x45077f4813f12bc764347acddeb5cfa6",16),
 ap_uint<128>("0xca8cb84ce921ed0ad0c77ad1326ee8ab",16),
 ap_uint<128>("0x3d3d68dfe822b18a0ea15ff41e3c9f17",16),
 ap_uint<128>("0x5f72b02f0eec1710b5c6082daa317b5f",16),
 ap_uint<128>("0xa19badea8486c306f91937e8ff9be850",16),
 ap_uint<128>("0xee0d89101b20afe63cc5fc4b2fd756cc",16),
 ap_uint<128>("0x707f57cbe2fa4687b6e63861b6bc1a23",16),
 ap_uint<128>("0xef2324fc7eed1b4d5886a8f9ad473a85",16),
 ap_uint<128>("0xda7525dabc8311100d5fe35f406692f8",16),
 ap_uint<128>("0xad11ff9ef6e9bfa9f2f2d8f9bb8b4565",16),
 ap_uint<128>("0x0e6ac4b093aad5999d98a7f4992ef556",16),
 ap_uint<128>("0x61b629264180f4b607f51f5cb0c903ce",16),
 ap_uint<128>("0x1b87a7e27a3a982257f56e5231b912fb",16),
 ap_uint<128>("0xb3c694a9d8489331aa9bf540402e5067",16),
 ap_uint<128>("0x0626e8e881e29689060221a8c384d0bd",16),
 ap_uint<128>("0x36035b957269e1a84d6a08bb73e95dd2",16),
 ap_uint<128>("0x24bf290211786c9dfbee56618a3f05cf",16),
 ap_uint<128>("0x4f4641bfdc579fc696cb1e37f71c15b5",16),
 ap_uint<128>("0x3ea34664bcd8cebee22cbef4d81c8a7b",16),
 ap_uint<128>("0xd9b9f602f240270fb0ce39679a73810f",16),
 ap_uint<128>("0x0a78b1ffc139b3516e8d27d4dad3365c",16),
 ap_uint<128>("0x0f70f46b4e2496835c333695e4b96606",16),
 ap_uint<128>("0x767c1b5f8f8a6000894515ca2db224fe",16),
 ap_uint<128>("0x2a705a051deda3110b7f5fc301efb8bb",16),
 ap_uint<128>("0xc703a5d7dd2e4165724ce125d474a4ac",16),
 ap_uint<128>("0xfd471e42794e6c81566ca9fdf76691a0",16),
 ap_uint<128>("0x4a4c139ed091afe3f1d7ff1246f2d9f4",16),
 ap_uint<128>("0x7be4336756bec4545862dd0260a14e43",16),
 ap_uint<128>("0x1e14f31e918f08387ef27f5e0ab95e92",16),
 ap_uint<128>("0x6a9f5a36291c38ab12ada7e87bd307d5",16),
 ap_uint<128>("0x867e856fc555915989e4066f537a23da",16),
 ap_uint<128>("0xa82f01b7500e4ea72bbf9ef96312f665",16),
 ap_uint<128>("0xf782b3e241435fd3a5c3bfe877060728",16),
 ap_uint<128>("0x49b296a0e723d5e42612fa4065a95a3a",16),
 ap_uint<128>("0xf422d7997115554c0739af95584a82c0",16),
 ap_uint<128>("0x9b8604050cfa5b5847eb1b69f494b894",16),
 ap_uint<128>("0x3e7ca2bcbebb2605847cd7ad41217672",16),
 ap_uint<128>("0xc1f491f0b8eb9cd6a9386d3960d6720d",16),
 ap_uint<128>("0x06cc47144f8074a173081f3805e5cb02",16),
 ap_uint<128>("0xe83d6a857ebbc45478a8e0e1cf53a4de",16),
 ap_uint<128>("0x99c465eea029b3b8addcc7fd57c975e7",16),
 ap_uint<128>("0x74ab5175b6b86c5ee789d77faf474b02",16),
 ap_uint<128>("0x795deea0e9d3cc9ac417b509e0807860",16),
 ap_uint<128>("0xdd3ddfa79c9745f6286666642bea7165",16),
 ap_uint<128>("0x1a769d3f3172b6305f7aabdc035a5126",16),
 ap_uint<128>("0x12682dee1894a01c71a6b3c26b24a595",16),
 ap_uint<128>("0xbccf8e328c21df211ac76c02b849841b",16),
 ap_uint<128>("0x46a63435d3f76045ccfb33c96b94f940",16),
 ap_uint<128>("0x419129b3a72102495c2c03d1aa049676",16),
 ap_uint<128>("0x7d211b9069ffe561b80edcda80803c3e",16),
 ap_uint<128>("0xf8c9f7cd9bba4c168c53e1cb95eb6ad9",16),
 ap_uint<128>("0x7f12a774750fe89076fe771bb4a341dc",16),
 ap_uint<128>("0xc97593296cdd9c563c26eaefb0b50396",16),
 ap_uint<128>("0x2c7bf27ddd9b90f93759d0ba4eba45bb",16),
 ap_uint<128>("0x158674305208bfed94791e615e7369d7",16),
 ap_uint<128>("0xe8b2c23c34daeadab7182e58b730047a",16),
 ap_uint<128>("0x46be712f1df8bcad71caf68454aabf61",16),
 ap_uint<128>("0x8fcb880345ec560d4d2104c34de6e9b4",16),
 ap_uint<128>("0x781447af89c48e89ba09bef957aa4b6c",16),
 ap_uint<128>("0x1ba3697e00a787593896f0e749b433f7",16),
 ap_uint<128>("0x4f7386811c6c7ea2f81c0580a1627822",16),
 ap_uint<128>("0xc49c1ff05228e356f30c8b3e1486289f",16),
 ap_uint<128>("0x5170022146ded1ba2cbb0522397728b0",16),
 ap_uint<128>("0x32b6e8fa1ab53d4103866aa6925a9bf7",16),
 ap_uint<128>("0x30dd115ba2d0487921835894732f9343",16),
 ap_uint<128>("0x7b3cffc4dd80c15b5448b8290a6218b1",16),
 ap_uint<128>("0x1d7f3a2f36a3d1a09fc87764555c3c74",16),
 ap_uint<128>("0x9c0f356d7eeb320dc03b8160c0a0c75b",16),
 ap_uint<128>("0xaf01f0e4a0af0e45c47718497bdfeb1c",16),
 ap_uint<128>("0xd9abd7ac5ab14ed2feccd245740fd6ce",16),
 ap_uint<128>("0x5c6dc763b2ae57994b5e1d80d70c1816",16),
 ap_uint<128>("0xac3cc949810e8d0439001b50c50c782d",16),
 ap_uint<128>("0xb30c650f6e9791fadb291773e05e5c9a",16),
 ap_uint<128>("0x7784f375d014240a029d00d4dfd0bb29",16),
 ap_uint<128>("0x7622e34f4c869d9f9f9579309a5694fd",16),
 ap_uint<128>("0x374640da8f5d59fa574f5e5fd4638dc9",16),
 ap_uint<128>("0xced60a56f368041b538f9a58b8790367",16),
 ap_uint<128>("0x6ee7bf44478c8138babf586226f36fb3",16),
 ap_uint<128>("0xf64cef2535696e2e11b0879d4cc16fc5",16),
 ap_uint<128>("0x18933a7c575a4ae46e9447bc0db4b449",16),
 ap_uint<128>("0x58cea7c720233dde728bfcf86a6350b4",16),
 ap_uint<128>("0x722c28da6f202bdb21dbf15215bd6b56",16),
 ap_uint<128>("0x1387d12d726b9e516a386dceb5ccbeb4",16),
 ap_uint<128>("0xd2c219e8c9d84a1d15f78ba00b42b167",16),
 ap_uint<128>("0x2efe0d6a1a84b010803c47b0e8b1d815",16),
 ap_uint<128>("0x78e60199a33aa90e1bd86cc3b87f27aa",16),
 ap_uint<128>("0x6bdc952ba1440b8735e1d2798e9ea116",16),
 ap_uint<128>("0xbbab1b9ec0aa503f66e7b997a2527e94",16),
 ap_uint<128>("0x95ab10d8c7c2d631812d76c91c2948d2",16),
 ap_uint<128>("0xa8dad03f4a936182c8386bd5cf874232",16),
 ap_uint<128>("0x8c66ec94d710c702bfb551f1930633ce",16),
 ap_uint<128>("0x14884c978fa99201fb3820c26038db93",16),
 ap_uint<128>("0x77de6620fc77928aee2c8d33ea7f4e7f",16),
 ap_uint<128>("0xd4e42d1de7441e937f8d17e657e5bcf3",16),
 ap_uint<128>("0xcf3865444400923302ab211eaff64b98",16),
 ap_uint<128>("0xd97e8278454b705fe27188177fb09c45",16),
 ap_uint<128>("0x718336bb7184ef0f77c04b2bdb9625ac",16),
 ap_uint<128>("0xe931b50a9c9d80c20b901cca3c2571db",16),
 ap_uint<128>("0x2e9d31807a75eb94eb1a4d58bb230108",16),
 ap_uint<128>("0x8e731858967dbbc17e1bfd70c7f1d72e",16),
 ap_uint<128>("0x72697c812ebc65ab8af22f46488882b9",16),
 ap_uint<128>("0x9ad42292af8efcac872f02f244ca8fde",16),
 ap_uint<128>("0x5bef88226c4969692c8da146b1369ee1",16),
 ap_uint<128>("0x2b2254ced97920c88f99185fa19d84dc",16),
 ap_uint<128>("0x7d17787ccc91fb654b9553e1fa149735",16),
 ap_uint<128>("0x1ee657d77802fc856fff9a4681e24ed5",16),
 ap_uint<128>("0x4cf9e3cb80aedfcc25d415ef06db70f8",16),
 ap_uint<128>("0xcb483e2d0cfe535368907a78e7181002",16),
 ap_uint<128>("0x88166c51a0db6e164599336b9c1db10f",16),
 ap_uint<128>("0x508ba9e9c707cc78aec0d2b1c11d3012",16),
 ap_uint<128>("0x6660310e463dcd5e0dbd32022807cce0",16),
 ap_uint<128>("0x230b87a4a58e8bc85a6d708b1c1824ab",16),
 ap_uint<128>("0x288f7973bdcc12a62295f54b24848838",16),
 ap_uint<128>("0x1664f24c111e316b7f34f83ffbec90d8",16),
 ap_uint<128>("0xf79a8796c96dd5472825e1465728ea31",16),
 ap_uint<128>("0x1bfeb95df0ae5b75e20ed3d050602981",16),
 ap_uint<128>("0x15de71b0bf6b765de0aa5c54a0e32972",16),
 ap_uint<128>("0x324768d220c29ac6dd8d023dbf620319",16),
 ap_uint<128>("0xb08a908fcd914b8a93a9f70bb01e86d8",16),
 ap_uint<128>("0x2e1946c7503b97e9e620b88d4e6829b8",16),
 ap_uint<128>("0xfdfd7558481f850f7d542d34b81cb41b",16),
 ap_uint<128>("0xc42ffe662e324669a5f0921ebb4fb4ed",16),
 ap_uint<128>("0x45619b90237118ac22fecae4d8679761",16),
 ap_uint<128>("0x87e3e97c8c918293412f1cda229707f5",16),
 ap_uint<128>("0xed3a3b9c7ad4117b27a4ba56ac02dc9e",16),
 ap_uint<128>("0xfce80a2843acd18fef62238968d5c3fd",16),
 ap_uint<128>("0x025bb41f6d5dc415fc807ef5a9f784aa",16),
 ap_uint<128>("0x96a09066ea7e8d5d1b30848326b059ea",16),
 ap_uint<128>("0xf8a0b512d8ced0e17584e9666a875685",16),
 ap_uint<128>("0x973f1095c366a365617587fe0bb16eb0",16),
 ap_uint<128>("0xf74503edd447f826cbbbfbad907ab4e6",16),
 ap_uint<128>("0x9a2d15303bde47e43bd4f7e8e1e3460c",16),
 ap_uint<128>("0x126cc0cd35637de50b9bcc33dbd34b7c",16),
 ap_uint<128>("0x04afe4bfb80d942958235b739f9d3321",16),
 ap_uint<128>("0x9d3bf208b58fb1357d4b9a669590135d",16),
 ap_uint<128>("0x0420a4a4a03de68e2af3af2aa6717060",16),
 ap_uint<128>("0x11bb801f2f5f9729c2eee218f71a3dac",16),
 ap_uint<128>("0x69e9d448cc4a95dd23b7aed8a78209d0",16),
 ap_uint<128>("0xe991a8453eb4db5a7a5b1eec57276598",16),
 ap_uint<128>("0x35e8e1976170b1ed9634ea45c24af20a",16),
 ap_uint<128>("0x7e2a9a58f70f447d95b95acead2e3a50",16),
 ap_uint<128>("0x559ed4c2abe83b3f8fa7e0c537409b62",16),
 ap_uint<128>("0x93509936cd41db39addb9164649981cf",16),
 ap_uint<128>("0x1bd6955f479291f99f60d358c64cb038",16),
 ap_uint<128>("0x05969f7e0014df299aec3b3f97ece473",16),
 ap_uint<128>("0x122151176ef4b3fa5cf90a2955c78996",16),
 ap_uint<128>("0xf8ef6eb8df18c67bf17e7af128996f27",16),
 ap_uint<128>("0xa6c1f815ec9fe533529fc06e5b096e7f",16),
 ap_uint<128>("0xa3261093b6b1a831af82f7850b020087",16),
 ap_uint<128>("0x1df3317722afed5743358e746170b4cf",16),
 ap_uint<128>("0x718e2df8f6a46e161c89ccc9206b3afd",16),
 ap_uint<128>("0x965dd6482da954c228aa041a090201cb",16),
 ap_uint<128>("0x7c63575dba83e6542e05e91a25fe01ec",16),
 ap_uint<128>("0x15778032a8119c7aa116a499bf4b5928",16),
 ap_uint<128>("0xec1b10109bac2f055a5cfbf84ed28c08",16),
 ap_uint<128>("0xae899fbc30e6c2feb249cb5f595050a9",16),
 ap_uint<128>("0x554f7f34133105de47764528df4854d5",16),
 ap_uint<128>("0x6a74388833553772cb8bf62ff7782568",16),
 ap_uint<128>("0xeea9273fe5590c632cbb4f5ca56ad6d9",16),
 ap_uint<128>("0x6513f24257379b302e7b39eb92d2cb54",16),
 ap_uint<128>("0x88446558f3c956b6be08b3d1af327190",16),
 ap_uint<128>("0x7435ff90b22fe5ee2fbbc55856bcaa97",16),
 ap_uint<128>("0xaa429e61c2dc82555be53e66adf3015a",16),
 ap_uint<128>("0xd4136962bb11b59e5d422b949f981246",16),
 ap_uint<128>("0x926e15106274061bd21fd607c4d1c3e6",16),
 ap_uint<128>("0xdf611a87605b555d503f9eaaf07a317c",16),
 ap_uint<128>("0x9e76f95e384b5425287d209394d8098c",16),
 ap_uint<128>("0x1b83f8caa9d9aaf659c6f6d1918e8ea1",16),
 ap_uint<128>("0xb448643a836da1ee154e6722dc373ab2",16),
 ap_uint<128>("0x3b056f214e34b1722043b8eba1baa26c",16),
 ap_uint<128>("0x493c6884e41bfc836a72e248493ee61a",16),
 ap_uint<128>("0xc0ac8a88d2695ecfbb4d911984e50d49",16),
 ap_uint<128>("0x173a0bb9d6d393304d811c1c851ef8ee",16),
 ap_uint<128>("0x263d8a1053050a9e38a71e228ed87012",16),
 ap_uint<128>("0x22d1ca2b675508e101d98366c5ed1c4d",16),
 ap_uint<128>("0x13cc9cd238866c0658157db93586add1",16),
 ap_uint<128>("0x7368f41f1aaf6174b3798e8ce90f92eb",16),
 ap_uint<128>("0xebde8dab636cdc71d4852e941ccd8081",16),
 ap_uint<128>("0xd2de28859a34f2490a34e7751a809cba",16),
 ap_uint<128>("0xf501d561eed6a6749aa52bfd3bfd3d6b",16),
 ap_uint<128>("0x6445e4644885f5440f442218fd3bb334",16),
 ap_uint<128>("0xd4839b57a52b2a38ef1bb0b32ef34f8e",16),
 ap_uint<128>("0x9c22498babd3379aa175712594bf84f1",16),
 ap_uint<128>("0x8c36904e9e524d1ac1062317206bd423",16),
 ap_uint<128>("0x28a36938ef01591344b701d05ab26c8a",16),
 ap_uint<128>("0xcd5aebc7d9206c9efce0efb1795fa5a0",16),
 ap_uint<128>("0x2602b13cb12886906949295de021bbd6",16),
 ap_uint<128>("0x9e48f4aa99246df1e9ec5e870e6bdbb6",16),
 ap_uint<128>("0xa593449295991c5a67b6a02b65fa39ee",16),
 ap_uint<128>("0x067be26ce385f3dc0b4c68bea9c3148e",16),
 ap_uint<128>("0xe4698322794534cbc36c0d45379ac7ab",16),
 ap_uint<128>("0x8432d2a13d561b07b8bbb61fcf60e03d",16),
 ap_uint<128>("0xbac52f1d6c0eef12361647acdf9b74fd",16),
 ap_uint<128>("0x775df814e5e60f827b5c089d9f8fbedc",16),
 ap_uint<128>("0xb8873e28c67dab2b2545ada8694f9d6f",16),
 ap_uint<128>("0xcad7337b50321a186a822def0275065e",16),
 ap_uint<128>("0x6e16a70bf3ce9dbac079726c00980a81",16),
 ap_uint<128>("0x3db4db14dc37c17b2265b70d2bb33327",16),
 ap_uint<128>("0x81d58b09e5f88e8f4fcb26dfe3910ad5",16),
 ap_uint<128>("0x7d9491d2915066afea64a8a6809c1b7d",16),
 ap_uint<128>("0x6a965af53e389a3722ba75d88a3bb53f",16),
 ap_uint<128>("0x46c826e9922075fa3114842b16e48144",16),
 ap_uint<128>("0x34c285acf9ea35d717b4870d55b41819",16),
 ap_uint<128>("0x803e495e450cf97dc1a2b6693a506d41",16),
 ap_uint<128>("0x3c67703dfae1c8861be480212e1dbe38",16),
 ap_uint<128>("0x6f5ec0769936066a41edf039b20f3ef4",16),
 ap_uint<128>("0x762c8232244d055de9ba2ba3f86c8e5b",16),
 ap_uint<128>("0x67b13dd7f07ee2a5236a216be0ae3c78",16),
 ap_uint<128>("0xdbb1e99458f1eca812ea4f28180ac199",16),
 ap_uint<128>("0xca88811e9b9d44288edb635ddfa7a2a9",16),
 ap_uint<128>("0x760284f5b9a2c74930caf44652480520",16),
 ap_uint<128>("0x8780dc54d834adcc18130355a16fd2f4",16),
 ap_uint<128>("0x60f931f224d3a19e06fdd535279a1db5",16),
 ap_uint<128>("0xb8b4b79fe6b3aa400badd38e83d53ad4",16),
 ap_uint<128>("0x7ede2e3ea3a48e1358a9d60c339c0e4a",16),
 ap_uint<128>("0xd9c3fcdc1963860563141a15aebee71e",16),
 ap_uint<128>("0x8f8883f8e15e303bf7d13f92fd2d9f81",16),
 ap_uint<128>("0x3478abdd18e27d82fdb5874c00a61958",16),
 ap_uint<128>("0x01d9e83388201a49ce3776e1d5648564",16),
 ap_uint<128>("0x7da93853f304c2a2325ae9d3f272d647",16),
 ap_uint<128>("0xe53bd91d58e6674fc27dfa7aae3d39a7",16),
 ap_uint<128>("0xbb8288cee358e0d3310184c271db549c",16),
 ap_uint<128>("0x794d20ef61fb220161e103f38735325a",16),
 ap_uint<128>("0xf1421f6ed91a749da13b44d82b696c99",16),
 ap_uint<128>("0xca3bdb2db3fbeeab1a91f1cd3948a3b5",16),
 ap_uint<128>("0x0d78698f19fbc59b7113880e0452ef35",16),
 ap_uint<128>("0x7c0139910142f24028787e6c0ad25bb5",16),
 ap_uint<128>("0xb9ebdebe6214196769bfeb2a3afd03ce",16),
 ap_uint<128>("0x5a954354e0efb3347194a99e97ec0263",16),
 ap_uint<128>("0xe017eea766cd60513f43a9db8108ccea",16),
 ap_uint<128>("0x411a727edb07db7224506ca736fc70ce",16),
 ap_uint<128>("0x986355d9b33210048cebd4c5d3b9f724",16),
 ap_uint<128>("0x2104f6ccab3d534c42c3b1f713402848",16),
 ap_uint<128>("0xe1a19f7f3c43ea0fbd1b87eb87600aab",16),
 ap_uint<128>("0x45010a15077e10057c05b738c98089a2",16),
 ap_uint<128>("0x832c219fdf7800ec3f437c3f2bc5b7b8",16),
 ap_uint<128>("0x71f66f462422a1155fbc8d8269c78c85",16),
 ap_uint<128>("0xabdea8ee76101535b8c693ccc7d8edfd",16),
 ap_uint<128>("0x20ba32a072e90a504516417382f1c06e",16),
 ap_uint<128>("0x0ca938e76db61720d04d53e8adea0a7d",16),
 ap_uint<128>("0x6567d12b8a67a2178278b50ae014b002",16),
 ap_uint<128>("0xfa866f5641fb5fc9cefa7f6262eb44d0",16),
 ap_uint<128>("0x1f640147e1bd03d4ec82f53e99ef36a4",16),
 ap_uint<128>("0x0cbb286fa6d51b99720306055a90f0ce",16),
 ap_uint<128>("0x6ef2e10ab33c73fa370c3acb90d65830",16),
 ap_uint<128>("0x2786bde81467d0ea7f03f326119c69d7",16),
 ap_uint<128>("0xe6a66f29647bbd13187cac8a91548b5b",16),
 ap_uint<128>("0x9a5f63c8f2f5e87e3be685a285ee26fb",16),
 ap_uint<128>("0xb90a52bb4784595e29c0dc9427857b14",16),
 ap_uint<128>("0x4bfab91f4a50017ed93c4147a2efb256",16),
 ap_uint<128>("0x210d11fa3858947cfd2dd9385e1947c1",16),
 ap_uint<128>("0xcb575bd2d4a1e1ae6f7d649a80771ed1",16),
 ap_uint<128>("0x216b7bc8fd7a9b8ecfc802e997f1f61e",16),
 ap_uint<128>("0xc5cbf5a5566e1af140dab002522cc5b7",16),
 ap_uint<128>("0x351009b97c411cdf43b52bdcbce181b5",16),
 ap_uint<128>("0xab7bd52518744c5d97e99fd0be675df5",16),
 ap_uint<128>("0x19966e722f9d8a73a2641c6e272946b8",16),
 ap_uint<128>("0x834d095472361f62a299de45e1eea4c1",16),
 ap_uint<128>("0xf5cf74e2dcdbdc65ccdb4dfa8aa6df64",16),
 ap_uint<128>("0xcb4b600cd38b9f9ff9b2b784e93c8f0f",16),
 ap_uint<128>("0x1a609af53568d2829ed2442f82672c25",16),
 ap_uint<128>("0xb58b1609c1da0fd56b134b2e52d567ed",16),
 ap_uint<128>("0xd1c3757959156a70a18d975d5d864a60",16),
 ap_uint<128>("0xed086b9557dcbe1a49d7a0d11083705f",16),
 ap_uint<128>("0x403b282394c9e3a895b863b5f63101f2",16),
 ap_uint<128>("0xb85eb95eb21ce0f5b5247a6ed3dc9018",16),
 ap_uint<128>("0x6f03fa23a112464a290c41aeb9b50d59",16),
 ap_uint<128>("0x889e1d77bc931b25a3d7116fd90bef04",16),
 ap_uint<128>("0x213f9cba20e916cc6e8d0429b4d9251e",16),
 ap_uint<128>("0xd6ffd261559756493fe11792cbb8a1e1",16),
 ap_uint<128>("0xd993e2e1d65f0e2bc5c2cdd35c63c334",16),
 ap_uint<128>("0xa68283089a445b972c7d6e4b541fa320",16),
 ap_uint<128>("0x9a0c50b3849475382eacfa3a43e9c151",16),
 ap_uint<128>("0x38ddda8771c39ac2e2dcf35395598027",16),
 ap_uint<128>("0x7a563729624840a8b9afc5e749d3a79e",16),
 ap_uint<128>("0x531ca61954da45c5bca194310766bd51",16),
 ap_uint<128>("0x3bfcafb1e5ef98d4822c625f171226f3",16),
 ap_uint<128>("0x184645ebc017d3c05110d648dd73e917",16),
 ap_uint<128>("0x49c8b3613de23ed6e97df267592632c6",16),
 ap_uint<128>("0x1be43a64b89ed52c0d1c34f6ddd3308a",16),
 ap_uint<128>("0x967d211c45003aae7a34c99ea6a827bf",16),
 ap_uint<128>("0xb624aa358f29922e9af131222199a242",16),
 ap_uint<128>("0x3dec1c535675307d9d723e0e5052f30b",16),
 ap_uint<128>("0xdae5b1b99eb2b3d473671cf71ac29a30",16),
 ap_uint<128>("0xdd65ff0c5fdfa26b469746e4574543c3",16),
 ap_uint<128>("0xd4a82839349fdf040f1fb589dad5eadd",16),
 ap_uint<128>("0x719c5f34bbc42e5b860caeae313de166",16),
 ap_uint<128>("0x0e20d18c4e47bc49ace32c6b74ae4c8d",16),
 ap_uint<128>("0x7b27fa5fbf306319ca2d0db9f51b1841",16),
 ap_uint<128>("0xb40965a8ce25f0d76896e1130aa0926c",16),
 ap_uint<128>("0xd2dc4a719e267fd0536939d60462e593",16),
 ap_uint<128>("0x1900815ac2d3c90d469bf3727d9a8248",16),
 ap_uint<128>("0x2f9f1bf8561dd81856bece345790614b",16),
 ap_uint<128>("0x3c3f8bfd5751da11b3bb4729a20fe422",16),
 ap_uint<128>("0xed82b096f5532fd97c75cf8f529ee09f",16),
 ap_uint<128>("0x1812aff9be82283469d862a19d271584",16),
 ap_uint<128>("0xe4e5454deadcb3f66bba380323d33bd9",16),
 ap_uint<128>("0x65810e6a16954105265d73e6bf211768",16),
 ap_uint<128>("0xdaddd311c8e4ca8bfafccf4918f5db22",16),
 ap_uint<128>("0x986f2e905787a128fc66e584ca9faf4b",16),
 ap_uint<128>("0x9094ca7d0f8817ec0d6d5651f9fdd96b",16),
 ap_uint<128>("0xbd6139789638cb66e34c10f061a4592e",16),
 ap_uint<128>("0x1040471545d45a25a3bf51ebf3eb9c51",16),
 ap_uint<128>("0x7425a977abd3dd8f7f23d9c5c0f29faf",16),
 ap_uint<128>("0x791ebdad225754e3377784257214c6a4",16),
 ap_uint<128>("0x1a8423cf1b31abf4ab8d63c14c1f2945",16),
 ap_uint<128>("0x3ad868cc07adcd1d57421c29b38a0c3d",16),
 ap_uint<128>("0x29bcf34e92be394de2e33b2b32e67244",16),
 ap_uint<128>("0x74576a5317dc9bebef30f892851d6435",16),
 ap_uint<128>("0x1afb71eed3b87ec5c806b158571722ea",16),
 ap_uint<128>("0x400a89826f3a175ac83788e6a0ee7237",16),
 ap_uint<128>("0x976fe87fd931df399c35c1578b15e60e",16),
 ap_uint<128>("0xfdb6db0cabafc7a64dcc9f437b856188",16),
 ap_uint<128>("0xb24fe828d72fb4dc1ef8d7c1c55ffac1",16),
 ap_uint<128>("0x1742e473bc01e34614fa3129f114e5d9",16),
 ap_uint<128>("0x22b82fb4509cc3aedb300e10dca7bbc9",16),
 ap_uint<128>("0xf7f45ca57948a7b64643d05fc6adfde1",16),
 ap_uint<128>("0xa716a33cb3e2d41faf26dcb16529c279",16),
 ap_uint<128>("0x878b0de5e4996e6187a572fd52867ca7",16),
 ap_uint<128>("0x54262c0d100f9c0ad6d9573ca5433736",16),
 ap_uint<128>("0x9b6e4abae6fc3b55421e4059a6cf5818",16),
 ap_uint<128>("0x0dcd97abad118b435ef99adb5e60cb75",16),
 ap_uint<128>("0xf26ae2f6b362151977fef6f3f09e2b48",16),
 ap_uint<128>("0xcb79587c261526f29a3f7f21b3f1ed78",16),
 ap_uint<128>("0x1f49649a9bfc991c4a524f21bcdea8f6",16),
 ap_uint<128>("0x7b3f77b7ebf6b9f17f5347b3d9b957ce",16),
 ap_uint<128>("0xee4ae4a9a6debbeec6a1a340c112ad10",16),
 ap_uint<128>("0xff97f3f369be957906051636d8f50469",16),
 ap_uint<128>("0xda346d6e1e6e328276e385abfd1d20c8",16),
 ap_uint<128>("0x87697e93995dcee67f28df63a317a6a3",16),
 ap_uint<128>("0xa9f66b3fa0a8ac396ad1f1e1d2342e06",16),
 ap_uint<128>("0x76e755426561ff9f31453d30082bcd2a",16),
 ap_uint<128>("0xd405ccdd52b0089a620e24770be1a60a",16),
 ap_uint<128>("0x31a0fd1ceba849ff9896964ffdfd41f4",16),
 ap_uint<128>("0xc42804e027c6e9beb8178b3367eae41e",16),
 ap_uint<128>("0x7a8dfa99a1d8b79f501343f2a103561b",16),
 ap_uint<128>("0xe2b3836e6666d6ed8443eb09fb1c6dc7",16),
 ap_uint<128>("0xa2034cbcb99f875682ee063f97c29f37",16),
 ap_uint<128>("0x5d083214599daf5831ed8aae4e0fa496",16),
 ap_uint<128>("0xe33744e76c37ed5003555e15d32dd0ac",16),
 ap_uint<128>("0x732fd6913b8eded1636653e2477d7a78",16),
 ap_uint<128>("0x0b9c3abb99c0222ae25f2942e24e0329",16),
 ap_uint<128>("0xf3f92d805d6b478a92cecd376a85170f",16),
 ap_uint<128>("0xfbafdd5c0456d8da75c3ddfc19ec6ea7",16),
 ap_uint<128>("0x0739d9d1a67a46016778d7bae9f91bd2",16),
 ap_uint<128>("0x391426d70d0d54800bc005a101c5c73b",16),
 ap_uint<128>("0x14f4f7b0ce9abbdbfe4e6c377b61ac6a",16),
 ap_uint<128>("0x7519c1d0baa06ff9ac7dbcafe35488b6",16),
 ap_uint<128>("0x10ef63f62f334feea048bdf378ef473a",16),
 ap_uint<128>("0xc2d23af93c95270e81e81f26949dee1f",16),
 ap_uint<128>("0xa23fe4e663cda28db36a60c16c7943a1",16),
 ap_uint<128>("0x6f936ee7623f916a3f39277fb1a8da5e",16),
 ap_uint<128>("0x6ff104bf4af139f78cf41957ddab1b0a",16),
 ap_uint<128>("0xa51c09968a60238d9738173d2be4b8a1",16),
 ap_uint<128>("0x5b9ee57b64a4d5ee2fe305a57b47dff0",16),
 ap_uint<128>("0x3d894cf9a4d0897b09c2f9aa4bb67549",16),
 ap_uint<128>("0xf8eddd14c3fb4d69b264bdd0023a2d4b",16),
 ap_uint<128>("0x507455d69533a9fb5c6d720b598a149d",16),
 ap_uint<128>("0x2bc79cc1bbe3d498b8b08876d6579976",16),
 ap_uint<128>("0x04bf90d2293f78e1ae21bd9f00f09465",16),
 ap_uint<128>("0xda8c4ae9095f910924b9fb82d09c13df",16),
 ap_uint<128>("0x0aee83a8813e8603af29157ea616647e",16),
 ap_uint<128>("0x81592af8fbbfcbb237d276980d467c9e",16),
 ap_uint<128>("0xf42ec75c4f549bf4ed3697a56546b3bb",16),
 ap_uint<128>("0xd5475f3aafb00d87cc4fcc93beb971fc",16),
 ap_uint<128>("0x556ceb11e452381b50081e3f19cc5bd9",16),
 ap_uint<128>("0x2fd4c279196852821371de035a36feef",16),
 ap_uint<128>("0xa348b0e579aa26daa4310fa9ac94d1af",16),
 ap_uint<128>("0xfaa96e86ad00d381302e1d8f435af4e1",16),
 ap_uint<128>("0x3205f8ffd158392368e2a3a345e775f7",16),
 ap_uint<128>("0xe6cfdf5fe2ea7122d126f17ab0d09596",16),
 ap_uint<128>("0x85a32d0f0144cbbe0e7a249287309aaa",16),
 ap_uint<128>("0xfbb73c037e16b28b49f92c3abe8d041d",16),
 ap_uint<128>("0xd9901aa2b20e81dd3ea6a0ba64e9a821",16),
 ap_uint<128>("0x6cd25fe5e78fdb43daff03763366fe51",16),
 ap_uint<128>("0x445859f561ade88939c716e10f0b34a9",16),
 ap_uint<128>("0xbb1f7acce6b85ad0b280d27dd730766e",16),
 ap_uint<128>("0x218d189eae2960eaa4a0fc7e0a14bdc1",16),
 ap_uint<128>("0xca064891b9f6fc1fdd7fe062994a181f",16),
 ap_uint<128>("0x8f7bf76d8614c5c362035770f93302b5",16),
 ap_uint<128>("0xe9ff9c6e1f95ecbe28daa0c491228a67",16),
 ap_uint<128>("0x021496f9abf5a1db67f60b65f8b37973",16),
 ap_uint<128>("0xc500b41982f7085ecfc10796341b28ff",16),
 ap_uint<128>("0x860c81c87f6a1d6cacd790bffe441a02",16),
 ap_uint<128>("0x39c8819ec0154c4115ac75bcff246c18",16),
 ap_uint<128>("0xf7267bcef8dd124e286a2cc16877e6dd",16),
 ap_uint<128>("0xd506c5df89dfb8765cb0997b341a24a2",16),
 ap_uint<128>("0x7d26f3c9eecffecf55a4ed9c3a529590",16),
 ap_uint<128>("0xe4df91e78d4f82fd9ce28197cb7f1a6a",16),
 ap_uint<128>("0x5692bd43677579ad1ba16f3080083196",16),
 ap_uint<128>("0x114fdc0f00bf12710eb4ce4e9f168ea0",16),
 ap_uint<128>("0x402b0f46c6734f548a60caefd2d2f8bb",16),
 ap_uint<128>("0x97e61b0b7929eea4b2f64a4de4436711",16),
 ap_uint<128>("0x14b7023126c0c8d6e4ba7f45ea3915af",16),
 ap_uint<128>("0x39822b6819f2934bc481d5fc1188520b",16),
 ap_uint<128>("0x69875dc61a68530604954d58241b6279",16),
 ap_uint<128>("0x2a9a06a0fa415a41cdf5f2de7c4fc0fa",16),
 ap_uint<128>("0x6412fb35f387936eee90f72d62ac43d4",16),
 ap_uint<128>("0x07c02587ad46dafe9b2338aa1925651c",16),
 ap_uint<128>("0xfceed5cf1b5c5034f2f8fb8b3fdfeeed",16),
 ap_uint<128>("0x534d51ff70f0898ef2fafbddd538f9fe",16),
 ap_uint<128>("0xfdbca0bba7fa8752547bbf7f70fe8c58",16),
 ap_uint<128>("0x1b8351d83bb302f4987fe3ba81fb8391",16),
 ap_uint<128>("0x2d509c96e8217925c3d90e67043df3ce",16),
 ap_uint<128>("0x1968526de315a2496d26194efce608a1",16),
 ap_uint<128>("0xd302fedbc28f3a81b4033cdebcd82c15",16),
 ap_uint<128>("0xf7e26d38e23bc5a017ffb78da0eec383",16),
 ap_uint<128>("0x4c98bd4e4a00252d345e7b547667b78d",16),
 ap_uint<128>("0xbed18cabe0d632aa99ac707a78a05a35",16),
 ap_uint<128>("0x7565fb0042145b6068437c8d669daa7f",16),
 ap_uint<128>("0x771b3018bb0c077025e583f7680f17a9",16),
 ap_uint<128>("0xd89773f78155059603a654f1c71fba25",16),
 ap_uint<128>("0xae4847c105121aba71a085844fc905c3",16),
 ap_uint<128>("0x8e035c7f4f9e844a096257fae96b88cb",16),
 ap_uint<128>("0x7993fbc1784367cd4228ba16372d3b31",16),
 ap_uint<128>("0x6ce4499ca945b36fbf02c5d7308be19b",16),
 ap_uint<128>("0x7c1f68c40846ee0ce0db0666e7448e7c",16),
 ap_uint<128>("0x62e8d2615c0bff77850f3a228a3fd6a9",16),
 ap_uint<128>("0xe743d5ea3744365a700c596761236d03",16),
 ap_uint<128>("0xf410b3ee3eba47e917149d09f3fb5074",16),
 ap_uint<128>("0xc455882b2a86b51a752a847a4cb13dd7",16),
 ap_uint<128>("0xe6a814834b7d57da27d2858d681dae3e",16),
 ap_uint<128>("0x3f61af5ede02d35ca503873df5838861",16),
 ap_uint<128>("0x199eb5e76f92ca4a7631f33df5243548",16),
 ap_uint<128>("0x1e56ae41cde5af98de6b0d6ab5e87a32",16),
 ap_uint<128>("0x141bcb706402b3d71aef13ea21b2e188",16),
 ap_uint<128>("0x82e96cf98ce13dd82f8ec615e8139ccc",16),
 ap_uint<128>("0x04bafa4c0822842b48690637a4e83848",16),
 ap_uint<128>("0x1782e20c8e99f32f48ec86a73b9a9c18",16),
 ap_uint<128>("0x044d92c57f3a4d346dfd94c8f2ccc8b3",16),
 ap_uint<128>("0xbde0f5743152ec9da48a82b42e7f97cc",16),
 ap_uint<128>("0x77c66a110030fe28e21069bcf8639aeb",16),
 ap_uint<128>("0x458bf5ccaf4a68e58b6614885fa56df4",16),
 ap_uint<128>("0x23e980f68f1672cd2b7845befe78d256",16),
 ap_uint<128>("0x6d3d86e3296e889bb23133f7f274687a",16),
 ap_uint<128>("0xb49e50d4163f540ead9fb6efaf11a0f3",16),
 ap_uint<128>("0xc32199cca40ae5b6b97ca3241ae609a7",16),
 ap_uint<128>("0x45eda6bcd912a298dd4f7d9354c956e8",16),
 ap_uint<128>("0xdfc157913327376df0ac0afc62bf8355",16),
 ap_uint<128>("0xb5b5dcf064e0540d341ebf95e826ba17",16),
 ap_uint<128>("0xe16a0a855a00bfa2e006bb19b3b81000",16),
 ap_uint<128>("0xeb372f02b235a302ccef7446a48d41d3",16),
 ap_uint<128>("0x6c2f1eaecace2d61b376dbdb9399bef9",16),
 ap_uint<128>("0xffb65b19aa5900351225cd155249fe62",16),
 ap_uint<128>("0xf4bfd5927662bcecece5723340fb1c89",16),
 ap_uint<128>("0x5312b19addd8f0eb3f8b852d730d3e70",16),
 ap_uint<128>("0x09c3a515492f28620dc069dc288122cb",16),
 ap_uint<128>("0x9fd4d91428be89c15233e15c714b9e39",16),
 ap_uint<128>("0x380a3de074876fbec9a925a732e8edc7",16),
 ap_uint<128>("0xba6d275f01bbf13bf3bed2473d1c25df",16),
 ap_uint<128>("0x3c6589f1ea5043e720c769dbeaea6d50",16),
 ap_uint<128>("0x881cb76d6c7500d77a3d2c315754fd3f",16),
 ap_uint<128>("0xdd21e7c7a5abefd7b46c56021b2e7d5e",16),
 ap_uint<128>("0x42794623633d6ae9c5c4742045aba23a",16),
 ap_uint<128>("0x016df7ff3364e9abcbc84f63655d76b3",16),
 ap_uint<128>("0xe2071d496b1ea9e4f081434ad42cc14c",16),
 ap_uint<128>("0x116cdc7db230d0ae000ba2dac03cd758",16),
 ap_uint<128>("0x891144de5e026665359e27ae685eae7e",16),
 ap_uint<128>("0xb4082133faab0977ee33e8a325b22b2a",16),
 ap_uint<128>("0xd5fde8db32552c88dbb6f7cfa3805061",16),
 ap_uint<128>("0xbd3a2d39ecf47ffe448b1cc5d55f27b1",16),
 ap_uint<128>("0xe2ed34d6a28c94e18ae8b8c4b0f89579",16),
 ap_uint<128>("0xae6d225d2dc9d0843a7b8179090de92f",16),
 ap_uint<128>("0x0cac603c03169f68916a0faafe0f20ec",16),
 ap_uint<128>("0x0fc4c6060fed293df8efe5340123a597",16),
 ap_uint<128>("0x8aa25ea1f15560e85d6890b8cfcdc2dc",16),
 ap_uint<128>("0x209d76d8155cbc68f9615b71977249e2",16),
 ap_uint<128>("0x2f00d44716d05bd1741108e5c977ae00",16),
 ap_uint<128>("0x6dce6887745d0eb441823a42757ebffe",16),
 ap_uint<128>("0x49eade32315ecd10ca428f7f9cfeb762",16),
 ap_uint<128>("0xd1752aa80718b50605ed75ee62363cc9",16),
 ap_uint<128>("0xc2b7f83837313198cf93c7a59a5b479d",16),
 ap_uint<128>("0x01e727a820ed4a515f0c9ae62a806ffb",16),
 ap_uint<128>("0x535d4d1b3f06cb70ffdd463f0a49090c",16),
 ap_uint<128>("0x441f6aa19af3c2864f3726b347609a44",16),
 ap_uint<128>("0x2e6157126df478cbbe29d9c3fc707b1c",16),
 ap_uint<128>("0xf2f5fd726729b5fb1d995eaf2d7dc0d4",16),
 ap_uint<128>("0xf99fd481cf55578a166d440956137321",16),
 ap_uint<128>("0x0e2ea7f0b1cd42dc7ad846d79b29b22c",16),
 ap_uint<128>("0xeac6b9f48f95e0a15e5125d309fcc900",16),
 ap_uint<128>("0x7d859c7f37e7dd70793054147751a584",16),
 ap_uint<128>("0x6b6c5ff8ffd75c6af0e638195d40be66",16),
 ap_uint<128>("0x733be2dd80005b04c70fefbfe4620c92",16),
 ap_uint<128>("0x94d49d862526c65a1420ab3f808429a8",16),
 ap_uint<128>("0x6782d460c1a1b1dd11f1c5b27479796d",16),
 ap_uint<128>("0xdfaa66a20b12c929491409a74bda2a3d",16),
 ap_uint<128>("0xa99be3fc66fde9ba0f5646d929b49ae9",16),
 ap_uint<128>("0x0ffa366fe472fdf6202c791c59b284f9",16),
 ap_uint<128>("0xf4734f7ce9207d029ca77b376b1f0f1e",16),
 ap_uint<128>("0x59279d90892a5d281a1454506149901c",16),
 ap_uint<128>("0xb61bfc794e1734491f6198dbfa7e91aa",16),
 ap_uint<128>("0xbe05a8ec836059fa94946baf2c9130e1",16),
 ap_uint<128>("0x4c9f2feec8e1008fe1419dc4b8f85852",16),
 ap_uint<128>("0x22e0f0ecf36d720c2e129410de7d5796",16),
 ap_uint<128>("0xab7a784130669053d5b103981850edc9",16),
 ap_uint<128>("0x1e25eb275f8ca3559e9bfb3495ce2924",16),
 ap_uint<128>("0xb2de63a71a446cba94fac823af957ec6",16),
 ap_uint<128>("0x1f80f27016dab948566703b7b71307e3",16),
 ap_uint<128>("0x19fd6020560262fd8cdbadfc1301aed0",16),
 ap_uint<128>("0x9c21e6bc6f5a2c650ffbc0b6aa42e80d",16),
 ap_uint<128>("0x5483be914cf71ff7e550c2369bab8104",16),
 ap_uint<128>("0x96b55e0f88593b54a5036a357ea9290e",16),
 ap_uint<128>("0x4d4cf7e97cd2e36ae54e9f0f936bfc53",16),
 ap_uint<128>("0x284290b46c11e7fba28db5ccc85959ad",16),
 ap_uint<128>("0x6f698f0c7439d7af3c9ed71f8fdad7d3",16),
 ap_uint<128>("0xe5c6dd55d1ea8a78972de91936dcd535",16),
 ap_uint<128>("0x07151a7986c81190db46345d7e3ec0aa",16),
 ap_uint<128>("0x4abb2d89eb78d4aef42cc9e29a62191e",16),
 ap_uint<128>("0xda4ab52f7e001b651eb9295813eaef10",16),
 ap_uint<128>("0xe7437c14a614c407cf81b342be1bc595",16),
 ap_uint<128>("0xda7f8a2c03458c3f0412529c41d0bdff",16),
 ap_uint<128>("0xd8295d6bebe2035513f0bf68bb0095f4",16),
 ap_uint<128>("0x76a59b7e07e7a21e7de1e3499ac61a71",16),
 ap_uint<128>("0x35d014dfd874b578f959da90906479aa",16),
 ap_uint<128>("0x922349db26dcb184bbd974c985fe1164",16),
 ap_uint<128>("0x2dd1a16e80a6886fb18bc1d66f1ce75f",16),
 ap_uint<128>("0x94a4454ac7524407b26dd2cdab893654",16),
 ap_uint<128>("0x17fe1eebbfa1586a05810db6dbcd2ade",16),
 ap_uint<128>("0x020a95928edb1566c707c8a742531c92",16),
 ap_uint<128>("0x9eea9ab60216f9642b1a4ba4fe6bacd6",16),
 ap_uint<128>("0xee58a7255f6a0c2f66d51c7c436526f3",16),
 ap_uint<128>("0xe2408bb968169304e1104aac73b3f075",16),
 ap_uint<128>("0xa7a37aaebb52dd376e439891597e8c15",16),
 ap_uint<128>("0x22d2bdf1c553c828d316a6643b873ffa",16),
 ap_uint<128>("0xf818b786c3df23113d2d17de57311a1a",16),
 ap_uint<128>("0x9a808c9b566b8c929760af7dd896b1f1",16),
 ap_uint<128>("0xc708c676eb620dedb1fe6d2c256bf13d",16),
 ap_uint<128>("0x274379d84eb79ea31f68c0f2b0d21f17",16),
 ap_uint<128>("0x7e00fbba6a8247b4946d8591ef22e552",16),
 ap_uint<128>("0x7c4a3e62c202d9e26b33cda6e57298a6",16),
 ap_uint<128>("0x6634edaf2ddbcfe71906f78b0dad261a",16),
 ap_uint<128>("0xc2a62a37e137f96708b67faea9747500",16),
 ap_uint<128>("0x383a90b77a1b490228b5bcf6eb788c3a",16),
 ap_uint<128>("0xbbf28495339328732e5f479f02e9c6c6",16),
 ap_uint<128>("0x2c77b26f7337e0b4e5601b04f6ffb76b",16),
 ap_uint<128>("0xb9c7969201c52483b131a41047b73ef3",16),
 ap_uint<128>("0x4c46e0a5eaa150c4c31908dfc4cce6a5",16),
 ap_uint<128>("0xf798e16447a00ecaee8e8ef60578b4c8",16),
 ap_uint<128>("0xf6c1187a5bd65db53f364cec13e578c2",16),
 ap_uint<128>("0x76b9befc2bfbafe930f1911f1a9c1b66",16),
 ap_uint<128>("0xa44925dbdb340a9cf667898c1842762c",16),
 ap_uint<128>("0xfac13d358d38ea4a883768dc961d1b94",16),
 ap_uint<128>("0xde7b30b5909d66318f751f8dccc17dd8",16),
 ap_uint<128>("0x48f8afa49dbc224c8e47941521e68735",16),
 ap_uint<128>("0xecc384eae70086a49fe8a2c3467e4295",16),
 ap_uint<128>("0xbb21c2878fb368402536c89689bce563",16),
 ap_uint<128>("0xb6b5db1749e1ddaf579b93fe5a42d88e",16),
 ap_uint<128>("0xd445e73f6ca0c35caf8b4d30e13d3704",16),
 ap_uint<128>("0x435a8c03e878d47d07ce07ef513a623d",16),
 ap_uint<128>("0x85e398dbe8e47f4bfa5d7ec75e52276f",16),
 ap_uint<128>("0x91f036c9315ad441a5ece7b518b89b68",16),
 ap_uint<128>("0x2afe2e85b7e3a6c370b317280fee94af",16),
 ap_uint<128>("0xa4d1a848bf322c52873ea91628f971ec",16),
 ap_uint<128>("0x71eeb8f510f054eac15c42c388f00f12",16),
 ap_uint<128>("0xa956c90decb1f1a4e697ea253d41d4d7",16),
 ap_uint<128>("0xa44f3eb21c743317c9763cfa382340b2",16),
 ap_uint<128>("0x6e02066f0233b8725a4a15ffa2db6793",16),
 ap_uint<128>("0x7eb207c775dd6ed0086980819517be48",16),
 ap_uint<128>("0x6acc8f9954370ba76baceb3227dd8bc2",16),
 ap_uint<128>("0xc320e1403689cd1111a1981ade13ba7c",16),
 ap_uint<128>("0x36f9078c4e4ea3b6198dbe5a6cd81c2e",16),
 ap_uint<128>("0x5c840f5ff8649626f6b4d03cb71dca5c",16),
 ap_uint<128>("0x6dde356c720c21887023801e649ed661",16),
 ap_uint<128>("0x627f7ff680b4b58262cce41a9f8a51fc",16),
 ap_uint<128>("0x416bbb0bc04b59e20c01ba0361fb99ae",16),
 ap_uint<128>("0x737a0a02f57fce68c3815406305086fc",16),
 ap_uint<128>("0x1523151b4f57ea7863a9627da325f631",16),
 ap_uint<128>("0x058a7f7291afa2fed5b1e8977786502e",16),
 ap_uint<128>("0xec990cab54074dbc3f4604b0f627fa00",16),
 ap_uint<128>("0xbe573e2fb3082352b0733bc8117afb98",16),
 ap_uint<128>("0xcf0c38d96baafa27febd2b3efca34738",16),
 ap_uint<128>("0xf92c017d26729d1757b01c955735140b",16),
 ap_uint<128>("0xa5fb96ad1df92bff11618c235d956cc2",16),
 ap_uint<128>("0x8fcf68c07b0660bd78734b917170443d",16),
 ap_uint<128>("0x43f2e78d9e3acbf8a4272e59a190bb9f",16),
 ap_uint<128>("0x8076d8b04a64a1ea679c3360fb753fc6",16),
 ap_uint<128>("0xae5d31a48cd929c38d00c7a65214a5a9",16),
 ap_uint<128>("0xd80e6ae352576429254cd82b5ee780b0",16),
 ap_uint<128>("0xc51d560d71d2b7b1b4b0ed23de38f6ac",16),
 ap_uint<128>("0x539baaa03891fcc2c37526a1c21fb2f2",16),
 ap_uint<128>("0x7c2538e3e6fd860be5a948a1a140a918",16),
 ap_uint<128>("0xfa96370c5b2a1b326baf4499634d6d8c",16),
 ap_uint<128>("0x8db47b623bb31824ce78f60e2ee73d49",16),
 ap_uint<128>("0xebea1a560d74eb0cc4a1fd5e25e47dac",16),
 ap_uint<128>("0xfe40157b145abd1224cd2ca5ac30f729",16),
 ap_uint<128>("0x43352bd7f24a075033b4bd430e1437b0",16),
 ap_uint<128>("0x1b68314948081fe5c8c88394b75d979b",16),
 ap_uint<128>("0x2a4b3b14b6cfac7fdb32cf07b2b45f88",16),
 ap_uint<128>("0x84397154a1eb2e39e46fdf11044feae7",16),
 ap_uint<128>("0xce9e1d513984441a754828501ddb97b5",16),
 ap_uint<128>("0x8d231695a0fb62c3e56c520ae1644a05",16),
 ap_uint<128>("0x4005c91465d45669e3e1f87c80fdd095",16),
 ap_uint<128>("0xf4b15d48e511e1e4a0b297729abafbcd",16),
 ap_uint<128>("0x13796559f55bff6d7448c4218f64893c",16),
 ap_uint<128>("0x99a4434e2e514d24d1d6e30ef1ec9cfc",16),
 ap_uint<128>("0xae665f5880341cdb7127e34e2b26f158",16),
 ap_uint<128>("0xf813280df314ce3a500b03bab08035a2",16),
 ap_uint<128>("0xf772ff5ad7dbc3566bc31f2e49c00ad6",16),
 ap_uint<128>("0x66126449df18c779a1358ff4050702d1",16),
 ap_uint<128>("0x3ec8d526bbcb71ba3c8faefee2789d28",16),
 ap_uint<128>("0xa9f9fbdcfce706259007032810f1b5ee",16),
 ap_uint<128>("0x65be66ae9969ec60c840b25af0661c70",16),
 ap_uint<128>("0x214976949505cb024297997fd40e730a",16),
 ap_uint<128>("0x6e535ae74e2eabdef35a143720852bc5",16),
 ap_uint<128>("0xe635e235ce31bdcd0ed9df8ff126385f",16),
 ap_uint<128>("0x9fa3e191ed3615553a219d9cd9796c32",16),
 ap_uint<128>("0x9118679cfa47ea11fcdff183921de7c3",16),
 ap_uint<128>("0x98bbcea0df414f335f6be83fc9c46316",16),
 ap_uint<128>("0x06f04ee2b344c2cbea6b3611704e556b",16),
 ap_uint<128>("0x1adad37c496f4be71aca24ac8f6baede",16),
 ap_uint<128>("0xbab5ad21325e5f3f4f5862f4aca3322e",16),
 ap_uint<128>("0xac8ac2e10bc8a8744b2c48d7cf0f6269",16),
 ap_uint<128>("0xce7eeb1f1b49d937ef66b217d2eef738",16),
 ap_uint<128>("0xa4e37cc3547643136773fa8b8e5fb3a0",16),
 ap_uint<128>("0xbb7df3548ee46182348c4a955103a194",16),
 ap_uint<128>("0x5d98fbc0d5078937947bb6eb479c2028",16),
 ap_uint<128>("0x66d0305983ef03b6e4d1170600cc1d0c",16),
 ap_uint<128>("0x4e892dc20f89d89f4e3a594e37d02655",16),
 ap_uint<128>("0x814d9e4d47a75132cfb74458163432fc",16),
 ap_uint<128>("0x993c839227026b6cda847381ff852d26",16),
 ap_uint<128>("0x59cba1a2148303b49c905b8858a4e78b",16),
 ap_uint<128>("0x705934c99661a1204b01fc3f1540429f",16),
 ap_uint<128>("0x28af96d476c1b7b40fab95082c4e4502",16),
 ap_uint<128>("0x39ca3f6f0f73b45810626330d072f2fb",16),
 ap_uint<128>("0xe2473c07e7837420c108274d1a6b3052",16),
 ap_uint<128>("0x5622fbfa1322baea91e07285e48dbff5",16),
 ap_uint<128>("0x99fa7636f78813731497047922ee9d61",16),
 ap_uint<128>("0xc07aa1134dfc3f82c908dad0d9cb4bc1",16),
 ap_uint<128>("0xd76f882384daab8a18040c11626366c0",16),
 ap_uint<128>("0x3cb77eb1b0b4e8e9b0f29caf1fec3b49",16),
 ap_uint<128>("0x1178d773863f2bbe0d9c55ba9c951c90",16),
 ap_uint<128>("0x245063416a4e0ab5d779526e3c5ea674",16),
 ap_uint<128>("0xccd067dfe2b2d71cf8a7abe78b71fc8a",16),
 ap_uint<128>("0x182ad1047ccbfa09c862a3caed059aae",16),
 ap_uint<128>("0xbba45d167e9bd3e21463330e4f922df5",16),
 ap_uint<128>("0xe6b1075868c43b359d09d9c24b22edc3",16),
 ap_uint<128>("0x9968e78006a6608c31729fbac265d3d1",16),
 ap_uint<128>("0xa2c8f1c07a3fd7de684771698e4a6f69",16),
 ap_uint<128>("0xf99fafd97151a898e22472eed16cf96e",16),
 ap_uint<128>("0xc0a81ce8a3352df53758940eec33537f",16),
 ap_uint<128>("0xcff8ba326b78f835daf31a6b762a3e6b",16),
 ap_uint<128>("0x62f980507dde7ca5300ffc1f1bd2b01d",16),
 ap_uint<128>("0xce0cd1ae278cfc8f0fe089fb6b786a5f",16),
 ap_uint<128>("0x68bfe32172228fdb12504dcafe059176",16),
 ap_uint<128>("0x038f973e6dff547f8fc3bf1220d89a3c",16),
 ap_uint<128>("0x501abcaf0f2a57082c10cb455fe38230",16),
 ap_uint<128>("0x2edf7b872414c1cfa2ba49222ce8a4e4",16),
 ap_uint<128>("0x311ea5676bfe82de177141c514208c79",16),
 ap_uint<128>("0xf241b5b7ba8f930538a195c4e99c139e",16),
 ap_uint<128>("0x3d7678258773fc0eb827cb9795198651",16),
 ap_uint<128>("0xe2570f441ac994df1f407df3e4c59a04",16),
 ap_uint<128>("0x77e5c85998745afdcb23f1f65a232d5a",16),
 ap_uint<128>("0xe0d648b5e3e8f7837278d9c015546554",16),
 ap_uint<128>("0xab7291085c6fe7e6f5185164e72cea4e",16),
 ap_uint<128>("0xf96cf2152e215193c91fbea80567aefe",16),
 ap_uint<128>("0x9c3f5cf27571b997f678a1c2ada65e23",16),
 ap_uint<128>("0x7c218f959812e1728dc027b93c4217a7",16),
 ap_uint<128>("0x1c96a9337e281c42a3e18ba7e9717110",16),
 ap_uint<128>("0x630b8801044b643017b653c661028375",16),
 ap_uint<128>("0x0709dc89425e2ace6ddb7c403b3923a1",16),
 ap_uint<128>("0x2e9b202577d7e51dd6be241e92fc0d63",16),
 ap_uint<128>("0x8c9c527eb31a57a0a420540467c29929",16),
 ap_uint<128>("0xc492e55e787e04d972d77dd58c0b2fd6",16),
 ap_uint<128>("0x463fcad30f9e2c0a79390be0afc001b1",16),
 ap_uint<128>("0xfcbc662fcd988b4952c470f5b3fb944c",16),
 ap_uint<128>("0x8b51043a4462a7295032e40f689f29a4",16),
 ap_uint<128>("0x80761ddf5b7205d4dab3384a8a0dd562",16),
 ap_uint<128>("0xbf5015afd24b99d97dce05da0e17d80f",16),
 ap_uint<128>("0x0e7afb25227c81d4d0a4b42de424101e",16),
 ap_uint<128>("0x46dfb2791808b6e20b500fab29c33edd",16),
 ap_uint<128>("0x5b6e326f2dd4305c16fbc6a22644e1b8",16),
 ap_uint<128>("0x3e969d39f4533e9a2eedf9877c451eab",16),
 ap_uint<128>("0xbac56e05addf136bc4cf1f1eef6d19b8",16),
 ap_uint<128>("0x15d05608738f5e6c96f579b603f68218",16),
 ap_uint<128>("0x75b231efe4a651e0229e40dcfb941199",16),
 ap_uint<128>("0x61ddc4488ab678ffc4d0ad6539a16298",16),
 ap_uint<128>("0x870945a589bef73eb6de7ad88f91a90c",16),
 ap_uint<128>("0x4a014136d6bc1ef33f30f605a53c6388",16),
 ap_uint<128>("0xe988623157399534f1a4830eae0440b2",16),
 ap_uint<128>("0x238881b3cbae0e27d3261f01c4a1a81a",16),
 ap_uint<128>("0xf4dde0a3f1941028a10d48f6cc148ccd",16),
 ap_uint<128>("0x833f85659762bb2361a684e48bf20e3b",16),
 ap_uint<128>("0xb733f9fe512f7790664fbe744d0c2d97",16),
 ap_uint<128>("0x64f030e645c607a9bca2314c872cc585",16),
 ap_uint<128>("0x3fb5491853adacf86bc0c5a8dce2e0e2",16),
 ap_uint<128>("0x7f8dc819140e69473809018ae14b747d",16),
 ap_uint<128>("0x37edeb26d30c43e4312512a7ef9767c8",16),
 ap_uint<128>("0x7625075e3b13e51e9a5b6c8d8856b6c2",16),
 ap_uint<128>("0xd395f9a71fc8b8c43b882f00189ba774",16),
 ap_uint<128>("0xe31609ec809a7f40c639f48bfdbec820",16),
 ap_uint<128>("0xc0e8547e204411db347323ba88160a0a",16),
 ap_uint<128>("0xd3578fe6eda6a6bbea703095ac8f8c1e",16),
 ap_uint<128>("0x7811a2edd39ed4dd4093602fc029e470",16),
 ap_uint<128>("0xa3743602b619430ddfebfafd92ee8e6b",16),
 ap_uint<128>("0xe1a928cbffdfa16c89ee3950166a3174",16),
 ap_uint<128>("0xdbdde590caf70e7720cc329573be730a",16),
 ap_uint<128>("0x3515a81feed73d7b9f1c25153747d119",16),
 ap_uint<128>("0x562900480bb2e792460457590aae9565",16),
 ap_uint<128>("0xfae88ba4bf4f748ee4f7bcb1ae4ceb14",16),
 ap_uint<128>("0xf03a73a822d8e48abc845084c8786497",16),
 ap_uint<128>("0xa3d04f21e47c739fdeedd34733309c01",16),
 ap_uint<128>("0x6a3e30c9e6637b7d9a150796e19cdc13",16),
 ap_uint<128>("0x9c6d3b124f74afa5e94ae63efd6ff3a1",16),
 ap_uint<128>("0x450fb74bc98a18eaa964a10973c4056c",16),
 ap_uint<128>("0x779d80a4ef01f8527e3cda79f2261156",16),
 ap_uint<128>("0x10282600d6aee4c4b197bbc16af9b63e",16),
 ap_uint<128>("0x0cbc3726d3388967cf7e772e212aa4a4",16),
 ap_uint<128>("0xdee7742874dd11c27fbc15800bd01123",16),
 ap_uint<128>("0x533dfb9d0d864d4c3797a47f32997ece",16),
 ap_uint<128>("0x7555c0aa60f884fabe4851fa7af9afff",16),
 ap_uint<128>("0xd5e670e3075a8fb81aae7bddefb0df6e",16),
 ap_uint<128>("0x8c1170e8f9b3dc94a98ef5d6cec27b3b",16),
 ap_uint<128>("0x5060777b8a2a88103ab757328fbebebf",16),
 ap_uint<128>("0xe8180acf8710a1b4e49ff218961b0b83",16),
 ap_uint<128>("0xc7b76be43b9a1760ac265ab6bb07dfb9",16),
 ap_uint<128>("0x717da164cfc5f36eadfae238dc0f0ac8",16),
 ap_uint<128>("0x67bb8b94c2b4c57c2c80dcae24e3e8ee",16),
 ap_uint<128>("0x21b067ca35b1f780dc562a72ad87cf9c",16),
 ap_uint<128>("0x7eef2bdcad8c3ce4eba54a24ddbb8662",16),
 ap_uint<128>("0x1eb1dfe777f231bce2f496661153a546",16),
 ap_uint<128>("0xeb9a4f444e47646b7ea1e83907bd5632",16),
 ap_uint<128>("0x59be7573094d70704b4c6ee65d4d06e2",16),
 ap_uint<128>("0x5c875eed99a48541da8498bdf6225f17",16),
 ap_uint<128>("0xd258111720b781ceced22a4ee690e38b",16),
 ap_uint<128>("0x723d5322b476e37c9ca6bd5de7008212",16),
 ap_uint<128>("0xb9892c51bd715a8454940caa331728eb",16),
 ap_uint<128>("0x2a193306e8f40045d44f899927ddcd25",16),
 ap_uint<128>("0x3041d8bac7c6f6d7729f409897e0d331",16),
 ap_uint<128>("0x65482460fdabe4212db351ad462c6d89",16),
 ap_uint<128>("0x9cd2bf9eea26078ae84ae7d8c32f691b",16),
 ap_uint<128>("0x8844a832c0a5b535b8214901a02fa370",16),
 ap_uint<128>("0x704f65eda855424d5204c61ab8a8bad6",16),
 ap_uint<128>("0xc20ef126f901736c95c314f00194a8c4",16),
 ap_uint<128>("0x833891592e40bbf2cdfdcfba4d1ff480",16),
 ap_uint<128>("0x0afc2236ff0227fe1bdd51df95496a5c",16),
 ap_uint<128>("0x0b634d4889a2ef05fea2f93eb8d55e10",16),
 ap_uint<128>("0xb417fe1a0595b40a5b08ddda9448dd3e",16),
 ap_uint<128>("0x93ce60086202e28ddb9afdff2cc3e5c3",16),
 ap_uint<128>("0x5c210917e83671d16899e101890c13fb",16),
 ap_uint<128>("0x173e28da38797569ac79d96bb0b74ca5",16),
 ap_uint<128>("0xf58c39ad5ffda459a2ca0ef53fbcf74d",16),
 ap_uint<128>("0x01a5b22e2323e4769e0b155a42d0d4cd",16),
 ap_uint<128>("0x0e860837d76b8b2ccc733d7b6a933eb9",16),
 ap_uint<128>("0xb443678438b9394e35f91742426e0236",16),
 ap_uint<128>("0x98d9c99bb4bb41c7660c502a5071d52b",16),
 ap_uint<128>("0xd419afdf0726ed38825a48e8afd68278",16),
 ap_uint<128>("0x38260ccc2061191c64ce12a0844c62a0",16),
 ap_uint<128>("0x9cd3b208219149269873d83aa35de3f6",16),
 ap_uint<128>("0xa0755135059b5ce2149f281178b8f352",16),
 ap_uint<128>("0xfcbfe48a380d088bcc34a3cc6d23ee20",16),
 ap_uint<128>("0x53b1ec04725d5a729c3d0acfb16e3279",16),
 ap_uint<128>("0x9063bb04884fd5edbb0ec065c33c8996",16),
 ap_uint<128>("0xc0845e22326b3d20d6f50d1b3cd70c10",16),
 ap_uint<128>("0xa272770ed0b2ccb1ccc3d12d7b02ce62",16),
 ap_uint<128>("0xf0bba8ba0ee60c565b9df80f12006c13",16),
 ap_uint<128>("0x0171a75e16be083cb18a3fe2ee5f4838",16),
 ap_uint<128>("0x361b2b875e3ffc1ff0ec6774540245a9",16),
 ap_uint<128>("0x46544ceee5f9994531391aa963afeef8",16),
 ap_uint<128>("0x522128a3b21c891234bd729c325d1e5a",16),
 ap_uint<128>("0xaa2c01c83dcd6322e67bba04e7bad109",16),
 ap_uint<128>("0x7ca439d2d2ad279378ec5bf7c2e99bdb",16),
 ap_uint<128>("0x36f09064ad5407515bababe5d761b373",16),
 ap_uint<128>("0xde9ea6cb42c9e0758709ec653d16f24d",16),
 ap_uint<128>("0xf3100da32ca7e8e72687b8417cf47491",16),
 ap_uint<128>("0xe7491e5b9308f5b673dd3cb1df9bc8a6",16),
 ap_uint<128>("0x068ae20e7cdef4b7e8d52240e7dbaa0b",16),
 ap_uint<128>("0x2e85a041b80793b133a6e00f338b8047",16),
 ap_uint<128>("0x36a1a3c9570d2177b05d36cac687af2a",16),
 ap_uint<128>("0x2699f56c9b3ae38dc5dfe4e5ae6d64fc",16),
 ap_uint<128>("0x1239c98fcd05c8b048d64dad11219a2e",16),
 ap_uint<128>("0xd5245987bab0261efaf27013e238f611",16),
 ap_uint<128>("0x316b0d47e91b39a179baeb2a78af74b1",16),
 ap_uint<128>("0xecd57b22836365c0d5e61edc8701b648",16),
 ap_uint<128>("0x120e08b66efbdede9951748918bc584e",16),
 ap_uint<128>("0x80c15f411f700d0f79165f446ad84a03",16),
 ap_uint<128>("0x4bf35cb3e59a4fe0f6c2915015fe2902",16),
 ap_uint<128>("0x7cca932e16f48937524dcce331b66912",16),
 ap_uint<128>("0x09d09ecf44aae4e20e9243b61d914284",16),
 ap_uint<128>("0xac6cdb9ec03426fd4f24e8c434e4a29f",16),
 ap_uint<128>("0x01770314010c74cf757254a10c61379b",16),
 ap_uint<128>("0x312db7448fbfb22ec897288c4a24577c",16),
 ap_uint<128>("0x76a4147856c054f661e51379e866137c",16),
 ap_uint<128>("0x84623edbc50c4a702afc320bfa5b8c2e",16),
 ap_uint<128>("0x7ba44c088aef38dd0ae1cb34b960a7a5",16),
 ap_uint<128>("0xd81e7af49977f9bad41daeb43dfad369",16),
 ap_uint<128>("0xe790c6f857d150a0b4d3d028148642a1",16),
 ap_uint<128>("0xd001e326f8258cb7fad93f0e3ca7ad1b",16),
 ap_uint<128>("0x4e3389fec7a1196fb124581d45836aa3",16),
 ap_uint<128>("0x326dd932091842f8a7cfc4f82f93f0bc",16),
 ap_uint<128>("0x6ae50f42dd8810689643b07ca8f0bac7",16),
 ap_uint<128>("0x3a23dee089230b50990e73e3a43ad83f",16),
 ap_uint<128>("0xc5e6e5eae6f5618d868d84ebce3c0566",16),
 ap_uint<128>("0xab2e0127989859229e49d636b1681c58",16),
 ap_uint<128>("0x86aca08e1a23fc49233ff9b6972ef216",16),
 ap_uint<128>("0x2b7b9663b3e9d1ffb8964ba44da13e9e",16),
 ap_uint<128>("0xa9e8695cf4e7fad88680a09485626f2d",16),
 ap_uint<128>("0xf813cf628b8e4252ad46be5ca29cc684",16),
 ap_uint<128>("0x11154b12c7f68fbbc70c15ae8da1bc16",16),
 ap_uint<128>("0x78b6b246681658f3e74d41f8c9f24b93",16),
 ap_uint<128>("0xe6870a6a18e4c1b9cd2802e1c9f9301a",16),
 ap_uint<128>("0x73226e865d975c6665966bd7b2294395",16),
 ap_uint<128>("0xd9e6a43178a3ebccc137642b93284384",16),
 ap_uint<128>("0x8a553bcc2f9396a1b944b6981d586f29",16),
 ap_uint<128>("0x604e828a70a1ea1e1c5eb309e5aa293e",16),
 ap_uint<128>("0x260f082d54ad9dbdbc7f06827065e8dd",16),
 ap_uint<128>("0x97d680e873d78480b07afea79ec9138a",16),
 ap_uint<128>("0x14b9b86346b3a146fa015ab2eb2122ac",16),
 ap_uint<128>("0x015af8e1f97a842945ddf495479d3708",16),
 ap_uint<128>("0x275d720749e942aceffe372a337ac223",16),
 ap_uint<128>("0x3759a8b82bd5c0efaf7bc824ba4b747d",16),
 ap_uint<128>("0xea1d46736e17eaf86d880b9903871e94",16),
 ap_uint<128>("0xd13cc72ad7143a7184f85ade0367c067",16),
 ap_uint<128>("0x1f98d02314b0e966d2e32922492b022a",16),
 ap_uint<128>("0x6c13027d6d9a09bfda350c672f98932b",16),
 ap_uint<128>("0xa7314a45c9ce83c070b5c98684aa1865",16),
 ap_uint<128>("0x3b80c5c7b1c306eb0a77daedb9619d7a",16),
 ap_uint<128>("0x95cea04aed13ccbea35a1f4c09a7efa2",16),
 ap_uint<128>("0x0cc5898039b5f7bd4e772879ed7468c0",16),
 ap_uint<128>("0x90f64ce4bf5931155ef350c8b4b05200",16),
 ap_uint<128>("0xbc42719a3802fd78f096470f22d1fb51",16),
 ap_uint<128>("0x9d90ec755573cdc18a50859359a198da",16),
 ap_uint<128>("0x7002e05e103a1d6c15ef606441a1d3a9",16),
 ap_uint<128>("0x9972dad06a307f68044f983e7f656628",16),
 ap_uint<128>("0x97b9a298a0838f9c87e1598396769227",16),
 ap_uint<128>("0x08ff7357777c11175024b2c8260693ab",16),
 ap_uint<128>("0x2a3faf4a8728a03c00f4c6f79d118c2a",16),
 ap_uint<128>("0x98db9648ab3372e5b8b6f9bdf532d318",16),
 ap_uint<128>("0x7d6bde8df9bbd5e6e285e3cdb33c290f",16),
 ap_uint<128>("0xaa0a3d22916c1b6733d516157d7754a8",16),
 ap_uint<128>("0xf10a124c300e2b8f1bc5ae270030ece8",16),
 ap_uint<128>("0x6315bf72bb42d38d74bda240ceb077b1",16),
 ap_uint<128>("0xd0da03170882558ecdb7aebc0d79014c",16),
 ap_uint<128>("0x094843ac295fa46b381fec8bbec72de5",16),
 ap_uint<128>("0x475522a1a1a7107996c831f1130eba3f",16),
 ap_uint<128>("0xa9733829b742b4524e1ea0ca74da883b",16),
 ap_uint<128>("0x7e2dcf65605e4b145bba7d9d55883c5a",16),
 ap_uint<128>("0x5af729be03c20abb04771086af2fffaf",16),
 ap_uint<128>("0xab99de0eb5511059b8d1f0d0cb5ae35e",16),
 ap_uint<128>("0x722185190fc33f5301e2a7d871de6251",16),
 ap_uint<128>("0xc4e7b5bda48ee2b7541f90915933eb5f",16),
 ap_uint<128>("0x62634802ecf0fb4a488fbfbe210161bf",16),
 ap_uint<128>("0x371578ed0768c7c3c78f58978b32f2c3",16),
 ap_uint<128>("0x6fbb636084444a7ec3bc7f8ea29eea15",16),
 ap_uint<128>("0x330b1104551467db25da4129e02018d8",16),
 ap_uint<128>("0x1f6cc86374b8e0e090c9c5425191eb6a",16),
 ap_uint<128>("0xeb3cd9aa8b46c41f87d3e45a42a84780",16),
 ap_uint<128>("0xd28dbc57f7b1e38366e99b8be582129b",16),
 ap_uint<128>("0x6d574fba428d232392b0c8b168cfe57a",16),
 ap_uint<128>("0xc8fb069f5c27a06ec425ad3cdeb90e31",16),
 ap_uint<128>("0x5f42eae758ab044abdf3407fb271d3c7",16),
 ap_uint<128>("0x6f1bebd77315c40c1425754a24c52562",16),
 ap_uint<128>("0xb88cb4a16b617d17794149b42ec1ce25",16),
 ap_uint<128>("0xecadfb28c8f17bb6ece95c2091900936",16),
 ap_uint<128>("0xbf8ae5ea144b8b1f6ec5852273c03d4e",16),
 ap_uint<128>("0x763164895ead07f53047606ff9857add",16),
 ap_uint<128>("0x27e019651df6a1047131fb9235f77a39",16),
 ap_uint<128>("0x0c019e91007fe87750c6adca8d5c6658",16),
 ap_uint<128>("0xf0f14b2552643366142b087e754544ae",16),
 ap_uint<128>("0x29526349f1cd13e529ad6992bef92783",16),
 ap_uint<128>("0xc194762492d5b490087524e23d027d7a",16),
 ap_uint<128>("0x824059ca771cb9d13703bf6d2cebf402",16),
 ap_uint<128>("0xdd9173bc6cb106530a30782e62825456",16),
 ap_uint<128>("0x003fb759420f2c7d4b16d9fafe6af6a8",16),
 ap_uint<128>("0x40a6205032b453f77069d6c37a6ffa20",16),
 ap_uint<128>("0xb91edef5c982fbab5f241a4b90dd2356",16),
 ap_uint<128>("0x77ef3dd5e458e2846f3fe375df33a68a",16),
 ap_uint<128>("0xe246ed4240f1a2872dc66b3cf36fcc0a",16),
 ap_uint<128>("0x92ada2a0ece44c9a800d4ddb3638e4f9",16),
 ap_uint<128>("0x92b9483cd9813be8abab55d2635e20d4",16),
 ap_uint<128>("0xc7c2f2f961dd48da7ec9f31480ebbe79",16),
 ap_uint<128>("0xda679fb11ecc68f15064ca83edb6d4ab",16),
 ap_uint<128>("0x00873310f688d5fb411f912ea8c6db20",16),
 ap_uint<128>("0x822a1ad2a79b9f13a0628fe740405129",16),
 ap_uint<128>("0x092f2ef44e9fa100521202a017d1d30e",16),
 ap_uint<128>("0x1f66316f67c340ff2f53d6f8b3a471ce",16),
 ap_uint<128>("0x416bbdbb4dc33aeba22c1d682183cb2d",16),
 ap_uint<128>("0x34a18dbc3c61bd21d07209bba291710e",16),
 ap_uint<128>("0x8cada71f65335e9277509b602085162e",16),
 ap_uint<128>("0xc335680f26878962d59f8db26caf7b53",16),
 ap_uint<128>("0xd3029106f447e331ee2fbe6096e79e5f",16),
 ap_uint<128>("0x107ee91e6630206c0b32d714432bd4f0",16),
 ap_uint<128>("0x7aa88ab49d9c57854a02c6062a5cc173",16),
 ap_uint<128>("0xca44dbee591eff9f890095d9b5239540",16),
 ap_uint<128>("0xa195db3f7b8e00ea2102fd1e5ca9343f",16),
 ap_uint<128>("0x9d2d03dd38aac2aab227fb30301b6563",16),
 ap_uint<128>("0xcb336c20aff3e5dae80d4ff745a2c255",16),
 ap_uint<128>("0x3930915cef005fcc6d612595c68bcb66",16),
 ap_uint<128>("0xdd1ccb5b4c0af0e40020928848fc17fa",16),
 ap_uint<128>("0xb1d865646fc7ef60a165f76962acaf54",16),
 ap_uint<128>("0x8989ea12a59b093f51c2fddf1a2a324b",16),
 ap_uint<128>("0x364800e8e0863ca0d88c9a2459bf1f9f",16),
 ap_uint<128>("0x9b5d8ed1c476c9752d391ec880b37f09",16),
 ap_uint<128>("0x7ac92ba2470b54de8fe61703a1309204",16),
 ap_uint<128>("0x723ad8846a601234ba1304aff29e0667",16),
 ap_uint<128>("0x6f47303942717e06814895d102f9e159",16),
 ap_uint<128>("0xb3e16ac3a8d491f52a45e6a71abcebd2",16),
 ap_uint<128>("0x2adf714579d2723ecee09838829dd21e",16),
 ap_uint<128>("0x5cc327a6f7bc6ec9b00d725d27571a2b",16),
 ap_uint<128>("0x5320d4c9ebdab2c367fcce9cee5b9201",16),
 ap_uint<128>("0x9cbdb2865b36d07b3cc1ef611adae3cb",16),
 ap_uint<128>("0xbda195e989e784670057d4c0d64142eb",16),
 ap_uint<128>("0x0e60342345ad5d360a55c0d2f274acec",16),
 ap_uint<128>("0x545f1a161d8338ec55a59f294763f690",16),
 ap_uint<128>("0xa24809f1ca9b7a2e58783546c6667e7a",16),
 ap_uint<128>("0x123be52dc7d3db8714ce41e53ff1ff05",16),
 ap_uint<128>("0x90bec572333fe20befd163950e46bd6b",16),
 ap_uint<128>("0xea90e7003046bafcde0b249ea03b6571",16),
 ap_uint<128>("0x80c98cd8d8a713eeb72c45ad0177c30a",16),
 ap_uint<128>("0x4603e7fab78e26ff08a2a74c93f6218d",16),
 ap_uint<128>("0x83b8a4166e78d798e31f2390b262c468",16),
 ap_uint<128>("0xa81a6cffa69c5cea620fd04ae4cf334a",16),
 ap_uint<128>("0xac28212c3df047856f10f0a21f5f04bb",16),
 ap_uint<128>("0xe30467a1676f7e83dbad28e4cf3a59a0",16),
 ap_uint<128>("0x3ffb3c29d6ce102f4b02dfd096fe12d8",16),
 ap_uint<128>("0xcdf179322f56b5a38c424b46495e4a8e",16),
 ap_uint<128>("0x555b8ac554a103d95a1026637cd9cedc",16),
 ap_uint<128>("0x314ca1c4ba0f57055ca59c79ac235a81",16),
 ap_uint<128>("0x7d1e9bfb429dcd731ab2fae33ef4c5b2",16),
 ap_uint<128>("0x2c5ad66ce6cddd94ec77ee55bc79f863",16),
 ap_uint<128>("0x6be2e621ce5cc9cfb48fe35856d70613",16),
 ap_uint<128>("0x5cdde25131221ef2ec9839d4f56ce52b",16),
 ap_uint<128>("0x431729e17eef3654d115c3e792c60b47",16),
 ap_uint<128>("0x9e354ea7524345b0fb6996bf93107671",16),
 ap_uint<128>("0xbd22aec8c8d09c4cee3e17f5f35b5669",16),
 ap_uint<128>("0x3104b795d6306000684fd0f5d7a9ed50",16),
 ap_uint<128>("0x64a6641cd6140c772d2e93fce4fc7608",16),
 ap_uint<128>("0xde7fddef0ee384906cbacdf37496fe52",16),
 ap_uint<128>("0x6de7ab2c116df46af13bf7261c28353f",16),
 ap_uint<128>("0x906aa7caaf05e91ce373840f4be061a4",16),
 ap_uint<128>("0x5af619153d35bb6d9bfef1fe9b2d3e5a",16),
 ap_uint<128>("0x8660296f0544778935d95f463865ff63",16),
 ap_uint<128>("0xe4ff7de7af078e24b654038e3f88fd68",16),
 ap_uint<128>("0xa97f75ed42a8f4c0205f28a1ac72c7e4",16),
 ap_uint<128>("0xaa9e05d9d46dabf7ef83a5887a4d3385",16),
 ap_uint<128>("0x89dbc814910185cc801d978b5eecaec2",16),
 ap_uint<128>("0xb73a90edeb6678e8b90a8c2275482f06",16),
 ap_uint<128>("0xe10afd6b5ced13955793a57694d9f216",16),
 ap_uint<128>("0xbeb8a25f96d3a5b72bde1b8f58e126eb",16),
 ap_uint<128>("0xad19a2a76fd4135251ed6a349b878be0",16),
 ap_uint<128>("0x9d631b06349c7562797779a268f44443",16),
 ap_uint<128>("0xec04493cbf0761b25cd3d970bf82136a",16),
 ap_uint<128>("0x0051813f50b9be1aec0a3b598ac28d8c",16),
 ap_uint<128>("0x287fc7f68e5a1965df92a02714863f29",16),
 ap_uint<128>("0xb23624f3eaa54b347a625421aef1e1f4",16),
 ap_uint<128>("0x754b7ac8e99044721084d305abb88e59",16),
 ap_uint<128>("0x998c5d562bca8c5b6f2123efd90dfaf7",16),
 ap_uint<128>("0x61bccc7c48114672a8b0aa0ff0416a91",16),
 ap_uint<128>("0x19f862cc2ca62d345e83b14a9f58c60f",16),
 ap_uint<128>("0xa627f5b0b97ed10a4329c6f261a605ab",16),
 ap_uint<128>("0xbf7fc695b2cf8abc650d8df101962c9b",16),
 ap_uint<128>("0x591b4dd367133e7e1bb646e6146b9cf8",16),
 ap_uint<128>("0x4ae0e156bd37894a29af6c8c93370978",16),
 ap_uint<128>("0x45d9fdeb301514f4971d12fd7fbfd2cc",16),
 ap_uint<128>("0xf3f15db1e2f8073fde5c6b2ba86cda0d",16),
 ap_uint<128>("0x67e218cb6067219b0f3619bb0eb87540",16),
 ap_uint<128>("0x6506089eae583f50f5daa499b5a99870",16),
 ap_uint<128>("0xa6f51945791db042eed4c46fe63a59fb",16),
 ap_uint<128>("0x3438f3c41733b5081bdb85b9f037da1c",16),
 ap_uint<128>("0x0be7b96bec4e3150d9ab9f3aa73bdf74",16),
 ap_uint<128>("0x66b4543d0ca5ae64780296942bce5d35",16),
 ap_uint<128>("0xdba1995c38035134fa8a3da385ab95c4",16),
 ap_uint<128>("0x89a5ef5ce3e3bed8513e23dad7ae0a0f",16),
 ap_uint<128>("0x377277e6496bf5ab4989215f46524423",16),
 ap_uint<128>("0xa0daadf28af1d0d05d0ae4ce61e3e32c",16),
 ap_uint<128>("0x3a3e15a4e26a9bfe0fad023209375f4f",16),
 ap_uint<128>("0x199b362f6049feb7cb5c95b9a69f9961",16),
 ap_uint<128>("0x30e45a4eb3d207960b94d446f6a165ee",16),
 ap_uint<128>("0x488f488fabb56616e89ebb3e448c3270",16),
 ap_uint<128>("0xc4dffcd932f16a9f487376c3206b45b1",16),
 ap_uint<128>("0x55da19e62bffc28ecd5ee689d858bfdc",16),
 ap_uint<128>("0x6263774351d4c236519c77739685514b",16),
 ap_uint<128>("0xc74a8ba320a11e6f71e4d16838f48076",16),
 ap_uint<128>("0x6e898717ca82443d5b7c30032542b397",16),
 ap_uint<128>("0xb5a4d039eed15b69aa0c63816bfdaa73",16),
 ap_uint<128>("0x7d1d49ebe0dc2ce16ee3907f185b9687",16),
 ap_uint<128>("0x0dfdf091e6e56bfe60c3cc2cb3a5dcf8",16),
 ap_uint<128>("0xd84971b097567a868013e94ef84b6de4",16),
 ap_uint<128>("0x5a9a11b9da04d05c4c68273ff87b3d59",16),
 ap_uint<128>("0x0ad4c316f44f6d4c2d92def20b86709d",16),
 ap_uint<128>("0x963a1bbf4b40ba57e59b71e2335eaed8",16),
 ap_uint<128>("0xf5085235f908c15d2b4c1a0cbd88106a",16),
 ap_uint<128>("0xdb5242c2bb172f95505560403d31f6c0",16),
 ap_uint<128>("0xb3ca3b96987d7a522a5aa8ab93fca444",16),
 ap_uint<128>("0x9cbb11897d987283de1a859950563d00",16),
 ap_uint<128>("0xe07ac34bc8b1660c4ab53b379ab9f305",16),
 ap_uint<128>("0x0de2f9d387762779c18dc6ee642240b9",16),
 ap_uint<128>("0xb1a062f1b8c103a3370fc134fc995a3c",16),
 ap_uint<128>("0x0c55b2d1c424b53183221d36f5143f2b",16),
 ap_uint<128>("0x810ca24af1183cb1f1df9a0d83eb375c",16),
 ap_uint<128>("0x2fe2cb8a3db901be18b227c585e81c7a",16),
 ap_uint<128>("0x51aa9af662cb98e18b09ce74189c5161",16),
 ap_uint<128>("0xca82b00c914b2b0a655f9a6ac10bd6bd",16),
 ap_uint<128>("0x072f14e7ae9f5daa2d54f9685972d27d",16),
 ap_uint<128>("0x5b768df5e6f21138f0fd30fad91506a3",16),
 ap_uint<128>("0x7a9963407d1159a3772ed7f8fcfaabff",16),
 ap_uint<128>("0xe9add1f42bace8dcab5f49b8465ce525",16),
 ap_uint<128>("0x2c9fc67aa5642316ba5030eb25b2b6ec",16),
 ap_uint<128>("0xb8d926577235bd5c10d58f857a2dd215",16),
 ap_uint<128>("0xe1c12c36c99b7fab4a6dff2c7a728135",16),
 ap_uint<128>("0x0e35ecb559b32baa9c8cb6b4c2ab7e43",16),
 ap_uint<128>("0x52d6f6eb30d5ae745736a322c1fa6041",16),
 ap_uint<128>("0x45077f4813f12bc764347acddeb5cfa6",16),
 ap_uint<128>("0xca8cb84ce921ed0ad0c77ad1326ee8ab",16),
 ap_uint<128>("0x3d3d68dfe822b18a0ea15ff41e3c9f17",16),
 ap_uint<128>("0x5f72b02f0eec1710b5c6082daa317b5f",16),
 ap_uint<128>("0xa19badea8486c306f91937e8ff9be850",16),
 ap_uint<128>("0xee0d89101b20afe63cc5fc4b2fd756cc",16),
 ap_uint<128>("0x707f57cbe2fa4687b6e63861b6bc1a23",16),
 ap_uint<128>("0xef2324fc7eed1b4d5886a8f9ad473a85",16),
 ap_uint<128>("0xda7525dabc8311100d5fe35f406692f8",16),
 ap_uint<128>("0xad11ff9ef6e9bfa9f2f2d8f9bb8b4565",16),
 ap_uint<128>("0x0e6ac4b093aad5999d98a7f4992ef556",16),
 ap_uint<128>("0x61b629264180f4b607f51f5cb0c903ce",16),
 ap_uint<128>("0x1b87a7e27a3a982257f56e5231b912fb",16),
 ap_uint<128>("0xb3c694a9d8489331aa9bf540402e5067",16),
 ap_uint<128>("0x0626e8e881e29689060221a8c384d0bd",16),
 ap_uint<128>("0x36035b957269e1a84d6a08bb73e95dd2",16),
 ap_uint<128>("0x24bf290211786c9dfbee56618a3f05cf",16),
 ap_uint<128>("0x4f4641bfdc579fc696cb1e37f71c15b5",16),
 ap_uint<128>("0x3ea34664bcd8cebee22cbef4d81c8a7b",16),
 ap_uint<128>("0xd9b9f602f240270fb0ce39679a73810f",16),
 ap_uint<128>("0x0a78b1ffc139b3516e8d27d4dad3365c",16),
 ap_uint<128>("0x0f70f46b4e2496835c333695e4b96606",16),
 ap_uint<128>("0x767c1b5f8f8a6000894515ca2db224fe",16),
 ap_uint<128>("0x2a705a051deda3110b7f5fc301efb8bb",16),
 ap_uint<128>("0xc703a5d7dd2e4165724ce125d474a4ac",16),
 ap_uint<128>("0xfd471e42794e6c81566ca9fdf76691a0",16),
 ap_uint<128>("0x4a4c139ed091afe3f1d7ff1246f2d9f4",16),
 ap_uint<128>("0x7be4336756bec4545862dd0260a14e43",16),
 ap_uint<128>("0x1e14f31e918f08387ef27f5e0ab95e92",16),
 ap_uint<128>("0x6a9f5a36291c38ab12ada7e87bd307d5",16),
 ap_uint<128>("0x867e856fc555915989e4066f537a23da",16),
 ap_uint<128>("0xa82f01b7500e4ea72bbf9ef96312f665",16),
 ap_uint<128>("0xf782b3e241435fd3a5c3bfe877060728",16),
 ap_uint<128>("0x49b296a0e723d5e42612fa4065a95a3a",16),
 ap_uint<128>("0xf422d7997115554c0739af95584a82c0",16),
 ap_uint<128>("0x9b8604050cfa5b5847eb1b69f494b894",16),
 ap_uint<128>("0x3e7ca2bcbebb2605847cd7ad41217672",16),
 ap_uint<128>("0xc1f491f0b8eb9cd6a9386d3960d6720d",16),
 ap_uint<128>("0x06cc47144f8074a173081f3805e5cb02",16),
 ap_uint<128>("0xe83d6a857ebbc45478a8e0e1cf53a4de",16),
 ap_uint<128>("0x99c465eea029b3b8addcc7fd57c975e7",16),
 ap_uint<128>("0x74ab5175b6b86c5ee789d77faf474b02",16),
 ap_uint<128>("0x795deea0e9d3cc9ac417b509e0807860",16),
 ap_uint<128>("0xdd3ddfa79c9745f6286666642bea7165",16),
 ap_uint<128>("0x1a769d3f3172b6305f7aabdc035a5126",16),
 ap_uint<128>("0x12682dee1894a01c71a6b3c26b24a595",16),
 ap_uint<128>("0xbccf8e328c21df211ac76c02b849841b",16),
 ap_uint<128>("0x46a63435d3f76045ccfb33c96b94f940",16),
 ap_uint<128>("0x419129b3a72102495c2c03d1aa049676",16),
 ap_uint<128>("0x7d211b9069ffe561b80edcda80803c3e",16),
 ap_uint<128>("0xf8c9f7cd9bba4c168c53e1cb95eb6ad9",16),
 ap_uint<128>("0x7f12a774750fe89076fe771bb4a341dc",16),
 ap_uint<128>("0xc97593296cdd9c563c26eaefb0b50396",16),
 ap_uint<128>("0x2c7bf27ddd9b90f93759d0ba4eba45bb",16),
 ap_uint<128>("0x158674305208bfed94791e615e7369d7",16),
 ap_uint<128>("0xe8b2c23c34daeadab7182e58b730047a",16),
 ap_uint<128>("0x46be712f1df8bcad71caf68454aabf61",16),
 ap_uint<128>("0x8fcb880345ec560d4d2104c34de6e9b4",16),
 ap_uint<128>("0x781447af89c48e89ba09bef957aa4b6c",16),
 ap_uint<128>("0x1ba3697e00a787593896f0e749b433f7",16),
 ap_uint<128>("0x4f7386811c6c7ea2f81c0580a1627822",16),
 ap_uint<128>("0xc49c1ff05228e356f30c8b3e1486289f",16),
 ap_uint<128>("0x5170022146ded1ba2cbb0522397728b0",16),
 ap_uint<128>("0x32b6e8fa1ab53d4103866aa6925a9bf7",16),
 ap_uint<128>("0x30dd115ba2d0487921835894732f9343",16),
 ap_uint<128>("0x7b3cffc4dd80c15b5448b8290a6218b1",16),
 ap_uint<128>("0x1d7f3a2f36a3d1a09fc87764555c3c74",16),
 ap_uint<128>("0x9c0f356d7eeb320dc03b8160c0a0c75b",16),
 ap_uint<128>("0xaf01f0e4a0af0e45c47718497bdfeb1c",16),
 ap_uint<128>("0xd9abd7ac5ab14ed2feccd245740fd6ce",16),
 ap_uint<128>("0x5c6dc763b2ae57994b5e1d80d70c1816",16),
 ap_uint<128>("0xac3cc949810e8d0439001b50c50c782d",16),
 ap_uint<128>("0xb30c650f6e9791fadb291773e05e5c9a",16),
 ap_uint<128>("0x7784f375d014240a029d00d4dfd0bb29",16),
 ap_uint<128>("0x7622e34f4c869d9f9f9579309a5694fd",16),
 ap_uint<128>("0x374640da8f5d59fa574f5e5fd4638dc9",16),
 ap_uint<128>("0xced60a56f368041b538f9a58b8790367",16),
 ap_uint<128>("0x6ee7bf44478c8138babf586226f36fb3",16),
 ap_uint<128>("0xf64cef2535696e2e11b0879d4cc16fc5",16),
 ap_uint<128>("0x18933a7c575a4ae46e9447bc0db4b449",16),
 ap_uint<128>("0x58cea7c720233dde728bfcf86a6350b4",16),
 ap_uint<128>("0x722c28da6f202bdb21dbf15215bd6b56",16),
 ap_uint<128>("0x1387d12d726b9e516a386dceb5ccbeb4",16),
 ap_uint<128>("0xd2c219e8c9d84a1d15f78ba00b42b167",16),
 ap_uint<128>("0x2efe0d6a1a84b010803c47b0e8b1d815",16),
 ap_uint<128>("0x78e60199a33aa90e1bd86cc3b87f27aa",16),
 ap_uint<128>("0x6bdc952ba1440b8735e1d2798e9ea116",16),
 ap_uint<128>("0xbbab1b9ec0aa503f66e7b997a2527e94",16),
 ap_uint<128>("0x95ab10d8c7c2d631812d76c91c2948d2",16),
 ap_uint<128>("0xa8dad03f4a936182c8386bd5cf874232",16),
 ap_uint<128>("0x8c66ec94d710c702bfb551f1930633ce",16),
 ap_uint<128>("0x14884c978fa99201fb3820c26038db93",16),
 ap_uint<128>("0x77de6620fc77928aee2c8d33ea7f4e7f",16),
 ap_uint<128>("0xd4e42d1de7441e937f8d17e657e5bcf3",16),
 ap_uint<128>("0xcf3865444400923302ab211eaff64b98",16),
 ap_uint<128>("0xd97e8278454b705fe27188177fb09c45",16),
 ap_uint<128>("0x718336bb7184ef0f77c04b2bdb9625ac",16),
 ap_uint<128>("0xe931b50a9c9d80c20b901cca3c2571db",16),
 ap_uint<128>("0x2e9d31807a75eb94eb1a4d58bb230108",16),
 ap_uint<128>("0x8e731858967dbbc17e1bfd70c7f1d72e",16),
 ap_uint<128>("0x72697c812ebc65ab8af22f46488882b9",16),
 ap_uint<128>("0x9ad42292af8efcac872f02f244ca8fde",16),
 ap_uint<128>("0x5bef88226c4969692c8da146b1369ee1",16),
 ap_uint<128>("0x2b2254ced97920c88f99185fa19d84dc",16),
 ap_uint<128>("0x7d17787ccc91fb654b9553e1fa149735",16),
 ap_uint<128>("0x1ee657d77802fc856fff9a4681e24ed5",16),
 ap_uint<128>("0x4cf9e3cb80aedfcc25d415ef06db70f8",16),
 ap_uint<128>("0xcb483e2d0cfe535368907a78e7181002",16),
 ap_uint<128>("0x88166c51a0db6e164599336b9c1db10f",16),
 ap_uint<128>("0x508ba9e9c707cc78aec0d2b1c11d3012",16),
 ap_uint<128>("0x6660310e463dcd5e0dbd32022807cce0",16),
 ap_uint<128>("0x230b87a4a58e8bc85a6d708b1c1824ab",16),
 ap_uint<128>("0x288f7973bdcc12a62295f54b24848838",16),
 ap_uint<128>("0x1664f24c111e316b7f34f83ffbec90d8",16),
 ap_uint<128>("0xf79a8796c96dd5472825e1465728ea31",16),
 ap_uint<128>("0x1bfeb95df0ae5b75e20ed3d050602981",16),
 ap_uint<128>("0x15de71b0bf6b765de0aa5c54a0e32972",16),
 ap_uint<128>("0x324768d220c29ac6dd8d023dbf620319",16),
 ap_uint<128>("0xb08a908fcd914b8a93a9f70bb01e86d8",16),
 ap_uint<128>("0x2e1946c7503b97e9e620b88d4e6829b8",16),
 ap_uint<128>("0xfdfd7558481f850f7d542d34b81cb41b",16),
 ap_uint<128>("0xc42ffe662e324669a5f0921ebb4fb4ed",16),
 ap_uint<128>("0x45619b90237118ac22fecae4d8679761",16),
 ap_uint<128>("0x87e3e97c8c918293412f1cda229707f5",16),
 ap_uint<128>("0xed3a3b9c7ad4117b27a4ba56ac02dc9e",16),
 ap_uint<128>("0xfce80a2843acd18fef62238968d5c3fd",16),
 ap_uint<128>("0x025bb41f6d5dc415fc807ef5a9f784aa",16),
 ap_uint<128>("0x96a09066ea7e8d5d1b30848326b059ea",16),
 ap_uint<128>("0xf8a0b512d8ced0e17584e9666a875685",16),
 ap_uint<128>("0x973f1095c366a365617587fe0bb16eb0",16),
 ap_uint<128>("0xf74503edd447f826cbbbfbad907ab4e6",16),
 ap_uint<128>("0x9a2d15303bde47e43bd4f7e8e1e3460c",16),
 ap_uint<128>("0x126cc0cd35637de50b9bcc33dbd34b7c",16),
 ap_uint<128>("0x04afe4bfb80d942958235b739f9d3321",16),
 ap_uint<128>("0x9d3bf208b58fb1357d4b9a669590135d",16),
 ap_uint<128>("0x0420a4a4a03de68e2af3af2aa6717060",16),
 ap_uint<128>("0x11bb801f2f5f9729c2eee218f71a3dac",16),
 ap_uint<128>("0x69e9d448cc4a95dd23b7aed8a78209d0",16),
 ap_uint<128>("0xe991a8453eb4db5a7a5b1eec57276598",16),
 ap_uint<128>("0x35e8e1976170b1ed9634ea45c24af20a",16),
 ap_uint<128>("0x7e2a9a58f70f447d95b95acead2e3a50",16),
 ap_uint<128>("0x559ed4c2abe83b3f8fa7e0c537409b62",16),
 ap_uint<128>("0x93509936cd41db39addb9164649981cf",16),
 ap_uint<128>("0x1bd6955f479291f99f60d358c64cb038",16),
 ap_uint<128>("0x05969f7e0014df299aec3b3f97ece473",16),
 ap_uint<128>("0x122151176ef4b3fa5cf90a2955c78996",16),
 ap_uint<128>("0xf8ef6eb8df18c67bf17e7af128996f27",16),
 ap_uint<128>("0xa6c1f815ec9fe533529fc06e5b096e7f",16),
 ap_uint<128>("0xa3261093b6b1a831af82f7850b020087",16),
 ap_uint<128>("0x1df3317722afed5743358e746170b4cf",16),
 ap_uint<128>("0x718e2df8f6a46e161c89ccc9206b3afd",16),
 ap_uint<128>("0x965dd6482da954c228aa041a090201cb",16),
 ap_uint<128>("0x7c63575dba83e6542e05e91a25fe01ec",16),
 ap_uint<128>("0x15778032a8119c7aa116a499bf4b5928",16),
 ap_uint<128>("0xec1b10109bac2f055a5cfbf84ed28c08",16),
 ap_uint<128>("0xae899fbc30e6c2feb249cb5f595050a9",16),
 ap_uint<128>("0x554f7f34133105de47764528df4854d5",16),
 ap_uint<128>("0x6a74388833553772cb8bf62ff7782568",16),
 ap_uint<128>("0xeea9273fe5590c632cbb4f5ca56ad6d9",16),
 ap_uint<128>("0x6513f24257379b302e7b39eb92d2cb54",16),
 ap_uint<128>("0x88446558f3c956b6be08b3d1af327190",16),
 ap_uint<128>("0x7435ff90b22fe5ee2fbbc55856bcaa97",16),
 ap_uint<128>("0xaa429e61c2dc82555be53e66adf3015a",16),
 ap_uint<128>("0xd4136962bb11b59e5d422b949f981246",16),
 ap_uint<128>("0x926e15106274061bd21fd607c4d1c3e6",16),
 ap_uint<128>("0xdf611a87605b555d503f9eaaf07a317c",16),
 ap_uint<128>("0x9e76f95e384b5425287d209394d8098c",16),
 ap_uint<128>("0x1b83f8caa9d9aaf659c6f6d1918e8ea1",16),
 ap_uint<128>("0xb448643a836da1ee154e6722dc373ab2",16),
 ap_uint<128>("0x3b056f214e34b1722043b8eba1baa26c",16),
 ap_uint<128>("0x493c6884e41bfc836a72e248493ee61a",16),
 ap_uint<128>("0xc0ac8a88d2695ecfbb4d911984e50d49",16),
 ap_uint<128>("0x173a0bb9d6d393304d811c1c851ef8ee",16),
 ap_uint<128>("0x263d8a1053050a9e38a71e228ed87012",16),
 ap_uint<128>("0x22d1ca2b675508e101d98366c5ed1c4d",16),
 ap_uint<128>("0x13cc9cd238866c0658157db93586add1",16),
 ap_uint<128>("0x7368f41f1aaf6174b3798e8ce90f92eb",16),
 ap_uint<128>("0xebde8dab636cdc71d4852e941ccd8081",16),
 ap_uint<128>("0xd2de28859a34f2490a34e7751a809cba",16),
 ap_uint<128>("0xf501d561eed6a6749aa52bfd3bfd3d6b",16),
 ap_uint<128>("0x6445e4644885f5440f442218fd3bb334",16),
 ap_uint<128>("0xd4839b57a52b2a38ef1bb0b32ef34f8e",16),
 ap_uint<128>("0x9c22498babd3379aa175712594bf84f1",16),
 ap_uint<128>("0x8c36904e9e524d1ac1062317206bd423",16),
 ap_uint<128>("0x28a36938ef01591344b701d05ab26c8a",16),
 ap_uint<128>("0xcd5aebc7d9206c9efce0efb1795fa5a0",16),
 ap_uint<128>("0x2602b13cb12886906949295de021bbd6",16),
 ap_uint<128>("0x9e48f4aa99246df1e9ec5e870e6bdbb6",16),
 ap_uint<128>("0xa593449295991c5a67b6a02b65fa39ee",16),
 ap_uint<128>("0x067be26ce385f3dc0b4c68bea9c3148e",16),
 ap_uint<128>("0xe4698322794534cbc36c0d45379ac7ab",16),
 ap_uint<128>("0x8432d2a13d561b07b8bbb61fcf60e03d",16),
 ap_uint<128>("0xbac52f1d6c0eef12361647acdf9b74fd",16),
 ap_uint<128>("0x775df814e5e60f827b5c089d9f8fbedc",16),
 ap_uint<128>("0xb8873e28c67dab2b2545ada8694f9d6f",16),
 ap_uint<128>("0xcad7337b50321a186a822def0275065e",16),
 ap_uint<128>("0x6e16a70bf3ce9dbac079726c00980a81",16),
 ap_uint<128>("0x3db4db14dc37c17b2265b70d2bb33327",16),
 ap_uint<128>("0x81d58b09e5f88e8f4fcb26dfe3910ad5",16),
 ap_uint<128>("0x7d9491d2915066afea64a8a6809c1b7d",16),
 ap_uint<128>("0x6a965af53e389a3722ba75d88a3bb53f",16),
 ap_uint<128>("0x46c826e9922075fa3114842b16e48144",16),
 ap_uint<128>("0x34c285acf9ea35d717b4870d55b41819",16),
 ap_uint<128>("0x803e495e450cf97dc1a2b6693a506d41",16),
 ap_uint<128>("0x3c67703dfae1c8861be480212e1dbe38",16),
 ap_uint<128>("0x6f5ec0769936066a41edf039b20f3ef4",16),
 ap_uint<128>("0x762c8232244d055de9ba2ba3f86c8e5b",16),
 ap_uint<128>("0x67b13dd7f07ee2a5236a216be0ae3c78",16),
 ap_uint<128>("0xdbb1e99458f1eca812ea4f28180ac199",16),
 ap_uint<128>("0xca88811e9b9d44288edb635ddfa7a2a9",16),
 ap_uint<128>("0x760284f5b9a2c74930caf44652480520",16),
 ap_uint<128>("0x8780dc54d834adcc18130355a16fd2f4",16),
 ap_uint<128>("0x60f931f224d3a19e06fdd535279a1db5",16),
 ap_uint<128>("0xb8b4b79fe6b3aa400badd38e83d53ad4",16),
 ap_uint<128>("0x7ede2e3ea3a48e1358a9d60c339c0e4a",16),
 ap_uint<128>("0xd9c3fcdc1963860563141a15aebee71e",16),
 ap_uint<128>("0x8f8883f8e15e303bf7d13f92fd2d9f81",16),
 ap_uint<128>("0x3478abdd18e27d82fdb5874c00a61958",16),
 ap_uint<128>("0x01d9e83388201a49ce3776e1d5648564",16),
 ap_uint<128>("0x7da93853f304c2a2325ae9d3f272d647",16),
 ap_uint<128>("0xe53bd91d58e6674fc27dfa7aae3d39a7",16),
 ap_uint<128>("0xbb8288cee358e0d3310184c271db549c",16),
 ap_uint<128>("0x794d20ef61fb220161e103f38735325a",16),
 ap_uint<128>("0xf1421f6ed91a749da13b44d82b696c99",16),
 ap_uint<128>("0xca3bdb2db3fbeeab1a91f1cd3948a3b5",16),
 ap_uint<128>("0x0d78698f19fbc59b7113880e0452ef35",16),
 ap_uint<128>("0x7c0139910142f24028787e6c0ad25bb5",16),
 ap_uint<128>("0xb9ebdebe6214196769bfeb2a3afd03ce",16),
 ap_uint<128>("0x5a954354e0efb3347194a99e97ec0263",16),
 ap_uint<128>("0xe017eea766cd60513f43a9db8108ccea",16),
 ap_uint<128>("0x411a727edb07db7224506ca736fc70ce",16),
 ap_uint<128>("0x986355d9b33210048cebd4c5d3b9f724",16),
 ap_uint<128>("0x2104f6ccab3d534c42c3b1f713402848",16),
 ap_uint<128>("0xe1a19f7f3c43ea0fbd1b87eb87600aab",16),
 ap_uint<128>("0x45010a15077e10057c05b738c98089a2",16),
 ap_uint<128>("0x832c219fdf7800ec3f437c3f2bc5b7b8",16),
 ap_uint<128>("0x71f66f462422a1155fbc8d8269c78c85",16),
 ap_uint<128>("0xabdea8ee76101535b8c693ccc7d8edfd",16),
 ap_uint<128>("0x20ba32a072e90a504516417382f1c06e",16),
 ap_uint<128>("0x0ca938e76db61720d04d53e8adea0a7d",16),
 ap_uint<128>("0x6567d12b8a67a2178278b50ae014b002",16),
 ap_uint<128>("0xfa866f5641fb5fc9cefa7f6262eb44d0",16),
 ap_uint<128>("0x1f640147e1bd03d4ec82f53e99ef36a4",16),
 ap_uint<128>("0x0cbb286fa6d51b99720306055a90f0ce",16),
 ap_uint<128>("0x6ef2e10ab33c73fa370c3acb90d65830",16),
 ap_uint<128>("0x2786bde81467d0ea7f03f326119c69d7",16),
 ap_uint<128>("0xe6a66f29647bbd13187cac8a91548b5b",16),
 ap_uint<128>("0x9a5f63c8f2f5e87e3be685a285ee26fb",16),
 ap_uint<128>("0xb90a52bb4784595e29c0dc9427857b14",16),
 ap_uint<128>("0x4bfab91f4a50017ed93c4147a2efb256",16),
 ap_uint<128>("0x210d11fa3858947cfd2dd9385e1947c1",16),
 ap_uint<128>("0xcb575bd2d4a1e1ae6f7d649a80771ed1",16),
 ap_uint<128>("0x216b7bc8fd7a9b8ecfc802e997f1f61e",16),
 ap_uint<128>("0xc5cbf5a5566e1af140dab002522cc5b7",16),
 ap_uint<128>("0x351009b97c411cdf43b52bdcbce181b5",16),
 ap_uint<128>("0xab7bd52518744c5d97e99fd0be675df5",16),
 ap_uint<128>("0x19966e722f9d8a73a2641c6e272946b8",16),
 ap_uint<128>("0x834d095472361f62a299de45e1eea4c1",16),
 ap_uint<128>("0xf5cf74e2dcdbdc65ccdb4dfa8aa6df64",16),
 ap_uint<128>("0xcb4b600cd38b9f9ff9b2b784e93c8f0f",16),
 ap_uint<128>("0x1a609af53568d2829ed2442f82672c25",16),
 ap_uint<128>("0xb58b1609c1da0fd56b134b2e52d567ed",16),
 ap_uint<128>("0xd1c3757959156a70a18d975d5d864a60",16),
 ap_uint<128>("0xed086b9557dcbe1a49d7a0d11083705f",16),
 ap_uint<128>("0x403b282394c9e3a895b863b5f63101f2",16),
 ap_uint<128>("0xb85eb95eb21ce0f5b5247a6ed3dc9018",16),
 ap_uint<128>("0x6f03fa23a112464a290c41aeb9b50d59",16),
 ap_uint<128>("0x889e1d77bc931b25a3d7116fd90bef04",16),
 ap_uint<128>("0x213f9cba20e916cc6e8d0429b4d9251e",16),
 ap_uint<128>("0xd6ffd261559756493fe11792cbb8a1e1",16),
 ap_uint<128>("0xd993e2e1d65f0e2bc5c2cdd35c63c334",16),
 ap_uint<128>("0xa68283089a445b972c7d6e4b541fa320",16),
 ap_uint<128>("0x9a0c50b3849475382eacfa3a43e9c151",16),
 ap_uint<128>("0x38ddda8771c39ac2e2dcf35395598027",16),
 ap_uint<128>("0x7a563729624840a8b9afc5e749d3a79e",16),
 ap_uint<128>("0x531ca61954da45c5bca194310766bd51",16),
 ap_uint<128>("0x3bfcafb1e5ef98d4822c625f171226f3",16),
 ap_uint<128>("0x184645ebc017d3c05110d648dd73e917",16),
 ap_uint<128>("0x49c8b3613de23ed6e97df267592632c6",16),
 ap_uint<128>("0x1be43a64b89ed52c0d1c34f6ddd3308a",16),
 ap_uint<128>("0x967d211c45003aae7a34c99ea6a827bf",16),
 ap_uint<128>("0xb624aa358f29922e9af131222199a242",16),
 ap_uint<128>("0x3dec1c535675307d9d723e0e5052f30b",16),
 ap_uint<128>("0xdae5b1b99eb2b3d473671cf71ac29a30",16),
 ap_uint<128>("0xdd65ff0c5fdfa26b469746e4574543c3",16),
 ap_uint<128>("0xd4a82839349fdf040f1fb589dad5eadd",16),
 ap_uint<128>("0x719c5f34bbc42e5b860caeae313de166",16),
 ap_uint<128>("0x0e20d18c4e47bc49ace32c6b74ae4c8d",16),
 ap_uint<128>("0x7b27fa5fbf306319ca2d0db9f51b1841",16),
 ap_uint<128>("0xb40965a8ce25f0d76896e1130aa0926c",16),
 ap_uint<128>("0xd2dc4a719e267fd0536939d60462e593",16),
 ap_uint<128>("0x1900815ac2d3c90d469bf3727d9a8248",16),
 ap_uint<128>("0x2f9f1bf8561dd81856bece345790614b",16),
 ap_uint<128>("0x3c3f8bfd5751da11b3bb4729a20fe422",16),
 ap_uint<128>("0xed82b096f5532fd97c75cf8f529ee09f",16),
 ap_uint<128>("0x1812aff9be82283469d862a19d271584",16),
 ap_uint<128>("0xe4e5454deadcb3f66bba380323d33bd9",16),
 ap_uint<128>("0x65810e6a16954105265d73e6bf211768",16),
 ap_uint<128>("0xdaddd311c8e4ca8bfafccf4918f5db22",16),
 ap_uint<128>("0x986f2e905787a128fc66e584ca9faf4b",16),
 ap_uint<128>("0x9094ca7d0f8817ec0d6d5651f9fdd96b",16),
 ap_uint<128>("0xbd6139789638cb66e34c10f061a4592e",16),
 ap_uint<128>("0x1040471545d45a25a3bf51ebf3eb9c51",16),
 ap_uint<128>("0x7425a977abd3dd8f7f23d9c5c0f29faf",16),
 ap_uint<128>("0x791ebdad225754e3377784257214c6a4",16),
 ap_uint<128>("0x1a8423cf1b31abf4ab8d63c14c1f2945",16),
 ap_uint<128>("0x3ad868cc07adcd1d57421c29b38a0c3d",16),
 ap_uint<128>("0x29bcf34e92be394de2e33b2b32e67244",16),
 ap_uint<128>("0x74576a5317dc9bebef30f892851d6435",16),
 ap_uint<128>("0x1afb71eed3b87ec5c806b158571722ea",16),
 ap_uint<128>("0x400a89826f3a175ac83788e6a0ee7237",16),
 ap_uint<128>("0x976fe87fd931df399c35c1578b15e60e",16),
 ap_uint<128>("0xfdb6db0cabafc7a64dcc9f437b856188",16),
 ap_uint<128>("0xb24fe828d72fb4dc1ef8d7c1c55ffac1",16),
 ap_uint<128>("0x1742e473bc01e34614fa3129f114e5d9",16),
 ap_uint<128>("0x22b82fb4509cc3aedb300e10dca7bbc9",16),
 ap_uint<128>("0xf7f45ca57948a7b64643d05fc6adfde1",16),
 ap_uint<128>("0xa716a33cb3e2d41faf26dcb16529c279",16),
 ap_uint<128>("0x878b0de5e4996e6187a572fd52867ca7",16),
 ap_uint<128>("0x54262c0d100f9c0ad6d9573ca5433736",16),
 ap_uint<128>("0x9b6e4abae6fc3b55421e4059a6cf5818",16),
 ap_uint<128>("0x0dcd97abad118b435ef99adb5e60cb75",16),
 ap_uint<128>("0xf26ae2f6b362151977fef6f3f09e2b48",16),
 ap_uint<128>("0xcb79587c261526f29a3f7f21b3f1ed78",16),
 ap_uint<128>("0x1f49649a9bfc991c4a524f21bcdea8f6",16),
 ap_uint<128>("0x7b3f77b7ebf6b9f17f5347b3d9b957ce",16),
 ap_uint<128>("0xee4ae4a9a6debbeec6a1a340c112ad10",16),
 ap_uint<128>("0xff97f3f369be957906051636d8f50469",16),
 ap_uint<128>("0xda346d6e1e6e328276e385abfd1d20c8",16),
 ap_uint<128>("0x87697e93995dcee67f28df63a317a6a3",16),
 ap_uint<128>("0xa9f66b3fa0a8ac396ad1f1e1d2342e06",16),
 ap_uint<128>("0x76e755426561ff9f31453d30082bcd2a",16),
 ap_uint<128>("0xd405ccdd52b0089a620e24770be1a60a",16),
 ap_uint<128>("0x31a0fd1ceba849ff9896964ffdfd41f4",16),
 ap_uint<128>("0xc42804e027c6e9beb8178b3367eae41e",16),
 ap_uint<128>("0x7a8dfa99a1d8b79f501343f2a103561b",16),
 ap_uint<128>("0xe2b3836e6666d6ed8443eb09fb1c6dc7",16),
 ap_uint<128>("0xa2034cbcb99f875682ee063f97c29f37",16),
 ap_uint<128>("0x5d083214599daf5831ed8aae4e0fa496",16),
 ap_uint<128>("0xe33744e76c37ed5003555e15d32dd0ac",16),
 ap_uint<128>("0x732fd6913b8eded1636653e2477d7a78",16),
 ap_uint<128>("0x0b9c3abb99c0222ae25f2942e24e0329",16),
 ap_uint<128>("0xf3f92d805d6b478a92cecd376a85170f",16),
 ap_uint<128>("0xfbafdd5c0456d8da75c3ddfc19ec6ea7",16),
 ap_uint<128>("0x0739d9d1a67a46016778d7bae9f91bd2",16),
 ap_uint<128>("0x391426d70d0d54800bc005a101c5c73b",16),
 ap_uint<128>("0x14f4f7b0ce9abbdbfe4e6c377b61ac6a",16),
 ap_uint<128>("0x7519c1d0baa06ff9ac7dbcafe35488b6",16),
 ap_uint<128>("0x10ef63f62f334feea048bdf378ef473a",16),
 ap_uint<128>("0xc2d23af93c95270e81e81f26949dee1f",16),
 ap_uint<128>("0xa23fe4e663cda28db36a60c16c7943a1",16),
 ap_uint<128>("0x6f936ee7623f916a3f39277fb1a8da5e",16),
 ap_uint<128>("0x6ff104bf4af139f78cf41957ddab1b0a",16),
 ap_uint<128>("0xa51c09968a60238d9738173d2be4b8a1",16),
 ap_uint<128>("0x5b9ee57b64a4d5ee2fe305a57b47dff0",16),
 ap_uint<128>("0x3d894cf9a4d0897b09c2f9aa4bb67549",16),
 ap_uint<128>("0xf8eddd14c3fb4d69b264bdd0023a2d4b",16),
 ap_uint<128>("0x507455d69533a9fb5c6d720b598a149d",16),
 ap_uint<128>("0x2bc79cc1bbe3d498b8b08876d6579976",16),
 ap_uint<128>("0x04bf90d2293f78e1ae21bd9f00f09465",16),
 ap_uint<128>("0xda8c4ae9095f910924b9fb82d09c13df",16),
 ap_uint<128>("0x0aee83a8813e8603af29157ea616647e",16),
 ap_uint<128>("0x81592af8fbbfcbb237d276980d467c9e",16),
 ap_uint<128>("0xf42ec75c4f549bf4ed3697a56546b3bb",16),
 ap_uint<128>("0xd5475f3aafb00d87cc4fcc93beb971fc",16),
 ap_uint<128>("0x556ceb11e452381b50081e3f19cc5bd9",16),
 ap_uint<128>("0x2fd4c279196852821371de035a36feef",16),
 ap_uint<128>("0xa348b0e579aa26daa4310fa9ac94d1af",16),
 ap_uint<128>("0xfaa96e86ad00d381302e1d8f435af4e1",16),
 ap_uint<128>("0x3205f8ffd158392368e2a3a345e775f7",16),
 ap_uint<128>("0xe6cfdf5fe2ea7122d126f17ab0d09596",16),
 ap_uint<128>("0x85a32d0f0144cbbe0e7a249287309aaa",16),
 ap_uint<128>("0xfbb73c037e16b28b49f92c3abe8d041d",16),
 ap_uint<128>("0xd9901aa2b20e81dd3ea6a0ba64e9a821",16),
 ap_uint<128>("0x6cd25fe5e78fdb43daff03763366fe51",16),
 ap_uint<128>("0x445859f561ade88939c716e10f0b34a9",16),
 ap_uint<128>("0xbb1f7acce6b85ad0b280d27dd730766e",16),
 ap_uint<128>("0x218d189eae2960eaa4a0fc7e0a14bdc1",16),
 ap_uint<128>("0xca064891b9f6fc1fdd7fe062994a181f",16),
 ap_uint<128>("0x8f7bf76d8614c5c362035770f93302b5",16),
 ap_uint<128>("0xe9ff9c6e1f95ecbe28daa0c491228a67",16),
 ap_uint<128>("0x021496f9abf5a1db67f60b65f8b37973",16),
 ap_uint<128>("0xc500b41982f7085ecfc10796341b28ff",16),
 ap_uint<128>("0x860c81c87f6a1d6cacd790bffe441a02",16),
 ap_uint<128>("0x39c8819ec0154c4115ac75bcff246c18",16),
 ap_uint<128>("0xf7267bcef8dd124e286a2cc16877e6dd",16),
 ap_uint<128>("0xd506c5df89dfb8765cb0997b341a24a2",16),
 ap_uint<128>("0x7d26f3c9eecffecf55a4ed9c3a529590",16),
 ap_uint<128>("0xe4df91e78d4f82fd9ce28197cb7f1a6a",16),
 ap_uint<128>("0x5692bd43677579ad1ba16f3080083196",16),
 ap_uint<128>("0x114fdc0f00bf12710eb4ce4e9f168ea0",16),
 ap_uint<128>("0x402b0f46c6734f548a60caefd2d2f8bb",16),
 ap_uint<128>("0x97e61b0b7929eea4b2f64a4de4436711",16),
 ap_uint<128>("0x14b7023126c0c8d6e4ba7f45ea3915af",16),
 ap_uint<128>("0x39822b6819f2934bc481d5fc1188520b",16),
 ap_uint<128>("0x69875dc61a68530604954d58241b6279",16),
 ap_uint<128>("0x2a9a06a0fa415a41cdf5f2de7c4fc0fa",16),
 ap_uint<128>("0x6412fb35f387936eee90f72d62ac43d4",16),
 ap_uint<128>("0x07c02587ad46dafe9b2338aa1925651c",16),
 ap_uint<128>("0xfceed5cf1b5c5034f2f8fb8b3fdfeeed",16),
 ap_uint<128>("0x534d51ff70f0898ef2fafbddd538f9fe",16),
 ap_uint<128>("0xfdbca0bba7fa8752547bbf7f70fe8c58",16),
 ap_uint<128>("0x1b8351d83bb302f4987fe3ba81fb8391",16),
 ap_uint<128>("0x2d509c96e8217925c3d90e67043df3ce",16),
 ap_uint<128>("0x1968526de315a2496d26194efce608a1",16),
 ap_uint<128>("0xd302fedbc28f3a81b4033cdebcd82c15",16),
 ap_uint<128>("0xf7e26d38e23bc5a017ffb78da0eec383",16),
 ap_uint<128>("0x4c98bd4e4a00252d345e7b547667b78d",16),
 ap_uint<128>("0xbed18cabe0d632aa99ac707a78a05a35",16),
 ap_uint<128>("0x7565fb0042145b6068437c8d669daa7f",16),
 ap_uint<128>("0x771b3018bb0c077025e583f7680f17a9",16),
 ap_uint<128>("0xd89773f78155059603a654f1c71fba25",16),
 ap_uint<128>("0xae4847c105121aba71a085844fc905c3",16),
 ap_uint<128>("0x8e035c7f4f9e844a096257fae96b88cb",16),
 ap_uint<128>("0x7993fbc1784367cd4228ba16372d3b31",16),
 ap_uint<128>("0x6ce4499ca945b36fbf02c5d7308be19b",16),
 ap_uint<128>("0x7c1f68c40846ee0ce0db0666e7448e7c",16),
 ap_uint<128>("0x62e8d2615c0bff77850f3a228a3fd6a9",16),
 ap_uint<128>("0xe743d5ea3744365a700c596761236d03",16),
 ap_uint<128>("0xf410b3ee3eba47e917149d09f3fb5074",16),
 ap_uint<128>("0xc455882b2a86b51a752a847a4cb13dd7",16),
 ap_uint<128>("0xe6a814834b7d57da27d2858d681dae3e",16),
 ap_uint<128>("0x3f61af5ede02d35ca503873df5838861",16),
 ap_uint<128>("0x199eb5e76f92ca4a7631f33df5243548",16),
 ap_uint<128>("0x1e56ae41cde5af98de6b0d6ab5e87a32",16),
 ap_uint<128>("0x141bcb706402b3d71aef13ea21b2e188",16),
 ap_uint<128>("0x82e96cf98ce13dd82f8ec615e8139ccc",16),
 ap_uint<128>("0x04bafa4c0822842b48690637a4e83848",16),
 ap_uint<128>("0x1782e20c8e99f32f48ec86a73b9a9c18",16),
 ap_uint<128>("0x044d92c57f3a4d346dfd94c8f2ccc8b3",16),
 ap_uint<128>("0xbde0f5743152ec9da48a82b42e7f97cc",16),
 ap_uint<128>("0x77c66a110030fe28e21069bcf8639aeb",16),
 ap_uint<128>("0x458bf5ccaf4a68e58b6614885fa56df4",16),
 ap_uint<128>("0x23e980f68f1672cd2b7845befe78d256",16),
 ap_uint<128>("0x6d3d86e3296e889bb23133f7f274687a",16),
 ap_uint<128>("0xb49e50d4163f540ead9fb6efaf11a0f3",16),
 ap_uint<128>("0xc32199cca40ae5b6b97ca3241ae609a7",16),
 ap_uint<128>("0x45eda6bcd912a298dd4f7d9354c956e8",16),
 ap_uint<128>("0xdfc157913327376df0ac0afc62bf8355",16),
 ap_uint<128>("0xb5b5dcf064e0540d341ebf95e826ba17",16),
 ap_uint<128>("0xe16a0a855a00bfa2e006bb19b3b81000",16),
 ap_uint<128>("0xeb372f02b235a302ccef7446a48d41d3",16),
 ap_uint<128>("0x6c2f1eaecace2d61b376dbdb9399bef9",16),
 ap_uint<128>("0xffb65b19aa5900351225cd155249fe62",16),
 ap_uint<128>("0xf4bfd5927662bcecece5723340fb1c89",16),
 ap_uint<128>("0x5312b19addd8f0eb3f8b852d730d3e70",16),
 ap_uint<128>("0x09c3a515492f28620dc069dc288122cb",16),
 ap_uint<128>("0x9fd4d91428be89c15233e15c714b9e39",16),
 ap_uint<128>("0x380a3de074876fbec9a925a732e8edc7",16),
 ap_uint<128>("0xba6d275f01bbf13bf3bed2473d1c25df",16),
 ap_uint<128>("0x3c6589f1ea5043e720c769dbeaea6d50",16),
 ap_uint<128>("0x881cb76d6c7500d77a3d2c315754fd3f",16),
 ap_uint<128>("0xdd21e7c7a5abefd7b46c56021b2e7d5e",16),
 ap_uint<128>("0x42794623633d6ae9c5c4742045aba23a",16),
 ap_uint<128>("0x016df7ff3364e9abcbc84f63655d76b3",16),
 ap_uint<128>("0xe2071d496b1ea9e4f081434ad42cc14c",16),
 ap_uint<128>("0x116cdc7db230d0ae000ba2dac03cd758",16),
 ap_uint<128>("0x891144de5e026665359e27ae685eae7e",16),
 ap_uint<128>("0xb4082133faab0977ee33e8a325b22b2a",16),
 ap_uint<128>("0xd5fde8db32552c88dbb6f7cfa3805061",16),
 ap_uint<128>("0xbd3a2d39ecf47ffe448b1cc5d55f27b1",16),
 ap_uint<128>("0xe2ed34d6a28c94e18ae8b8c4b0f89579",16),
 ap_uint<128>("0xae6d225d2dc9d0843a7b8179090de92f",16),
 ap_uint<128>("0x0cac603c03169f68916a0faafe0f20ec",16),
 ap_uint<128>("0x0fc4c6060fed293df8efe5340123a597",16),
 ap_uint<128>("0x8aa25ea1f15560e85d6890b8cfcdc2dc",16),
 ap_uint<128>("0x209d76d8155cbc68f9615b71977249e2",16),
 ap_uint<128>("0x2f00d44716d05bd1741108e5c977ae00",16),
 ap_uint<128>("0x6dce6887745d0eb441823a42757ebffe",16),
 ap_uint<128>("0x49eade32315ecd10ca428f7f9cfeb762",16),
 ap_uint<128>("0xd1752aa80718b50605ed75ee62363cc9",16),
 ap_uint<128>("0xc2b7f83837313198cf93c7a59a5b479d",16),
 ap_uint<128>("0x01e727a820ed4a515f0c9ae62a806ffb",16),
 ap_uint<128>("0x535d4d1b3f06cb70ffdd463f0a49090c",16),
 ap_uint<128>("0x441f6aa19af3c2864f3726b347609a44",16),
 ap_uint<128>("0x2e6157126df478cbbe29d9c3fc707b1c",16),
 ap_uint<128>("0xf2f5fd726729b5fb1d995eaf2d7dc0d4",16),
 ap_uint<128>("0xf99fd481cf55578a166d440956137321",16),
 ap_uint<128>("0x0e2ea7f0b1cd42dc7ad846d79b29b22c",16),
 ap_uint<128>("0xeac6b9f48f95e0a15e5125d309fcc900",16),
 ap_uint<128>("0x7d859c7f37e7dd70793054147751a584",16),
 ap_uint<128>("0x6b6c5ff8ffd75c6af0e638195d40be66",16),
 ap_uint<128>("0x733be2dd80005b04c70fefbfe4620c92",16),
 ap_uint<128>("0x94d49d862526c65a1420ab3f808429a8",16),
 ap_uint<128>("0x6782d460c1a1b1dd11f1c5b27479796d",16),
 ap_uint<128>("0xdfaa66a20b12c929491409a74bda2a3d",16),
 ap_uint<128>("0xa99be3fc66fde9ba0f5646d929b49ae9",16),
 ap_uint<128>("0x0ffa366fe472fdf6202c791c59b284f9",16),
 ap_uint<128>("0xf4734f7ce9207d029ca77b376b1f0f1e",16),
 ap_uint<128>("0x59279d90892a5d281a1454506149901c",16),
 ap_uint<128>("0xb61bfc794e1734491f6198dbfa7e91aa",16),
 ap_uint<128>("0xbe05a8ec836059fa94946baf2c9130e1",16),
 ap_uint<128>("0x4c9f2feec8e1008fe1419dc4b8f85852",16),
 ap_uint<128>("0x22e0f0ecf36d720c2e129410de7d5796",16),
 ap_uint<128>("0xab7a784130669053d5b103981850edc9",16),
 ap_uint<128>("0x1e25eb275f8ca3559e9bfb3495ce2924",16),
 ap_uint<128>("0xb2de63a71a446cba94fac823af957ec6",16),
 ap_uint<128>("0x1f80f27016dab948566703b7b71307e3",16),
 ap_uint<128>("0x19fd6020560262fd8cdbadfc1301aed0",16),
 ap_uint<128>("0x9c21e6bc6f5a2c650ffbc0b6aa42e80d",16),
 ap_uint<128>("0x5483be914cf71ff7e550c2369bab8104",16),
 ap_uint<128>("0x96b55e0f88593b54a5036a357ea9290e",16),
 ap_uint<128>("0x4d4cf7e97cd2e36ae54e9f0f936bfc53",16),
 ap_uint<128>("0x284290b46c11e7fba28db5ccc85959ad",16),
 ap_uint<128>("0x6f698f0c7439d7af3c9ed71f8fdad7d3",16),
 ap_uint<128>("0xe5c6dd55d1ea8a78972de91936dcd535",16),
 ap_uint<128>("0x07151a7986c81190db46345d7e3ec0aa",16),
 ap_uint<128>("0x4abb2d89eb78d4aef42cc9e29a62191e",16),
 ap_uint<128>("0xda4ab52f7e001b651eb9295813eaef10",16),
 ap_uint<128>("0xe7437c14a614c407cf81b342be1bc595",16),
 ap_uint<128>("0xda7f8a2c03458c3f0412529c41d0bdff",16),
 ap_uint<128>("0xd8295d6bebe2035513f0bf68bb0095f4",16),
 ap_uint<128>("0x76a59b7e07e7a21e7de1e3499ac61a71",16),
 ap_uint<128>("0x35d014dfd874b578f959da90906479aa",16),
 ap_uint<128>("0x922349db26dcb184bbd974c985fe1164",16),
 ap_uint<128>("0x2dd1a16e80a6886fb18bc1d66f1ce75f",16),
 ap_uint<128>("0x94a4454ac7524407b26dd2cdab893654",16),
 ap_uint<128>("0x17fe1eebbfa1586a05810db6dbcd2ade",16),
 ap_uint<128>("0x020a95928edb1566c707c8a742531c92",16),
 ap_uint<128>("0x9eea9ab60216f9642b1a4ba4fe6bacd6",16),
 ap_uint<128>("0xee58a7255f6a0c2f66d51c7c436526f3",16),
 ap_uint<128>("0xe2408bb968169304e1104aac73b3f075",16),
 ap_uint<128>("0xa7a37aaebb52dd376e439891597e8c15",16),
 ap_uint<128>("0x22d2bdf1c553c828d316a6643b873ffa",16),
 ap_uint<128>("0xf818b786c3df23113d2d17de57311a1a",16),
 ap_uint<128>("0x9a808c9b566b8c929760af7dd896b1f1",16),
 ap_uint<128>("0xc708c676eb620dedb1fe6d2c256bf13d",16),
 ap_uint<128>("0x274379d84eb79ea31f68c0f2b0d21f17",16),
 ap_uint<128>("0x7e00fbba6a8247b4946d8591ef22e552",16),
 ap_uint<128>("0x7c4a3e62c202d9e26b33cda6e57298a6",16),
 ap_uint<128>("0x6634edaf2ddbcfe71906f78b0dad261a",16),
 ap_uint<128>("0xc2a62a37e137f96708b67faea9747500",16),
 ap_uint<128>("0x383a90b77a1b490228b5bcf6eb788c3a",16),
 ap_uint<128>("0xbbf28495339328732e5f479f02e9c6c6",16),
 ap_uint<128>("0x2c77b26f7337e0b4e5601b04f6ffb76b",16),
 ap_uint<128>("0xb9c7969201c52483b131a41047b73ef3",16),
 ap_uint<128>("0x4c46e0a5eaa150c4c31908dfc4cce6a5",16),
 ap_uint<128>("0xf798e16447a00ecaee8e8ef60578b4c8",16),
 ap_uint<128>("0xf6c1187a5bd65db53f364cec13e578c2",16),
 ap_uint<128>("0x76b9befc2bfbafe930f1911f1a9c1b66",16),
 ap_uint<128>("0xa44925dbdb340a9cf667898c1842762c",16),
 ap_uint<128>("0xfac13d358d38ea4a883768dc961d1b94",16),
 ap_uint<128>("0xde7b30b5909d66318f751f8dccc17dd8",16),
 ap_uint<128>("0x48f8afa49dbc224c8e47941521e68735",16),
 ap_uint<128>("0xecc384eae70086a49fe8a2c3467e4295",16),
 ap_uint<128>("0xbb21c2878fb368402536c89689bce563",16),
 ap_uint<128>("0xb6b5db1749e1ddaf579b93fe5a42d88e",16),
 ap_uint<128>("0xd445e73f6ca0c35caf8b4d30e13d3704",16),
 ap_uint<128>("0x435a8c03e878d47d07ce07ef513a623d",16),
 ap_uint<128>("0x85e398dbe8e47f4bfa5d7ec75e52276f",16),
 ap_uint<128>("0x91f036c9315ad441a5ece7b518b89b68",16),
 ap_uint<128>("0x2afe2e85b7e3a6c370b317280fee94af",16),
 ap_uint<128>("0xa4d1a848bf322c52873ea91628f971ec",16),
 ap_uint<128>("0x71eeb8f510f054eac15c42c388f00f12",16),
 ap_uint<128>("0xa956c90decb1f1a4e697ea253d41d4d7",16),
 ap_uint<128>("0xa44f3eb21c743317c9763cfa382340b2",16),
 ap_uint<128>("0x6e02066f0233b8725a4a15ffa2db6793",16),
 ap_uint<128>("0x7eb207c775dd6ed0086980819517be48",16),
 ap_uint<128>("0x6acc8f9954370ba76baceb3227dd8bc2",16),
 ap_uint<128>("0xc320e1403689cd1111a1981ade13ba7c",16),
 ap_uint<128>("0x36f9078c4e4ea3b6198dbe5a6cd81c2e",16),
 ap_uint<128>("0x5c840f5ff8649626f6b4d03cb71dca5c",16),
 ap_uint<128>("0x6dde356c720c21887023801e649ed661",16),
 ap_uint<128>("0x627f7ff680b4b58262cce41a9f8a51fc",16),
 ap_uint<128>("0x416bbb0bc04b59e20c01ba0361fb99ae",16),
 ap_uint<128>("0x737a0a02f57fce68c3815406305086fc",16),
 ap_uint<128>("0x1523151b4f57ea7863a9627da325f631",16),
 ap_uint<128>("0x058a7f7291afa2fed5b1e8977786502e",16),
 ap_uint<128>("0xec990cab54074dbc3f4604b0f627fa00",16),
 ap_uint<128>("0xbe573e2fb3082352b0733bc8117afb98",16),
 ap_uint<128>("0xcf0c38d96baafa27febd2b3efca34738",16),
 ap_uint<128>("0xf92c017d26729d1757b01c955735140b",16),
 ap_uint<128>("0xa5fb96ad1df92bff11618c235d956cc2",16),
 ap_uint<128>("0x8fcf68c07b0660bd78734b917170443d",16),
 ap_uint<128>("0x43f2e78d9e3acbf8a4272e59a190bb9f",16),
 ap_uint<128>("0x8076d8b04a64a1ea679c3360fb753fc6",16),
 ap_uint<128>("0xae5d31a48cd929c38d00c7a65214a5a9",16),
 ap_uint<128>("0xd80e6ae352576429254cd82b5ee780b0",16),
 ap_uint<128>("0xc51d560d71d2b7b1b4b0ed23de38f6ac",16),
 ap_uint<128>("0x539baaa03891fcc2c37526a1c21fb2f2",16),
 ap_uint<128>("0x7c2538e3e6fd860be5a948a1a140a918",16),
 ap_uint<128>("0xfa96370c5b2a1b326baf4499634d6d8c",16),
 ap_uint<128>("0x8db47b623bb31824ce78f60e2ee73d49",16),
 ap_uint<128>("0xebea1a560d74eb0cc4a1fd5e25e47dac",16),
 ap_uint<128>("0xfe40157b145abd1224cd2ca5ac30f729",16),
 ap_uint<128>("0x43352bd7f24a075033b4bd430e1437b0",16),
 ap_uint<128>("0x1b68314948081fe5c8c88394b75d979b",16),
 ap_uint<128>("0x2a4b3b14b6cfac7fdb32cf07b2b45f88",16),
 ap_uint<128>("0x84397154a1eb2e39e46fdf11044feae7",16),
 ap_uint<128>("0xce9e1d513984441a754828501ddb97b5",16),
 ap_uint<128>("0x8d231695a0fb62c3e56c520ae1644a05",16),
 ap_uint<128>("0x4005c91465d45669e3e1f87c80fdd095",16),
 ap_uint<128>("0xf4b15d48e511e1e4a0b297729abafbcd",16),
 ap_uint<128>("0x13796559f55bff6d7448c4218f64893c",16),
 ap_uint<128>("0x99a4434e2e514d24d1d6e30ef1ec9cfc",16),
 ap_uint<128>("0xae665f5880341cdb7127e34e2b26f158",16),
 ap_uint<128>("0xf813280df314ce3a500b03bab08035a2",16),
 ap_uint<128>("0xf772ff5ad7dbc3566bc31f2e49c00ad6",16),
 ap_uint<128>("0x66126449df18c779a1358ff4050702d1",16),
 ap_uint<128>("0x3ec8d526bbcb71ba3c8faefee2789d28",16),
 ap_uint<128>("0xa9f9fbdcfce706259007032810f1b5ee",16),
 ap_uint<128>("0x65be66ae9969ec60c840b25af0661c70",16),
 ap_uint<128>("0x214976949505cb024297997fd40e730a",16),
 ap_uint<128>("0x6e535ae74e2eabdef35a143720852bc5",16),
 ap_uint<128>("0xe635e235ce31bdcd0ed9df8ff126385f",16),
 ap_uint<128>("0x9fa3e191ed3615553a219d9cd9796c32",16),
 ap_uint<128>("0x9118679cfa47ea11fcdff183921de7c3",16),
 ap_uint<128>("0x98bbcea0df414f335f6be83fc9c46316",16),
 ap_uint<128>("0x06f04ee2b344c2cbea6b3611704e556b",16),
 ap_uint<128>("0x1adad37c496f4be71aca24ac8f6baede",16),
 ap_uint<128>("0xbab5ad21325e5f3f4f5862f4aca3322e",16),
 ap_uint<128>("0xac8ac2e10bc8a8744b2c48d7cf0f6269",16),
 ap_uint<128>("0xce7eeb1f1b49d937ef66b217d2eef738",16),
 ap_uint<128>("0xa4e37cc3547643136773fa8b8e5fb3a0",16),
 ap_uint<128>("0xbb7df3548ee46182348c4a955103a194",16),
 ap_uint<128>("0x5d98fbc0d5078937947bb6eb479c2028",16),
 ap_uint<128>("0x66d0305983ef03b6e4d1170600cc1d0c",16),
 ap_uint<128>("0x4e892dc20f89d89f4e3a594e37d02655",16),
 ap_uint<128>("0x814d9e4d47a75132cfb74458163432fc",16),
 ap_uint<128>("0x993c839227026b6cda847381ff852d26",16),
 ap_uint<128>("0x59cba1a2148303b49c905b8858a4e78b",16),
 ap_uint<128>("0x705934c99661a1204b01fc3f1540429f",16),
 ap_uint<128>("0x28af96d476c1b7b40fab95082c4e4502",16),
 ap_uint<128>("0x39ca3f6f0f73b45810626330d072f2fb",16),
 ap_uint<128>("0xe2473c07e7837420c108274d1a6b3052",16),
 ap_uint<128>("0x5622fbfa1322baea91e07285e48dbff5",16),
 ap_uint<128>("0x99fa7636f78813731497047922ee9d61",16),
 ap_uint<128>("0xc07aa1134dfc3f82c908dad0d9cb4bc1",16),
 ap_uint<128>("0xd76f882384daab8a18040c11626366c0",16),
 ap_uint<128>("0x3cb77eb1b0b4e8e9b0f29caf1fec3b49",16),
 ap_uint<128>("0x1178d773863f2bbe0d9c55ba9c951c90",16),
 ap_uint<128>("0x245063416a4e0ab5d779526e3c5ea674",16),
 ap_uint<128>("0xccd067dfe2b2d71cf8a7abe78b71fc8a",16),
 ap_uint<128>("0x182ad1047ccbfa09c862a3caed059aae",16),
 ap_uint<128>("0xbba45d167e9bd3e21463330e4f922df5",16),
 ap_uint<128>("0xe6b1075868c43b359d09d9c24b22edc3",16),
 ap_uint<128>("0x9968e78006a6608c31729fbac265d3d1",16),
 ap_uint<128>("0xa2c8f1c07a3fd7de684771698e4a6f69",16),
 ap_uint<128>("0xf99fafd97151a898e22472eed16cf96e",16),
 ap_uint<128>("0xc0a81ce8a3352df53758940eec33537f",16),
 ap_uint<128>("0xcff8ba326b78f835daf31a6b762a3e6b",16),
 ap_uint<128>("0x62f980507dde7ca5300ffc1f1bd2b01d",16),
 ap_uint<128>("0xce0cd1ae278cfc8f0fe089fb6b786a5f",16),
 ap_uint<128>("0x68bfe32172228fdb12504dcafe059176",16),
 ap_uint<128>("0x038f973e6dff547f8fc3bf1220d89a3c",16),
 ap_uint<128>("0x501abcaf0f2a57082c10cb455fe38230",16),
 ap_uint<128>("0x2edf7b872414c1cfa2ba49222ce8a4e4",16),
 ap_uint<128>("0x311ea5676bfe82de177141c514208c79",16),
 ap_uint<128>("0xf241b5b7ba8f930538a195c4e99c139e",16),
 ap_uint<128>("0x3d7678258773fc0eb827cb9795198651",16),
 ap_uint<128>("0xe2570f441ac994df1f407df3e4c59a04",16),
 ap_uint<128>("0x77e5c85998745afdcb23f1f65a232d5a",16),
 ap_uint<128>("0xe0d648b5e3e8f7837278d9c015546554",16),
 ap_uint<128>("0xab7291085c6fe7e6f5185164e72cea4e",16),
 ap_uint<128>("0xf96cf2152e215193c91fbea80567aefe",16),
 ap_uint<128>("0x9c3f5cf27571b997f678a1c2ada65e23",16),
 ap_uint<128>("0x7c218f959812e1728dc027b93c4217a7",16),
 ap_uint<128>("0x1c96a9337e281c42a3e18ba7e9717110",16),
 ap_uint<128>("0x630b8801044b643017b653c661028375",16),
 ap_uint<128>("0x0709dc89425e2ace6ddb7c403b3923a1",16),
 ap_uint<128>("0x2e9b202577d7e51dd6be241e92fc0d63",16),
 ap_uint<128>("0x8c9c527eb31a57a0a420540467c29929",16),
 ap_uint<128>("0xc492e55e787e04d972d77dd58c0b2fd6",16),
 ap_uint<128>("0x463fcad30f9e2c0a79390be0afc001b1",16),
 ap_uint<128>("0xfcbc662fcd988b4952c470f5b3fb944c",16),
 ap_uint<128>("0x8b51043a4462a7295032e40f689f29a4",16),
 ap_uint<128>("0x80761ddf5b7205d4dab3384a8a0dd562",16),
 ap_uint<128>("0xbf5015afd24b99d97dce05da0e17d80f",16),
 ap_uint<128>("0x0e7afb25227c81d4d0a4b42de424101e",16),
 ap_uint<128>("0x46dfb2791808b6e20b500fab29c33edd",16),
 ap_uint<128>("0x5b6e326f2dd4305c16fbc6a22644e1b8",16),
 ap_uint<128>("0x3e969d39f4533e9a2eedf9877c451eab",16),
 ap_uint<128>("0xbac56e05addf136bc4cf1f1eef6d19b8",16),
 ap_uint<128>("0x15d05608738f5e6c96f579b603f68218",16),
 ap_uint<128>("0x75b231efe4a651e0229e40dcfb941199",16),
 ap_uint<128>("0x61ddc4488ab678ffc4d0ad6539a16298",16),
 ap_uint<128>("0x870945a589bef73eb6de7ad88f91a90c",16),
 ap_uint<128>("0x4a014136d6bc1ef33f30f605a53c6388",16),
 ap_uint<128>("0xe988623157399534f1a4830eae0440b2",16),
 ap_uint<128>("0x238881b3cbae0e27d3261f01c4a1a81a",16),
 ap_uint<128>("0xf4dde0a3f1941028a10d48f6cc148ccd",16),
 ap_uint<128>("0x833f85659762bb2361a684e48bf20e3b",16),
 ap_uint<128>("0xb733f9fe512f7790664fbe744d0c2d97",16),
 ap_uint<128>("0x64f030e645c607a9bca2314c872cc585",16),
 ap_uint<128>("0x3fb5491853adacf86bc0c5a8dce2e0e2",16),
 ap_uint<128>("0x7f8dc819140e69473809018ae14b747d",16),
 ap_uint<128>("0x37edeb26d30c43e4312512a7ef9767c8",16),
 ap_uint<128>("0x7625075e3b13e51e9a5b6c8d8856b6c2",16),
 ap_uint<128>("0xd395f9a71fc8b8c43b882f00189ba774",16),
 ap_uint<128>("0xe31609ec809a7f40c639f48bfdbec820",16),
 ap_uint<128>("0xc0e8547e204411db347323ba88160a0a",16),
 ap_uint<128>("0xd3578fe6eda6a6bbea703095ac8f8c1e",16),
 ap_uint<128>("0x7811a2edd39ed4dd4093602fc029e470",16),
 ap_uint<128>("0xa3743602b619430ddfebfafd92ee8e6b",16),
 ap_uint<128>("0xe1a928cbffdfa16c89ee3950166a3174",16),
 ap_uint<128>("0xdbdde590caf70e7720cc329573be730a",16),
 ap_uint<128>("0x3515a81feed73d7b9f1c25153747d119",16),
 ap_uint<128>("0x562900480bb2e792460457590aae9565",16),
 ap_uint<128>("0xfae88ba4bf4f748ee4f7bcb1ae4ceb14",16),
 ap_uint<128>("0xf03a73a822d8e48abc845084c8786497",16),
 ap_uint<128>("0xa3d04f21e47c739fdeedd34733309c01",16),
 ap_uint<128>("0x6a3e30c9e6637b7d9a150796e19cdc13",16),
 ap_uint<128>("0x9c6d3b124f74afa5e94ae63efd6ff3a1",16),
 ap_uint<128>("0x450fb74bc98a18eaa964a10973c4056c",16),
 ap_uint<128>("0x779d80a4ef01f8527e3cda79f2261156",16),
 ap_uint<128>("0x10282600d6aee4c4b197bbc16af9b63e",16),
 ap_uint<128>("0x0cbc3726d3388967cf7e772e212aa4a4",16),
 ap_uint<128>("0xdee7742874dd11c27fbc15800bd01123",16),
 ap_uint<128>("0x533dfb9d0d864d4c3797a47f32997ece",16),
 ap_uint<128>("0x7555c0aa60f884fabe4851fa7af9afff",16),
 ap_uint<128>("0xd5e670e3075a8fb81aae7bddefb0df6e",16),
 ap_uint<128>("0x8c1170e8f9b3dc94a98ef5d6cec27b3b",16),
 ap_uint<128>("0x5060777b8a2a88103ab757328fbebebf",16),
 ap_uint<128>("0xe8180acf8710a1b4e49ff218961b0b83",16),
 ap_uint<128>("0xc7b76be43b9a1760ac265ab6bb07dfb9",16),
 ap_uint<128>("0x717da164cfc5f36eadfae238dc0f0ac8",16),
 ap_uint<128>("0x67bb8b94c2b4c57c2c80dcae24e3e8ee",16),
 ap_uint<128>("0x21b067ca35b1f780dc562a72ad87cf9c",16),
 ap_uint<128>("0x7eef2bdcad8c3ce4eba54a24ddbb8662",16),
 ap_uint<128>("0x1eb1dfe777f231bce2f496661153a546",16),
 ap_uint<128>("0xeb9a4f444e47646b7ea1e83907bd5632",16),
 ap_uint<128>("0x59be7573094d70704b4c6ee65d4d06e2",16),
 ap_uint<128>("0x5c875eed99a48541da8498bdf6225f17",16),
 ap_uint<128>("0xd258111720b781ceced22a4ee690e38b",16),
 ap_uint<128>("0x723d5322b476e37c9ca6bd5de7008212",16),
 ap_uint<128>("0xb9892c51bd715a8454940caa331728eb",16),
 ap_uint<128>("0x2a193306e8f40045d44f899927ddcd25",16),
 ap_uint<128>("0x3041d8bac7c6f6d7729f409897e0d331",16),
 ap_uint<128>("0x65482460fdabe4212db351ad462c6d89",16),
 ap_uint<128>("0x9cd2bf9eea26078ae84ae7d8c32f691b",16),
 ap_uint<128>("0x8844a832c0a5b535b8214901a02fa370",16),
 ap_uint<128>("0x704f65eda855424d5204c61ab8a8bad6",16),
 ap_uint<128>("0xc20ef126f901736c95c314f00194a8c4",16),
 ap_uint<128>("0x833891592e40bbf2cdfdcfba4d1ff480",16),
 ap_uint<128>("0x0afc2236ff0227fe1bdd51df95496a5c",16),
 ap_uint<128>("0x0b634d4889a2ef05fea2f93eb8d55e10",16),
 ap_uint<128>("0xb417fe1a0595b40a5b08ddda9448dd3e",16),
 ap_uint<128>("0x93ce60086202e28ddb9afdff2cc3e5c3",16),
 ap_uint<128>("0x5c210917e83671d16899e101890c13fb",16),
 ap_uint<128>("0x173e28da38797569ac79d96bb0b74ca5",16),
 ap_uint<128>("0xf58c39ad5ffda459a2ca0ef53fbcf74d",16),
 ap_uint<128>("0x01a5b22e2323e4769e0b155a42d0d4cd",16),
 ap_uint<128>("0x0e860837d76b8b2ccc733d7b6a933eb9",16),
 ap_uint<128>("0xb443678438b9394e35f91742426e0236",16),
 ap_uint<128>("0x98d9c99bb4bb41c7660c502a5071d52b",16),
 ap_uint<128>("0xd419afdf0726ed38825a48e8afd68278",16),
 ap_uint<128>("0x38260ccc2061191c64ce12a0844c62a0",16),
 ap_uint<128>("0x9cd3b208219149269873d83aa35de3f6",16),
 ap_uint<128>("0xa0755135059b5ce2149f281178b8f352",16),
 ap_uint<128>("0xfcbfe48a380d088bcc34a3cc6d23ee20",16),
 ap_uint<128>("0x53b1ec04725d5a729c3d0acfb16e3279",16),
 ap_uint<128>("0x9063bb04884fd5edbb0ec065c33c8996",16),
 ap_uint<128>("0xc0845e22326b3d20d6f50d1b3cd70c10",16),
 ap_uint<128>("0xa272770ed0b2ccb1ccc3d12d7b02ce62",16),
 ap_uint<128>("0xf0bba8ba0ee60c565b9df80f12006c13",16),
 ap_uint<128>("0x0171a75e16be083cb18a3fe2ee5f4838",16),
 ap_uint<128>("0x361b2b875e3ffc1ff0ec6774540245a9",16),
 ap_uint<128>("0x46544ceee5f9994531391aa963afeef8",16),
 ap_uint<128>("0x522128a3b21c891234bd729c325d1e5a",16),
 ap_uint<128>("0xaa2c01c83dcd6322e67bba04e7bad109",16),
 ap_uint<128>("0x7ca439d2d2ad279378ec5bf7c2e99bdb",16),
 ap_uint<128>("0x36f09064ad5407515bababe5d761b373",16),
 ap_uint<128>("0xde9ea6cb42c9e0758709ec653d16f24d",16),
 ap_uint<128>("0xf3100da32ca7e8e72687b8417cf47491",16),
 ap_uint<128>("0xe7491e5b9308f5b673dd3cb1df9bc8a6",16),
 ap_uint<128>("0x068ae20e7cdef4b7e8d52240e7dbaa0b",16),
 ap_uint<128>("0x2e85a041b80793b133a6e00f338b8047",16),
 ap_uint<128>("0x36a1a3c9570d2177b05d36cac687af2a",16),
 ap_uint<128>("0x2699f56c9b3ae38dc5dfe4e5ae6d64fc",16),
 ap_uint<128>("0x1239c98fcd05c8b048d64dad11219a2e",16),
 ap_uint<128>("0xd5245987bab0261efaf27013e238f611",16),
 ap_uint<128>("0x316b0d47e91b39a179baeb2a78af74b1",16),
 ap_uint<128>("0xecd57b22836365c0d5e61edc8701b648",16),
 ap_uint<128>("0x120e08b66efbdede9951748918bc584e",16),
 ap_uint<128>("0x80c15f411f700d0f79165f446ad84a03",16),
 ap_uint<128>("0x4bf35cb3e59a4fe0f6c2915015fe2902",16),
 ap_uint<128>("0x7cca932e16f48937524dcce331b66912",16),
 ap_uint<128>("0x09d09ecf44aae4e20e9243b61d914284",16),
 ap_uint<128>("0xac6cdb9ec03426fd4f24e8c434e4a29f",16),
 ap_uint<128>("0x01770314010c74cf757254a10c61379b",16),
 ap_uint<128>("0x312db7448fbfb22ec897288c4a24577c",16),
 ap_uint<128>("0x76a4147856c054f661e51379e866137c",16),
 ap_uint<128>("0x84623edbc50c4a702afc320bfa5b8c2e",16),
 ap_uint<128>("0x7ba44c088aef38dd0ae1cb34b960a7a5",16),
 ap_uint<128>("0xd81e7af49977f9bad41daeb43dfad369",16),
 ap_uint<128>("0xe790c6f857d150a0b4d3d028148642a1",16),
 ap_uint<128>("0xd001e326f8258cb7fad93f0e3ca7ad1b",16),
 ap_uint<128>("0x4e3389fec7a1196fb124581d45836aa3",16),
 ap_uint<128>("0x326dd932091842f8a7cfc4f82f93f0bc",16),
 ap_uint<128>("0x6ae50f42dd8810689643b07ca8f0bac7",16),
 ap_uint<128>("0x3a23dee089230b50990e73e3a43ad83f",16),
 ap_uint<128>("0xc5e6e5eae6f5618d868d84ebce3c0566",16),
 ap_uint<128>("0xab2e0127989859229e49d636b1681c58",16),
 ap_uint<128>("0x86aca08e1a23fc49233ff9b6972ef216",16),
 ap_uint<128>("0x2b7b9663b3e9d1ffb8964ba44da13e9e",16),
 ap_uint<128>("0xa9e8695cf4e7fad88680a09485626f2d",16),
 ap_uint<128>("0xf813cf628b8e4252ad46be5ca29cc684",16),
 ap_uint<128>("0x11154b12c7f68fbbc70c15ae8da1bc16",16),
 ap_uint<128>("0x78b6b246681658f3e74d41f8c9f24b93",16),
 ap_uint<128>("0xe6870a6a18e4c1b9cd2802e1c9f9301a",16),
 ap_uint<128>("0x73226e865d975c6665966bd7b2294395",16),
 ap_uint<128>("0xd9e6a43178a3ebccc137642b93284384",16),
 ap_uint<128>("0x8a553bcc2f9396a1b944b6981d586f29",16),
 ap_uint<128>("0x604e828a70a1ea1e1c5eb309e5aa293e",16),
 ap_uint<128>("0x260f082d54ad9dbdbc7f06827065e8dd",16),
 ap_uint<128>("0x97d680e873d78480b07afea79ec9138a",16),
 ap_uint<128>("0x14b9b86346b3a146fa015ab2eb2122ac",16),
 ap_uint<128>("0x015af8e1f97a842945ddf495479d3708",16),
 ap_uint<128>("0x275d720749e942aceffe372a337ac223",16),
 ap_uint<128>("0x3759a8b82bd5c0efaf7bc824ba4b747d",16),
 ap_uint<128>("0xea1d46736e17eaf86d880b9903871e94",16),
 ap_uint<128>("0xd13cc72ad7143a7184f85ade0367c067",16),
 ap_uint<128>("0x1f98d02314b0e966d2e32922492b022a",16),
 ap_uint<128>("0x6c13027d6d9a09bfda350c672f98932b",16),
 ap_uint<128>("0xa7314a45c9ce83c070b5c98684aa1865",16),
 ap_uint<128>("0x3b80c5c7b1c306eb0a77daedb9619d7a",16),
 ap_uint<128>("0x95cea04aed13ccbea35a1f4c09a7efa2",16),
 ap_uint<128>("0x0cc5898039b5f7bd4e772879ed7468c0",16),
 ap_uint<128>("0x90f64ce4bf5931155ef350c8b4b05200",16),
 ap_uint<128>("0xbc42719a3802fd78f096470f22d1fb51",16),
 ap_uint<128>("0x9d90ec755573cdc18a50859359a198da",16),
 ap_uint<128>("0x7002e05e103a1d6c15ef606441a1d3a9",16),
 ap_uint<128>("0x9972dad06a307f68044f983e7f656628",16),
 ap_uint<128>("0x97b9a298a0838f9c87e1598396769227",16),
 ap_uint<128>("0x08ff7357777c11175024b2c8260693ab",16),
 ap_uint<128>("0x2a3faf4a8728a03c00f4c6f79d118c2a",16),
 ap_uint<128>("0x98db9648ab3372e5b8b6f9bdf532d318",16),
 ap_uint<128>("0x7d6bde8df9bbd5e6e285e3cdb33c290f",16),
 ap_uint<128>("0xaa0a3d22916c1b6733d516157d7754a8",16),
 ap_uint<128>("0xf10a124c300e2b8f1bc5ae270030ece8",16),
 ap_uint<128>("0x6315bf72bb42d38d74bda240ceb077b1",16),
 ap_uint<128>("0xd0da03170882558ecdb7aebc0d79014c",16),
 ap_uint<128>("0x094843ac295fa46b381fec8bbec72de5",16),
 ap_uint<128>("0x475522a1a1a7107996c831f1130eba3f",16),
 ap_uint<128>("0xa9733829b742b4524e1ea0ca74da883b",16),
 ap_uint<128>("0x7e2dcf65605e4b145bba7d9d55883c5a",16),
 ap_uint<128>("0x5af729be03c20abb04771086af2fffaf",16),
 ap_uint<128>("0xab99de0eb5511059b8d1f0d0cb5ae35e",16),
 ap_uint<128>("0x722185190fc33f5301e2a7d871de6251",16),
 ap_uint<128>("0xc4e7b5bda48ee2b7541f90915933eb5f",16),
 ap_uint<128>("0x62634802ecf0fb4a488fbfbe210161bf",16),
 ap_uint<128>("0x371578ed0768c7c3c78f58978b32f2c3",16),
 ap_uint<128>("0x6fbb636084444a7ec3bc7f8ea29eea15",16),
 ap_uint<128>("0x330b1104551467db25da4129e02018d8",16),
 ap_uint<128>("0x1f6cc86374b8e0e090c9c5425191eb6a",16),
 ap_uint<128>("0xeb3cd9aa8b46c41f87d3e45a42a84780",16),
 ap_uint<128>("0xd28dbc57f7b1e38366e99b8be582129b",16),
 ap_uint<128>("0x6d574fba428d232392b0c8b168cfe57a",16),
 ap_uint<128>("0xc8fb069f5c27a06ec425ad3cdeb90e31",16),
 ap_uint<128>("0x5f42eae758ab044abdf3407fb271d3c7",16),
 ap_uint<128>("0x6f1bebd77315c40c1425754a24c52562",16),
 ap_uint<128>("0xb88cb4a16b617d17794149b42ec1ce25",16),
 ap_uint<128>("0xecadfb28c8f17bb6ece95c2091900936",16),
 ap_uint<128>("0xbf8ae5ea144b8b1f6ec5852273c03d4e",16),
 ap_uint<128>("0x763164895ead07f53047606ff9857add",16),
 ap_uint<128>("0x27e019651df6a1047131fb9235f77a39",16),
 ap_uint<128>("0x0c019e91007fe87750c6adca8d5c6658",16),
 ap_uint<128>("0xf0f14b2552643366142b087e754544ae",16),
 ap_uint<128>("0x29526349f1cd13e529ad6992bef92783",16),
 ap_uint<128>("0xc194762492d5b490087524e23d027d7a",16),
 ap_uint<128>("0x824059ca771cb9d13703bf6d2cebf402",16),
 ap_uint<128>("0xdd9173bc6cb106530a30782e62825456",16),
 ap_uint<128>("0x003fb759420f2c7d4b16d9fafe6af6a8",16),
 ap_uint<128>("0x40a6205032b453f77069d6c37a6ffa20",16),
 ap_uint<128>("0xb91edef5c982fbab5f241a4b90dd2356",16),
 ap_uint<128>("0x77ef3dd5e458e2846f3fe375df33a68a",16),
 ap_uint<128>("0xe246ed4240f1a2872dc66b3cf36fcc0a",16),
 ap_uint<128>("0x92ada2a0ece44c9a800d4ddb3638e4f9",16),
 ap_uint<128>("0x92b9483cd9813be8abab55d2635e20d4",16),
 ap_uint<128>("0xc7c2f2f961dd48da7ec9f31480ebbe79",16),
 ap_uint<128>("0xda679fb11ecc68f15064ca83edb6d4ab",16),
 ap_uint<128>("0x00873310f688d5fb411f912ea8c6db20",16),
 ap_uint<128>("0x822a1ad2a79b9f13a0628fe740405129",16),
 ap_uint<128>("0x092f2ef44e9fa100521202a017d1d30e",16),
 ap_uint<128>("0x1f66316f67c340ff2f53d6f8b3a471ce",16),
 ap_uint<128>("0x416bbdbb4dc33aeba22c1d682183cb2d",16),
 ap_uint<128>("0x34a18dbc3c61bd21d07209bba291710e",16),
 ap_uint<128>("0x8cada71f65335e9277509b602085162e",16),
 ap_uint<128>("0xc335680f26878962d59f8db26caf7b53",16),
 ap_uint<128>("0xd3029106f447e331ee2fbe6096e79e5f",16),
 ap_uint<128>("0x107ee91e6630206c0b32d714432bd4f0",16),
 ap_uint<128>("0x7aa88ab49d9c57854a02c6062a5cc173",16),
 ap_uint<128>("0xca44dbee591eff9f890095d9b5239540",16),
 ap_uint<128>("0xa195db3f7b8e00ea2102fd1e5ca9343f",16),
 ap_uint<128>("0x9d2d03dd38aac2aab227fb30301b6563",16),
 ap_uint<128>("0xcb336c20aff3e5dae80d4ff745a2c255",16),
 ap_uint<128>("0x3930915cef005fcc6d612595c68bcb66",16),
 ap_uint<128>("0xdd1ccb5b4c0af0e40020928848fc17fa",16),
 ap_uint<128>("0xb1d865646fc7ef60a165f76962acaf54",16),
 ap_uint<128>("0x8989ea12a59b093f51c2fddf1a2a324b",16),
 ap_uint<128>("0x364800e8e0863ca0d88c9a2459bf1f9f",16),
 ap_uint<128>("0x9b5d8ed1c476c9752d391ec880b37f09",16),
 ap_uint<128>("0x7ac92ba2470b54de8fe61703a1309204",16),
 ap_uint<128>("0x723ad8846a601234ba1304aff29e0667",16),
 ap_uint<128>("0x6f47303942717e06814895d102f9e159",16),
 ap_uint<128>("0xb3e16ac3a8d491f52a45e6a71abcebd2",16),
 ap_uint<128>("0x2adf714579d2723ecee09838829dd21e",16),
 ap_uint<128>("0x5cc327a6f7bc6ec9b00d725d27571a2b",16),
 ap_uint<128>("0x5320d4c9ebdab2c367fcce9cee5b9201",16),
 ap_uint<128>("0x9cbdb2865b36d07b3cc1ef611adae3cb",16),
 ap_uint<128>("0xbda195e989e784670057d4c0d64142eb",16),
 ap_uint<128>("0x0e60342345ad5d360a55c0d2f274acec",16),
 ap_uint<128>("0x545f1a161d8338ec55a59f294763f690",16),
 ap_uint<128>("0xa24809f1ca9b7a2e58783546c6667e7a",16),
 ap_uint<128>("0x123be52dc7d3db8714ce41e53ff1ff05",16),
 ap_uint<128>("0x90bec572333fe20befd163950e46bd6b",16),
 ap_uint<128>("0xea90e7003046bafcde0b249ea03b6571",16),
 ap_uint<128>("0x80c98cd8d8a713eeb72c45ad0177c30a",16),
 ap_uint<128>("0x4603e7fab78e26ff08a2a74c93f6218d",16),
 ap_uint<128>("0x83b8a4166e78d798e31f2390b262c468",16),
 ap_uint<128>("0xa81a6cffa69c5cea620fd04ae4cf334a",16),
 ap_uint<128>("0xac28212c3df047856f10f0a21f5f04bb",16),
 ap_uint<128>("0xe30467a1676f7e83dbad28e4cf3a59a0",16),
 ap_uint<128>("0x3ffb3c29d6ce102f4b02dfd096fe12d8",16),
 ap_uint<128>("0xcdf179322f56b5a38c424b46495e4a8e",16),
 ap_uint<128>("0x555b8ac554a103d95a1026637cd9cedc",16),
 ap_uint<128>("0x314ca1c4ba0f57055ca59c79ac235a81",16),
 ap_uint<128>("0x7d1e9bfb429dcd731ab2fae33ef4c5b2",16),
 ap_uint<128>("0x2c5ad66ce6cddd94ec77ee55bc79f863",16),
 ap_uint<128>("0x6be2e621ce5cc9cfb48fe35856d70613",16),
 ap_uint<128>("0x5cdde25131221ef2ec9839d4f56ce52b",16),
 ap_uint<128>("0x431729e17eef3654d115c3e792c60b47",16),
 ap_uint<128>("0x9e354ea7524345b0fb6996bf93107671",16),
 ap_uint<128>("0xbd22aec8c8d09c4cee3e17f5f35b5669",16),
 ap_uint<128>("0x3104b795d6306000684fd0f5d7a9ed50",16),
 ap_uint<128>("0x64a6641cd6140c772d2e93fce4fc7608",16),
 ap_uint<128>("0xde7fddef0ee384906cbacdf37496fe52",16),
 ap_uint<128>("0x6de7ab2c116df46af13bf7261c28353f",16),
 ap_uint<128>("0x906aa7caaf05e91ce373840f4be061a4",16),
 ap_uint<128>("0x5af619153d35bb6d9bfef1fe9b2d3e5a",16),
 ap_uint<128>("0x8660296f0544778935d95f463865ff63",16),
 ap_uint<128>("0xe4ff7de7af078e24b654038e3f88fd68",16),
 ap_uint<128>("0xa97f75ed42a8f4c0205f28a1ac72c7e4",16),
 ap_uint<128>("0xaa9e05d9d46dabf7ef83a5887a4d3385",16),
 ap_uint<128>("0x89dbc814910185cc801d978b5eecaec2",16),
 ap_uint<128>("0xb73a90edeb6678e8b90a8c2275482f06",16),
 ap_uint<128>("0xe10afd6b5ced13955793a57694d9f216",16),
 ap_uint<128>("0xbeb8a25f96d3a5b72bde1b8f58e126eb",16),
 ap_uint<128>("0xad19a2a76fd4135251ed6a349b878be0",16),
 ap_uint<128>("0x9d631b06349c7562797779a268f44443",16),
 ap_uint<128>("0xec04493cbf0761b25cd3d970bf82136a",16),
 ap_uint<128>("0x0051813f50b9be1aec0a3b598ac28d8c",16),
 ap_uint<128>("0x287fc7f68e5a1965df92a02714863f29",16),
 ap_uint<128>("0xb23624f3eaa54b347a625421aef1e1f4",16),
 ap_uint<128>("0x754b7ac8e99044721084d305abb88e59",16),
 ap_uint<128>("0x998c5d562bca8c5b6f2123efd90dfaf7",16),
 ap_uint<128>("0x61bccc7c48114672a8b0aa0ff0416a91",16),
 ap_uint<128>("0x19f862cc2ca62d345e83b14a9f58c60f",16),
 ap_uint<128>("0xa627f5b0b97ed10a4329c6f261a605ab",16),
 ap_uint<128>("0xbf7fc695b2cf8abc650d8df101962c9b",16),
 ap_uint<128>("0x591b4dd367133e7e1bb646e6146b9cf8",16),
 ap_uint<128>("0x4ae0e156bd37894a29af6c8c93370978",16),
 ap_uint<128>("0x45d9fdeb301514f4971d12fd7fbfd2cc",16),
 ap_uint<128>("0xf3f15db1e2f8073fde5c6b2ba86cda0d",16),
 ap_uint<128>("0x67e218cb6067219b0f3619bb0eb87540",16),
 ap_uint<128>("0x6506089eae583f50f5daa499b5a99870",16),
 ap_uint<128>("0xa6f51945791db042eed4c46fe63a59fb",16),
 ap_uint<128>("0x3438f3c41733b5081bdb85b9f037da1c",16),
 ap_uint<128>("0x0be7b96bec4e3150d9ab9f3aa73bdf74",16),
 ap_uint<128>("0x66b4543d0ca5ae64780296942bce5d35",16),
 ap_uint<128>("0xdba1995c38035134fa8a3da385ab95c4",16),
 ap_uint<128>("0x89a5ef5ce3e3bed8513e23dad7ae0a0f",16),
 ap_uint<128>("0x377277e6496bf5ab4989215f46524423",16),
 ap_uint<128>("0xa0daadf28af1d0d05d0ae4ce61e3e32c",16),
 ap_uint<128>("0x3a3e15a4e26a9bfe0fad023209375f4f",16),
 ap_uint<128>("0x199b362f6049feb7cb5c95b9a69f9961",16),
 ap_uint<128>("0x30e45a4eb3d207960b94d446f6a165ee",16),
 ap_uint<128>("0x488f488fabb56616e89ebb3e448c3270",16),
 ap_uint<128>("0xc4dffcd932f16a9f487376c3206b45b1",16),
 ap_uint<128>("0x55da19e62bffc28ecd5ee689d858bfdc",16),
 ap_uint<128>("0x6263774351d4c236519c77739685514b",16),
 ap_uint<128>("0xc74a8ba320a11e6f71e4d16838f48076",16),
 ap_uint<128>("0x6e898717ca82443d5b7c30032542b397",16),
 ap_uint<128>("0xb5a4d039eed15b69aa0c63816bfdaa73",16),
 ap_uint<128>("0x7d1d49ebe0dc2ce16ee3907f185b9687",16),
 ap_uint<128>("0x0dfdf091e6e56bfe60c3cc2cb3a5dcf8",16),
 ap_uint<128>("0xd84971b097567a868013e94ef84b6de4",16),
 ap_uint<128>("0x5a9a11b9da04d05c4c68273ff87b3d59",16),
 ap_uint<128>("0x0ad4c316f44f6d4c2d92def20b86709d",16),
 ap_uint<128>("0x963a1bbf4b40ba57e59b71e2335eaed8",16),
 ap_uint<128>("0xf5085235f908c15d2b4c1a0cbd88106a",16),
 ap_uint<128>("0xdb5242c2bb172f95505560403d31f6c0",16),
 ap_uint<128>("0xb3ca3b96987d7a522a5aa8ab93fca444",16),
 ap_uint<128>("0x9cbb11897d987283de1a859950563d00",16),
 ap_uint<128>("0xe07ac34bc8b1660c4ab53b379ab9f305",16),
 ap_uint<128>("0x0de2f9d387762779c18dc6ee642240b9",16),
 ap_uint<128>("0xb1a062f1b8c103a3370fc134fc995a3c",16),
 ap_uint<128>("0x0c55b2d1c424b53183221d36f5143f2b",16),
 ap_uint<128>("0x810ca24af1183cb1f1df9a0d83eb375c",16),
 ap_uint<128>("0x2fe2cb8a3db901be18b227c585e81c7a",16),
 ap_uint<128>("0x51aa9af662cb98e18b09ce74189c5161",16),
 ap_uint<128>("0xca82b00c914b2b0a655f9a6ac10bd6bd",16),
 ap_uint<128>("0x072f14e7ae9f5daa2d54f9685972d27d",16),
 ap_uint<128>("0x5b768df5e6f21138f0fd30fad91506a3",16),
 ap_uint<128>("0x7a9963407d1159a3772ed7f8fcfaabff",16),
 ap_uint<128>("0xe9add1f42bace8dcab5f49b8465ce525",16),
 ap_uint<128>("0x2c9fc67aa5642316ba5030eb25b2b6ec",16),
 ap_uint<128>("0xb8d926577235bd5c10d58f857a2dd215",16),
 ap_uint<128>("0xe1c12c36c99b7fab4a6dff2c7a728135",16),
 ap_uint<128>("0x0e35ecb559b32baa9c8cb6b4c2ab7e43",16),
 ap_uint<128>("0x52d6f6eb30d5ae745736a322c1fa6041",16),
 ap_uint<128>("0x45077f4813f12bc764347acddeb5cfa6",16),
 ap_uint<128>("0xca8cb84ce921ed0ad0c77ad1326ee8ab",16),
 ap_uint<128>("0x3d3d68dfe822b18a0ea15ff41e3c9f17",16),
 ap_uint<128>("0x5f72b02f0eec1710b5c6082daa317b5f",16),
 ap_uint<128>("0xa19badea8486c306f91937e8ff9be850",16),
 ap_uint<128>("0xee0d89101b20afe63cc5fc4b2fd756cc",16),
 ap_uint<128>("0x707f57cbe2fa4687b6e63861b6bc1a23",16),
 ap_uint<128>("0xef2324fc7eed1b4d5886a8f9ad473a85",16),
 ap_uint<128>("0xda7525dabc8311100d5fe35f406692f8",16),
 ap_uint<128>("0xad11ff9ef6e9bfa9f2f2d8f9bb8b4565",16),
 ap_uint<128>("0x0e6ac4b093aad5999d98a7f4992ef556",16),
 ap_uint<128>("0x61b629264180f4b607f51f5cb0c903ce",16),
 ap_uint<128>("0x1b87a7e27a3a982257f56e5231b912fb",16),
 ap_uint<128>("0xb3c694a9d8489331aa9bf540402e5067",16),
 ap_uint<128>("0x0626e8e881e29689060221a8c384d0bd",16),
 ap_uint<128>("0x36035b957269e1a84d6a08bb73e95dd2",16),
 ap_uint<128>("0x24bf290211786c9dfbee56618a3f05cf",16),
 ap_uint<128>("0x4f4641bfdc579fc696cb1e37f71c15b5",16),
 ap_uint<128>("0x3ea34664bcd8cebee22cbef4d81c8a7b",16),
 ap_uint<128>("0xd9b9f602f240270fb0ce39679a73810f",16),
 ap_uint<128>("0x0a78b1ffc139b3516e8d27d4dad3365c",16),
 ap_uint<128>("0x0f70f46b4e2496835c333695e4b96606",16),
 ap_uint<128>("0x767c1b5f8f8a6000894515ca2db224fe",16),
 ap_uint<128>("0x2a705a051deda3110b7f5fc301efb8bb",16),
 ap_uint<128>("0xc703a5d7dd2e4165724ce125d474a4ac",16),
 ap_uint<128>("0xfd471e42794e6c81566ca9fdf76691a0",16),
 ap_uint<128>("0x4a4c139ed091afe3f1d7ff1246f2d9f4",16),
 ap_uint<128>("0x7be4336756bec4545862dd0260a14e43",16),
 ap_uint<128>("0x1e14f31e918f08387ef27f5e0ab95e92",16),
 ap_uint<128>("0x6a9f5a36291c38ab12ada7e87bd307d5",16),
 ap_uint<128>("0x867e856fc555915989e4066f537a23da",16),
 ap_uint<128>("0xa82f01b7500e4ea72bbf9ef96312f665",16),
 ap_uint<128>("0xf782b3e241435fd3a5c3bfe877060728",16),
 ap_uint<128>("0x49b296a0e723d5e42612fa4065a95a3a",16),
 ap_uint<128>("0xf422d7997115554c0739af95584a82c0",16),
 ap_uint<128>("0x9b8604050cfa5b5847eb1b69f494b894",16),
 ap_uint<128>("0x3e7ca2bcbebb2605847cd7ad41217672",16),
 ap_uint<128>("0xc1f491f0b8eb9cd6a9386d3960d6720d",16),
 ap_uint<128>("0x06cc47144f8074a173081f3805e5cb02",16),
 ap_uint<128>("0xe83d6a857ebbc45478a8e0e1cf53a4de",16),
 ap_uint<128>("0x99c465eea029b3b8addcc7fd57c975e7",16),
 ap_uint<128>("0x74ab5175b6b86c5ee789d77faf474b02",16),
 ap_uint<128>("0x795deea0e9d3cc9ac417b509e0807860",16),
 ap_uint<128>("0xdd3ddfa79c9745f6286666642bea7165",16),
 ap_uint<128>("0x1a769d3f3172b6305f7aabdc035a5126",16),
 ap_uint<128>("0x12682dee1894a01c71a6b3c26b24a595",16),
 ap_uint<128>("0xbccf8e328c21df211ac76c02b849841b",16),
 ap_uint<128>("0x46a63435d3f76045ccfb33c96b94f940",16),
 ap_uint<128>("0x419129b3a72102495c2c03d1aa049676",16),
 ap_uint<128>("0x7d211b9069ffe561b80edcda80803c3e",16),
 ap_uint<128>("0xf8c9f7cd9bba4c168c53e1cb95eb6ad9",16),
 ap_uint<128>("0x7f12a774750fe89076fe771bb4a341dc",16),
 ap_uint<128>("0xc97593296cdd9c563c26eaefb0b50396",16),
 ap_uint<128>("0x2c7bf27ddd9b90f93759d0ba4eba45bb",16),
 ap_uint<128>("0x158674305208bfed94791e615e7369d7",16),
 ap_uint<128>("0xe8b2c23c34daeadab7182e58b730047a",16),
 ap_uint<128>("0x46be712f1df8bcad71caf68454aabf61",16),
 ap_uint<128>("0x8fcb880345ec560d4d2104c34de6e9b4",16),
 ap_uint<128>("0x781447af89c48e89ba09bef957aa4b6c",16),
 ap_uint<128>("0x1ba3697e00a787593896f0e749b433f7",16),
 ap_uint<128>("0x4f7386811c6c7ea2f81c0580a1627822",16),
 ap_uint<128>("0xc49c1ff05228e356f30c8b3e1486289f",16),
 ap_uint<128>("0x5170022146ded1ba2cbb0522397728b0",16),
 ap_uint<128>("0x32b6e8fa1ab53d4103866aa6925a9bf7",16),
 ap_uint<128>("0x30dd115ba2d0487921835894732f9343",16),
 ap_uint<128>("0x7b3cffc4dd80c15b5448b8290a6218b1",16),
 ap_uint<128>("0x1d7f3a2f36a3d1a09fc87764555c3c74",16),
 ap_uint<128>("0x9c0f356d7eeb320dc03b8160c0a0c75b",16),
 ap_uint<128>("0xaf01f0e4a0af0e45c47718497bdfeb1c",16),
 ap_uint<128>("0xd9abd7ac5ab14ed2feccd245740fd6ce",16),
 ap_uint<128>("0x5c6dc763b2ae57994b5e1d80d70c1816",16),
 ap_uint<128>("0xac3cc949810e8d0439001b50c50c782d",16),
 ap_uint<128>("0xb30c650f6e9791fadb291773e05e5c9a",16),
 ap_uint<128>("0x7784f375d014240a029d00d4dfd0bb29",16),
 ap_uint<128>("0x7622e34f4c869d9f9f9579309a5694fd",16),
 ap_uint<128>("0x374640da8f5d59fa574f5e5fd4638dc9",16),
 ap_uint<128>("0xced60a56f368041b538f9a58b8790367",16),
 ap_uint<128>("0x6ee7bf44478c8138babf586226f36fb3",16),
 ap_uint<128>("0xf64cef2535696e2e11b0879d4cc16fc5",16),
 ap_uint<128>("0x18933a7c575a4ae46e9447bc0db4b449",16),
 ap_uint<128>("0x58cea7c720233dde728bfcf86a6350b4",16),
 ap_uint<128>("0x722c28da6f202bdb21dbf15215bd6b56",16),
 ap_uint<128>("0x1387d12d726b9e516a386dceb5ccbeb4",16),
 ap_uint<128>("0xd2c219e8c9d84a1d15f78ba00b42b167",16),
 ap_uint<128>("0x2efe0d6a1a84b010803c47b0e8b1d815",16),
 ap_uint<128>("0x78e60199a33aa90e1bd86cc3b87f27aa",16),
 ap_uint<128>("0x6bdc952ba1440b8735e1d2798e9ea116",16),
 ap_uint<128>("0xbbab1b9ec0aa503f66e7b997a2527e94",16),
 ap_uint<128>("0x95ab10d8c7c2d631812d76c91c2948d2",16),
 ap_uint<128>("0xa8dad03f4a936182c8386bd5cf874232",16),
 ap_uint<128>("0x8c66ec94d710c702bfb551f1930633ce",16),
 ap_uint<128>("0x14884c978fa99201fb3820c26038db93",16),
 ap_uint<128>("0x77de6620fc77928aee2c8d33ea7f4e7f",16),
 ap_uint<128>("0xd4e42d1de7441e937f8d17e657e5bcf3",16),
 ap_uint<128>("0xcf3865444400923302ab211eaff64b98",16),
 ap_uint<128>("0xd97e8278454b705fe27188177fb09c45",16),
 ap_uint<128>("0x718336bb7184ef0f77c04b2bdb9625ac",16),
 ap_uint<128>("0xe931b50a9c9d80c20b901cca3c2571db",16),
 ap_uint<128>("0x2e9d31807a75eb94eb1a4d58bb230108",16),
 ap_uint<128>("0x8e731858967dbbc17e1bfd70c7f1d72e",16),
 ap_uint<128>("0x72697c812ebc65ab8af22f46488882b9",16),
 ap_uint<128>("0x9ad42292af8efcac872f02f244ca8fde",16),
 ap_uint<128>("0x5bef88226c4969692c8da146b1369ee1",16),
 ap_uint<128>("0x2b2254ced97920c88f99185fa19d84dc",16),
 ap_uint<128>("0x7d17787ccc91fb654b9553e1fa149735",16),
 ap_uint<128>("0x1ee657d77802fc856fff9a4681e24ed5",16),
 ap_uint<128>("0x4cf9e3cb80aedfcc25d415ef06db70f8",16),
 ap_uint<128>("0xcb483e2d0cfe535368907a78e7181002",16),
 ap_uint<128>("0x88166c51a0db6e164599336b9c1db10f",16),
 ap_uint<128>("0x508ba9e9c707cc78aec0d2b1c11d3012",16),
 ap_uint<128>("0x6660310e463dcd5e0dbd32022807cce0",16),
 ap_uint<128>("0x230b87a4a58e8bc85a6d708b1c1824ab",16),
 ap_uint<128>("0x288f7973bdcc12a62295f54b24848838",16),
 ap_uint<128>("0x1664f24c111e316b7f34f83ffbec90d8",16),
 ap_uint<128>("0xf79a8796c96dd5472825e1465728ea31",16),
 ap_uint<128>("0x1bfeb95df0ae5b75e20ed3d050602981",16),
 ap_uint<128>("0x15de71b0bf6b765de0aa5c54a0e32972",16),
 ap_uint<128>("0x324768d220c29ac6dd8d023dbf620319",16),
 ap_uint<128>("0xb08a908fcd914b8a93a9f70bb01e86d8",16),
 ap_uint<128>("0x2e1946c7503b97e9e620b88d4e6829b8",16),
 ap_uint<128>("0xfdfd7558481f850f7d542d34b81cb41b",16),
 ap_uint<128>("0xc42ffe662e324669a5f0921ebb4fb4ed",16),
 ap_uint<128>("0x45619b90237118ac22fecae4d8679761",16),
 ap_uint<128>("0x87e3e97c8c918293412f1cda229707f5",16),
 ap_uint<128>("0xed3a3b9c7ad4117b27a4ba56ac02dc9e",16),
 ap_uint<128>("0xfce80a2843acd18fef62238968d5c3fd",16),
 ap_uint<128>("0x025bb41f6d5dc415fc807ef5a9f784aa",16),
 ap_uint<128>("0x96a09066ea7e8d5d1b30848326b059ea",16),
 ap_uint<128>("0xf8a0b512d8ced0e17584e9666a875685",16),
 ap_uint<128>("0x973f1095c366a365617587fe0bb16eb0",16),
 ap_uint<128>("0xf74503edd447f826cbbbfbad907ab4e6",16),
 ap_uint<128>("0x9a2d15303bde47e43bd4f7e8e1e3460c",16),
 ap_uint<128>("0x126cc0cd35637de50b9bcc33dbd34b7c",16),
 ap_uint<128>("0x04afe4bfb80d942958235b739f9d3321",16),
 ap_uint<128>("0x9d3bf208b58fb1357d4b9a669590135d",16),
 ap_uint<128>("0x0420a4a4a03de68e2af3af2aa6717060",16),
 ap_uint<128>("0x11bb801f2f5f9729c2eee218f71a3dac",16),
 ap_uint<128>("0x69e9d448cc4a95dd23b7aed8a78209d0",16),
 ap_uint<128>("0xe991a8453eb4db5a7a5b1eec57276598",16),
 ap_uint<128>("0x35e8e1976170b1ed9634ea45c24af20a",16),
 ap_uint<128>("0x7e2a9a58f70f447d95b95acead2e3a50",16),
 ap_uint<128>("0x559ed4c2abe83b3f8fa7e0c537409b62",16),
 ap_uint<128>("0x93509936cd41db39addb9164649981cf",16),
 ap_uint<128>("0x1bd6955f479291f99f60d358c64cb038",16),
 ap_uint<128>("0x05969f7e0014df299aec3b3f97ece473",16),
 ap_uint<128>("0x122151176ef4b3fa5cf90a2955c78996",16),
 ap_uint<128>("0xf8ef6eb8df18c67bf17e7af128996f27",16),
 ap_uint<128>("0xa6c1f815ec9fe533529fc06e5b096e7f",16),
 ap_uint<128>("0xa3261093b6b1a831af82f7850b020087",16),
 ap_uint<128>("0x1df3317722afed5743358e746170b4cf",16),
 ap_uint<128>("0x718e2df8f6a46e161c89ccc9206b3afd",16),
 ap_uint<128>("0x965dd6482da954c228aa041a090201cb",16),
 ap_uint<128>("0x7c63575dba83e6542e05e91a25fe01ec",16),
 ap_uint<128>("0x15778032a8119c7aa116a499bf4b5928",16),
 ap_uint<128>("0xec1b10109bac2f055a5cfbf84ed28c08",16),
 ap_uint<128>("0xae899fbc30e6c2feb249cb5f595050a9",16),
 ap_uint<128>("0x554f7f34133105de47764528df4854d5",16),
 ap_uint<128>("0x6a74388833553772cb8bf62ff7782568",16),
 ap_uint<128>("0xeea9273fe5590c632cbb4f5ca56ad6d9",16),
 ap_uint<128>("0x6513f24257379b302e7b39eb92d2cb54",16),
 ap_uint<128>("0x88446558f3c956b6be08b3d1af327190",16),
 ap_uint<128>("0x7435ff90b22fe5ee2fbbc55856bcaa97",16),
 ap_uint<128>("0xaa429e61c2dc82555be53e66adf3015a",16),
 ap_uint<128>("0xd4136962bb11b59e5d422b949f981246",16),
 ap_uint<128>("0x926e15106274061bd21fd607c4d1c3e6",16),
 ap_uint<128>("0xdf611a87605b555d503f9eaaf07a317c",16),
 ap_uint<128>("0x9e76f95e384b5425287d209394d8098c",16),
 ap_uint<128>("0x1b83f8caa9d9aaf659c6f6d1918e8ea1",16),
 ap_uint<128>("0xb448643a836da1ee154e6722dc373ab2",16),
 ap_uint<128>("0x3b056f214e34b1722043b8eba1baa26c",16),
 ap_uint<128>("0x493c6884e41bfc836a72e248493ee61a",16),
 ap_uint<128>("0xc0ac8a88d2695ecfbb4d911984e50d49",16),
 ap_uint<128>("0x173a0bb9d6d393304d811c1c851ef8ee",16),
 ap_uint<128>("0x263d8a1053050a9e38a71e228ed87012",16),
 ap_uint<128>("0x22d1ca2b675508e101d98366c5ed1c4d",16),
 ap_uint<128>("0x13cc9cd238866c0658157db93586add1",16),
 ap_uint<128>("0x7368f41f1aaf6174b3798e8ce90f92eb",16),
 ap_uint<128>("0xebde8dab636cdc71d4852e941ccd8081",16),
 ap_uint<128>("0xd2de28859a34f2490a34e7751a809cba",16),
 ap_uint<128>("0xf501d561eed6a6749aa52bfd3bfd3d6b",16),
 ap_uint<128>("0x6445e4644885f5440f442218fd3bb334",16),
 ap_uint<128>("0xd4839b57a52b2a38ef1bb0b32ef34f8e",16),
 ap_uint<128>("0x9c22498babd3379aa175712594bf84f1",16),
 ap_uint<128>("0x8c36904e9e524d1ac1062317206bd423",16),
 ap_uint<128>("0x28a36938ef01591344b701d05ab26c8a",16),
 ap_uint<128>("0xcd5aebc7d9206c9efce0efb1795fa5a0",16),
 ap_uint<128>("0x2602b13cb12886906949295de021bbd6",16),
 ap_uint<128>("0x9e48f4aa99246df1e9ec5e870e6bdbb6",16),
 ap_uint<128>("0xa593449295991c5a67b6a02b65fa39ee",16),
 ap_uint<128>("0x067be26ce385f3dc0b4c68bea9c3148e",16),
 ap_uint<128>("0xe4698322794534cbc36c0d45379ac7ab",16),
 ap_uint<128>("0x8432d2a13d561b07b8bbb61fcf60e03d",16),
 ap_uint<128>("0xbac52f1d6c0eef12361647acdf9b74fd",16),
 ap_uint<128>("0x775df814e5e60f827b5c089d9f8fbedc",16),
 ap_uint<128>("0xb8873e28c67dab2b2545ada8694f9d6f",16),
 ap_uint<128>("0xcad7337b50321a186a822def0275065e",16),
 ap_uint<128>("0x6e16a70bf3ce9dbac079726c00980a81",16),
 ap_uint<128>("0x3db4db14dc37c17b2265b70d2bb33327",16),
 ap_uint<128>("0x81d58b09e5f88e8f4fcb26dfe3910ad5",16),
 ap_uint<128>("0x7d9491d2915066afea64a8a6809c1b7d",16),
 ap_uint<128>("0x6a965af53e389a3722ba75d88a3bb53f",16),
 ap_uint<128>("0x46c826e9922075fa3114842b16e48144",16),
 ap_uint<128>("0x34c285acf9ea35d717b4870d55b41819",16),
 ap_uint<128>("0x803e495e450cf97dc1a2b6693a506d41",16),
 ap_uint<128>("0x3c67703dfae1c8861be480212e1dbe38",16),
 ap_uint<128>("0x6f5ec0769936066a41edf039b20f3ef4",16),
 ap_uint<128>("0x762c8232244d055de9ba2ba3f86c8e5b",16),
 ap_uint<128>("0x67b13dd7f07ee2a5236a216be0ae3c78",16),
 ap_uint<128>("0xdbb1e99458f1eca812ea4f28180ac199",16),
 ap_uint<128>("0xca88811e9b9d44288edb635ddfa7a2a9",16),
 ap_uint<128>("0x760284f5b9a2c74930caf44652480520",16),
 ap_uint<128>("0x8780dc54d834adcc18130355a16fd2f4",16),
 ap_uint<128>("0x60f931f224d3a19e06fdd535279a1db5",16),
 ap_uint<128>("0xb8b4b79fe6b3aa400badd38e83d53ad4",16),
 ap_uint<128>("0x7ede2e3ea3a48e1358a9d60c339c0e4a",16),
 ap_uint<128>("0xd9c3fcdc1963860563141a15aebee71e",16),
 ap_uint<128>("0x8f8883f8e15e303bf7d13f92fd2d9f81",16),
 ap_uint<128>("0x3478abdd18e27d82fdb5874c00a61958",16),
 ap_uint<128>("0x01d9e83388201a49ce3776e1d5648564",16),
 ap_uint<128>("0x7da93853f304c2a2325ae9d3f272d647",16),
 ap_uint<128>("0xe53bd91d58e6674fc27dfa7aae3d39a7",16),
 ap_uint<128>("0xbb8288cee358e0d3310184c271db549c",16),
 ap_uint<128>("0x794d20ef61fb220161e103f38735325a",16),
 ap_uint<128>("0xf1421f6ed91a749da13b44d82b696c99",16),
 ap_uint<128>("0xca3bdb2db3fbeeab1a91f1cd3948a3b5",16),
 ap_uint<128>("0x0d78698f19fbc59b7113880e0452ef35",16),
 ap_uint<128>("0x7c0139910142f24028787e6c0ad25bb5",16),
 ap_uint<128>("0xb9ebdebe6214196769bfeb2a3afd03ce",16),
 ap_uint<128>("0x5a954354e0efb3347194a99e97ec0263",16),
 ap_uint<128>("0xe017eea766cd60513f43a9db8108ccea",16),
 ap_uint<128>("0x411a727edb07db7224506ca736fc70ce",16),
 ap_uint<128>("0x986355d9b33210048cebd4c5d3b9f724",16),
 ap_uint<128>("0x2104f6ccab3d534c42c3b1f713402848",16),
 ap_uint<128>("0xe1a19f7f3c43ea0fbd1b87eb87600aab",16),
 ap_uint<128>("0x45010a15077e10057c05b738c98089a2",16),
 ap_uint<128>("0x832c219fdf7800ec3f437c3f2bc5b7b8",16),
 ap_uint<128>("0x71f66f462422a1155fbc8d8269c78c85",16),
 ap_uint<128>("0xabdea8ee76101535b8c693ccc7d8edfd",16),
 ap_uint<128>("0x20ba32a072e90a504516417382f1c06e",16),
 ap_uint<128>("0x0ca938e76db61720d04d53e8adea0a7d",16),
 ap_uint<128>("0x6567d12b8a67a2178278b50ae014b002",16),
 ap_uint<128>("0xfa866f5641fb5fc9cefa7f6262eb44d0",16),
 ap_uint<128>("0x1f640147e1bd03d4ec82f53e99ef36a4",16),
 ap_uint<128>("0x0cbb286fa6d51b99720306055a90f0ce",16),
 ap_uint<128>("0x6ef2e10ab33c73fa370c3acb90d65830",16),
 ap_uint<128>("0x2786bde81467d0ea7f03f326119c69d7",16),
 ap_uint<128>("0xe6a66f29647bbd13187cac8a91548b5b",16),
 ap_uint<128>("0x9a5f63c8f2f5e87e3be685a285ee26fb",16),
 ap_uint<128>("0xb90a52bb4784595e29c0dc9427857b14",16),
 ap_uint<128>("0x4bfab91f4a50017ed93c4147a2efb256",16),
 ap_uint<128>("0x210d11fa3858947cfd2dd9385e1947c1",16),
 ap_uint<128>("0xcb575bd2d4a1e1ae6f7d649a80771ed1",16),
 ap_uint<128>("0x216b7bc8fd7a9b8ecfc802e997f1f61e",16),
 ap_uint<128>("0xc5cbf5a5566e1af140dab002522cc5b7",16),
 ap_uint<128>("0x351009b97c411cdf43b52bdcbce181b5",16),
 ap_uint<128>("0xab7bd52518744c5d97e99fd0be675df5",16),
 ap_uint<128>("0x19966e722f9d8a73a2641c6e272946b8",16),
 ap_uint<128>("0x834d095472361f62a299de45e1eea4c1",16),
 ap_uint<128>("0xf5cf74e2dcdbdc65ccdb4dfa8aa6df64",16),
 ap_uint<128>("0xcb4b600cd38b9f9ff9b2b784e93c8f0f",16),
 ap_uint<128>("0x1a609af53568d2829ed2442f82672c25",16),
 ap_uint<128>("0xb58b1609c1da0fd56b134b2e52d567ed",16),
 ap_uint<128>("0xd1c3757959156a70a18d975d5d864a60",16),
 ap_uint<128>("0xed086b9557dcbe1a49d7a0d11083705f",16),
 ap_uint<128>("0x403b282394c9e3a895b863b5f63101f2",16),
 ap_uint<128>("0xb85eb95eb21ce0f5b5247a6ed3dc9018",16),
 ap_uint<128>("0x6f03fa23a112464a290c41aeb9b50d59",16),
 ap_uint<128>("0x889e1d77bc931b25a3d7116fd90bef04",16),
 ap_uint<128>("0x213f9cba20e916cc6e8d0429b4d9251e",16),
 ap_uint<128>("0xd6ffd261559756493fe11792cbb8a1e1",16),
 ap_uint<128>("0xd993e2e1d65f0e2bc5c2cdd35c63c334",16),
 ap_uint<128>("0xa68283089a445b972c7d6e4b541fa320",16),
 ap_uint<128>("0x9a0c50b3849475382eacfa3a43e9c151",16),
 ap_uint<128>("0x38ddda8771c39ac2e2dcf35395598027",16),
 ap_uint<128>("0x7a563729624840a8b9afc5e749d3a79e",16),
 ap_uint<128>("0x531ca61954da45c5bca194310766bd51",16),
 ap_uint<128>("0x3bfcafb1e5ef98d4822c625f171226f3",16),
 ap_uint<128>("0x184645ebc017d3c05110d648dd73e917",16),
 ap_uint<128>("0x49c8b3613de23ed6e97df267592632c6",16),
 ap_uint<128>("0x1be43a64b89ed52c0d1c34f6ddd3308a",16),
 ap_uint<128>("0x967d211c45003aae7a34c99ea6a827bf",16),
 ap_uint<128>("0xb624aa358f29922e9af131222199a242",16),
 ap_uint<128>("0x3dec1c535675307d9d723e0e5052f30b",16),
 ap_uint<128>("0xdae5b1b99eb2b3d473671cf71ac29a30",16),
 ap_uint<128>("0xdd65ff0c5fdfa26b469746e4574543c3",16),
 ap_uint<128>("0xd4a82839349fdf040f1fb589dad5eadd",16),
 ap_uint<128>("0x719c5f34bbc42e5b860caeae313de166",16),
 ap_uint<128>("0x0e20d18c4e47bc49ace32c6b74ae4c8d",16),
 ap_uint<128>("0x7b27fa5fbf306319ca2d0db9f51b1841",16),
 ap_uint<128>("0xb40965a8ce25f0d76896e1130aa0926c",16),
 ap_uint<128>("0xd2dc4a719e267fd0536939d60462e593",16),
 ap_uint<128>("0x1900815ac2d3c90d469bf3727d9a8248",16),
 ap_uint<128>("0x2f9f1bf8561dd81856bece345790614b",16),
 ap_uint<128>("0x3c3f8bfd5751da11b3bb4729a20fe422",16),
 ap_uint<128>("0xed82b096f5532fd97c75cf8f529ee09f",16),
 ap_uint<128>("0x1812aff9be82283469d862a19d271584",16),
 ap_uint<128>("0xe4e5454deadcb3f66bba380323d33bd9",16),
 ap_uint<128>("0x65810e6a16954105265d73e6bf211768",16),
 ap_uint<128>("0xdaddd311c8e4ca8bfafccf4918f5db22",16),
 ap_uint<128>("0x986f2e905787a128fc66e584ca9faf4b",16),
 ap_uint<128>("0x9094ca7d0f8817ec0d6d5651f9fdd96b",16),
 ap_uint<128>("0xbd6139789638cb66e34c10f061a4592e",16),
 ap_uint<128>("0x1040471545d45a25a3bf51ebf3eb9c51",16),
 ap_uint<128>("0x7425a977abd3dd8f7f23d9c5c0f29faf",16),
 ap_uint<128>("0x791ebdad225754e3377784257214c6a4",16),
 ap_uint<128>("0x1a8423cf1b31abf4ab8d63c14c1f2945",16),
 ap_uint<128>("0x3ad868cc07adcd1d57421c29b38a0c3d",16),
 ap_uint<128>("0x29bcf34e92be394de2e33b2b32e67244",16),
 ap_uint<128>("0x74576a5317dc9bebef30f892851d6435",16),
 ap_uint<128>("0x1afb71eed3b87ec5c806b158571722ea",16),
 ap_uint<128>("0x400a89826f3a175ac83788e6a0ee7237",16),
 ap_uint<128>("0x976fe87fd931df399c35c1578b15e60e",16),
 ap_uint<128>("0xfdb6db0cabafc7a64dcc9f437b856188",16),
 ap_uint<128>("0xb24fe828d72fb4dc1ef8d7c1c55ffac1",16),
 ap_uint<128>("0x1742e473bc01e34614fa3129f114e5d9",16),
 ap_uint<128>("0x22b82fb4509cc3aedb300e10dca7bbc9",16),
 ap_uint<128>("0xf7f45ca57948a7b64643d05fc6adfde1",16),
 ap_uint<128>("0xa716a33cb3e2d41faf26dcb16529c279",16),
 ap_uint<128>("0x878b0de5e4996e6187a572fd52867ca7",16),
 ap_uint<128>("0x54262c0d100f9c0ad6d9573ca5433736",16),
 ap_uint<128>("0x9b6e4abae6fc3b55421e4059a6cf5818",16),
 ap_uint<128>("0x0dcd97abad118b435ef99adb5e60cb75",16),
 ap_uint<128>("0xf26ae2f6b362151977fef6f3f09e2b48",16),
 ap_uint<128>("0xcb79587c261526f29a3f7f21b3f1ed78",16),
 ap_uint<128>("0x1f49649a9bfc991c4a524f21bcdea8f6",16),
 ap_uint<128>("0x7b3f77b7ebf6b9f17f5347b3d9b957ce",16),
 ap_uint<128>("0xee4ae4a9a6debbeec6a1a340c112ad10",16),
 ap_uint<128>("0xff97f3f369be957906051636d8f50469",16),
 ap_uint<128>("0xda346d6e1e6e328276e385abfd1d20c8",16),
 ap_uint<128>("0x87697e93995dcee67f28df63a317a6a3",16),
 ap_uint<128>("0xa9f66b3fa0a8ac396ad1f1e1d2342e06",16),
 ap_uint<128>("0x76e755426561ff9f31453d30082bcd2a",16),
 ap_uint<128>("0xd405ccdd52b0089a620e24770be1a60a",16),
 ap_uint<128>("0x31a0fd1ceba849ff9896964ffdfd41f4",16),
 ap_uint<128>("0xc42804e027c6e9beb8178b3367eae41e",16),
 ap_uint<128>("0x7a8dfa99a1d8b79f501343f2a103561b",16),
 ap_uint<128>("0xe2b3836e6666d6ed8443eb09fb1c6dc7",16),
 ap_uint<128>("0xa2034cbcb99f875682ee063f97c29f37",16),
 ap_uint<128>("0x5d083214599daf5831ed8aae4e0fa496",16),
 ap_uint<128>("0xe33744e76c37ed5003555e15d32dd0ac",16),
 ap_uint<128>("0x732fd6913b8eded1636653e2477d7a78",16),
 ap_uint<128>("0x0b9c3abb99c0222ae25f2942e24e0329",16),
 ap_uint<128>("0xf3f92d805d6b478a92cecd376a85170f",16),
 ap_uint<128>("0xfbafdd5c0456d8da75c3ddfc19ec6ea7",16),
 ap_uint<128>("0x0739d9d1a67a46016778d7bae9f91bd2",16),
 ap_uint<128>("0x391426d70d0d54800bc005a101c5c73b",16),
 ap_uint<128>("0x14f4f7b0ce9abbdbfe4e6c377b61ac6a",16),
 ap_uint<128>("0x7519c1d0baa06ff9ac7dbcafe35488b6",16),
 ap_uint<128>("0x10ef63f62f334feea048bdf378ef473a",16),
 ap_uint<128>("0xc2d23af93c95270e81e81f26949dee1f",16),
 ap_uint<128>("0xa23fe4e663cda28db36a60c16c7943a1",16),
 ap_uint<128>("0x6f936ee7623f916a3f39277fb1a8da5e",16),
 ap_uint<128>("0x6ff104bf4af139f78cf41957ddab1b0a",16),
 ap_uint<128>("0xa51c09968a60238d9738173d2be4b8a1",16),
 ap_uint<128>("0x5b9ee57b64a4d5ee2fe305a57b47dff0",16),
 ap_uint<128>("0x3d894cf9a4d0897b09c2f9aa4bb67549",16),
 ap_uint<128>("0xf8eddd14c3fb4d69b264bdd0023a2d4b",16),
 ap_uint<128>("0x507455d69533a9fb5c6d720b598a149d",16),
 ap_uint<128>("0x2bc79cc1bbe3d498b8b08876d6579976",16),
 ap_uint<128>("0x04bf90d2293f78e1ae21bd9f00f09465",16),
 ap_uint<128>("0xda8c4ae9095f910924b9fb82d09c13df",16),
 ap_uint<128>("0x0aee83a8813e8603af29157ea616647e",16),
 ap_uint<128>("0x81592af8fbbfcbb237d276980d467c9e",16),
 ap_uint<128>("0xf42ec75c4f549bf4ed3697a56546b3bb",16),
 ap_uint<128>("0xd5475f3aafb00d87cc4fcc93beb971fc",16),
 ap_uint<128>("0x556ceb11e452381b50081e3f19cc5bd9",16),
 ap_uint<128>("0x2fd4c279196852821371de035a36feef",16),
 ap_uint<128>("0xa348b0e579aa26daa4310fa9ac94d1af",16),
 ap_uint<128>("0xfaa96e86ad00d381302e1d8f435af4e1",16),
 ap_uint<128>("0x3205f8ffd158392368e2a3a345e775f7",16),
 ap_uint<128>("0xe6cfdf5fe2ea7122d126f17ab0d09596",16),
 ap_uint<128>("0x85a32d0f0144cbbe0e7a249287309aaa",16),
 ap_uint<128>("0xfbb73c037e16b28b49f92c3abe8d041d",16),
 ap_uint<128>("0xd9901aa2b20e81dd3ea6a0ba64e9a821",16),
 ap_uint<128>("0x6cd25fe5e78fdb43daff03763366fe51",16),
 ap_uint<128>("0x445859f561ade88939c716e10f0b34a9",16),
 ap_uint<128>("0xbb1f7acce6b85ad0b280d27dd730766e",16),
 ap_uint<128>("0x218d189eae2960eaa4a0fc7e0a14bdc1",16),
 ap_uint<128>("0xca064891b9f6fc1fdd7fe062994a181f",16),
 ap_uint<128>("0x8f7bf76d8614c5c362035770f93302b5",16),
 ap_uint<128>("0xe9ff9c6e1f95ecbe28daa0c491228a67",16),
 ap_uint<128>("0x021496f9abf5a1db67f60b65f8b37973",16),
 ap_uint<128>("0xc500b41982f7085ecfc10796341b28ff",16),
 ap_uint<128>("0x860c81c87f6a1d6cacd790bffe441a02",16),
 ap_uint<128>("0x39c8819ec0154c4115ac75bcff246c18",16),
 ap_uint<128>("0xf7267bcef8dd124e286a2cc16877e6dd",16),
 ap_uint<128>("0xd506c5df89dfb8765cb0997b341a24a2",16),
 ap_uint<128>("0x7d26f3c9eecffecf55a4ed9c3a529590",16),
 ap_uint<128>("0xe4df91e78d4f82fd9ce28197cb7f1a6a",16),
 ap_uint<128>("0x5692bd43677579ad1ba16f3080083196",16),
 ap_uint<128>("0x114fdc0f00bf12710eb4ce4e9f168ea0",16),
 ap_uint<128>("0x402b0f46c6734f548a60caefd2d2f8bb",16),
 ap_uint<128>("0x97e61b0b7929eea4b2f64a4de4436711",16),
 ap_uint<128>("0x14b7023126c0c8d6e4ba7f45ea3915af",16),
 ap_uint<128>("0x39822b6819f2934bc481d5fc1188520b",16),
 ap_uint<128>("0x69875dc61a68530604954d58241b6279",16),
 ap_uint<128>("0x2a9a06a0fa415a41cdf5f2de7c4fc0fa",16),
 ap_uint<128>("0x6412fb35f387936eee90f72d62ac43d4",16),
 ap_uint<128>("0x07c02587ad46dafe9b2338aa1925651c",16),
 ap_uint<128>("0xfceed5cf1b5c5034f2f8fb8b3fdfeeed",16),
 ap_uint<128>("0x534d51ff70f0898ef2fafbddd538f9fe",16),
 ap_uint<128>("0xfdbca0bba7fa8752547bbf7f70fe8c58",16),
 ap_uint<128>("0x1b8351d83bb302f4987fe3ba81fb8391",16),
 ap_uint<128>("0x2d509c96e8217925c3d90e67043df3ce",16),
 ap_uint<128>("0x1968526de315a2496d26194efce608a1",16),
 ap_uint<128>("0xd302fedbc28f3a81b4033cdebcd82c15",16),
 ap_uint<128>("0xf7e26d38e23bc5a017ffb78da0eec383",16),
 ap_uint<128>("0x4c98bd4e4a00252d345e7b547667b78d",16),
 ap_uint<128>("0xbed18cabe0d632aa99ac707a78a05a35",16),
 ap_uint<128>("0x7565fb0042145b6068437c8d669daa7f",16),
 ap_uint<128>("0x771b3018bb0c077025e583f7680f17a9",16),
 ap_uint<128>("0xd89773f78155059603a654f1c71fba25",16),
 ap_uint<128>("0xae4847c105121aba71a085844fc905c3",16),
 ap_uint<128>("0x8e035c7f4f9e844a096257fae96b88cb",16),
 ap_uint<128>("0x7993fbc1784367cd4228ba16372d3b31",16),
 ap_uint<128>("0x6ce4499ca945b36fbf02c5d7308be19b",16),
 ap_uint<128>("0x7c1f68c40846ee0ce0db0666e7448e7c",16),
 ap_uint<128>("0x62e8d2615c0bff77850f3a228a3fd6a9",16),
 ap_uint<128>("0xe743d5ea3744365a700c596761236d03",16),
 ap_uint<128>("0xf410b3ee3eba47e917149d09f3fb5074",16),
 ap_uint<128>("0xc455882b2a86b51a752a847a4cb13dd7",16),
 ap_uint<128>("0xe6a814834b7d57da27d2858d681dae3e",16),
 ap_uint<128>("0x3f61af5ede02d35ca503873df5838861",16),
 ap_uint<128>("0x199eb5e76f92ca4a7631f33df5243548",16),
 ap_uint<128>("0x1e56ae41cde5af98de6b0d6ab5e87a32",16),
 ap_uint<128>("0x141bcb706402b3d71aef13ea21b2e188",16),
 ap_uint<128>("0x82e96cf98ce13dd82f8ec615e8139ccc",16),
 ap_uint<128>("0x04bafa4c0822842b48690637a4e83848",16),
 ap_uint<128>("0x1782e20c8e99f32f48ec86a73b9a9c18",16),
 ap_uint<128>("0x044d92c57f3a4d346dfd94c8f2ccc8b3",16),
 ap_uint<128>("0xbde0f5743152ec9da48a82b42e7f97cc",16),
 ap_uint<128>("0x77c66a110030fe28e21069bcf8639aeb",16),
 ap_uint<128>("0x458bf5ccaf4a68e58b6614885fa56df4",16),
 ap_uint<128>("0x23e980f68f1672cd2b7845befe78d256",16),
 ap_uint<128>("0x6d3d86e3296e889bb23133f7f274687a",16),
 ap_uint<128>("0xb49e50d4163f540ead9fb6efaf11a0f3",16),
 ap_uint<128>("0xc32199cca40ae5b6b97ca3241ae609a7",16),
 ap_uint<128>("0x45eda6bcd912a298dd4f7d9354c956e8",16),
 ap_uint<128>("0xdfc157913327376df0ac0afc62bf8355",16),
 ap_uint<128>("0xb5b5dcf064e0540d341ebf95e826ba17",16),
 ap_uint<128>("0xe16a0a855a00bfa2e006bb19b3b81000",16),
 ap_uint<128>("0xeb372f02b235a302ccef7446a48d41d3",16),
 ap_uint<128>("0x6c2f1eaecace2d61b376dbdb9399bef9",16),
 ap_uint<128>("0xffb65b19aa5900351225cd155249fe62",16),
 ap_uint<128>("0xf4bfd5927662bcecece5723340fb1c89",16),
 ap_uint<128>("0x5312b19addd8f0eb3f8b852d730d3e70",16),
 ap_uint<128>("0x09c3a515492f28620dc069dc288122cb",16),
 ap_uint<128>("0x9fd4d91428be89c15233e15c714b9e39",16),
 ap_uint<128>("0x380a3de074876fbec9a925a732e8edc7",16),
 ap_uint<128>("0xba6d275f01bbf13bf3bed2473d1c25df",16),
 ap_uint<128>("0x3c6589f1ea5043e720c769dbeaea6d50",16),
 ap_uint<128>("0x881cb76d6c7500d77a3d2c315754fd3f",16),
 ap_uint<128>("0xdd21e7c7a5abefd7b46c56021b2e7d5e",16),
 ap_uint<128>("0x42794623633d6ae9c5c4742045aba23a",16),
 ap_uint<128>("0x016df7ff3364e9abcbc84f63655d76b3",16),
 ap_uint<128>("0xe2071d496b1ea9e4f081434ad42cc14c",16),
 ap_uint<128>("0x116cdc7db230d0ae000ba2dac03cd758",16),
 ap_uint<128>("0x891144de5e026665359e27ae685eae7e",16),
 ap_uint<128>("0xb4082133faab0977ee33e8a325b22b2a",16),
 ap_uint<128>("0xd5fde8db32552c88dbb6f7cfa3805061",16),
 ap_uint<128>("0xbd3a2d39ecf47ffe448b1cc5d55f27b1",16),
 ap_uint<128>("0xe2ed34d6a28c94e18ae8b8c4b0f89579",16),
 ap_uint<128>("0xae6d225d2dc9d0843a7b8179090de92f",16),
 ap_uint<128>("0x0cac603c03169f68916a0faafe0f20ec",16),
 ap_uint<128>("0x0fc4c6060fed293df8efe5340123a597",16),
 ap_uint<128>("0x8aa25ea1f15560e85d6890b8cfcdc2dc",16),
 ap_uint<128>("0x209d76d8155cbc68f9615b71977249e2",16),
 ap_uint<128>("0x2f00d44716d05bd1741108e5c977ae00",16),
 ap_uint<128>("0x6dce6887745d0eb441823a42757ebffe",16),
 ap_uint<128>("0x49eade32315ecd10ca428f7f9cfeb762",16),
 ap_uint<128>("0xd1752aa80718b50605ed75ee62363cc9",16),
 ap_uint<128>("0xc2b7f83837313198cf93c7a59a5b479d",16),
 ap_uint<128>("0x01e727a820ed4a515f0c9ae62a806ffb",16),
 ap_uint<128>("0x535d4d1b3f06cb70ffdd463f0a49090c",16),
 ap_uint<128>("0x441f6aa19af3c2864f3726b347609a44",16),
 ap_uint<128>("0x2e6157126df478cbbe29d9c3fc707b1c",16),
 ap_uint<128>("0xf2f5fd726729b5fb1d995eaf2d7dc0d4",16),
 ap_uint<128>("0xf99fd481cf55578a166d440956137321",16),
 ap_uint<128>("0x0e2ea7f0b1cd42dc7ad846d79b29b22c",16),
 ap_uint<128>("0xeac6b9f48f95e0a15e5125d309fcc900",16),
 ap_uint<128>("0x7d859c7f37e7dd70793054147751a584",16),
 ap_uint<128>("0x6b6c5ff8ffd75c6af0e638195d40be66",16),
 ap_uint<128>("0x733be2dd80005b04c70fefbfe4620c92",16),
 ap_uint<128>("0x94d49d862526c65a1420ab3f808429a8",16),
 ap_uint<128>("0x6782d460c1a1b1dd11f1c5b27479796d",16),
 ap_uint<128>("0xdfaa66a20b12c929491409a74bda2a3d",16),
 ap_uint<128>("0xa99be3fc66fde9ba0f5646d929b49ae9",16),
 ap_uint<128>("0x0ffa366fe472fdf6202c791c59b284f9",16),
 ap_uint<128>("0xf4734f7ce9207d029ca77b376b1f0f1e",16),
 ap_uint<128>("0x59279d90892a5d281a1454506149901c",16),
 ap_uint<128>("0xb61bfc794e1734491f6198dbfa7e91aa",16),
 ap_uint<128>("0xbe05a8ec836059fa94946baf2c9130e1",16),
 ap_uint<128>("0x4c9f2feec8e1008fe1419dc4b8f85852",16),
 ap_uint<128>("0x22e0f0ecf36d720c2e129410de7d5796",16),
 ap_uint<128>("0xab7a784130669053d5b103981850edc9",16),
 ap_uint<128>("0x1e25eb275f8ca3559e9bfb3495ce2924",16),
 ap_uint<128>("0xb2de63a71a446cba94fac823af957ec6",16),
 ap_uint<128>("0x1f80f27016dab948566703b7b71307e3",16),
 ap_uint<128>("0x19fd6020560262fd8cdbadfc1301aed0",16),
 ap_uint<128>("0x9c21e6bc6f5a2c650ffbc0b6aa42e80d",16),
 ap_uint<128>("0x5483be914cf71ff7e550c2369bab8104",16),
 ap_uint<128>("0x96b55e0f88593b54a5036a357ea9290e",16),
 ap_uint<128>("0x4d4cf7e97cd2e36ae54e9f0f936bfc53",16),
 ap_uint<128>("0x284290b46c11e7fba28db5ccc85959ad",16),
 ap_uint<128>("0x6f698f0c7439d7af3c9ed71f8fdad7d3",16),
 ap_uint<128>("0xe5c6dd55d1ea8a78972de91936dcd535",16),
 ap_uint<128>("0x07151a7986c81190db46345d7e3ec0aa",16),
 ap_uint<128>("0x4abb2d89eb78d4aef42cc9e29a62191e",16),
 ap_uint<128>("0xda4ab52f7e001b651eb9295813eaef10",16),
 ap_uint<128>("0xe7437c14a614c407cf81b342be1bc595",16),
 ap_uint<128>("0xda7f8a2c03458c3f0412529c41d0bdff",16),
 ap_uint<128>("0xd8295d6bebe2035513f0bf68bb0095f4",16),
 ap_uint<128>("0x76a59b7e07e7a21e7de1e3499ac61a71",16),
 ap_uint<128>("0x35d014dfd874b578f959da90906479aa",16),
 ap_uint<128>("0x922349db26dcb184bbd974c985fe1164",16),
 ap_uint<128>("0x2dd1a16e80a6886fb18bc1d66f1ce75f",16),
 ap_uint<128>("0x94a4454ac7524407b26dd2cdab893654",16),
 ap_uint<128>("0x17fe1eebbfa1586a05810db6dbcd2ade",16),
 ap_uint<128>("0x020a95928edb1566c707c8a742531c92",16),
 ap_uint<128>("0x9eea9ab60216f9642b1a4ba4fe6bacd6",16),
 ap_uint<128>("0xee58a7255f6a0c2f66d51c7c436526f3",16),
 ap_uint<128>("0xe2408bb968169304e1104aac73b3f075",16),
 ap_uint<128>("0xa7a37aaebb52dd376e439891597e8c15",16),
 ap_uint<128>("0x22d2bdf1c553c828d316a6643b873ffa",16),
 ap_uint<128>("0xf818b786c3df23113d2d17de57311a1a",16),
 ap_uint<128>("0x9a808c9b566b8c929760af7dd896b1f1",16),
 ap_uint<128>("0xc708c676eb620dedb1fe6d2c256bf13d",16),
 ap_uint<128>("0x274379d84eb79ea31f68c0f2b0d21f17",16),
 ap_uint<128>("0x7e00fbba6a8247b4946d8591ef22e552",16),
 ap_uint<128>("0x7c4a3e62c202d9e26b33cda6e57298a6",16),
 ap_uint<128>("0x6634edaf2ddbcfe71906f78b0dad261a",16),
 ap_uint<128>("0xc2a62a37e137f96708b67faea9747500",16),
 ap_uint<128>("0x383a90b77a1b490228b5bcf6eb788c3a",16),
 ap_uint<128>("0xbbf28495339328732e5f479f02e9c6c6",16),
 ap_uint<128>("0x2c77b26f7337e0b4e5601b04f6ffb76b",16),
 ap_uint<128>("0xb9c7969201c52483b131a41047b73ef3",16),
 ap_uint<128>("0x4c46e0a5eaa150c4c31908dfc4cce6a5",16),
 ap_uint<128>("0xf798e16447a00ecaee8e8ef60578b4c8",16),
 ap_uint<128>("0xf6c1187a5bd65db53f364cec13e578c2",16),
 ap_uint<128>("0x76b9befc2bfbafe930f1911f1a9c1b66",16),
 ap_uint<128>("0xa44925dbdb340a9cf667898c1842762c",16),
 ap_uint<128>("0xfac13d358d38ea4a883768dc961d1b94",16),
 ap_uint<128>("0xde7b30b5909d66318f751f8dccc17dd8",16),
 ap_uint<128>("0x48f8afa49dbc224c8e47941521e68735",16),
 ap_uint<128>("0xecc384eae70086a49fe8a2c3467e4295",16),
 ap_uint<128>("0xbb21c2878fb368402536c89689bce563",16),
 ap_uint<128>("0xb6b5db1749e1ddaf579b93fe5a42d88e",16),
 ap_uint<128>("0xd445e73f6ca0c35caf8b4d30e13d3704",16),
 ap_uint<128>("0x435a8c03e878d47d07ce07ef513a623d",16),
 ap_uint<128>("0x85e398dbe8e47f4bfa5d7ec75e52276f",16),
 ap_uint<128>("0x91f036c9315ad441a5ece7b518b89b68",16),
 ap_uint<128>("0x2afe2e85b7e3a6c370b317280fee94af",16),
 ap_uint<128>("0xa4d1a848bf322c52873ea91628f971ec",16),
 ap_uint<128>("0x71eeb8f510f054eac15c42c388f00f12",16),
 ap_uint<128>("0xa956c90decb1f1a4e697ea253d41d4d7",16),
 ap_uint<128>("0xa44f3eb21c743317c9763cfa382340b2",16),
 ap_uint<128>("0x6e02066f0233b8725a4a15ffa2db6793",16),
 ap_uint<128>("0x7eb207c775dd6ed0086980819517be48",16),
 ap_uint<128>("0x6acc8f9954370ba76baceb3227dd8bc2",16),
 ap_uint<128>("0xc320e1403689cd1111a1981ade13ba7c",16),
 ap_uint<128>("0x36f9078c4e4ea3b6198dbe5a6cd81c2e",16),
 ap_uint<128>("0x5c840f5ff8649626f6b4d03cb71dca5c",16),
 ap_uint<128>("0x6dde356c720c21887023801e649ed661",16),
 ap_uint<128>("0x627f7ff680b4b58262cce41a9f8a51fc",16),
 ap_uint<128>("0x416bbb0bc04b59e20c01ba0361fb99ae",16),
 ap_uint<128>("0x737a0a02f57fce68c3815406305086fc",16),
 ap_uint<128>("0x1523151b4f57ea7863a9627da325f631",16),
 ap_uint<128>("0x058a7f7291afa2fed5b1e8977786502e",16),
 ap_uint<128>("0xec990cab54074dbc3f4604b0f627fa00",16),
 ap_uint<128>("0xbe573e2fb3082352b0733bc8117afb98",16),
 ap_uint<128>("0xcf0c38d96baafa27febd2b3efca34738",16),
 ap_uint<128>("0xf92c017d26729d1757b01c955735140b",16),
 ap_uint<128>("0xa5fb96ad1df92bff11618c235d956cc2",16),
 ap_uint<128>("0x8fcf68c07b0660bd78734b917170443d",16),
 ap_uint<128>("0x43f2e78d9e3acbf8a4272e59a190bb9f",16),
 ap_uint<128>("0x8076d8b04a64a1ea679c3360fb753fc6",16),
 ap_uint<128>("0xae5d31a48cd929c38d00c7a65214a5a9",16),
 ap_uint<128>("0xd80e6ae352576429254cd82b5ee780b0",16),
 ap_uint<128>("0xc51d560d71d2b7b1b4b0ed23de38f6ac",16),
 ap_uint<128>("0x539baaa03891fcc2c37526a1c21fb2f2",16),
 ap_uint<128>("0x7c2538e3e6fd860be5a948a1a140a918",16),
 ap_uint<128>("0xfa96370c5b2a1b326baf4499634d6d8c",16),
 ap_uint<128>("0x8db47b623bb31824ce78f60e2ee73d49",16),
 ap_uint<128>("0xebea1a560d74eb0cc4a1fd5e25e47dac",16),
 ap_uint<128>("0xfe40157b145abd1224cd2ca5ac30f729",16),
 ap_uint<128>("0x43352bd7f24a075033b4bd430e1437b0",16),
 ap_uint<128>("0x1b68314948081fe5c8c88394b75d979b",16),
 ap_uint<128>("0x2a4b3b14b6cfac7fdb32cf07b2b45f88",16),
 ap_uint<128>("0x84397154a1eb2e39e46fdf11044feae7",16),
 ap_uint<128>("0xce9e1d513984441a754828501ddb97b5",16),
 ap_uint<128>("0x8d231695a0fb62c3e56c520ae1644a05",16),
 ap_uint<128>("0x4005c91465d45669e3e1f87c80fdd095",16),
 ap_uint<128>("0xf4b15d48e511e1e4a0b297729abafbcd",16),
 ap_uint<128>("0x13796559f55bff6d7448c4218f64893c",16),
 ap_uint<128>("0x99a4434e2e514d24d1d6e30ef1ec9cfc",16),
 ap_uint<128>("0xae665f5880341cdb7127e34e2b26f158",16),
 ap_uint<128>("0xf813280df314ce3a500b03bab08035a2",16),
 ap_uint<128>("0xf772ff5ad7dbc3566bc31f2e49c00ad6",16),
 ap_uint<128>("0x66126449df18c779a1358ff4050702d1",16),
 ap_uint<128>("0x3ec8d526bbcb71ba3c8faefee2789d28",16),
 ap_uint<128>("0xa9f9fbdcfce706259007032810f1b5ee",16),
 ap_uint<128>("0x65be66ae9969ec60c840b25af0661c70",16),
 ap_uint<128>("0x214976949505cb024297997fd40e730a",16),
 ap_uint<128>("0x6e535ae74e2eabdef35a143720852bc5",16),
 ap_uint<128>("0xe635e235ce31bdcd0ed9df8ff126385f",16),
 ap_uint<128>("0x9fa3e191ed3615553a219d9cd9796c32",16),
 ap_uint<128>("0x9118679cfa47ea11fcdff183921de7c3",16),
 ap_uint<128>("0x98bbcea0df414f335f6be83fc9c46316",16),
 ap_uint<128>("0x06f04ee2b344c2cbea6b3611704e556b",16),
 ap_uint<128>("0x1adad37c496f4be71aca24ac8f6baede",16),
 ap_uint<128>("0xbab5ad21325e5f3f4f5862f4aca3322e",16),
 ap_uint<128>("0xac8ac2e10bc8a8744b2c48d7cf0f6269",16),
 ap_uint<128>("0xce7eeb1f1b49d937ef66b217d2eef738",16),
 ap_uint<128>("0xa4e37cc3547643136773fa8b8e5fb3a0",16),
 ap_uint<128>("0xbb7df3548ee46182348c4a955103a194",16),
 ap_uint<128>("0x5d98fbc0d5078937947bb6eb479c2028",16),
 ap_uint<128>("0x66d0305983ef03b6e4d1170600cc1d0c",16),
 ap_uint<128>("0x4e892dc20f89d89f4e3a594e37d02655",16),
 ap_uint<128>("0x814d9e4d47a75132cfb74458163432fc",16),
 ap_uint<128>("0x993c839227026b6cda847381ff852d26",16),
 ap_uint<128>("0x59cba1a2148303b49c905b8858a4e78b",16),
 ap_uint<128>("0x705934c99661a1204b01fc3f1540429f",16),
 ap_uint<128>("0x28af96d476c1b7b40fab95082c4e4502",16),
 ap_uint<128>("0x39ca3f6f0f73b45810626330d072f2fb",16),
 ap_uint<128>("0xe2473c07e7837420c108274d1a6b3052",16),
 ap_uint<128>("0x5622fbfa1322baea91e07285e48dbff5",16),
 ap_uint<128>("0x99fa7636f78813731497047922ee9d61",16),
 ap_uint<128>("0xc07aa1134dfc3f82c908dad0d9cb4bc1",16),
 ap_uint<128>("0xd76f882384daab8a18040c11626366c0",16),
 ap_uint<128>("0x3cb77eb1b0b4e8e9b0f29caf1fec3b49",16),
 ap_uint<128>("0x1178d773863f2bbe0d9c55ba9c951c90",16),
 ap_uint<128>("0x245063416a4e0ab5d779526e3c5ea674",16),
 ap_uint<128>("0xccd067dfe2b2d71cf8a7abe78b71fc8a",16),
 ap_uint<128>("0x182ad1047ccbfa09c862a3caed059aae",16),
 ap_uint<128>("0xbba45d167e9bd3e21463330e4f922df5",16),
 ap_uint<128>("0xe6b1075868c43b359d09d9c24b22edc3",16),
 ap_uint<128>("0x9968e78006a6608c31729fbac265d3d1",16),
 ap_uint<128>("0xa2c8f1c07a3fd7de684771698e4a6f69",16),
 ap_uint<128>("0xf99fafd97151a898e22472eed16cf96e",16),
 ap_uint<128>("0xc0a81ce8a3352df53758940eec33537f",16),
 ap_uint<128>("0xcff8ba326b78f835daf31a6b762a3e6b",16),
 ap_uint<128>("0x62f980507dde7ca5300ffc1f1bd2b01d",16),
 ap_uint<128>("0xce0cd1ae278cfc8f0fe089fb6b786a5f",16),
 ap_uint<128>("0x68bfe32172228fdb12504dcafe059176",16),
 ap_uint<128>("0x038f973e6dff547f8fc3bf1220d89a3c",16),
 ap_uint<128>("0x501abcaf0f2a57082c10cb455fe38230",16),
 ap_uint<128>("0x2edf7b872414c1cfa2ba49222ce8a4e4",16),
 ap_uint<128>("0x311ea5676bfe82de177141c514208c79",16),
 ap_uint<128>("0xf241b5b7ba8f930538a195c4e99c139e",16),
 ap_uint<128>("0x3d7678258773fc0eb827cb9795198651",16),
 ap_uint<128>("0xe2570f441ac994df1f407df3e4c59a04",16),
 ap_uint<128>("0x77e5c85998745afdcb23f1f65a232d5a",16),
 ap_uint<128>("0xe0d648b5e3e8f7837278d9c015546554",16),
 ap_uint<128>("0xab7291085c6fe7e6f5185164e72cea4e",16),
 ap_uint<128>("0xf96cf2152e215193c91fbea80567aefe",16),
 ap_uint<128>("0x9c3f5cf27571b997f678a1c2ada65e23",16),
 ap_uint<128>("0x7c218f959812e1728dc027b93c4217a7",16),
 ap_uint<128>("0x1c96a9337e281c42a3e18ba7e9717110",16),
 ap_uint<128>("0x630b8801044b643017b653c661028375",16),
 ap_uint<128>("0x0709dc89425e2ace6ddb7c403b3923a1",16),
 ap_uint<128>("0x2e9b202577d7e51dd6be241e92fc0d63",16),
 ap_uint<128>("0x8c9c527eb31a57a0a420540467c29929",16),
 ap_uint<128>("0xc492e55e787e04d972d77dd58c0b2fd6",16),
 ap_uint<128>("0x463fcad30f9e2c0a79390be0afc001b1",16),
 ap_uint<128>("0xfcbc662fcd988b4952c470f5b3fb944c",16),
 ap_uint<128>("0x8b51043a4462a7295032e40f689f29a4",16),
 ap_uint<128>("0x80761ddf5b7205d4dab3384a8a0dd562",16),
 ap_uint<128>("0xbf5015afd24b99d97dce05da0e17d80f",16),
 ap_uint<128>("0x0e7afb25227c81d4d0a4b42de424101e",16),
 ap_uint<128>("0x46dfb2791808b6e20b500fab29c33edd",16),
 ap_uint<128>("0x5b6e326f2dd4305c16fbc6a22644e1b8",16),
 ap_uint<128>("0x3e969d39f4533e9a2eedf9877c451eab",16),
 ap_uint<128>("0xbac56e05addf136bc4cf1f1eef6d19b8",16),
 ap_uint<128>("0x15d05608738f5e6c96f579b603f68218",16),
 ap_uint<128>("0x75b231efe4a651e0229e40dcfb941199",16),
 ap_uint<128>("0x61ddc4488ab678ffc4d0ad6539a16298",16),
 ap_uint<128>("0x870945a589bef73eb6de7ad88f91a90c",16),
 ap_uint<128>("0x4a014136d6bc1ef33f30f605a53c6388",16),
 ap_uint<128>("0xe988623157399534f1a4830eae0440b2",16),
 ap_uint<128>("0x238881b3cbae0e27d3261f01c4a1a81a",16),
 ap_uint<128>("0xf4dde0a3f1941028a10d48f6cc148ccd",16),
 ap_uint<128>("0x833f85659762bb2361a684e48bf20e3b",16),
 ap_uint<128>("0xb733f9fe512f7790664fbe744d0c2d97",16),
 ap_uint<128>("0x64f030e645c607a9bca2314c872cc585",16),
 ap_uint<128>("0x3fb5491853adacf86bc0c5a8dce2e0e2",16),
 ap_uint<128>("0x7f8dc819140e69473809018ae14b747d",16),
 ap_uint<128>("0x37edeb26d30c43e4312512a7ef9767c8",16),
 ap_uint<128>("0x7625075e3b13e51e9a5b6c8d8856b6c2",16),
 ap_uint<128>("0xd395f9a71fc8b8c43b882f00189ba774",16),
 ap_uint<128>("0xe31609ec809a7f40c639f48bfdbec820",16),
 ap_uint<128>("0xc0e8547e204411db347323ba88160a0a",16),
 ap_uint<128>("0xd3578fe6eda6a6bbea703095ac8f8c1e",16),
 ap_uint<128>("0x7811a2edd39ed4dd4093602fc029e470",16),
 ap_uint<128>("0xa3743602b619430ddfebfafd92ee8e6b",16),
 ap_uint<128>("0xe1a928cbffdfa16c89ee3950166a3174",16),
 ap_uint<128>("0xdbdde590caf70e7720cc329573be730a",16),
 ap_uint<128>("0x3515a81feed73d7b9f1c25153747d119",16),
 ap_uint<128>("0x562900480bb2e792460457590aae9565",16),
 ap_uint<128>("0xfae88ba4bf4f748ee4f7bcb1ae4ceb14",16),
 ap_uint<128>("0xf03a73a822d8e48abc845084c8786497",16),
 ap_uint<128>("0xa3d04f21e47c739fdeedd34733309c01",16),
 ap_uint<128>("0x6a3e30c9e6637b7d9a150796e19cdc13",16),
 ap_uint<128>("0x9c6d3b124f74afa5e94ae63efd6ff3a1",16),
 ap_uint<128>("0x450fb74bc98a18eaa964a10973c4056c",16),
 ap_uint<128>("0x779d80a4ef01f8527e3cda79f2261156",16),
 ap_uint<128>("0x10282600d6aee4c4b197bbc16af9b63e",16),
 ap_uint<128>("0x0cbc3726d3388967cf7e772e212aa4a4",16),
 ap_uint<128>("0xdee7742874dd11c27fbc15800bd01123",16),
 ap_uint<128>("0x533dfb9d0d864d4c3797a47f32997ece",16),
 ap_uint<128>("0x7555c0aa60f884fabe4851fa7af9afff",16),
 ap_uint<128>("0xd5e670e3075a8fb81aae7bddefb0df6e",16),
 ap_uint<128>("0x8c1170e8f9b3dc94a98ef5d6cec27b3b",16),
 ap_uint<128>("0x5060777b8a2a88103ab757328fbebebf",16),
 ap_uint<128>("0xe8180acf8710a1b4e49ff218961b0b83",16),
 ap_uint<128>("0xc7b76be43b9a1760ac265ab6bb07dfb9",16),
 ap_uint<128>("0x717da164cfc5f36eadfae238dc0f0ac8",16),
 ap_uint<128>("0x67bb8b94c2b4c57c2c80dcae24e3e8ee",16),
 ap_uint<128>("0x21b067ca35b1f780dc562a72ad87cf9c",16),
 ap_uint<128>("0x7eef2bdcad8c3ce4eba54a24ddbb8662",16),
 ap_uint<128>("0x1eb1dfe777f231bce2f496661153a546",16),
 ap_uint<128>("0xeb9a4f444e47646b7ea1e83907bd5632",16),
 ap_uint<128>("0x59be7573094d70704b4c6ee65d4d06e2",16),
 ap_uint<128>("0x5c875eed99a48541da8498bdf6225f17",16),
 ap_uint<128>("0xd258111720b781ceced22a4ee690e38b",16),
 ap_uint<128>("0x723d5322b476e37c9ca6bd5de7008212",16),
 ap_uint<128>("0xb9892c51bd715a8454940caa331728eb",16),
 ap_uint<128>("0x2a193306e8f40045d44f899927ddcd25",16),
 ap_uint<128>("0x3041d8bac7c6f6d7729f409897e0d331",16),
 ap_uint<128>("0x65482460fdabe4212db351ad462c6d89",16),
 ap_uint<128>("0x9cd2bf9eea26078ae84ae7d8c32f691b",16),
 ap_uint<128>("0x8844a832c0a5b535b8214901a02fa370",16),
 ap_uint<128>("0x704f65eda855424d5204c61ab8a8bad6",16),
 ap_uint<128>("0xc20ef126f901736c95c314f00194a8c4",16),
 ap_uint<128>("0x833891592e40bbf2cdfdcfba4d1ff480",16),
 ap_uint<128>("0x0afc2236ff0227fe1bdd51df95496a5c",16),
 ap_uint<128>("0x0b634d4889a2ef05fea2f93eb8d55e10",16),
 ap_uint<128>("0xb417fe1a0595b40a5b08ddda9448dd3e",16),
 ap_uint<128>("0x93ce60086202e28ddb9afdff2cc3e5c3",16),
 ap_uint<128>("0x5c210917e83671d16899e101890c13fb",16),
 ap_uint<128>("0x173e28da38797569ac79d96bb0b74ca5",16),
 ap_uint<128>("0xf58c39ad5ffda459a2ca0ef53fbcf74d",16),
 ap_uint<128>("0x01a5b22e2323e4769e0b155a42d0d4cd",16),
 ap_uint<128>("0x0e860837d76b8b2ccc733d7b6a933eb9",16),
 ap_uint<128>("0xb443678438b9394e35f91742426e0236",16),
 ap_uint<128>("0x98d9c99bb4bb41c7660c502a5071d52b",16),
 ap_uint<128>("0xd419afdf0726ed38825a48e8afd68278",16),
 ap_uint<128>("0x38260ccc2061191c64ce12a0844c62a0",16),
 ap_uint<128>("0x9cd3b208219149269873d83aa35de3f6",16),
 ap_uint<128>("0xa0755135059b5ce2149f281178b8f352",16),
 ap_uint<128>("0xfcbfe48a380d088bcc34a3cc6d23ee20",16),
 ap_uint<128>("0x53b1ec04725d5a729c3d0acfb16e3279",16),
 ap_uint<128>("0x9063bb04884fd5edbb0ec065c33c8996",16),
 ap_uint<128>("0xc0845e22326b3d20d6f50d1b3cd70c10",16),
 ap_uint<128>("0xa272770ed0b2ccb1ccc3d12d7b02ce62",16),
 ap_uint<128>("0xf0bba8ba0ee60c565b9df80f12006c13",16),
 ap_uint<128>("0x0171a75e16be083cb18a3fe2ee5f4838",16),
 ap_uint<128>("0x361b2b875e3ffc1ff0ec6774540245a9",16),
 ap_uint<128>("0x46544ceee5f9994531391aa963afeef8",16),
 ap_uint<128>("0x522128a3b21c891234bd729c325d1e5a",16),
 ap_uint<128>("0xaa2c01c83dcd6322e67bba04e7bad109",16),
 ap_uint<128>("0x7ca439d2d2ad279378ec5bf7c2e99bdb",16),
 ap_uint<128>("0x36f09064ad5407515bababe5d761b373",16),
 ap_uint<128>("0xde9ea6cb42c9e0758709ec653d16f24d",16),
 ap_uint<128>("0xf3100da32ca7e8e72687b8417cf47491",16),
 ap_uint<128>("0xe7491e5b9308f5b673dd3cb1df9bc8a6",16),
 ap_uint<128>("0x068ae20e7cdef4b7e8d52240e7dbaa0b",16),
 ap_uint<128>("0x2e85a041b80793b133a6e00f338b8047",16),
 ap_uint<128>("0x36a1a3c9570d2177b05d36cac687af2a",16),
 ap_uint<128>("0x2699f56c9b3ae38dc5dfe4e5ae6d64fc",16),
 ap_uint<128>("0x1239c98fcd05c8b048d64dad11219a2e",16),
 ap_uint<128>("0xd5245987bab0261efaf27013e238f611",16),
 ap_uint<128>("0x316b0d47e91b39a179baeb2a78af74b1",16),
 ap_uint<128>("0xecd57b22836365c0d5e61edc8701b648",16),
 ap_uint<128>("0x120e08b66efbdede9951748918bc584e",16),
 ap_uint<128>("0x80c15f411f700d0f79165f446ad84a03",16),
 ap_uint<128>("0x4bf35cb3e59a4fe0f6c2915015fe2902",16),
 ap_uint<128>("0x7cca932e16f48937524dcce331b66912",16),
 ap_uint<128>("0x09d09ecf44aae4e20e9243b61d914284",16),
 ap_uint<128>("0xac6cdb9ec03426fd4f24e8c434e4a29f",16),
 ap_uint<128>("0x01770314010c74cf757254a10c61379b",16),
 ap_uint<128>("0x312db7448fbfb22ec897288c4a24577c",16),
 ap_uint<128>("0x76a4147856c054f661e51379e866137c",16),
 ap_uint<128>("0x84623edbc50c4a702afc320bfa5b8c2e",16),
 ap_uint<128>("0x7ba44c088aef38dd0ae1cb34b960a7a5",16),
 ap_uint<128>("0xd81e7af49977f9bad41daeb43dfad369",16),
 ap_uint<128>("0xe790c6f857d150a0b4d3d028148642a1",16),
 ap_uint<128>("0xd001e326f8258cb7fad93f0e3ca7ad1b",16),
 ap_uint<128>("0x4e3389fec7a1196fb124581d45836aa3",16),
 ap_uint<128>("0x326dd932091842f8a7cfc4f82f93f0bc",16),
 ap_uint<128>("0x6ae50f42dd8810689643b07ca8f0bac7",16),
 ap_uint<128>("0x3a23dee089230b50990e73e3a43ad83f",16),
 ap_uint<128>("0xc5e6e5eae6f5618d868d84ebce3c0566",16),
 ap_uint<128>("0xab2e0127989859229e49d636b1681c58",16),
 ap_uint<128>("0x86aca08e1a23fc49233ff9b6972ef216",16),
 ap_uint<128>("0x2b7b9663b3e9d1ffb8964ba44da13e9e",16),
 ap_uint<128>("0xa9e8695cf4e7fad88680a09485626f2d",16),
 ap_uint<128>("0xf813cf628b8e4252ad46be5ca29cc684",16),
 ap_uint<128>("0x11154b12c7f68fbbc70c15ae8da1bc16",16),
 ap_uint<128>("0x78b6b246681658f3e74d41f8c9f24b93",16),
 ap_uint<128>("0xe6870a6a18e4c1b9cd2802e1c9f9301a",16),
 ap_uint<128>("0x73226e865d975c6665966bd7b2294395",16),
 ap_uint<128>("0xd9e6a43178a3ebccc137642b93284384",16),
 ap_uint<128>("0x8a553bcc2f9396a1b944b6981d586f29",16),
 ap_uint<128>("0x604e828a70a1ea1e1c5eb309e5aa293e",16),
 ap_uint<128>("0x260f082d54ad9dbdbc7f06827065e8dd",16),
 ap_uint<128>("0x97d680e873d78480b07afea79ec9138a",16),
 ap_uint<128>("0x14b9b86346b3a146fa015ab2eb2122ac",16),
 ap_uint<128>("0x015af8e1f97a842945ddf495479d3708",16),
 ap_uint<128>("0x275d720749e942aceffe372a337ac223",16),
 ap_uint<128>("0x3759a8b82bd5c0efaf7bc824ba4b747d",16),
 ap_uint<128>("0xea1d46736e17eaf86d880b9903871e94",16),
 ap_uint<128>("0xd13cc72ad7143a7184f85ade0367c067",16),
 ap_uint<128>("0x1f98d02314b0e966d2e32922492b022a",16),
 ap_uint<128>("0x6c13027d6d9a09bfda350c672f98932b",16),
 ap_uint<128>("0xa7314a45c9ce83c070b5c98684aa1865",16),
 ap_uint<128>("0x3b80c5c7b1c306eb0a77daedb9619d7a",16),
 ap_uint<128>("0x95cea04aed13ccbea35a1f4c09a7efa2",16),
 ap_uint<128>("0x0cc5898039b5f7bd4e772879ed7468c0",16),
 ap_uint<128>("0x90f64ce4bf5931155ef350c8b4b05200",16),
 ap_uint<128>("0xbc42719a3802fd78f096470f22d1fb51",16),
 ap_uint<128>("0x9d90ec755573cdc18a50859359a198da",16),
 ap_uint<128>("0x7002e05e103a1d6c15ef606441a1d3a9",16),
 ap_uint<128>("0x9972dad06a307f68044f983e7f656628",16),
 ap_uint<128>("0x97b9a298a0838f9c87e1598396769227",16),
 ap_uint<128>("0x08ff7357777c11175024b2c8260693ab",16),
 ap_uint<128>("0x2a3faf4a8728a03c00f4c6f79d118c2a",16),
 ap_uint<128>("0x98db9648ab3372e5b8b6f9bdf532d318",16),
 ap_uint<128>("0x7d6bde8df9bbd5e6e285e3cdb33c290f",16),
 ap_uint<128>("0xaa0a3d22916c1b6733d516157d7754a8",16),
 ap_uint<128>("0xf10a124c300e2b8f1bc5ae270030ece8",16),
 ap_uint<128>("0x6315bf72bb42d38d74bda240ceb077b1",16),
 ap_uint<128>("0xd0da03170882558ecdb7aebc0d79014c",16),
 ap_uint<128>("0x094843ac295fa46b381fec8bbec72de5",16),
 ap_uint<128>("0x475522a1a1a7107996c831f1130eba3f",16),
 ap_uint<128>("0xa9733829b742b4524e1ea0ca74da883b",16),
 ap_uint<128>("0x7e2dcf65605e4b145bba7d9d55883c5a",16),
 ap_uint<128>("0x5af729be03c20abb04771086af2fffaf",16),
 ap_uint<128>("0xab99de0eb5511059b8d1f0d0cb5ae35e",16),
 ap_uint<128>("0x722185190fc33f5301e2a7d871de6251",16),
 ap_uint<128>("0xc4e7b5bda48ee2b7541f90915933eb5f",16),
 ap_uint<128>("0x62634802ecf0fb4a488fbfbe210161bf",16),
 ap_uint<128>("0x371578ed0768c7c3c78f58978b32f2c3",16),
 ap_uint<128>("0x6fbb636084444a7ec3bc7f8ea29eea15",16),
 ap_uint<128>("0x330b1104551467db25da4129e02018d8",16),
 ap_uint<128>("0x1f6cc86374b8e0e090c9c5425191eb6a",16),
 ap_uint<128>("0xeb3cd9aa8b46c41f87d3e45a42a84780",16),
 ap_uint<128>("0xd28dbc57f7b1e38366e99b8be582129b",16),
 ap_uint<128>("0x6d574fba428d232392b0c8b168cfe57a",16),
 ap_uint<128>("0xc8fb069f5c27a06ec425ad3cdeb90e31",16),
 ap_uint<128>("0x5f42eae758ab044abdf3407fb271d3c7",16),
 ap_uint<128>("0x6f1bebd77315c40c1425754a24c52562",16),
 ap_uint<128>("0xb88cb4a16b617d17794149b42ec1ce25",16),
 ap_uint<128>("0xecadfb28c8f17bb6ece95c2091900936",16),
 ap_uint<128>("0xbf8ae5ea144b8b1f6ec5852273c03d4e",16),
 ap_uint<128>("0x763164895ead07f53047606ff9857add",16),
 ap_uint<128>("0x27e019651df6a1047131fb9235f77a39",16),
 ap_uint<128>("0x0c019e91007fe87750c6adca8d5c6658",16),
 ap_uint<128>("0xf0f14b2552643366142b087e754544ae",16),
 ap_uint<128>("0x29526349f1cd13e529ad6992bef92783",16),
 ap_uint<128>("0xc194762492d5b490087524e23d027d7a",16),
 ap_uint<128>("0x824059ca771cb9d13703bf6d2cebf402",16),
 ap_uint<128>("0xdd9173bc6cb106530a30782e62825456",16),
 ap_uint<128>("0x003fb759420f2c7d4b16d9fafe6af6a8",16),
 ap_uint<128>("0x40a6205032b453f77069d6c37a6ffa20",16),
 ap_uint<128>("0xb91edef5c982fbab5f241a4b90dd2356",16),
 ap_uint<128>("0x77ef3dd5e458e2846f3fe375df33a68a",16),
 ap_uint<128>("0xe246ed4240f1a2872dc66b3cf36fcc0a",16),
 ap_uint<128>("0x92ada2a0ece44c9a800d4ddb3638e4f9",16),
 ap_uint<128>("0x92b9483cd9813be8abab55d2635e20d4",16),
 ap_uint<128>("0xc7c2f2f961dd48da7ec9f31480ebbe79",16),
 ap_uint<128>("0xda679fb11ecc68f15064ca83edb6d4ab",16),
 ap_uint<128>("0x00873310f688d5fb411f912ea8c6db20",16),
 ap_uint<128>("0x822a1ad2a79b9f13a0628fe740405129",16),
 ap_uint<128>("0x092f2ef44e9fa100521202a017d1d30e",16),
 ap_uint<128>("0x1f66316f67c340ff2f53d6f8b3a471ce",16),
 ap_uint<128>("0x416bbdbb4dc33aeba22c1d682183cb2d",16),
 ap_uint<128>("0x34a18dbc3c61bd21d07209bba291710e",16),
 ap_uint<128>("0x8cada71f65335e9277509b602085162e",16),
 ap_uint<128>("0xc335680f26878962d59f8db26caf7b53",16),
 ap_uint<128>("0xd3029106f447e331ee2fbe6096e79e5f",16),
 ap_uint<128>("0x107ee91e6630206c0b32d714432bd4f0",16),
 ap_uint<128>("0x7aa88ab49d9c57854a02c6062a5cc173",16),
 ap_uint<128>("0xca44dbee591eff9f890095d9b5239540",16),
 ap_uint<128>("0xa195db3f7b8e00ea2102fd1e5ca9343f",16),
 ap_uint<128>("0x9d2d03dd38aac2aab227fb30301b6563",16),
 ap_uint<128>("0xcb336c20aff3e5dae80d4ff745a2c255",16),
 ap_uint<128>("0x3930915cef005fcc6d612595c68bcb66",16),
 ap_uint<128>("0xdd1ccb5b4c0af0e40020928848fc17fa",16),
 ap_uint<128>("0xb1d865646fc7ef60a165f76962acaf54",16),
 ap_uint<128>("0x8989ea12a59b093f51c2fddf1a2a324b",16),
 ap_uint<128>("0x364800e8e0863ca0d88c9a2459bf1f9f",16),
 ap_uint<128>("0x9b5d8ed1c476c9752d391ec880b37f09",16),
 ap_uint<128>("0x7ac92ba2470b54de8fe61703a1309204",16)
 };
_ssdm_SpecConstant(coeff);
# 7 "mat_coeff_gen.cpp"

_ssdm_op_SpecResource(coeff, "", "RAM_1P_BRAM", "", -1, "", "", "", "", "");
 for(int j=0; j<((64*8)*64)/(128/32); j++){
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");
 bfw_coeff.write(coeff[j]);
  }


}
