// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _BfW_Coeff_Gen_HH_
#define _BfW_Coeff_Gen_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "BfW_Coeff_Gen_coeff.h"

namespace ap_rtl {

struct BfW_Coeff_Gen : public sc_module {
    // Port declarations 5
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_lv<128> > bfw_coeff_V_V_TDATA;
    sc_out< sc_logic > bfw_coeff_V_V_TVALID;
    sc_in< sc_logic > bfw_coeff_V_V_TREADY;


    // Module declarations
    BfW_Coeff_Gen(sc_module_name name);
    SC_HAS_PROCESS(BfW_Coeff_Gen);

    ~BfW_Coeff_Gen();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    BfW_Coeff_Gen_coeff* coeff_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<13> > coeff_address0;
    sc_signal< sc_logic > coeff_ce0;
    sc_signal< sc_lv<128> > coeff_q0;
    sc_signal< sc_logic > bfw_coeff_V_V_TDATA_blk_n;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln9_reg_99;
    sc_signal< sc_lv<14> > j_0_reg_71;
    sc_signal< sc_lv<1> > icmp_ln9_fu_82_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<14> > j_fu_88_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<64> > zext_ln11_fu_94_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<14> ap_const_lv14_2000;
    static const sc_lv<14> ap_const_lv14_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_enable_pp0();
    void thread_ap_idle_pp0();
    void thread_ap_rst_n_inv();
    void thread_bfw_coeff_V_V_TDATA();
    void thread_bfw_coeff_V_V_TDATA_blk_n();
    void thread_bfw_coeff_V_V_TVALID();
    void thread_coeff_address0();
    void thread_coeff_ce0();
    void thread_icmp_ln9_fu_82_p2();
    void thread_j_fu_88_p2();
    void thread_zext_ln11_fu_94_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
