// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "err_count.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic err_count::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic err_count::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> err_count::ap_ST_fsm_state1 = "1";
const sc_lv<3> err_count::ap_ST_fsm_state2 = "10";
const sc_lv<3> err_count::ap_ST_fsm_state3 = "100";
const sc_lv<32> err_count::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> err_count::ap_const_lv32_2 = "10";
const sc_lv<32> err_count::ap_const_lv32_1 = "1";
const sc_lv<1> err_count::ap_const_lv1_0 = "0";
const sc_lv<9> err_count::ap_const_lv9_0 = "000000000";
const sc_lv<1> err_count::ap_const_lv1_1 = "1";
const sc_lv<9> err_count::ap_const_lv9_1E0 = "111100000";
const sc_lv<9> err_count::ap_const_lv9_1 = "1";
const bool err_count::ap_const_boolean_1 = true;

err_count::err_count(sc_module_name name) : sc_module(name), mVcdFile(0) {
    expOutput_V_U = new err_count_expOutput_V("expOutput_V_U");
    expOutput_V_U->clk(ap_clk);
    expOutput_V_U->reset(ap_rst_n_inv);
    expOutput_V_U->address0(expOutput_V_address0);
    expOutput_V_U->ce0(expOutput_V_ce0);
    expOutput_V_U->q0(expOutput_V_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln27_fu_135_p2);
    sensitive << ( temp_count );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_error_count);
    sensitive << ( temp_count );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln887_fu_108_p2 );

    SC_METHOD(thread_expOutput_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln544_fu_120_p1 );

    SC_METHOD(thread_expOutput_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_i_V_fu_114_p2);
    sensitive << ( t_V_reg_91 );

    SC_METHOD(thread_icmp_ln883_fu_129_p2);
    sensitive << ( observed_output_TDATA );
    sensitive << ( observed_output_TVALID );
    sensitive << ( expOutput_V_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_icmp_ln887_fu_108_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( t_V_reg_91 );

    SC_METHOD(thread_iteration_count);
    sensitive << ( observed_output_TVALID );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( t_V_reg_91 );

    SC_METHOD(thread_observed_output_TDATA_blk_n);
    sensitive << ( observed_output_TVALID );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_observed_output_TREADY);
    sensitive << ( observed_output_TVALID );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_zext_ln544_fu_120_p1);
    sensitive << ( t_V_reg_91 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( observed_output_TVALID );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln887_fu_108_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    temp_count = "00000000000000000000000000000000";
    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "err_count_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, observed_output_TDATA, "(port)observed_output_TDATA");
    sc_trace(mVcdFile, observed_output_TVALID, "(port)observed_output_TVALID");
    sc_trace(mVcdFile, observed_output_TREADY, "(port)observed_output_TREADY");
    sc_trace(mVcdFile, observed_output_TKEEP, "(port)observed_output_TKEEP");
    sc_trace(mVcdFile, observed_output_TUSER, "(port)observed_output_TUSER");
    sc_trace(mVcdFile, observed_output_TLAST, "(port)observed_output_TLAST");
    sc_trace(mVcdFile, error_count, "(port)error_count");
    sc_trace(mVcdFile, iteration_count, "(port)iteration_count");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, expOutput_V_address0, "expOutput_V_address0");
    sc_trace(mVcdFile, expOutput_V_ce0, "expOutput_V_ce0");
    sc_trace(mVcdFile, expOutput_V_q0, "expOutput_V_q0");
    sc_trace(mVcdFile, temp_count, "temp_count");
    sc_trace(mVcdFile, observed_output_TDATA_blk_n, "observed_output_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_V_fu_114_p2, "i_V_fu_114_p2");
    sc_trace(mVcdFile, i_V_reg_155, "i_V_reg_155");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln887_fu_108_p2, "icmp_ln887_fu_108_p2");
    sc_trace(mVcdFile, t_V_reg_91, "t_V_reg_91");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, zext_ln544_fu_120_p1, "zext_ln544_fu_120_p1");
    sc_trace(mVcdFile, add_ln27_fu_135_p2, "add_ln27_fu_135_p2");
    sc_trace(mVcdFile, icmp_ln883_fu_129_p2, "icmp_ln883_fu_129_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("err_count.hdltvin.dat");
    mHdltvoutHandle.open("err_count.hdltvout.dat");
}

err_count::~err_count() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete expOutput_V_U;
}

void err_count::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(observed_output_TVALID.read(), ap_const_logic_1))) {
        t_V_reg_91 = i_V_reg_155.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        t_V_reg_91 = ap_const_lv9_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_V_reg_155 = i_V_fu_114_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(observed_output_TVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln883_fu_129_p2.read()))) {
        temp_count = add_ln27_fu_135_p2.read();
    }
}

void err_count::thread_add_ln27_fu_135_p2() {
    add_ln27_fu_135_p2 = (!temp_count.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(temp_count.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void err_count::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void err_count::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void err_count::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void err_count::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void err_count::thread_error_count() {
    error_count = temp_count.read();
}

void err_count::thread_expOutput_V_address0() {
    expOutput_V_address0 =  (sc_lv<9>) (zext_ln544_fu_120_p1.read());
}

void err_count::thread_expOutput_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        expOutput_V_ce0 = ap_const_logic_1;
    } else {
        expOutput_V_ce0 = ap_const_logic_0;
    }
}

void err_count::thread_i_V_fu_114_p2() {
    i_V_fu_114_p2 = (!t_V_reg_91.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(t_V_reg_91.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void err_count::thread_icmp_ln883_fu_129_p2() {
    icmp_ln883_fu_129_p2 = (!expOutput_V_q0.read().is_01() || !observed_output_TDATA.read().is_01())? sc_lv<1>(): sc_lv<1>(expOutput_V_q0.read() == observed_output_TDATA.read());
}

void err_count::thread_icmp_ln887_fu_108_p2() {
    icmp_ln887_fu_108_p2 = (!t_V_reg_91.read().is_01() || !ap_const_lv9_1E0.is_01())? sc_lv<1>(): sc_lv<1>(t_V_reg_91.read() == ap_const_lv9_1E0);
}

void err_count::thread_iteration_count() {
    iteration_count = esl_zext<32,9>(t_V_reg_91.read());
}

void err_count::thread_observed_output_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        observed_output_TDATA_blk_n = observed_output_TVALID.read();
    } else {
        observed_output_TDATA_blk_n = ap_const_logic_1;
    }
}

void err_count::thread_observed_output_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(observed_output_TVALID.read(), ap_const_logic_1))) {
        observed_output_TREADY = ap_const_logic_1;
    } else {
        observed_output_TREADY = ap_const_logic_0;
    }
}

void err_count::thread_zext_ln544_fu_120_p1() {
    zext_ln544_fu_120_p1 = esl_zext<64,9>(t_V_reg_91.read());
}

void err_count::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln887_fu_108_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(observed_output_TVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void err_count::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"observed_output_TDATA\" :  \"" << observed_output_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"observed_output_TVALID\" :  \"" << observed_output_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"observed_output_TREADY\" :  \"" << observed_output_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"observed_output_TKEEP\" :  \"" << observed_output_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"observed_output_TUSER\" :  \"" << observed_output_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"observed_output_TLAST\" :  \"" << observed_output_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"error_count\" :  \"" << error_count.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"iteration_count\" :  \"" << iteration_count.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

