// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="epacket_gen,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu19eg-ffvd1760-3-e,HLS_INPUT_CLOCK=3.200000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.101562,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=288,HLS_SYN_LUT=196,HLS_VERSION=2019_1}" *)

module epacket_gen (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dout_TREADY,
        dout_TDATA,
        dout_TVALID,
        dout_TKEEP,
        dout_TLAST,
        count_V
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   dout_TREADY;
output  [127:0] dout_TDATA;
output   dout_TVALID;
output  [15:0] dout_TKEEP;
output  [0:0] dout_TLAST;
input  [15:0] count_V;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    dout_V_data_V_1_ack_in;
wire    dout_V_data_V_1_ack_out;
reg   [1:0] dout_V_data_V_1_state;
wire    dout_V_keep_V_1_ack_out;
reg   [1:0] dout_V_keep_V_1_state;
wire    dout_V_last_V_1_ack_out;
reg   [1:0] dout_V_last_V_1_state;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
reg   [127:0] dout_V_data_V_1_data_out;
reg    dout_V_data_V_1_vld_in;
wire    dout_V_data_V_1_vld_out;
reg   [127:0] dout_V_data_V_1_payload_A;
reg   [127:0] dout_V_data_V_1_payload_B;
reg    dout_V_data_V_1_sel_rd;
reg    dout_V_data_V_1_sel_wr;
wire    dout_V_data_V_1_sel;
wire    dout_V_data_V_1_load_A;
wire    dout_V_data_V_1_load_B;
wire    dout_V_data_V_1_state_cmp_full;
wire   [15:0] dout_V_keep_V_1_data_out;
reg    dout_V_keep_V_1_vld_in;
wire    dout_V_keep_V_1_vld_out;
reg    dout_V_keep_V_1_sel_rd;
wire    dout_V_keep_V_1_sel;
reg   [0:0] dout_V_last_V_1_data_out;
reg    dout_V_last_V_1_vld_in;
wire    dout_V_last_V_1_vld_out;
wire    dout_V_last_V_1_ack_in;
reg   [0:0] dout_V_last_V_1_payload_A;
reg   [0:0] dout_V_last_V_1_payload_B;
reg    dout_V_last_V_1_sel_rd;
reg    dout_V_last_V_1_sel_wr;
wire    dout_V_last_V_1_sel;
wire    dout_V_last_V_1_load_A;
wire    dout_V_last_V_1_load_B;
wire    dout_V_last_V_1_state_cmp_full;
reg   [15:0] message_V;
reg    dout_TDATA_blk_n;
wire   [0:0] tmp_last_V_fu_86_p2;
wire   [127:0] out_data_V_fu_113_p1;
wire   [15:0] select_ln21_fu_99_p3;
wire   [16:0] zext_ln215_fu_68_p1;
wire   [16:0] zext_ln879_fu_82_p1;
wire   [16:0] ret_V_fu_72_p2;
wire   [15:0] add_ln700_fu_93_p2;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;

// power-on initialization
initial begin
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 dout_V_data_V_1_state = 2'd0;
#0 dout_V_keep_V_1_state = 2'd0;
#0 dout_V_last_V_1_state = 2'd0;
#0 dout_V_data_V_1_sel_rd = 1'b0;
#0 dout_V_data_V_1_sel_wr = 1'b0;
#0 dout_V_keep_V_1_sel_rd = 1'b0;
#0 dout_V_last_V_1_sel_rd = 1'b0;
#0 dout_V_last_V_1_sel_wr = 1'b0;
#0 message_V = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dout_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dout_V_data_V_1_vld_out == 1'b1) & (dout_V_data_V_1_ack_out == 1'b1))) begin
            dout_V_data_V_1_sel_rd <= ~dout_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dout_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dout_V_data_V_1_vld_in == 1'b1) & (dout_V_data_V_1_ack_in == 1'b1))) begin
            dout_V_data_V_1_sel_wr <= ~dout_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dout_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((dout_V_data_V_1_vld_in == 1'b0) & (dout_V_data_V_1_state == 2'd3) & (dout_V_data_V_1_ack_out == 1'b1)) | ((dout_V_data_V_1_vld_in == 1'b0) & (dout_V_data_V_1_state == 2'd2)))) begin
            dout_V_data_V_1_state <= 2'd2;
        end else if ((((dout_TREADY == 1'b0) & (dout_V_data_V_1_state == 2'd1)) | ((dout_TREADY == 1'b0) & (dout_V_data_V_1_state == 2'd3) & (dout_V_data_V_1_vld_in == 1'b1)))) begin
            dout_V_data_V_1_state <= 2'd1;
        end else if ((((dout_V_data_V_1_state == 2'd1) & (dout_V_data_V_1_ack_out == 1'b1)) | (~((dout_V_data_V_1_vld_in == 1'b0) & (dout_V_data_V_1_ack_out == 1'b1)) & ~((dout_TREADY == 1'b0) & (dout_V_data_V_1_vld_in == 1'b1)) & (dout_V_data_V_1_state == 2'd3)) | ((dout_V_data_V_1_state == 2'd2) & (dout_V_data_V_1_vld_in == 1'b1)))) begin
            dout_V_data_V_1_state <= 2'd3;
        end else begin
            dout_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dout_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dout_V_keep_V_1_ack_out == 1'b1) & (dout_V_keep_V_1_vld_out == 1'b1))) begin
            dout_V_keep_V_1_sel_rd <= ~dout_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dout_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((dout_V_keep_V_1_state == 2'd3) & (dout_V_keep_V_1_vld_in == 1'b0) & (dout_V_keep_V_1_ack_out == 1'b1)) | ((dout_V_keep_V_1_state == 2'd2) & (dout_V_keep_V_1_vld_in == 1'b0)))) begin
            dout_V_keep_V_1_state <= 2'd2;
        end else if ((((dout_V_keep_V_1_state == 2'd1) & (dout_TREADY == 1'b0)) | ((dout_V_keep_V_1_state == 2'd3) & (dout_TREADY == 1'b0) & (dout_V_keep_V_1_vld_in == 1'b1)))) begin
            dout_V_keep_V_1_state <= 2'd1;
        end else if ((((dout_V_keep_V_1_state == 2'd1) & (dout_V_keep_V_1_ack_out == 1'b1)) | (~((dout_V_keep_V_1_vld_in == 1'b0) & (dout_V_keep_V_1_ack_out == 1'b1)) & ~((dout_TREADY == 1'b0) & (dout_V_keep_V_1_vld_in == 1'b1)) & (dout_V_keep_V_1_state == 2'd3)) | ((dout_V_keep_V_1_state == 2'd2) & (dout_V_keep_V_1_vld_in == 1'b1)))) begin
            dout_V_keep_V_1_state <= 2'd3;
        end else begin
            dout_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dout_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dout_V_last_V_1_ack_out == 1'b1) & (dout_V_last_V_1_vld_out == 1'b1))) begin
            dout_V_last_V_1_sel_rd <= ~dout_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dout_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dout_V_last_V_1_ack_in == 1'b1) & (dout_V_last_V_1_vld_in == 1'b1))) begin
            dout_V_last_V_1_sel_wr <= ~dout_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dout_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((dout_V_last_V_1_state == 2'd3) & (dout_V_last_V_1_vld_in == 1'b0) & (dout_V_last_V_1_ack_out == 1'b1)) | ((dout_V_last_V_1_state == 2'd2) & (dout_V_last_V_1_vld_in == 1'b0)))) begin
            dout_V_last_V_1_state <= 2'd2;
        end else if ((((dout_V_last_V_1_state == 2'd1) & (dout_TREADY == 1'b0)) | ((dout_V_last_V_1_state == 2'd3) & (dout_TREADY == 1'b0) & (dout_V_last_V_1_vld_in == 1'b1)))) begin
            dout_V_last_V_1_state <= 2'd1;
        end else if ((((dout_V_last_V_1_state == 2'd1) & (dout_V_last_V_1_ack_out == 1'b1)) | (~((dout_V_last_V_1_vld_in == 1'b0) & (dout_V_last_V_1_ack_out == 1'b1)) & ~((dout_TREADY == 1'b0) & (dout_V_last_V_1_vld_in == 1'b1)) & (dout_V_last_V_1_state == 2'd3)) | ((dout_V_last_V_1_state == 2'd2) & (dout_V_last_V_1_vld_in == 1'b1)))) begin
            dout_V_last_V_1_state <= 2'd3;
        end else begin
            dout_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((dout_V_data_V_1_load_A == 1'b1)) begin
        dout_V_data_V_1_payload_A <= out_data_V_fu_113_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((dout_V_data_V_1_load_B == 1'b1)) begin
        dout_V_data_V_1_payload_B <= out_data_V_fu_113_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((dout_V_last_V_1_load_A == 1'b1)) begin
        dout_V_last_V_1_payload_A <= tmp_last_V_fu_86_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((dout_V_last_V_1_load_B == 1'b1)) begin
        dout_V_last_V_1_payload_B <= tmp_last_V_fu_86_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((dout_V_data_V_1_ack_in == 1'b0) | (ap_start == 1'b0) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((dout_V_last_V_1_state == 2'd1) | (dout_V_keep_V_1_state == 2'd1) | (dout_V_data_V_1_ack_in == 1'b0) | (dout_V_data_V_1_state == 2'd1) | ((dout_V_last_V_1_state == 2'd3) & (dout_TREADY == 1'b0)) | ((dout_V_keep_V_1_state == 2'd3) & (dout_TREADY == 1'b0)) | ((dout_TREADY == 1'b0) & (dout_V_data_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        message_V <= select_ln21_fu_99_p3;
    end
end

always @ (*) begin
    if ((~((dout_V_last_V_1_state == 2'd1) | (dout_V_keep_V_1_state == 2'd1) | (dout_V_data_V_1_ack_in == 1'b0) | (dout_V_data_V_1_state == 2'd1) | ((dout_V_last_V_1_state == 2'd3) & (dout_TREADY == 1'b0)) | ((dout_V_keep_V_1_state == 2'd3) & (dout_TREADY == 1'b0)) | ((dout_TREADY == 1'b0) & (dout_V_data_V_1_state == 2'd3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((dout_V_data_V_1_ack_in == 1'b0) | (ap_start == 1'b0) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((dout_V_last_V_1_state == 2'd1) | (dout_V_keep_V_1_state == 2'd1) | (dout_V_data_V_1_ack_in == 1'b0) | (dout_V_data_V_1_state == 2'd1) | ((dout_V_last_V_1_state == 2'd3) & (dout_TREADY == 1'b0)) | ((dout_V_keep_V_1_state == 2'd3) & (dout_TREADY == 1'b0)) | ((dout_TREADY == 1'b0) & (dout_V_data_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter0_fsm_state1) & (ap_start == 1'b1) & (ap_start == 1'b1)))) begin
        dout_TDATA_blk_n = dout_V_data_V_1_state[1'd1];
    end else begin
        dout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((dout_V_data_V_1_sel == 1'b1)) begin
        dout_V_data_V_1_data_out = dout_V_data_V_1_payload_B;
    end else begin
        dout_V_data_V_1_data_out = dout_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((dout_V_data_V_1_ack_in == 1'b0) | (ap_start == 1'b0) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((dout_V_last_V_1_state == 2'd1) | (dout_V_keep_V_1_state == 2'd1) | (dout_V_data_V_1_ack_in == 1'b0) | (dout_V_data_V_1_state == 2'd1) | ((dout_V_last_V_1_state == 2'd3) & (dout_TREADY == 1'b0)) | ((dout_V_keep_V_1_state == 2'd3) & (dout_TREADY == 1'b0)) | ((dout_TREADY == 1'b0) & (dout_V_data_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        dout_V_data_V_1_vld_in = 1'b1;
    end else begin
        dout_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((dout_V_data_V_1_ack_in == 1'b0) | (ap_start == 1'b0) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((dout_V_last_V_1_state == 2'd1) | (dout_V_keep_V_1_state == 2'd1) | (dout_V_data_V_1_ack_in == 1'b0) | (dout_V_data_V_1_state == 2'd1) | ((dout_V_last_V_1_state == 2'd3) & (dout_TREADY == 1'b0)) | ((dout_V_keep_V_1_state == 2'd3) & (dout_TREADY == 1'b0)) | ((dout_TREADY == 1'b0) & (dout_V_data_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        dout_V_keep_V_1_vld_in = 1'b1;
    end else begin
        dout_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((dout_V_last_V_1_sel == 1'b1)) begin
        dout_V_last_V_1_data_out = dout_V_last_V_1_payload_B;
    end else begin
        dout_V_last_V_1_data_out = dout_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((dout_V_data_V_1_ack_in == 1'b0) | (ap_start == 1'b0) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((dout_V_last_V_1_state == 2'd1) | (dout_V_keep_V_1_state == 2'd1) | (dout_V_data_V_1_ack_in == 1'b0) | (dout_V_data_V_1_state == 2'd1) | ((dout_V_last_V_1_state == 2'd3) & (dout_TREADY == 1'b0)) | ((dout_V_keep_V_1_state == 2'd3) & (dout_TREADY == 1'b0)) | ((dout_TREADY == 1'b0) & (dout_V_data_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        dout_V_last_V_1_vld_in = 1'b1;
    end else begin
        dout_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((dout_V_last_V_1_state == 2'd1) | (dout_V_keep_V_1_state == 2'd1) | (dout_V_data_V_1_ack_in == 1'b0) | (dout_V_data_V_1_state == 2'd1) | ((dout_V_last_V_1_state == 2'd3) & (dout_TREADY == 1'b0)) | ((dout_V_keep_V_1_state == 2'd3) & (dout_TREADY == 1'b0)) | ((dout_TREADY == 1'b0) & (dout_V_data_V_1_state == 2'd3))) & ~((dout_V_data_V_1_ack_in == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((dout_V_last_V_1_state == 2'd1) | (dout_V_keep_V_1_state == 2'd1) | (dout_V_data_V_1_ack_in == 1'b0) | (dout_V_data_V_1_state == 2'd1) | ((dout_V_last_V_1_state == 2'd3) & (dout_TREADY == 1'b0)) | ((dout_V_keep_V_1_state == 2'd3) & (dout_TREADY == 1'b0)) | ((dout_TREADY == 1'b0) & (dout_V_data_V_1_state == 2'd3))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & ((dout_V_data_V_1_ack_in == 1'b0) | (ap_start == 1'b0)))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((dout_V_data_V_1_ack_in == 1'b0) | (ap_start == 1'b0) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((dout_V_last_V_1_state == 2'd1) | (dout_V_keep_V_1_state == 2'd1) | (dout_V_data_V_1_ack_in == 1'b0) | (dout_V_data_V_1_state == 2'd1) | ((dout_V_last_V_1_state == 2'd3) & (dout_TREADY == 1'b0)) | ((dout_V_keep_V_1_state == 2'd3) & (dout_TREADY == 1'b0)) | ((dout_TREADY == 1'b0) & (dout_V_data_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign add_ln700_fu_93_p2 = (message_V + 16'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((dout_V_last_V_1_state == 2'd1) | (dout_V_keep_V_1_state == 2'd1) | (dout_V_data_V_1_state == 2'd1) | ((dout_V_last_V_1_state == 2'd3) & (dout_TREADY == 1'b0)) | ((dout_V_keep_V_1_state == 2'd3) & (dout_TREADY == 1'b0)) | ((dout_TREADY == 1'b0) & (dout_V_data_V_1_state == 2'd3)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign dout_TDATA = dout_V_data_V_1_data_out;

assign dout_TKEEP = dout_V_keep_V_1_data_out;

assign dout_TLAST = dout_V_last_V_1_data_out;

assign dout_TVALID = dout_V_last_V_1_state[1'd0];

assign dout_V_data_V_1_ack_in = dout_V_data_V_1_state[1'd1];

assign dout_V_data_V_1_ack_out = dout_TREADY;

assign dout_V_data_V_1_load_A = (~dout_V_data_V_1_sel_wr & dout_V_data_V_1_state_cmp_full);

assign dout_V_data_V_1_load_B = (dout_V_data_V_1_state_cmp_full & dout_V_data_V_1_sel_wr);

assign dout_V_data_V_1_sel = dout_V_data_V_1_sel_rd;

assign dout_V_data_V_1_state_cmp_full = ((dout_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dout_V_data_V_1_vld_out = dout_V_data_V_1_state[1'd0];

assign dout_V_keep_V_1_ack_out = dout_TREADY;

assign dout_V_keep_V_1_data_out = 16'd255;

assign dout_V_keep_V_1_sel = dout_V_keep_V_1_sel_rd;

assign dout_V_keep_V_1_vld_out = dout_V_keep_V_1_state[1'd0];

assign dout_V_last_V_1_ack_in = dout_V_last_V_1_state[1'd1];

assign dout_V_last_V_1_ack_out = dout_TREADY;

assign dout_V_last_V_1_load_A = (~dout_V_last_V_1_sel_wr & dout_V_last_V_1_state_cmp_full);

assign dout_V_last_V_1_load_B = (dout_V_last_V_1_state_cmp_full & dout_V_last_V_1_sel_wr);

assign dout_V_last_V_1_sel = dout_V_last_V_1_sel_rd;

assign dout_V_last_V_1_state_cmp_full = ((dout_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dout_V_last_V_1_vld_out = dout_V_last_V_1_state[1'd0];

assign out_data_V_fu_113_p1 = select_ln21_fu_99_p3;

assign ret_V_fu_72_p2 = ($signed(zext_ln215_fu_68_p1) + $signed(17'd131071));

assign select_ln21_fu_99_p3 = ((tmp_last_V_fu_86_p2[0:0] === 1'b1) ? 16'd0 : add_ln700_fu_93_p2);

assign tmp_last_V_fu_86_p2 = ((zext_ln879_fu_82_p1 == ret_V_fu_72_p2) ? 1'b1 : 1'b0);

assign zext_ln215_fu_68_p1 = count_V;

assign zext_ln879_fu_82_p1 = message_V;

endmodule //epacket_gen
