// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Userplane_L1_Data_Gen_HH_
#define _Userplane_L1_Data_Gen_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Userplane_L1_Data_Gen : public sc_module {
    // Port declarations 7
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_lv<64> > L1_data_out_V_TDATA;
    sc_out< sc_logic > L1_data_out_V_TVALID;
    sc_in< sc_logic > L1_data_out_V_TREADY;
    sc_out< sc_lv<4> > st_out_V;
    sc_out< sc_lv<6> > symbol_number_V;


    // Module declarations
    Userplane_L1_Data_Gen(sc_module_name name);
    SC_HAS_PROCESS(Userplane_L1_Data_Gen);

    ~Userplane_L1_Data_Gen();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<64> > L1_data_out_V_1_data_in;
    sc_signal< sc_lv<64> > L1_data_out_V_1_data_out;
    sc_signal< sc_logic > L1_data_out_V_1_vld_in;
    sc_signal< sc_logic > L1_data_out_V_1_vld_out;
    sc_signal< sc_logic > L1_data_out_V_1_ack_in;
    sc_signal< sc_logic > L1_data_out_V_1_ack_out;
    sc_signal< sc_lv<64> > L1_data_out_V_1_payload_A;
    sc_signal< sc_lv<64> > L1_data_out_V_1_payload_B;
    sc_signal< sc_logic > L1_data_out_V_1_sel_rd;
    sc_signal< sc_logic > L1_data_out_V_1_sel_wr;
    sc_signal< sc_logic > L1_data_out_V_1_sel;
    sc_signal< sc_logic > L1_data_out_V_1_load_A;
    sc_signal< sc_logic > L1_data_out_V_1_load_B;
    sc_signal< sc_lv<2> > L1_data_out_V_1_state;
    sc_signal< sc_logic > L1_data_out_V_1_state_cmp_full;
    sc_signal< sc_lv<2> > data_src_state;
    sc_signal< sc_lv<6> > sym_count_V;
    sc_signal< sc_lv<4> > section_count_V;
    sc_signal< sc_logic > L1_data_out_V_TDATA_blk_n;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<2> > data_src_state_load_reg_311;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<2> > data_src_state_load_reg_311_pp0_iter1_reg;
    sc_signal< sc_lv<2> > data_src_state_load_load_fu_119_p1;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<6> > t_V_reg_316;
    sc_signal< sc_lv<6> > t_V_reg_316_pp0_iter1_reg;
    sc_signal< sc_lv<2> > trunc_ln215_fu_137_p1;
    sc_signal< sc_lv<2> > trunc_ln215_reg_322;
    sc_signal< sc_lv<64> > tmp_1_fu_280_p7;
    sc_signal< sc_lv<64> > tmp_fu_297_p4;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<2> > ap_phi_mux_storemerge1_phi_fu_112_p4;
    sc_signal< sc_lv<2> > select_ln68_fu_183_p3;
    sc_signal< sc_lv<2> > ap_phi_reg_pp0_iter0_storemerge1_reg_109;
    sc_signal< sc_lv<1> > icmp_ln879_fu_141_p2;
    sc_signal< sc_lv<6> > add_ln700_fu_165_p2;
    sc_signal< sc_lv<4> > add_ln700_1_fu_147_p2;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > icmp_ln879_1_fu_177_p2;
    sc_signal< sc_lv<1> > icmp_ln10_1_fu_209_p2;
    sc_signal< sc_lv<1> > icmp_ln10_fu_204_p2;
    sc_signal< sc_lv<1> > or_ln215_fu_222_p2;
    sc_signal< sc_lv<9> > select_ln215_fu_214_p3;
    sc_signal< sc_lv<9> > select_ln215_1_fu_228_p3;
    sc_signal< sc_lv<6> > select_ln215_2_fu_240_p3;
    sc_signal< sc_lv<6> > select_ln215_3_fu_248_p3;
    sc_signal< sc_lv<7> > select_ln215_4_fu_260_p3;
    sc_signal< sc_lv<7> > select_ln215_5_fu_268_p3;
    sc_signal< sc_lv<12> > zext_ln215_fu_236_p1;
    sc_signal< sc_lv<10> > zext_ln215_1_fu_256_p1;
    sc_signal< sc_lv<8> > sext_ln215_fu_276_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_192;
    sc_signal< bool > ap_condition_187;
    sc_signal< bool > ap_condition_165;
    sc_signal< bool > ap_condition_178;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<6> ap_const_lv6_D;
    static const sc_lv<9> ap_const_lv9_124;
    static const sc_lv<9> ap_const_lv9_123;
    static const sc_lv<9> ap_const_lv9_125;
    static const sc_lv<6> ap_const_lv6_21;
    static const sc_lv<6> ap_const_lv6_39;
    static const sc_lv<7> ap_const_lv7_18;
    static const sc_lv<7> ap_const_lv7_23;
    static const sc_lv<7> ap_const_lv7_56;
    static const sc_lv<12> ap_const_lv12_45;
    static const sc_lv<20> ap_const_lv20_0;
    static const sc_lv<38> ap_const_lv38_1124015C1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_L1_data_out_V_1_ack_in();
    void thread_L1_data_out_V_1_ack_out();
    void thread_L1_data_out_V_1_data_in();
    void thread_L1_data_out_V_1_data_out();
    void thread_L1_data_out_V_1_load_A();
    void thread_L1_data_out_V_1_load_B();
    void thread_L1_data_out_V_1_sel();
    void thread_L1_data_out_V_1_state_cmp_full();
    void thread_L1_data_out_V_1_vld_in();
    void thread_L1_data_out_V_1_vld_out();
    void thread_L1_data_out_V_TDATA();
    void thread_L1_data_out_V_TDATA_blk_n();
    void thread_L1_data_out_V_TVALID();
    void thread_add_ln700_1_fu_147_p2();
    void thread_add_ln700_fu_165_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_io();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_condition_165();
    void thread_ap_condition_178();
    void thread_ap_condition_187();
    void thread_ap_condition_192();
    void thread_ap_enable_pp0();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_storemerge1_phi_fu_112_p4();
    void thread_ap_phi_reg_pp0_iter0_storemerge1_reg_109();
    void thread_ap_reset_idle_pp0();
    void thread_ap_rst_n_inv();
    void thread_data_src_state_load_load_fu_119_p1();
    void thread_icmp_ln10_1_fu_209_p2();
    void thread_icmp_ln10_fu_204_p2();
    void thread_icmp_ln879_1_fu_177_p2();
    void thread_icmp_ln879_fu_141_p2();
    void thread_or_ln215_fu_222_p2();
    void thread_select_ln215_1_fu_228_p3();
    void thread_select_ln215_2_fu_240_p3();
    void thread_select_ln215_3_fu_248_p3();
    void thread_select_ln215_4_fu_260_p3();
    void thread_select_ln215_5_fu_268_p3();
    void thread_select_ln215_fu_214_p3();
    void thread_select_ln68_fu_183_p3();
    void thread_sext_ln215_fu_276_p1();
    void thread_st_out_V();
    void thread_symbol_number_V();
    void thread_tmp_1_fu_280_p7();
    void thread_tmp_fu_297_p4();
    void thread_trunc_ln215_fu_137_p1();
    void thread_zext_ln215_1_fu_256_p1();
    void thread_zext_ln215_fu_236_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
