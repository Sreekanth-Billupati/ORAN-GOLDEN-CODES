// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Userplane_L1_Data_Gen.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Userplane_L1_Data_Gen::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Userplane_L1_Data_Gen::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> Userplane_L1_Data_Gen::ap_ST_fsm_pp0_stage0 = "1";
const bool Userplane_L1_Data_Gen::ap_const_boolean_1 = true;
const sc_lv<1> Userplane_L1_Data_Gen::ap_const_lv1_0 = "0";
const sc_lv<1> Userplane_L1_Data_Gen::ap_const_lv1_1 = "1";
const sc_lv<2> Userplane_L1_Data_Gen::ap_const_lv2_0 = "00";
const sc_lv<2> Userplane_L1_Data_Gen::ap_const_lv2_2 = "10";
const sc_lv<2> Userplane_L1_Data_Gen::ap_const_lv2_3 = "11";
const sc_lv<2> Userplane_L1_Data_Gen::ap_const_lv2_1 = "1";
const sc_lv<6> Userplane_L1_Data_Gen::ap_const_lv6_0 = "000000";
const sc_lv<4> Userplane_L1_Data_Gen::ap_const_lv4_0 = "0000";
const sc_lv<32> Userplane_L1_Data_Gen::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Userplane_L1_Data_Gen::ap_const_boolean_0 = false;
const sc_lv<4> Userplane_L1_Data_Gen::ap_const_lv4_2 = "10";
const sc_lv<4> Userplane_L1_Data_Gen::ap_const_lv4_1 = "1";
const sc_lv<6> Userplane_L1_Data_Gen::ap_const_lv6_1 = "1";
const sc_lv<6> Userplane_L1_Data_Gen::ap_const_lv6_D = "1101";
const sc_lv<9> Userplane_L1_Data_Gen::ap_const_lv9_124 = "100100100";
const sc_lv<9> Userplane_L1_Data_Gen::ap_const_lv9_123 = "100100011";
const sc_lv<9> Userplane_L1_Data_Gen::ap_const_lv9_125 = "100100101";
const sc_lv<6> Userplane_L1_Data_Gen::ap_const_lv6_21 = "100001";
const sc_lv<6> Userplane_L1_Data_Gen::ap_const_lv6_39 = "111001";
const sc_lv<7> Userplane_L1_Data_Gen::ap_const_lv7_18 = "11000";
const sc_lv<7> Userplane_L1_Data_Gen::ap_const_lv7_23 = "100011";
const sc_lv<7> Userplane_L1_Data_Gen::ap_const_lv7_56 = "1010110";
const sc_lv<12> Userplane_L1_Data_Gen::ap_const_lv12_45 = "1000101";
const sc_lv<20> Userplane_L1_Data_Gen::ap_const_lv20_0 = "00000000000000000000";
const sc_lv<38> Userplane_L1_Data_Gen::ap_const_lv38_1124015C1 = "100010010010000000001010111000001";

Userplane_L1_Data_Gen::Userplane_L1_Data_Gen(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_L1_data_out_V_1_ack_in);
    sensitive << ( L1_data_out_V_1_state );

    SC_METHOD(thread_L1_data_out_V_1_ack_out);
    sensitive << ( L1_data_out_V_TREADY );

    SC_METHOD(thread_L1_data_out_V_1_data_in);
    sensitive << ( data_src_state_load_reg_311 );
    sensitive << ( tmp_1_fu_280_p7 );
    sensitive << ( tmp_fu_297_p4 );
    sensitive << ( ap_condition_192 );

    SC_METHOD(thread_L1_data_out_V_1_data_out);
    sensitive << ( L1_data_out_V_1_payload_A );
    sensitive << ( L1_data_out_V_1_payload_B );
    sensitive << ( L1_data_out_V_1_sel );

    SC_METHOD(thread_L1_data_out_V_1_load_A);
    sensitive << ( L1_data_out_V_1_sel_wr );
    sensitive << ( L1_data_out_V_1_state_cmp_full );

    SC_METHOD(thread_L1_data_out_V_1_load_B);
    sensitive << ( L1_data_out_V_1_sel_wr );
    sensitive << ( L1_data_out_V_1_state_cmp_full );

    SC_METHOD(thread_L1_data_out_V_1_sel);
    sensitive << ( L1_data_out_V_1_sel_rd );

    SC_METHOD(thread_L1_data_out_V_1_state_cmp_full);
    sensitive << ( L1_data_out_V_1_state );

    SC_METHOD(thread_L1_data_out_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( data_src_state_load_reg_311 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_L1_data_out_V_1_vld_out);
    sensitive << ( L1_data_out_V_1_state );

    SC_METHOD(thread_L1_data_out_V_TDATA);
    sensitive << ( L1_data_out_V_1_data_out );

    SC_METHOD(thread_L1_data_out_V_TDATA_blk_n);
    sensitive << ( L1_data_out_V_1_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( data_src_state_load_reg_311 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( data_src_state_load_reg_311_pp0_iter1_reg );

    SC_METHOD(thread_L1_data_out_V_TVALID);
    sensitive << ( L1_data_out_V_1_state );

    SC_METHOD(thread_add_ln700_1_fu_147_p2);
    sensitive << ( section_count_V );

    SC_METHOD(thread_add_ln700_fu_165_p2);
    sensitive << ( sym_count_V );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( L1_data_out_V_TREADY );
    sensitive << ( L1_data_out_V_1_state );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( L1_data_out_V_TREADY );
    sensitive << ( L1_data_out_V_1_state );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( L1_data_out_V_TREADY );
    sensitive << ( L1_data_out_V_1_state );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( L1_data_out_V_1_ack_in );
    sensitive << ( data_src_state_load_reg_311 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( L1_data_out_V_1_ack_in );
    sensitive << ( data_src_state_load_reg_311_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);
    sensitive << ( L1_data_out_V_TREADY );
    sensitive << ( L1_data_out_V_1_state );

    SC_METHOD(thread_ap_condition_165);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_condition_178);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( data_src_state_load_load_fu_119_p1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_condition_187);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( data_src_state_load_load_fu_119_p1 );

    SC_METHOD(thread_ap_condition_192);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_phi_mux_storemerge1_phi_fu_112_p4);
    sensitive << ( select_ln68_fu_183_p3 );
    sensitive << ( ap_phi_reg_pp0_iter0_storemerge1_reg_109 );
    sensitive << ( icmp_ln879_fu_141_p2 );
    sensitive << ( ap_condition_187 );

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_storemerge1_reg_109);

    SC_METHOD(thread_ap_reset_idle_pp0);

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_data_src_state_load_load_fu_119_p1);
    sensitive << ( data_src_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_icmp_ln10_1_fu_209_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( data_src_state_load_reg_311 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( trunc_ln215_reg_322 );

    SC_METHOD(thread_icmp_ln10_fu_204_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( data_src_state_load_reg_311 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( trunc_ln215_reg_322 );

    SC_METHOD(thread_icmp_ln879_1_fu_177_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( data_src_state_load_load_fu_119_p1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln879_fu_141_p2 );
    sensitive << ( add_ln700_fu_165_p2 );

    SC_METHOD(thread_icmp_ln879_fu_141_p2);
    sensitive << ( section_count_V );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( data_src_state_load_load_fu_119_p1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_or_ln215_fu_222_p2);
    sensitive << ( icmp_ln10_1_fu_209_p2 );
    sensitive << ( icmp_ln10_fu_204_p2 );

    SC_METHOD(thread_select_ln215_1_fu_228_p3);
    sensitive << ( or_ln215_fu_222_p2 );
    sensitive << ( select_ln215_fu_214_p3 );

    SC_METHOD(thread_select_ln215_2_fu_240_p3);
    sensitive << ( icmp_ln10_1_fu_209_p2 );

    SC_METHOD(thread_select_ln215_3_fu_248_p3);
    sensitive << ( or_ln215_fu_222_p2 );
    sensitive << ( select_ln215_2_fu_240_p3 );

    SC_METHOD(thread_select_ln215_4_fu_260_p3);
    sensitive << ( icmp_ln10_1_fu_209_p2 );

    SC_METHOD(thread_select_ln215_5_fu_268_p3);
    sensitive << ( or_ln215_fu_222_p2 );
    sensitive << ( select_ln215_4_fu_260_p3 );

    SC_METHOD(thread_select_ln215_fu_214_p3);
    sensitive << ( icmp_ln10_1_fu_209_p2 );

    SC_METHOD(thread_select_ln68_fu_183_p3);
    sensitive << ( icmp_ln879_1_fu_177_p2 );

    SC_METHOD(thread_sext_ln215_fu_276_p1);
    sensitive << ( select_ln215_5_fu_268_p3 );

    SC_METHOD(thread_st_out_V);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( data_src_state_load_reg_311_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_symbol_number_V);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( data_src_state_load_reg_311_pp0_iter1_reg );
    sensitive << ( t_V_reg_316_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_tmp_1_fu_280_p7);
    sensitive << ( zext_ln215_fu_236_p1 );
    sensitive << ( zext_ln215_1_fu_256_p1 );
    sensitive << ( sext_ln215_fu_276_p1 );

    SC_METHOD(thread_tmp_fu_297_p4);
    sensitive << ( t_V_reg_316 );

    SC_METHOD(thread_trunc_ln215_fu_137_p1);
    sensitive << ( section_count_V );

    SC_METHOD(thread_zext_ln215_1_fu_256_p1);
    sensitive << ( select_ln215_3_fu_248_p3 );

    SC_METHOD(thread_zext_ln215_fu_236_p1);
    sensitive << ( select_ln215_1_fu_228_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    L1_data_out_V_1_sel_rd = SC_LOGIC_0;
    L1_data_out_V_1_sel_wr = SC_LOGIC_0;
    L1_data_out_V_1_state = "00";
    data_src_state = "00";
    sym_count_V = "000000";
    section_count_V = "0000";
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Userplane_L1_Data_Gen_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, L1_data_out_V_TDATA, "(port)L1_data_out_V_TDATA");
    sc_trace(mVcdFile, L1_data_out_V_TVALID, "(port)L1_data_out_V_TVALID");
    sc_trace(mVcdFile, L1_data_out_V_TREADY, "(port)L1_data_out_V_TREADY");
    sc_trace(mVcdFile, st_out_V, "(port)st_out_V");
    sc_trace(mVcdFile, symbol_number_V, "(port)symbol_number_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, L1_data_out_V_1_data_in, "L1_data_out_V_1_data_in");
    sc_trace(mVcdFile, L1_data_out_V_1_data_out, "L1_data_out_V_1_data_out");
    sc_trace(mVcdFile, L1_data_out_V_1_vld_in, "L1_data_out_V_1_vld_in");
    sc_trace(mVcdFile, L1_data_out_V_1_vld_out, "L1_data_out_V_1_vld_out");
    sc_trace(mVcdFile, L1_data_out_V_1_ack_in, "L1_data_out_V_1_ack_in");
    sc_trace(mVcdFile, L1_data_out_V_1_ack_out, "L1_data_out_V_1_ack_out");
    sc_trace(mVcdFile, L1_data_out_V_1_payload_A, "L1_data_out_V_1_payload_A");
    sc_trace(mVcdFile, L1_data_out_V_1_payload_B, "L1_data_out_V_1_payload_B");
    sc_trace(mVcdFile, L1_data_out_V_1_sel_rd, "L1_data_out_V_1_sel_rd");
    sc_trace(mVcdFile, L1_data_out_V_1_sel_wr, "L1_data_out_V_1_sel_wr");
    sc_trace(mVcdFile, L1_data_out_V_1_sel, "L1_data_out_V_1_sel");
    sc_trace(mVcdFile, L1_data_out_V_1_load_A, "L1_data_out_V_1_load_A");
    sc_trace(mVcdFile, L1_data_out_V_1_load_B, "L1_data_out_V_1_load_B");
    sc_trace(mVcdFile, L1_data_out_V_1_state, "L1_data_out_V_1_state");
    sc_trace(mVcdFile, L1_data_out_V_1_state_cmp_full, "L1_data_out_V_1_state_cmp_full");
    sc_trace(mVcdFile, data_src_state, "data_src_state");
    sc_trace(mVcdFile, sym_count_V, "sym_count_V");
    sc_trace(mVcdFile, section_count_V, "section_count_V");
    sc_trace(mVcdFile, L1_data_out_V_TDATA_blk_n, "L1_data_out_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, data_src_state_load_reg_311, "data_src_state_load_reg_311");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, data_src_state_load_reg_311_pp0_iter1_reg, "data_src_state_load_reg_311_pp0_iter1_reg");
    sc_trace(mVcdFile, data_src_state_load_load_fu_119_p1, "data_src_state_load_load_fu_119_p1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, t_V_reg_316, "t_V_reg_316");
    sc_trace(mVcdFile, t_V_reg_316_pp0_iter1_reg, "t_V_reg_316_pp0_iter1_reg");
    sc_trace(mVcdFile, trunc_ln215_fu_137_p1, "trunc_ln215_fu_137_p1");
    sc_trace(mVcdFile, trunc_ln215_reg_322, "trunc_ln215_reg_322");
    sc_trace(mVcdFile, tmp_1_fu_280_p7, "tmp_1_fu_280_p7");
    sc_trace(mVcdFile, tmp_fu_297_p4, "tmp_fu_297_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_phi_mux_storemerge1_phi_fu_112_p4, "ap_phi_mux_storemerge1_phi_fu_112_p4");
    sc_trace(mVcdFile, select_ln68_fu_183_p3, "select_ln68_fu_183_p3");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_storemerge1_reg_109, "ap_phi_reg_pp0_iter0_storemerge1_reg_109");
    sc_trace(mVcdFile, icmp_ln879_fu_141_p2, "icmp_ln879_fu_141_p2");
    sc_trace(mVcdFile, add_ln700_fu_165_p2, "add_ln700_fu_165_p2");
    sc_trace(mVcdFile, add_ln700_1_fu_147_p2, "add_ln700_1_fu_147_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, icmp_ln879_1_fu_177_p2, "icmp_ln879_1_fu_177_p2");
    sc_trace(mVcdFile, icmp_ln10_1_fu_209_p2, "icmp_ln10_1_fu_209_p2");
    sc_trace(mVcdFile, icmp_ln10_fu_204_p2, "icmp_ln10_fu_204_p2");
    sc_trace(mVcdFile, or_ln215_fu_222_p2, "or_ln215_fu_222_p2");
    sc_trace(mVcdFile, select_ln215_fu_214_p3, "select_ln215_fu_214_p3");
    sc_trace(mVcdFile, select_ln215_1_fu_228_p3, "select_ln215_1_fu_228_p3");
    sc_trace(mVcdFile, select_ln215_2_fu_240_p3, "select_ln215_2_fu_240_p3");
    sc_trace(mVcdFile, select_ln215_3_fu_248_p3, "select_ln215_3_fu_248_p3");
    sc_trace(mVcdFile, select_ln215_4_fu_260_p3, "select_ln215_4_fu_260_p3");
    sc_trace(mVcdFile, select_ln215_5_fu_268_p3, "select_ln215_5_fu_268_p3");
    sc_trace(mVcdFile, zext_ln215_fu_236_p1, "zext_ln215_fu_236_p1");
    sc_trace(mVcdFile, zext_ln215_1_fu_256_p1, "zext_ln215_1_fu_256_p1");
    sc_trace(mVcdFile, sext_ln215_fu_276_p1, "sext_ln215_fu_276_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_192, "ap_condition_192");
    sc_trace(mVcdFile, ap_condition_187, "ap_condition_187");
    sc_trace(mVcdFile, ap_condition_165, "ap_condition_165");
    sc_trace(mVcdFile, ap_condition_178, "ap_condition_178");
#endif

    }
    mHdltvinHandle.open("Userplane_L1_Data_Gen.hdltvin.dat");
    mHdltvoutHandle.open("Userplane_L1_Data_Gen.hdltvout.dat");
}

Userplane_L1_Data_Gen::~Userplane_L1_Data_Gen() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void Userplane_L1_Data_Gen::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        L1_data_out_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, L1_data_out_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, L1_data_out_V_1_vld_out.read()))) {
            L1_data_out_V_1_sel_rd =  (sc_logic) (~L1_data_out_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        L1_data_out_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, L1_data_out_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, L1_data_out_V_1_ack_in.read()))) {
            L1_data_out_V_1_sel_wr =  (sc_logic) (~L1_data_out_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        L1_data_out_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, L1_data_out_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, L1_data_out_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(L1_data_out_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, L1_data_out_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(L1_data_out_V_1_state.read(), ap_const_lv2_2)))) {
            L1_data_out_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, L1_data_out_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, L1_data_out_V_TREADY.read()) && 
                     esl_seteq<1,2,2>(L1_data_out_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, L1_data_out_V_TREADY.read()) && 
                     esl_seteq<1,2,2>(L1_data_out_V_1_state.read(), ap_const_lv2_1)))) {
            L1_data_out_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, L1_data_out_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(L1_data_out_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, L1_data_out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(L1_data_out_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(L1_data_out_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, L1_data_out_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, L1_data_out_V_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, L1_data_out_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, L1_data_out_V_1_ack_out.read()))))) {
            L1_data_out_V_1_state = ap_const_lv2_3;
        } else {
            L1_data_out_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_src_state = ap_const_lv2_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_165.read(), ap_const_boolean_1)) {
            if (esl_seteq<1,2,2>(ap_const_lv2_0, data_src_state_load_load_fu_119_p1.read())) {
                data_src_state = ap_const_lv2_1;
            } else if (esl_seteq<1,2,2>(ap_const_lv2_1, data_src_state_load_load_fu_119_p1.read())) {
                data_src_state = ap_phi_mux_storemerge1_phi_fu_112_p4.read();
            } else if (esl_seteq<1,2,2>(ap_const_lv2_2, data_src_state_load_load_fu_119_p1.read())) {
                data_src_state = ap_const_lv2_0;
            }
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_178.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_141_p2.read())) {
            section_count_V = ap_const_lv4_0;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_fu_141_p2.read())) {
            section_count_V = add_ln700_1_fu_147_p2.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, L1_data_out_V_1_load_A.read())) {
        L1_data_out_V_1_payload_A = L1_data_out_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, L1_data_out_V_1_load_B.read())) {
        L1_data_out_V_1_payload_B = L1_data_out_V_1_data_in.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        data_src_state_load_reg_311 = data_src_state.read();
        data_src_state_load_reg_311_pp0_iter1_reg = data_src_state_load_reg_311.read();
        t_V_reg_316 = sym_count_V.read();
        t_V_reg_316_pp0_iter1_reg = t_V_reg_316.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,2,2>(ap_const_lv2_1, data_src_state_load_load_fu_119_p1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_141_p2.read()))) {
        sym_count_V = add_ln700_fu_165_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,2,2>(ap_const_lv2_1, data_src_state_load_load_fu_119_p1.read()))) {
        trunc_ln215_reg_322 = trunc_ln215_fu_137_p1.read();
    }
}

void Userplane_L1_Data_Gen::thread_L1_data_out_V_1_ack_in() {
    L1_data_out_V_1_ack_in = L1_data_out_V_1_state.read()[1];
}

void Userplane_L1_Data_Gen::thread_L1_data_out_V_1_ack_out() {
    L1_data_out_V_1_ack_out = L1_data_out_V_TREADY.read();
}

void Userplane_L1_Data_Gen::thread_L1_data_out_V_1_data_in() {
    if (esl_seteq<1,1,1>(ap_condition_192.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,2,2>(ap_const_lv2_0, data_src_state_load_reg_311.read())) {
            L1_data_out_V_1_data_in = tmp_fu_297_p4.read();
        } else if (esl_seteq<1,2,2>(ap_const_lv2_1, data_src_state_load_reg_311.read())) {
            L1_data_out_V_1_data_in = tmp_1_fu_280_p7.read();
        } else {
            L1_data_out_V_1_data_in = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        L1_data_out_V_1_data_in = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void Userplane_L1_Data_Gen::thread_L1_data_out_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, L1_data_out_V_1_sel.read())) {
        L1_data_out_V_1_data_out = L1_data_out_V_1_payload_B.read();
    } else {
        L1_data_out_V_1_data_out = L1_data_out_V_1_payload_A.read();
    }
}

void Userplane_L1_Data_Gen::thread_L1_data_out_V_1_load_A() {
    L1_data_out_V_1_load_A = (L1_data_out_V_1_state_cmp_full.read() & ~L1_data_out_V_1_sel_wr.read());
}

void Userplane_L1_Data_Gen::thread_L1_data_out_V_1_load_B() {
    L1_data_out_V_1_load_B = (L1_data_out_V_1_sel_wr.read() & L1_data_out_V_1_state_cmp_full.read());
}

void Userplane_L1_Data_Gen::thread_L1_data_out_V_1_sel() {
    L1_data_out_V_1_sel = L1_data_out_V_1_sel_rd.read();
}

void Userplane_L1_Data_Gen::thread_L1_data_out_V_1_state_cmp_full() {
    L1_data_out_V_1_state_cmp_full =  (sc_logic) ((!L1_data_out_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(L1_data_out_V_1_state.read() != ap_const_lv2_1))[0];
}

void Userplane_L1_Data_Gen::thread_L1_data_out_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_1, data_src_state_load_reg_311.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_0, data_src_state_load_reg_311.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        L1_data_out_V_1_vld_in = ap_const_logic_1;
    } else {
        L1_data_out_V_1_vld_in = ap_const_logic_0;
    }
}

void Userplane_L1_Data_Gen::thread_L1_data_out_V_1_vld_out() {
    L1_data_out_V_1_vld_out = L1_data_out_V_1_state.read()[0];
}

void Userplane_L1_Data_Gen::thread_L1_data_out_V_TDATA() {
    L1_data_out_V_TDATA = L1_data_out_V_1_data_out.read();
}

void Userplane_L1_Data_Gen::thread_L1_data_out_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,2,2>(ap_const_lv2_0, data_src_state_load_reg_311.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_0, data_src_state_load_reg_311_pp0_iter1_reg.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,2,2>(ap_const_lv2_1, data_src_state_load_reg_311.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_1, data_src_state_load_reg_311_pp0_iter1_reg.read())))) {
        L1_data_out_V_TDATA_blk_n = L1_data_out_V_1_state.read()[1];
    } else {
        L1_data_out_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void Userplane_L1_Data_Gen::thread_L1_data_out_V_TVALID() {
    L1_data_out_V_TVALID = L1_data_out_V_1_state.read()[0];
}

void Userplane_L1_Data_Gen::thread_add_ln700_1_fu_147_p2() {
    add_ln700_1_fu_147_p2 = (!section_count_V.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(section_count_V.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void Userplane_L1_Data_Gen::thread_add_ln700_fu_165_p2() {
    add_ln700_fu_165_p2 = (!sym_count_V.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(sym_count_V.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void Userplane_L1_Data_Gen::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void Userplane_L1_Data_Gen::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Userplane_L1_Data_Gen::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && (esl_seteq<1,2,2>(L1_data_out_V_1_state.read(), ap_const_lv2_1) || 
  (esl_seteq<1,1,1>(ap_const_logic_0, L1_data_out_V_TREADY.read()) && 
   esl_seteq<1,2,2>(L1_data_out_V_1_state.read(), ap_const_lv2_3))));
}

void Userplane_L1_Data_Gen::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  (esl_seteq<1,2,2>(L1_data_out_V_1_state.read(), ap_const_lv2_1) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, L1_data_out_V_TREADY.read()) && 
    esl_seteq<1,2,2>(L1_data_out_V_1_state.read(), ap_const_lv2_3)) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))));
}

void Userplane_L1_Data_Gen::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  (esl_seteq<1,2,2>(L1_data_out_V_1_state.read(), ap_const_lv2_1) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, L1_data_out_V_TREADY.read()) && 
    esl_seteq<1,2,2>(L1_data_out_V_1_state.read(), ap_const_lv2_3)) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))));
}

void Userplane_L1_Data_Gen::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Userplane_L1_Data_Gen::thread_ap_block_state2_io() {
    ap_block_state2_io = ((esl_seteq<1,2,2>(ap_const_lv2_1, data_src_state_load_reg_311.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, L1_data_out_V_1_ack_in.read())) || (esl_seteq<1,2,2>(ap_const_lv2_0, data_src_state_load_reg_311.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, L1_data_out_V_1_ack_in.read())));
}

void Userplane_L1_Data_Gen::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Userplane_L1_Data_Gen::thread_ap_block_state3_io() {
    ap_block_state3_io = ((esl_seteq<1,2,2>(ap_const_lv2_1, data_src_state_load_reg_311_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, L1_data_out_V_1_ack_in.read())) || (esl_seteq<1,2,2>(ap_const_lv2_0, data_src_state_load_reg_311_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, L1_data_out_V_1_ack_in.read())));
}

void Userplane_L1_Data_Gen::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = (esl_seteq<1,2,2>(L1_data_out_V_1_state.read(), ap_const_lv2_1) || (esl_seteq<1,1,1>(ap_const_logic_0, L1_data_out_V_TREADY.read()) && 
  esl_seteq<1,2,2>(L1_data_out_V_1_state.read(), ap_const_lv2_3)));
}

void Userplane_L1_Data_Gen::thread_ap_condition_165() {
    ap_condition_165 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1));
}

void Userplane_L1_Data_Gen::thread_ap_condition_178() {
    ap_condition_178 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,2,2>(ap_const_lv2_1, data_src_state_load_load_fu_119_p1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1));
}

void Userplane_L1_Data_Gen::thread_ap_condition_187() {
    ap_condition_187 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && esl_seteq<1,2,2>(ap_const_lv2_1, data_src_state_load_load_fu_119_p1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1));
}

void Userplane_L1_Data_Gen::thread_ap_condition_192() {
    ap_condition_192 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0));
}

void Userplane_L1_Data_Gen::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Userplane_L1_Data_Gen::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Userplane_L1_Data_Gen::thread_ap_phi_mux_storemerge1_phi_fu_112_p4() {
    if (esl_seteq<1,1,1>(ap_condition_187.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_fu_141_p2.read())) {
            ap_phi_mux_storemerge1_phi_fu_112_p4 = ap_const_lv2_1;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_141_p2.read())) {
            ap_phi_mux_storemerge1_phi_fu_112_p4 = select_ln68_fu_183_p3.read();
        } else {
            ap_phi_mux_storemerge1_phi_fu_112_p4 = ap_phi_reg_pp0_iter0_storemerge1_reg_109.read();
        }
    } else {
        ap_phi_mux_storemerge1_phi_fu_112_p4 = ap_phi_reg_pp0_iter0_storemerge1_reg_109.read();
    }
}

void Userplane_L1_Data_Gen::thread_ap_phi_reg_pp0_iter0_storemerge1_reg_109() {
    ap_phi_reg_pp0_iter0_storemerge1_reg_109 =  (sc_lv<2>) ("XX");
}

void Userplane_L1_Data_Gen::thread_ap_reset_idle_pp0() {
    if (!esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void Userplane_L1_Data_Gen::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void Userplane_L1_Data_Gen::thread_data_src_state_load_load_fu_119_p1() {
    data_src_state_load_load_fu_119_p1 = data_src_state.read();
}

void Userplane_L1_Data_Gen::thread_icmp_ln10_1_fu_209_p2() {
    icmp_ln10_1_fu_209_p2 = (!trunc_ln215_reg_322.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln215_reg_322.read() == ap_const_lv2_1);
}

void Userplane_L1_Data_Gen::thread_icmp_ln10_fu_204_p2() {
    icmp_ln10_fu_204_p2 = (!trunc_ln215_reg_322.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln215_reg_322.read() == ap_const_lv2_0);
}

void Userplane_L1_Data_Gen::thread_icmp_ln879_1_fu_177_p2() {
    icmp_ln879_1_fu_177_p2 = (!add_ln700_fu_165_p2.read().is_01() || !ap_const_lv6_D.is_01())? sc_lv<1>(): sc_lv<1>(add_ln700_fu_165_p2.read() == ap_const_lv6_D);
}

void Userplane_L1_Data_Gen::thread_icmp_ln879_fu_141_p2() {
    icmp_ln879_fu_141_p2 = (!section_count_V.read().is_01() || !ap_const_lv4_2.is_01())? sc_lv<1>(): sc_lv<1>(section_count_V.read() == ap_const_lv4_2);
}

void Userplane_L1_Data_Gen::thread_or_ln215_fu_222_p2() {
    or_ln215_fu_222_p2 = (icmp_ln10_1_fu_209_p2.read() | icmp_ln10_fu_204_p2.read());
}

void Userplane_L1_Data_Gen::thread_select_ln215_1_fu_228_p3() {
    select_ln215_1_fu_228_p3 = (!or_ln215_fu_222_p2.read()[0].is_01())? sc_lv<9>(): ((or_ln215_fu_222_p2.read()[0].to_bool())? select_ln215_fu_214_p3.read(): ap_const_lv9_125);
}

void Userplane_L1_Data_Gen::thread_select_ln215_2_fu_240_p3() {
    select_ln215_2_fu_240_p3 = (!icmp_ln10_1_fu_209_p2.read()[0].is_01())? sc_lv<6>(): ((icmp_ln10_1_fu_209_p2.read()[0].to_bool())? ap_const_lv6_21: ap_const_lv6_0);
}

void Userplane_L1_Data_Gen::thread_select_ln215_3_fu_248_p3() {
    select_ln215_3_fu_248_p3 = (!or_ln215_fu_222_p2.read()[0].is_01())? sc_lv<6>(): ((or_ln215_fu_222_p2.read()[0].to_bool())? select_ln215_2_fu_240_p3.read(): ap_const_lv6_39);
}

void Userplane_L1_Data_Gen::thread_select_ln215_4_fu_260_p3() {
    select_ln215_4_fu_260_p3 = (!icmp_ln10_1_fu_209_p2.read()[0].is_01())? sc_lv<7>(): ((icmp_ln10_1_fu_209_p2.read()[0].to_bool())? ap_const_lv7_18: ap_const_lv7_23);
}

void Userplane_L1_Data_Gen::thread_select_ln215_5_fu_268_p3() {
    select_ln215_5_fu_268_p3 = (!or_ln215_fu_222_p2.read()[0].is_01())? sc_lv<7>(): ((or_ln215_fu_222_p2.read()[0].to_bool())? select_ln215_4_fu_260_p3.read(): ap_const_lv7_56);
}

void Userplane_L1_Data_Gen::thread_select_ln215_fu_214_p3() {
    select_ln215_fu_214_p3 = (!icmp_ln10_1_fu_209_p2.read()[0].is_01())? sc_lv<9>(): ((icmp_ln10_1_fu_209_p2.read()[0].to_bool())? ap_const_lv9_124: ap_const_lv9_123);
}

void Userplane_L1_Data_Gen::thread_select_ln68_fu_183_p3() {
    select_ln68_fu_183_p3 = (!icmp_ln879_1_fu_177_p2.read()[0].is_01())? sc_lv<2>(): ((icmp_ln879_1_fu_177_p2.read()[0].to_bool())? ap_const_lv2_2: ap_const_lv2_0);
}

void Userplane_L1_Data_Gen::thread_sext_ln215_fu_276_p1() {
    sext_ln215_fu_276_p1 = esl_sext<8,7>(select_ln215_5_fu_268_p3.read());
}

void Userplane_L1_Data_Gen::thread_st_out_V() {
    st_out_V = esl_zext<4,2>(data_src_state_load_reg_311_pp0_iter1_reg.read());
}

void Userplane_L1_Data_Gen::thread_symbol_number_V() {
    symbol_number_V = t_V_reg_316_pp0_iter1_reg.read();
}

void Userplane_L1_Data_Gen::thread_tmp_1_fu_280_p7() {
    tmp_1_fu_280_p7 = esl_concat<44,20>(esl_concat<36,8>(esl_concat<26,10>(esl_concat<24,2>(esl_concat<12,12>(ap_const_lv12_45, zext_ln215_fu_236_p1.read()), ap_const_lv2_0), zext_ln215_1_fu_256_p1.read()), sext_ln215_fu_276_p1.read()), ap_const_lv20_0);
}

void Userplane_L1_Data_Gen::thread_tmp_fu_297_p4() {
    tmp_fu_297_p4 = esl_concat<44,20>(esl_concat<38,6>(ap_const_lv38_1124015C1, t_V_reg_316.read()), ap_const_lv20_0);
}

void Userplane_L1_Data_Gen::thread_trunc_ln215_fu_137_p1() {
    trunc_ln215_fu_137_p1 = section_count_V.read().range(2-1, 0);
}

void Userplane_L1_Data_Gen::thread_zext_ln215_1_fu_256_p1() {
    zext_ln215_1_fu_256_p1 = esl_zext<10,6>(select_ln215_3_fu_248_p3.read());
}

void Userplane_L1_Data_Gen::thread_zext_ln215_fu_236_p1() {
    zext_ln215_fu_236_p1 = esl_zext<12,9>(select_ln215_1_fu_228_p3.read());
}

void Userplane_L1_Data_Gen::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

void Userplane_L1_Data_Gen::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"L1_data_out_V_TDATA\" :  \"" << L1_data_out_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"L1_data_out_V_TVALID\" :  \"" << L1_data_out_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"L1_data_out_V_TREADY\" :  \"" << L1_data_out_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"st_out_V\" :  \"" << st_out_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"symbol_number_V\" :  \"" << symbol_number_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

