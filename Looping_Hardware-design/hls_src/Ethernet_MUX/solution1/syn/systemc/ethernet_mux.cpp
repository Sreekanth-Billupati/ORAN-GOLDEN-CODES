// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ethernet_mux.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ethernet_mux::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ethernet_mux::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> ethernet_mux::ap_ST_fsm_pp0_stage0 = "1";
const bool ethernet_mux::ap_const_boolean_1 = true;
const sc_lv<32> ethernet_mux::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool ethernet_mux::ap_const_boolean_0 = false;
const sc_lv<1> ethernet_mux::ap_const_lv1_0 = "0";
const sc_lv<1> ethernet_mux::ap_const_lv1_1 = "1";
const sc_lv<16> ethernet_mux::ap_const_lv16_0 = "0000000000000000";
const sc_lv<16> ethernet_mux::ap_const_lv16_5 = "101";

ethernet_mux::ethernet_mux(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ether_mux_data_in_TVALID );
    sensitive << ( sync_data_in_TVALID );
    sensitive << ( mgmt_data_in_TVALID );
    sensitive << ( tmp_nbreadreq_fu_68_p6 );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_predicate_op14_read_state1 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ether_mux_data_in_TVALID );
    sensitive << ( sync_data_in_TVALID );
    sensitive << ( mgmt_data_in_TVALID );
    sensitive << ( tmp_nbreadreq_fu_68_p6 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_predicate_op14_read_state1 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ether_mux_data_in_TVALID );
    sensitive << ( sync_data_in_TVALID );
    sensitive << ( mgmt_data_in_TVALID );
    sensitive << ( tmp_nbreadreq_fu_68_p6 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_predicate_op14_read_state1 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ether_mux_data_in_TVALID );
    sensitive << ( sync_data_in_TVALID );
    sensitive << ( mgmt_data_in_TVALID );
    sensitive << ( tmp_nbreadreq_fu_68_p6 );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_predicate_op14_read_state1 );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( eth_data_out_TREADY );
    sensitive << ( tmp_reg_219 );
    sensitive << ( ap_predicate_op48_write_state2 );
    sensitive << ( ap_predicate_op52_write_state2 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_181);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_predicate_op14_read_state1);
    sensitive << ( tmp_nbreadreq_fu_68_p6 );
    sensitive << ( tmp_1_nbreadreq_fu_82_p6 );

    SC_METHOD(thread_ap_predicate_op48_write_state2);
    sensitive << ( tmp_reg_219 );
    sensitive << ( tmp_1_reg_223 );
    sensitive << ( tmp_2_reg_227 );

    SC_METHOD(thread_ap_predicate_op52_write_state2);
    sensitive << ( tmp_reg_219 );
    sensitive << ( tmp_1_reg_223 );

    SC_METHOD(thread_ap_predicate_op9_read_state1);
    sensitive << ( tmp_nbreadreq_fu_68_p6 );
    sensitive << ( tmp_1_nbreadreq_fu_82_p6 );
    sensitive << ( tmp_2_nbreadreq_fu_96_p6 );

    SC_METHOD(thread_ap_reset_idle_pp0);

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_eth_data_out_TDATA);
    sensitive << ( tmp_reg_219 );
    sensitive << ( ap_predicate_op48_write_state2 );
    sensitive << ( ap_predicate_op52_write_state2 );
    sensitive << ( tmp_data_V_2_reg_231 );
    sensitive << ( tmp_data_V_1_reg_251 );
    sensitive << ( tmp_data_V_reg_271 );
    sensitive << ( ap_condition_181 );

    SC_METHOD(thread_eth_data_out_TDATA_blk_n);
    sensitive << ( eth_data_out_TREADY );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_219 );
    sensitive << ( tmp_1_reg_223 );
    sensitive << ( tmp_2_reg_227 );

    SC_METHOD(thread_eth_data_out_TKEEP);
    sensitive << ( tmp_reg_219 );
    sensitive << ( ap_predicate_op48_write_state2 );
    sensitive << ( ap_predicate_op52_write_state2 );
    sensitive << ( tmp_keep_V_2_reg_241 );
    sensitive << ( tmp_keep_V_1_reg_261 );
    sensitive << ( tmp_keep_V_reg_281 );
    sensitive << ( ap_condition_181 );

    SC_METHOD(thread_eth_data_out_TLAST);
    sensitive << ( tmp_reg_219 );
    sensitive << ( ap_predicate_op48_write_state2 );
    sensitive << ( ap_predicate_op52_write_state2 );
    sensitive << ( tmp_last_V_2_reg_246 );
    sensitive << ( tmp_last_V_1_reg_266 );
    sensitive << ( tmp_last_V_reg_286 );
    sensitive << ( ap_condition_181 );

    SC_METHOD(thread_eth_data_out_TUSER);
    sensitive << ( tmp_reg_219 );
    sensitive << ( ap_predicate_op48_write_state2 );
    sensitive << ( ap_predicate_op52_write_state2 );
    sensitive << ( tmp_user_V_2_reg_236 );
    sensitive << ( tmp_user_V_1_reg_256 );
    sensitive << ( tmp_user_V_reg_276 );
    sensitive << ( ap_condition_181 );

    SC_METHOD(thread_eth_data_out_TVALID);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_219 );
    sensitive << ( ap_predicate_op48_write_state2 );
    sensitive << ( ap_predicate_op52_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ether_mux_data_in_TDATA_blk_n);
    sensitive << ( ether_mux_data_in_TVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_68_p6 );
    sensitive << ( tmp_1_nbreadreq_fu_82_p6 );

    SC_METHOD(thread_ether_mux_data_in_TREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op14_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_mgmt_data_in_TDATA_blk_n);
    sensitive << ( mgmt_data_in_TVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_68_p6 );
    sensitive << ( tmp_1_nbreadreq_fu_82_p6 );
    sensitive << ( tmp_2_nbreadreq_fu_96_p6 );

    SC_METHOD(thread_mgmt_data_in_TREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ptp_tag_filed_out_V);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_219 );
    sensitive << ( tmp_1_reg_223 );
    sensitive << ( tmp_2_reg_227 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ptp_tag_filed_out_V_ap_vld);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_219 );
    sensitive << ( tmp_1_reg_223 );
    sensitive << ( tmp_2_reg_227 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_sync_data_in_TDATA_blk_n);
    sensitive << ( sync_data_in_TVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_68_p6 );

    SC_METHOD(thread_sync_data_in_TREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_68_p6 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_1_nbreadreq_fu_82_p6);
    sensitive << ( ether_mux_data_in_TVALID );

    SC_METHOD(thread_tmp_2_nbreadreq_fu_96_p6);
    sensitive << ( mgmt_data_in_TVALID );

    SC_METHOD(thread_tmp_nbreadreq_fu_68_p6);
    sensitive << ( sync_data_in_TVALID );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ethernet_mux_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ether_mux_data_in_TDATA, "(port)ether_mux_data_in_TDATA");
    sc_trace(mVcdFile, ether_mux_data_in_TVALID, "(port)ether_mux_data_in_TVALID");
    sc_trace(mVcdFile, ether_mux_data_in_TREADY, "(port)ether_mux_data_in_TREADY");
    sc_trace(mVcdFile, ether_mux_data_in_TUSER, "(port)ether_mux_data_in_TUSER");
    sc_trace(mVcdFile, ether_mux_data_in_TKEEP, "(port)ether_mux_data_in_TKEEP");
    sc_trace(mVcdFile, ether_mux_data_in_TLAST, "(port)ether_mux_data_in_TLAST");
    sc_trace(mVcdFile, sync_data_in_TDATA, "(port)sync_data_in_TDATA");
    sc_trace(mVcdFile, sync_data_in_TVALID, "(port)sync_data_in_TVALID");
    sc_trace(mVcdFile, sync_data_in_TREADY, "(port)sync_data_in_TREADY");
    sc_trace(mVcdFile, sync_data_in_TUSER, "(port)sync_data_in_TUSER");
    sc_trace(mVcdFile, sync_data_in_TKEEP, "(port)sync_data_in_TKEEP");
    sc_trace(mVcdFile, sync_data_in_TLAST, "(port)sync_data_in_TLAST");
    sc_trace(mVcdFile, mgmt_data_in_TDATA, "(port)mgmt_data_in_TDATA");
    sc_trace(mVcdFile, mgmt_data_in_TVALID, "(port)mgmt_data_in_TVALID");
    sc_trace(mVcdFile, mgmt_data_in_TREADY, "(port)mgmt_data_in_TREADY");
    sc_trace(mVcdFile, mgmt_data_in_TUSER, "(port)mgmt_data_in_TUSER");
    sc_trace(mVcdFile, mgmt_data_in_TKEEP, "(port)mgmt_data_in_TKEEP");
    sc_trace(mVcdFile, mgmt_data_in_TLAST, "(port)mgmt_data_in_TLAST");
    sc_trace(mVcdFile, eth_data_out_TDATA, "(port)eth_data_out_TDATA");
    sc_trace(mVcdFile, eth_data_out_TVALID, "(port)eth_data_out_TVALID");
    sc_trace(mVcdFile, eth_data_out_TREADY, "(port)eth_data_out_TREADY");
    sc_trace(mVcdFile, eth_data_out_TUSER, "(port)eth_data_out_TUSER");
    sc_trace(mVcdFile, eth_data_out_TKEEP, "(port)eth_data_out_TKEEP");
    sc_trace(mVcdFile, eth_data_out_TLAST, "(port)eth_data_out_TLAST");
    sc_trace(mVcdFile, ptp_tag_filed_out_V, "(port)ptp_tag_filed_out_V");
    sc_trace(mVcdFile, ptp_tag_filed_out_V_ap_vld, "(port)ptp_tag_filed_out_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ether_mux_data_in_TDATA_blk_n, "ether_mux_data_in_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_68_p6, "tmp_nbreadreq_fu_68_p6");
    sc_trace(mVcdFile, tmp_1_nbreadreq_fu_82_p6, "tmp_1_nbreadreq_fu_82_p6");
    sc_trace(mVcdFile, sync_data_in_TDATA_blk_n, "sync_data_in_TDATA_blk_n");
    sc_trace(mVcdFile, mgmt_data_in_TDATA_blk_n, "mgmt_data_in_TDATA_blk_n");
    sc_trace(mVcdFile, tmp_2_nbreadreq_fu_96_p6, "tmp_2_nbreadreq_fu_96_p6");
    sc_trace(mVcdFile, eth_data_out_TDATA_blk_n, "eth_data_out_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, tmp_reg_219, "tmp_reg_219");
    sc_trace(mVcdFile, tmp_1_reg_223, "tmp_1_reg_223");
    sc_trace(mVcdFile, tmp_2_reg_227, "tmp_2_reg_227");
    sc_trace(mVcdFile, ap_predicate_op9_read_state1, "ap_predicate_op9_read_state1");
    sc_trace(mVcdFile, ap_predicate_op14_read_state1, "ap_predicate_op14_read_state1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_predicate_op48_write_state2, "ap_predicate_op48_write_state2");
    sc_trace(mVcdFile, ap_predicate_op52_write_state2, "ap_predicate_op52_write_state2");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, tmp_data_V_2_reg_231, "tmp_data_V_2_reg_231");
    sc_trace(mVcdFile, tmp_user_V_2_reg_236, "tmp_user_V_2_reg_236");
    sc_trace(mVcdFile, tmp_keep_V_2_reg_241, "tmp_keep_V_2_reg_241");
    sc_trace(mVcdFile, tmp_last_V_2_reg_246, "tmp_last_V_2_reg_246");
    sc_trace(mVcdFile, tmp_data_V_1_reg_251, "tmp_data_V_1_reg_251");
    sc_trace(mVcdFile, tmp_user_V_1_reg_256, "tmp_user_V_1_reg_256");
    sc_trace(mVcdFile, tmp_keep_V_1_reg_261, "tmp_keep_V_1_reg_261");
    sc_trace(mVcdFile, tmp_last_V_1_reg_266, "tmp_last_V_1_reg_266");
    sc_trace(mVcdFile, tmp_data_V_reg_271, "tmp_data_V_reg_271");
    sc_trace(mVcdFile, tmp_user_V_reg_276, "tmp_user_V_reg_276");
    sc_trace(mVcdFile, tmp_keep_V_reg_281, "tmp_keep_V_reg_281");
    sc_trace(mVcdFile, tmp_last_V_reg_286, "tmp_last_V_reg_286");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_181, "ap_condition_181");
#endif

    }
    mHdltvinHandle.open("ethernet_mux.hdltvin.dat");
    mHdltvoutHandle.open("ethernet_mux.hdltvout.dat");
}

ethernet_mux::~ethernet_mux() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void ethernet_mux::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_68_p6.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_1_reg_223 = tmp_1_nbreadreq_fu_82_p6.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_68_p6.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_nbreadreq_fu_82_p6.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_2_reg_227 = tmp_2_nbreadreq_fu_96_p6.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_68_p6.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_1_nbreadreq_fu_82_p6.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_data_V_1_reg_251 = ether_mux_data_in_TDATA.read();
        tmp_keep_V_1_reg_261 = ether_mux_data_in_TKEEP.read();
        tmp_last_V_1_reg_266 = ether_mux_data_in_TLAST.read();
        tmp_user_V_1_reg_256 = ether_mux_data_in_TUSER.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_68_p6.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_nbreadreq_fu_82_p6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_nbreadreq_fu_96_p6.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_data_V_2_reg_231 = mgmt_data_in_TDATA.read();
        tmp_keep_V_2_reg_241 = mgmt_data_in_TKEEP.read();
        tmp_last_V_2_reg_246 = mgmt_data_in_TLAST.read();
        tmp_user_V_2_reg_236 = mgmt_data_in_TUSER.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_68_p6.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_data_V_reg_271 = sync_data_in_TDATA.read();
        tmp_keep_V_reg_281 = sync_data_in_TKEEP.read();
        tmp_last_V_reg_286 = sync_data_in_TLAST.read();
        tmp_user_V_reg_276 = sync_data_in_TUSER.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_reg_219 = tmp_nbreadreq_fu_68_p6.read();
    }
}

void ethernet_mux::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void ethernet_mux::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void ethernet_mux::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && ((esl_seteq<1,1,1>(ap_const_logic_0, mgmt_data_in_TVALID.read()) && 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || 
  (esl_seteq<1,1,1>(ap_const_logic_0, ether_mux_data_in_TVALID.read()) && 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || 
  (esl_seteq<1,1,1>(tmp_nbreadreq_fu_68_p6.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_logic_0, sync_data_in_TVALID.read()))));
}

void ethernet_mux::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  ((esl_seteq<1,1,1>(ap_const_logic_0, mgmt_data_in_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, ether_mux_data_in_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || 
   (esl_seteq<1,1,1>(tmp_nbreadreq_fu_68_p6.read(), ap_const_lv1_1) && 
    esl_seteq<1,1,1>(ap_const_logic_0, sync_data_in_TVALID.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())));
}

void ethernet_mux::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  ((esl_seteq<1,1,1>(ap_const_logic_0, mgmt_data_in_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, ether_mux_data_in_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || 
   (esl_seteq<1,1,1>(tmp_nbreadreq_fu_68_p6.read(), ap_const_lv1_1) && 
    esl_seteq<1,1,1>(ap_const_logic_0, sync_data_in_TVALID.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())));
}

void ethernet_mux::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = ((esl_seteq<1,1,1>(ap_const_logic_0, mgmt_data_in_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ether_mux_data_in_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || (esl_seteq<1,1,1>(tmp_nbreadreq_fu_68_p6.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, sync_data_in_TVALID.read())));
}

void ethernet_mux::thread_ap_block_state2_io() {
    ap_block_state2_io = ((esl_seteq<1,1,1>(ap_const_logic_0, eth_data_out_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op48_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, eth_data_out_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op52_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_219.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, eth_data_out_TREADY.read())));
}

void ethernet_mux::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void ethernet_mux::thread_ap_condition_181() {
    ap_condition_181 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0));
}

void ethernet_mux::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void ethernet_mux::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void ethernet_mux::thread_ap_predicate_op14_read_state1() {
    ap_predicate_op14_read_state1 = (esl_seteq<1,1,1>(tmp_nbreadreq_fu_68_p6.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_1_nbreadreq_fu_82_p6.read(), ap_const_lv1_1));
}

void ethernet_mux::thread_ap_predicate_op48_write_state2() {
    ap_predicate_op48_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_219.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_223.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_227.read()));
}

void ethernet_mux::thread_ap_predicate_op52_write_state2() {
    ap_predicate_op52_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_219.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_reg_223.read()));
}

void ethernet_mux::thread_ap_predicate_op9_read_state1() {
    ap_predicate_op9_read_state1 = (esl_seteq<1,1,1>(tmp_nbreadreq_fu_68_p6.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_nbreadreq_fu_82_p6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_nbreadreq_fu_96_p6.read()));
}

void ethernet_mux::thread_ap_reset_idle_pp0() {
    if (!esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void ethernet_mux::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void ethernet_mux::thread_eth_data_out_TDATA() {
    if (esl_seteq<1,1,1>(ap_condition_181.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_219.read())) {
            eth_data_out_TDATA = tmp_data_V_reg_271.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op52_write_state2.read())) {
            eth_data_out_TDATA = tmp_data_V_1_reg_251.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op48_write_state2.read())) {
            eth_data_out_TDATA = tmp_data_V_2_reg_231.read();
        } else {
            eth_data_out_TDATA = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        eth_data_out_TDATA = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void ethernet_mux::thread_eth_data_out_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_219.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_219.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_reg_223.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_219.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_223.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_227.read())))) {
        eth_data_out_TDATA_blk_n = eth_data_out_TREADY.read();
    } else {
        eth_data_out_TDATA_blk_n = ap_const_logic_1;
    }
}

void ethernet_mux::thread_eth_data_out_TKEEP() {
    if (esl_seteq<1,1,1>(ap_condition_181.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_219.read())) {
            eth_data_out_TKEEP = tmp_keep_V_reg_281.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op52_write_state2.read())) {
            eth_data_out_TKEEP = tmp_keep_V_1_reg_261.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op48_write_state2.read())) {
            eth_data_out_TKEEP = tmp_keep_V_2_reg_241.read();
        } else {
            eth_data_out_TKEEP =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
        }
    } else {
        eth_data_out_TKEEP =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void ethernet_mux::thread_eth_data_out_TLAST() {
    if (esl_seteq<1,1,1>(ap_condition_181.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_219.read())) {
            eth_data_out_TLAST = tmp_last_V_reg_286.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op52_write_state2.read())) {
            eth_data_out_TLAST = tmp_last_V_1_reg_266.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op48_write_state2.read())) {
            eth_data_out_TLAST = tmp_last_V_2_reg_246.read();
        } else {
            eth_data_out_TLAST =  (sc_lv<1>) ("X");
        }
    } else {
        eth_data_out_TLAST =  (sc_lv<1>) ("X");
    }
}

void ethernet_mux::thread_eth_data_out_TUSER() {
    if (esl_seteq<1,1,1>(ap_condition_181.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_219.read())) {
            eth_data_out_TUSER = tmp_user_V_reg_276.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op52_write_state2.read())) {
            eth_data_out_TUSER = tmp_user_V_1_reg_256.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op48_write_state2.read())) {
            eth_data_out_TUSER = tmp_user_V_2_reg_236.read();
        } else {
            eth_data_out_TUSER =  (sc_lv<1>) ("X");
        }
    } else {
        eth_data_out_TUSER =  (sc_lv<1>) ("X");
    }
}

void ethernet_mux::thread_eth_data_out_TVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op48_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op52_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_219.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        eth_data_out_TVALID = ap_const_logic_1;
    } else {
        eth_data_out_TVALID = ap_const_logic_0;
    }
}

void ethernet_mux::thread_ether_mux_data_in_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_68_p6.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(tmp_1_nbreadreq_fu_82_p6.read(), ap_const_lv1_1))) {
        ether_mux_data_in_TDATA_blk_n = ether_mux_data_in_TVALID.read();
    } else {
        ether_mux_data_in_TDATA_blk_n = ap_const_logic_1;
    }
}

void ethernet_mux::thread_ether_mux_data_in_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ether_mux_data_in_TREADY = ap_const_logic_1;
    } else {
        ether_mux_data_in_TREADY = ap_const_logic_0;
    }
}

void ethernet_mux::thread_mgmt_data_in_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_68_p6.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_nbreadreq_fu_82_p6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_nbreadreq_fu_96_p6.read()))) {
        mgmt_data_in_TDATA_blk_n = mgmt_data_in_TVALID.read();
    } else {
        mgmt_data_in_TDATA_blk_n = ap_const_logic_1;
    }
}

void ethernet_mux::thread_mgmt_data_in_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        mgmt_data_in_TREADY = ap_const_logic_1;
    } else {
        mgmt_data_in_TREADY = ap_const_logic_0;
    }
}

void ethernet_mux::thread_ptp_tag_filed_out_V() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_219.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        ptp_tag_filed_out_V = ap_const_lv16_5;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_219.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_223.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_227.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_219.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_reg_223.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0)))) {
        ptp_tag_filed_out_V = ap_const_lv16_0;
    } else {
        ptp_tag_filed_out_V =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void ethernet_mux::thread_ptp_tag_filed_out_V_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_219.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_219.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_223.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_227.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_219.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_reg_223.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        ptp_tag_filed_out_V_ap_vld = ap_const_logic_1;
    } else {
        ptp_tag_filed_out_V_ap_vld = ap_const_logic_0;
    }
}

void ethernet_mux::thread_sync_data_in_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_68_p6.read(), ap_const_lv1_1))) {
        sync_data_in_TDATA_blk_n = sync_data_in_TVALID.read();
    } else {
        sync_data_in_TDATA_blk_n = ap_const_logic_1;
    }
}

void ethernet_mux::thread_sync_data_in_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_68_p6.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        sync_data_in_TREADY = ap_const_logic_1;
    } else {
        sync_data_in_TREADY = ap_const_logic_0;
    }
}

void ethernet_mux::thread_tmp_1_nbreadreq_fu_82_p6() {
    tmp_1_nbreadreq_fu_82_p6 =  (sc_lv<1>) ((ether_mux_data_in_TVALID.read()));
}

void ethernet_mux::thread_tmp_2_nbreadreq_fu_96_p6() {
    tmp_2_nbreadreq_fu_96_p6 =  (sc_lv<1>) ((mgmt_data_in_TVALID.read()));
}

void ethernet_mux::thread_tmp_nbreadreq_fu_68_p6() {
    tmp_nbreadreq_fu_68_p6 =  (sc_lv<1>) ((sync_data_in_TVALID.read()));
}

void ethernet_mux::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

void ethernet_mux::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ether_mux_data_in_TDATA\" :  \"" << ether_mux_data_in_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ether_mux_data_in_TVALID\" :  \"" << ether_mux_data_in_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ether_mux_data_in_TREADY\" :  \"" << ether_mux_data_in_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ether_mux_data_in_TUSER\" :  \"" << ether_mux_data_in_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ether_mux_data_in_TKEEP\" :  \"" << ether_mux_data_in_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ether_mux_data_in_TLAST\" :  \"" << ether_mux_data_in_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sync_data_in_TDATA\" :  \"" << sync_data_in_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sync_data_in_TVALID\" :  \"" << sync_data_in_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sync_data_in_TREADY\" :  \"" << sync_data_in_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sync_data_in_TUSER\" :  \"" << sync_data_in_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sync_data_in_TKEEP\" :  \"" << sync_data_in_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sync_data_in_TLAST\" :  \"" << sync_data_in_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mgmt_data_in_TDATA\" :  \"" << mgmt_data_in_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mgmt_data_in_TVALID\" :  \"" << mgmt_data_in_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mgmt_data_in_TREADY\" :  \"" << mgmt_data_in_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mgmt_data_in_TUSER\" :  \"" << mgmt_data_in_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mgmt_data_in_TKEEP\" :  \"" << mgmt_data_in_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mgmt_data_in_TLAST\" :  \"" << mgmt_data_in_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"eth_data_out_TDATA\" :  \"" << eth_data_out_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"eth_data_out_TVALID\" :  \"" << eth_data_out_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"eth_data_out_TREADY\" :  \"" << eth_data_out_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"eth_data_out_TUSER\" :  \"" << eth_data_out_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"eth_data_out_TKEEP\" :  \"" << eth_data_out_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"eth_data_out_TLAST\" :  \"" << eth_data_out_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ptp_tag_filed_out_V\" :  \"" << ptp_tag_filed_out_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ptp_tag_filed_out_V_ap_vld\" :  \"" << ptp_tag_filed_out_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

