// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _L1_data_Uplane_HH_
#define _L1_data_Uplane_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct L1_data_Uplane : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_lv<32> > app_out_V_V_TDATA;
    sc_out< sc_logic > app_out_V_V_TVALID;
    sc_in< sc_logic > app_out_V_V_TREADY;
    sc_out< sc_lv<48> > sec_out_V_V_TDATA;
    sc_out< sc_logic > sec_out_V_V_TVALID;
    sc_in< sc_logic > sec_out_V_V_TREADY;
    sc_out< sc_lv<8> > L1_state_out;


    // Module declarations
    L1_data_Uplane(sc_module_name name);
    SC_HAS_PROCESS(L1_data_Uplane);

    ~L1_data_Uplane();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<4> > data_src_state;
    sc_signal< sc_logic > app_out_V_V_TDATA_blk_n;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<4> > data_src_state_load_reg_259;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< sc_logic > sec_out_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_block_state3_pp0_stage2_iter0;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< bool > ap_block_state2_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< bool > ap_block_pp0_stage1_01001;
    sc_signal< bool > ap_block_pp0_stage2_01001;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_517;
    sc_signal< bool > ap_condition_521;
    sc_signal< bool > ap_condition_525;
    sc_signal< bool > ap_condition_529;
    sc_signal< bool > ap_condition_533;
    sc_signal< bool > ap_condition_537;
    sc_signal< bool > ap_condition_541;
    sc_signal< bool > ap_condition_545;
    sc_signal< bool > ap_condition_549;
    sc_signal< bool > ap_condition_553;
    sc_signal< bool > ap_condition_557;
    sc_signal< bool > ap_condition_561;
    sc_signal< bool > ap_condition_565;
    sc_signal< bool > ap_condition_569;
    sc_signal< bool > ap_condition_572;
    sc_signal< bool > ap_condition_575;
    sc_signal< bool > ap_condition_578;
    sc_signal< bool > ap_condition_581;
    sc_signal< bool > ap_condition_584;
    sc_signal< bool > ap_condition_587;
    sc_signal< bool > ap_condition_590;
    sc_signal< bool > ap_condition_593;
    sc_signal< bool > ap_condition_596;
    sc_signal< bool > ap_condition_599;
    sc_signal< bool > ap_condition_602;
    sc_signal< bool > ap_condition_605;
    sc_signal< bool > ap_condition_608;
    sc_signal< bool > ap_condition_612;
    sc_signal< bool > ap_condition_615;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_pp0_stage1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage2;
    static const sc_lv<4> ap_const_lv4_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<4> ap_const_lv4_3;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<4> ap_const_lv4_5;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<4> ap_const_lv4_6;
    static const sc_lv<4> ap_const_lv4_7;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_9;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_B;
    static const sc_lv<4> ap_const_lv4_C;
    static const sc_lv<4> ap_const_lv4_D;
    static const sc_lv<4> ap_const_lv4_E;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_4E90700;
    static const sc_lv<32> ap_const_lv32_4D90700;
    static const sc_lv<32> ap_const_lv32_4C90700;
    static const sc_lv<32> ap_const_lv32_4B90700;
    static const sc_lv<32> ap_const_lv32_4A90700;
    static const sc_lv<32> ap_const_lv32_4990700;
    static const sc_lv<32> ap_const_lv32_4890700;
    static const sc_lv<32> ap_const_lv32_4790700;
    static const sc_lv<32> ap_const_lv32_4590700;
    static const sc_lv<32> ap_const_lv32_4490700;
    static const sc_lv<32> ap_const_lv32_4390700;
    static const sc_lv<32> ap_const_lv32_4290700;
    static const sc_lv<32> ap_const_lv32_4190700;
    static const sc_lv<32> ap_const_lv32_4690700;
    static const sc_lv<48> ap_const_lv48_33000001;
    static const sc_lv<48> ap_const_lv48_33000000;
    static const sc_lv<48> ap_const_lv48_21000004;
    static const sc_lv<48> ap_const_lv48_19033009;
    static const sc_lv<48> ap_const_lv48_6033008;
    static const sc_lv<48> ap_const_lv48_39000007;
    static const sc_lv<48> ap_const_lv48_18021006;
    static const sc_lv<48> ap_const_lv48_18021003;
    static const sc_lv<48> ap_const_lv48_C504C002;
    static const sc_lv<48> ap_const_lv48_D8039005;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_L1_state_out();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_01001();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_01001();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_io();
    void thread_ap_block_state2_pp0_stage1_iter0();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage2_iter0();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_517();
    void thread_ap_condition_521();
    void thread_ap_condition_525();
    void thread_ap_condition_529();
    void thread_ap_condition_533();
    void thread_ap_condition_537();
    void thread_ap_condition_541();
    void thread_ap_condition_545();
    void thread_ap_condition_549();
    void thread_ap_condition_553();
    void thread_ap_condition_557();
    void thread_ap_condition_561();
    void thread_ap_condition_565();
    void thread_ap_condition_569();
    void thread_ap_condition_572();
    void thread_ap_condition_575();
    void thread_ap_condition_578();
    void thread_ap_condition_581();
    void thread_ap_condition_584();
    void thread_ap_condition_587();
    void thread_ap_condition_590();
    void thread_ap_condition_593();
    void thread_ap_condition_596();
    void thread_ap_condition_599();
    void thread_ap_condition_602();
    void thread_ap_condition_605();
    void thread_ap_condition_608();
    void thread_ap_condition_612();
    void thread_ap_condition_615();
    void thread_ap_enable_pp0();
    void thread_ap_idle_pp0();
    void thread_ap_reset_idle_pp0();
    void thread_ap_rst_n_inv();
    void thread_app_out_V_V_TDATA();
    void thread_app_out_V_V_TDATA_blk_n();
    void thread_app_out_V_V_TVALID();
    void thread_sec_out_V_V_TDATA();
    void thread_sec_out_V_V_TDATA_blk_n();
    void thread_sec_out_V_V_TVALID();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
