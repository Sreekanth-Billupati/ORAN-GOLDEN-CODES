// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mparam,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=3.200000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.721000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=333,HLS_SYN_LUT=124,HLS_VERSION=2019_1}" *)

module mparam (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        indata_V_V_TDATA,
        indata_V_V_TVALID,
        indata_V_V_TREADY,
        out1data_V_TDATA,
        out1data_V_TVALID,
        out1data_V_TREADY,
        out2data_V_V_TDATA,
        out2data_V_V_TVALID,
        out2data_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] indata_V_V_TDATA;
input   indata_V_V_TVALID;
output   indata_V_V_TREADY;
output  [111:0] out1data_V_TDATA;
output   out1data_V_TVALID;
input   out1data_V_TREADY;
output  [15:0] out2data_V_V_TDATA;
output   out2data_V_V_TVALID;
input   out2data_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg indata_V_V_TREADY;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [111:0] out1data_V_1_data_out;
reg    out1data_V_1_vld_in;
wire    out1data_V_1_vld_out;
wire    out1data_V_1_ack_in;
wire    out1data_V_1_ack_out;
reg   [111:0] out1data_V_1_payload_A;
reg   [111:0] out1data_V_1_payload_B;
reg    out1data_V_1_sel_rd;
reg    out1data_V_1_sel_wr;
wire    out1data_V_1_sel;
wire    out1data_V_1_load_A;
wire    out1data_V_1_load_B;
reg   [1:0] out1data_V_1_state;
wire    out1data_V_1_state_cmp_full;
wire   [15:0] out2data_V_V_1_data_out;
reg    out2data_V_V_1_vld_in;
wire    out2data_V_V_1_vld_out;
wire    out2data_V_V_1_ack_in;
wire    out2data_V_V_1_ack_out;
reg    out2data_V_V_1_sel_rd;
wire    out2data_V_V_1_sel;
reg   [1:0] out2data_V_V_1_state;
reg   [1:0] mplane_state;
reg   [47:0] l1_inp1_smac_V;
reg   [47:0] l1_inp1_dmac_V;
reg    indata_V_V_TDATA_blk_n;
wire   [0:0] grp_nbreadreq_fu_65_p3;
reg    out1data_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg   [1:0] mplane_state_load_reg_140;
reg    out2data_V_V_TDATA_blk_n;
reg    ap_predicate_op20_read_state1;
reg    ap_predicate_op28_read_state1;
reg    ap_block_state1;
reg    ap_block_state1_io;
wire   [111:0] tmp1_fu_91_p4;
wire   [47:0] trunc_ln647_fu_124_p1;
wire   [47:0] trunc_ln647_1_fu_108_p1;
reg    ap_block_state2;
reg    ap_block_state2_io;
reg   [1:0] ap_NS_fsm;
reg    ap_condition_203;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 out1data_V_1_sel_rd = 1'b0;
#0 out1data_V_1_sel_wr = 1'b0;
#0 out1data_V_1_state = 2'd0;
#0 out2data_V_V_1_sel_rd = 1'b0;
#0 out2data_V_V_1_state = 2'd0;
#0 mplane_state = 2'd0;
#0 l1_inp1_smac_V = 48'd0;
#0 l1_inp1_dmac_V = 48'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out1data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out1data_V_1_ack_out == 1'b1) & (out1data_V_1_vld_out == 1'b1))) begin
            out1data_V_1_sel_rd <= ~out1data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out1data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out1data_V_1_ack_in == 1'b1) & (out1data_V_1_vld_in == 1'b1))) begin
            out1data_V_1_sel_wr <= ~out1data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out1data_V_1_state <= 2'd0;
    end else begin
        if ((((out1data_V_1_state == 2'd2) & (out1data_V_1_vld_in == 1'b0)) | ((out1data_V_1_state == 2'd3) & (out1data_V_1_vld_in == 1'b0) & (out1data_V_1_ack_out == 1'b1)))) begin
            out1data_V_1_state <= 2'd2;
        end else if ((((out1data_V_1_state == 2'd1) & (out1data_V_TREADY == 1'b0)) | ((out1data_V_1_state == 2'd3) & (out1data_V_TREADY == 1'b0) & (out1data_V_1_vld_in == 1'b1)))) begin
            out1data_V_1_state <= 2'd1;
        end else if (((~((out1data_V_1_vld_in == 1'b0) & (out1data_V_1_ack_out == 1'b1)) & ~((out1data_V_TREADY == 1'b0) & (out1data_V_1_vld_in == 1'b1)) & (out1data_V_1_state == 2'd3)) | ((out1data_V_1_state == 2'd1) & (out1data_V_1_ack_out == 1'b1)) | ((out1data_V_1_state == 2'd2) & (out1data_V_1_vld_in == 1'b1)))) begin
            out1data_V_1_state <= 2'd3;
        end else begin
            out1data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out2data_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out2data_V_V_1_ack_out == 1'b1) & (out2data_V_V_1_vld_out == 1'b1))) begin
            out2data_V_V_1_sel_rd <= ~out2data_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out2data_V_V_1_state <= 2'd0;
    end else begin
        if ((((out2data_V_V_1_state == 2'd2) & (out2data_V_V_1_vld_in == 1'b0)) | ((out2data_V_V_1_state == 2'd3) & (out2data_V_V_1_vld_in == 1'b0) & (out2data_V_V_1_ack_out == 1'b1)))) begin
            out2data_V_V_1_state <= 2'd2;
        end else if ((((out2data_V_V_1_state == 2'd1) & (out2data_V_V_TREADY == 1'b0)) | ((out2data_V_V_1_state == 2'd3) & (out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_vld_in == 1'b1)))) begin
            out2data_V_V_1_state <= 2'd1;
        end else if (((~((out2data_V_V_1_vld_in == 1'b0) & (out2data_V_V_1_ack_out == 1'b1)) & ~((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_vld_in == 1'b1)) & (out2data_V_V_1_state == 2'd3)) | ((out2data_V_V_1_state == 2'd1) & (out2data_V_V_1_ack_out == 1'b1)) | ((out2data_V_V_1_state == 2'd2) & (out2data_V_V_1_vld_in == 1'b1)))) begin
            out2data_V_V_1_state <= 2'd3;
        end else begin
            out2data_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_203)) begin
        if (((mplane_state == 2'd0) & (grp_nbreadreq_fu_65_p3 == 1'd1))) begin
            mplane_state <= 2'd1;
        end else if (((mplane_state == 2'd1) & (grp_nbreadreq_fu_65_p3 == 1'd1))) begin
            mplane_state <= 2'd2;
        end else if ((mplane_state == 2'd2)) begin
            mplane_state <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op28_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op20_read_state1 == 1'b1))) & (mplane_state == 2'd1) & (grp_nbreadreq_fu_65_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        l1_inp1_dmac_V <= trunc_ln647_1_fu_108_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op28_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op20_read_state1 == 1'b1))) & (mplane_state == 2'd0) & (grp_nbreadreq_fu_65_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        l1_inp1_smac_V <= trunc_ln647_fu_124_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op28_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op20_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1))) begin
        mplane_state_load_reg_140 <= mplane_state;
    end
end

always @ (posedge ap_clk) begin
    if ((out1data_V_1_load_A == 1'b1)) begin
        out1data_V_1_payload_A <= tmp1_fu_91_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((out1data_V_1_load_B == 1'b1)) begin
        out1data_V_1_payload_B <= tmp1_fu_91_p4;
    end
end

always @ (*) begin
    if ((~((out2data_V_V_1_state == 2'd1) | (out1data_V_1_state == 2'd1) | (1'b1 == ap_block_state2_io) | ((out1data_V_1_state == 2'd3) & (out1data_V_TREADY == 1'b0)) | ((out2data_V_V_1_state == 2'd3) & (out2data_V_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((out2data_V_V_1_state == 2'd1) | (out1data_V_1_state == 2'd1) | (1'b1 == ap_block_state2_io) | ((out1data_V_1_state == 2'd3) & (out1data_V_TREADY == 1'b0)) | ((out2data_V_V_1_state == 2'd3) & (out2data_V_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (mplane_state == 2'd1) & (grp_nbreadreq_fu_65_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (mplane_state == 2'd0) & (grp_nbreadreq_fu_65_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        indata_V_V_TDATA_blk_n = indata_V_V_TVALID;
    end else begin
        indata_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op28_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op20_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1) & (ap_predicate_op28_read_state1 == 1'b1)) | (~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op28_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op20_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1) & (ap_predicate_op20_read_state1 == 1'b1)))) begin
        indata_V_V_TREADY = 1'b1;
    end else begin
        indata_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((out1data_V_1_sel == 1'b1)) begin
        out1data_V_1_data_out = out1data_V_1_payload_B;
    end else begin
        out1data_V_1_data_out = out1data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op28_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op20_read_state1 == 1'b1))) & (mplane_state == 2'd2) & (1'b1 == ap_CS_fsm_state1))) begin
        out1data_V_1_vld_in = 1'b1;
    end else begin
        out1data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (mplane_state == 2'd2) & (1'b1 == ap_CS_fsm_state1)) | ((mplane_state_load_reg_140 == 2'd2) & (1'b1 == ap_CS_fsm_state2)))) begin
        out1data_V_TDATA_blk_n = out1data_V_1_state[1'd1];
    end else begin
        out1data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op28_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op20_read_state1 == 1'b1))) & (mplane_state == 2'd2) & (1'b1 == ap_CS_fsm_state1))) begin
        out2data_V_V_1_vld_in = 1'b1;
    end else begin
        out2data_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (mplane_state == 2'd2) & (1'b1 == ap_CS_fsm_state1)) | ((mplane_state_load_reg_140 == 2'd2) & (1'b1 == ap_CS_fsm_state2)))) begin
        out2data_V_V_TDATA_blk_n = out2data_V_V_1_state[1'd1];
    end else begin
        out2data_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op28_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op20_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((out2data_V_V_1_state == 2'd1) | (out1data_V_1_state == 2'd1) | (1'b1 == ap_block_state2_io) | ((out1data_V_1_state == 2'd3) & (out1data_V_TREADY == 1'b0)) | ((out2data_V_V_1_state == 2'd3) & (out2data_V_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op28_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op20_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_io = (((mplane_state == 2'd2) & (out2data_V_V_1_ack_in == 1'b0)) | ((mplane_state == 2'd2) & (out1data_V_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_state2 = ((out2data_V_V_1_state == 2'd1) | (out1data_V_1_state == 2'd1) | ((out1data_V_1_state == 2'd3) & (out1data_V_TREADY == 1'b0)) | ((out2data_V_V_1_state == 2'd3) & (out2data_V_V_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state2_io = (((mplane_state_load_reg_140 == 2'd2) & (out2data_V_V_1_ack_in == 1'b0)) | ((mplane_state_load_reg_140 == 2'd2) & (out1data_V_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_condition_203 = (~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op28_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op20_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1));
end

always @ (*) begin
    ap_predicate_op20_read_state1 = ((mplane_state == 2'd1) & (grp_nbreadreq_fu_65_p3 == 1'd1));
end

always @ (*) begin
    ap_predicate_op28_read_state1 = ((mplane_state == 2'd0) & (grp_nbreadreq_fu_65_p3 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_nbreadreq_fu_65_p3 = indata_V_V_TVALID;

assign out1data_V_1_ack_in = out1data_V_1_state[1'd1];

assign out1data_V_1_ack_out = out1data_V_TREADY;

assign out1data_V_1_load_A = (out1data_V_1_state_cmp_full & ~out1data_V_1_sel_wr);

assign out1data_V_1_load_B = (out1data_V_1_state_cmp_full & out1data_V_1_sel_wr);

assign out1data_V_1_sel = out1data_V_1_sel_rd;

assign out1data_V_1_state_cmp_full = ((out1data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out1data_V_1_vld_out = out1data_V_1_state[1'd0];

assign out1data_V_TDATA = out1data_V_1_data_out;

assign out1data_V_TVALID = out1data_V_1_state[1'd0];

assign out2data_V_V_1_ack_in = out2data_V_V_1_state[1'd1];

assign out2data_V_V_1_ack_out = out2data_V_V_TREADY;

assign out2data_V_V_1_data_out = 16'd0;

assign out2data_V_V_1_sel = out2data_V_V_1_sel_rd;

assign out2data_V_V_1_vld_out = out2data_V_V_1_state[1'd0];

assign out2data_V_V_TDATA = out2data_V_V_1_data_out;

assign out2data_V_V_TVALID = out2data_V_V_1_state[1'd0];

assign tmp1_fu_91_p4 = {{{{16'd44798}, {l1_inp1_dmac_V}}}, {l1_inp1_smac_V}};

assign trunc_ln647_1_fu_108_p1 = indata_V_V_TDATA[47:0];

assign trunc_ln647_fu_124_p1 = indata_V_V_TDATA[47:0];

endmodule //mparam
