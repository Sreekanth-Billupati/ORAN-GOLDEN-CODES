// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mparam,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=3.200000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.721000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=499,HLS_SYN_LUT=175,HLS_VERSION=2019_1}" *)

module mparam (
        ap_clk,
        ap_rst_n,
        indata_V_V_TDATA,
        indata_V_V_TVALID,
        indata_V_V_TREADY,
        out1data_V_TDATA,
        out1data_V_TVALID,
        out1data_V_TREADY,
        out2data_V_V_TDATA,
        out2data_V_V_TVALID,
        out2data_V_V_TREADY,
        state_out_V
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst_n;
input  [63:0] indata_V_V_TDATA;
input   indata_V_V_TVALID;
output   indata_V_V_TREADY;
output  [111:0] out1data_V_TDATA;
output   out1data_V_TVALID;
input   out1data_V_TREADY;
output  [15:0] out2data_V_V_TDATA;
output   out2data_V_V_TVALID;
input   out2data_V_V_TREADY;
output  [7:0] state_out_V;

reg indata_V_V_TREADY;

 reg    ap_rst_n_inv;
reg   [111:0] out1data_V_1_data_in;
reg   [111:0] out1data_V_1_data_out;
reg    out1data_V_1_vld_in;
wire    out1data_V_1_vld_out;
wire    out1data_V_1_ack_in;
wire    out1data_V_1_ack_out;
reg   [111:0] out1data_V_1_payload_A;
reg   [111:0] out1data_V_1_payload_B;
reg    out1data_V_1_sel_rd;
reg    out1data_V_1_sel_wr;
wire    out1data_V_1_sel;
wire    out1data_V_1_load_A;
wire    out1data_V_1_load_B;
reg   [1:0] out1data_V_1_state;
wire    out1data_V_1_state_cmp_full;
reg   [15:0] out2data_V_V_1_data_out;
reg    out2data_V_V_1_vld_in;
wire    out2data_V_V_1_vld_out;
wire    out2data_V_V_1_ack_in;
wire    out2data_V_V_1_ack_out;
reg   [15:0] out2data_V_V_1_payload_A;
reg   [15:0] out2data_V_V_1_payload_B;
reg    out2data_V_V_1_sel_rd;
reg    out2data_V_V_1_sel_wr;
wire    out2data_V_V_1_sel;
wire    out2data_V_V_1_load_A;
wire    out2data_V_V_1_load_B;
reg   [1:0] out2data_V_V_1_state;
wire    out2data_V_V_1_state_cmp_full;
reg   [1:0] mplane_state;
reg   [63:0] datainp1_V;
reg   [63:0] datainp2_V;
reg   [47:0] l1_inp1_smac_V;
reg   [47:0] l1_inp1_dmac_V;
reg    indata_V_V_TDATA_blk_n;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state2;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state3;
wire   [1:0] mplane_state_load_load_fu_129_p1;
wire   [0:0] grp_nbreadreq_fu_88_p3;
reg    out1data_V_TDATA_blk_n;
reg   [1:0] mplane_state_load_reg_256;
reg   [1:0] mplane_state_load_reg_256_pp0_iter1_reg;
reg    out2data_V_V_TDATA_blk_n;
reg    ap_predicate_op8_read_state1;
reg    ap_predicate_op12_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
wire   [111:0] tmp_17_fu_165_p4;
wire   [111:0] tmp1_fu_239_p5;
wire   [47:0] p_Result_s_4_fu_209_p3;
wire   [47:0] tmp_V_3_fu_223_p4;
wire   [5:0] p_Result_s_fu_199_p4;
wire   [41:0] trunc_ln647_fu_180_p1;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_condition_296;

// power-on initialization
initial begin
#0 out1data_V_1_sel_rd = 1'b0;
#0 out1data_V_1_sel_wr = 1'b0;
#0 out1data_V_1_state = 2'd0;
#0 out2data_V_V_1_sel_rd = 1'b0;
#0 out2data_V_V_1_sel_wr = 1'b0;
#0 out2data_V_V_1_state = 2'd0;
#0 mplane_state = 2'd0;
#0 datainp1_V = 64'd0;
#0 datainp2_V = 64'd0;
#0 l1_inp1_smac_V = 48'd0;
#0 l1_inp1_dmac_V = 48'd0;
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ap_CS_iter2_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mplane_state <= 2'd0;
    end else begin
        if ((~(((indata_V_V_TVALID == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out2data_V_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (mplane_state == 2'd0) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            mplane_state <= 2'd1;
        end else if ((~(((indata_V_V_TVALID == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out2data_V_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (mplane_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            mplane_state <= 2'd2;
        end else if (((~(((indata_V_V_TVALID == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out2data_V_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (mplane_state_load_load_fu_129_p1 == 2'd2) & (1'b1 == ap_CS_iter0_fsm_state1)) | (~(((indata_V_V_TVALID == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out2data_V_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (mplane_state_load_load_fu_129_p1 == 2'd3) & (1'b1 == ap_CS_iter0_fsm_state1)))) begin
            mplane_state <= 2'd3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out1data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out1data_V_1_ack_out == 1'b1) & (out1data_V_1_vld_out == 1'b1))) begin
            out1data_V_1_sel_rd <= ~out1data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out1data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out1data_V_1_ack_in == 1'b1) & (out1data_V_1_vld_in == 1'b1))) begin
            out1data_V_1_sel_wr <= ~out1data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out1data_V_1_state <= 2'd0;
    end else begin
        if ((((out1data_V_1_vld_in == 1'b0) & (out1data_V_1_state == 2'd2)) | ((out1data_V_1_vld_in == 1'b0) & (out1data_V_1_ack_out == 1'b1) & (out1data_V_1_state == 2'd3)))) begin
            out1data_V_1_state <= 2'd2;
        end else if ((((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd1)) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_vld_in == 1'b1) & (out1data_V_1_state == 2'd3)))) begin
            out1data_V_1_state <= 2'd1;
        end else if (((~((out1data_V_1_vld_in == 1'b0) & (out1data_V_1_ack_out == 1'b1)) & ~((out1data_V_TREADY == 1'b0) & (out1data_V_1_vld_in == 1'b1)) & (out1data_V_1_state == 2'd3)) | ((out1data_V_1_ack_out == 1'b1) & (out1data_V_1_state == 2'd1)) | ((out1data_V_1_vld_in == 1'b1) & (out1data_V_1_state == 2'd2)))) begin
            out1data_V_1_state <= 2'd3;
        end else begin
            out1data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out2data_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out2data_V_V_1_ack_out == 1'b1) & (out2data_V_V_1_vld_out == 1'b1))) begin
            out2data_V_V_1_sel_rd <= ~out2data_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out2data_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out2data_V_V_1_ack_in == 1'b1) & (out2data_V_V_1_vld_in == 1'b1))) begin
            out2data_V_V_1_sel_wr <= ~out2data_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out2data_V_V_1_state <= 2'd0;
    end else begin
        if ((((out2data_V_V_1_vld_in == 1'b0) & (out2data_V_V_1_state == 2'd2)) | ((out2data_V_V_1_vld_in == 1'b0) & (out2data_V_V_1_state == 2'd3) & (out2data_V_V_1_ack_out == 1'b1)))) begin
            out2data_V_V_1_state <= 2'd2;
        end else if ((((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd1)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3) & (out2data_V_V_1_vld_in == 1'b1)))) begin
            out2data_V_V_1_state <= 2'd1;
        end else if (((~((out2data_V_V_1_vld_in == 1'b0) & (out2data_V_V_1_ack_out == 1'b1)) & ~((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_vld_in == 1'b1)) & (out2data_V_V_1_state == 2'd3)) | ((out2data_V_V_1_state == 2'd1) & (out2data_V_V_1_ack_out == 1'b1)) | ((out2data_V_V_1_state == 2'd2) & (out2data_V_V_1_vld_in == 1'b1)))) begin
            out2data_V_V_1_state <= 2'd3;
        end else begin
            out2data_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(((indata_V_V_TVALID == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out2data_V_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (mplane_state == 2'd0) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        datainp1_V <= indata_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((indata_V_V_TVALID == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out2data_V_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (mplane_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        datainp2_V <= indata_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out2data_V_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3))))) & (mplane_state_load_reg_256 == 2'd2) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        l1_inp1_dmac_V <= {{datainp2_V[51:4]}};
        l1_inp1_smac_V <= p_Result_s_4_fu_209_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((indata_V_V_TVALID == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out2data_V_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        mplane_state_load_reg_256 <= mplane_state;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out2data_V_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        mplane_state_load_reg_256_pp0_iter1_reg <= mplane_state_load_reg_256;
    end
end

always @ (posedge ap_clk) begin
    if ((out1data_V_1_load_A == 1'b1)) begin
        out1data_V_1_payload_A <= out1data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((out1data_V_1_load_B == 1'b1)) begin
        out1data_V_1_payload_B <= out1data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((out2data_V_V_1_load_A == 1'b1)) begin
        out2data_V_V_1_payload_A <= {{datainp1_V[57:42]}};
    end
end

always @ (posedge ap_clk) begin
    if ((out2data_V_V_1_load_B == 1'b1)) begin
        out2data_V_V_1_payload_B <= {{datainp1_V[57:42]}};
    end
end

always @ (*) begin
    if ((((mplane_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1)) | ((mplane_state == 2'd0) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1)))) begin
        indata_V_V_TDATA_blk_n = indata_V_V_TVALID;
    end else begin
        indata_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~(((indata_V_V_TVALID == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out2data_V_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_predicate_op12_read_state1 == 1'b1)) | (~(((indata_V_V_TVALID == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out2data_V_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_predicate_op8_read_state1 == 1'b1)))) begin
        indata_V_V_TREADY = 1'b1;
    end else begin
        indata_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_296)) begin
        if ((mplane_state_load_reg_256 == 2'd2)) begin
            out1data_V_1_data_in = tmp1_fu_239_p5;
        end else if ((mplane_state_load_reg_256 == 2'd3)) begin
            out1data_V_1_data_in = tmp_17_fu_165_p4;
        end else begin
            out1data_V_1_data_in = 'bx;
        end
    end else begin
        out1data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((out1data_V_1_sel == 1'b1)) begin
        out1data_V_1_data_out = out1data_V_1_payload_B;
    end else begin
        out1data_V_1_data_out = out1data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out2data_V_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3))))) & (mplane_state_load_reg_256 == 2'd3) & (1'b1 == ap_CS_iter1_fsm_state2)) | (~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out2data_V_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3))))) & (mplane_state_load_reg_256 == 2'd2) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        out1data_V_1_vld_in = 1'b1;
    end else begin
        out1data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((mplane_state_load_reg_256_pp0_iter1_reg == 2'd3) & (1'b1 == ap_CS_iter2_fsm_state3)) | ((mplane_state_load_reg_256_pp0_iter1_reg == 2'd2) & (1'b1 == ap_CS_iter2_fsm_state3)) | ((mplane_state_load_reg_256 == 2'd3) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((mplane_state_load_reg_256 == 2'd2) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        out1data_V_TDATA_blk_n = out1data_V_1_state[1'd1];
    end else begin
        out1data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out2data_V_V_1_sel == 1'b1)) begin
        out2data_V_V_1_data_out = out2data_V_V_1_payload_B;
    end else begin
        out2data_V_V_1_data_out = out2data_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out2data_V_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3))))) & (mplane_state_load_reg_256 == 2'd2) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        out2data_V_V_1_vld_in = 1'b1;
    end else begin
        out2data_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((mplane_state_load_reg_256_pp0_iter1_reg == 2'd2) & (1'b1 == ap_CS_iter2_fsm_state3)) | ((mplane_state_load_reg_256 == 2'd2) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        out2data_V_V_TDATA_blk_n = out2data_V_V_1_state[1'd1];
    end else begin
        out2data_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out2data_V_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3))))) & ~(((indata_V_V_TVALID == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out2data_V_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3))))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (((indata_V_V_TVALID == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1))))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~(((indata_V_V_TVALID == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out2data_V_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((out2data_V_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3))) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((out2data_V_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3))) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out2data_V_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (((indata_V_V_TVALID == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((indata_V_V_TVALID == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_io = (((out1data_V_1_ack_in == 1'b0) & (mplane_state_load_reg_256 == 2'd3)) | ((out2data_V_V_1_ack_in == 1'b0) & (mplane_state_load_reg_256 == 2'd2)) | ((out1data_V_1_ack_in == 1'b0) & (mplane_state_load_reg_256 == 2'd2)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = (((out1data_V_1_ack_in == 1'b0) & (mplane_state_load_reg_256_pp0_iter1_reg == 2'd3)) | ((out2data_V_V_1_ack_in == 1'b0) & (mplane_state_load_reg_256_pp0_iter1_reg == 2'd2)) | ((out1data_V_1_ack_in == 1'b0) & (mplane_state_load_reg_256_pp0_iter1_reg == 2'd2)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((out2data_V_V_1_state == 2'd1) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3)));
end

always @ (*) begin
    ap_condition_296 = (~((1'b1 == ap_CS_iter2_fsm_state3) & ((out2data_V_V_1_state == 2'd1) | (out1data_V_1_state == 2'd1) | ((out1data_V_TREADY == 1'b0) & (out1data_V_1_state == 2'd3)) | ((out2data_V_V_TREADY == 1'b0) & (out2data_V_V_1_state == 2'd3)))) & (1'b1 == ap_CS_iter1_fsm_state2));
end

always @ (*) begin
    ap_predicate_op12_read_state1 = ((mplane_state == 2'd0) & (grp_nbreadreq_fu_88_p3 == 1'd1));
end

always @ (*) begin
    ap_predicate_op8_read_state1 = ((mplane_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_nbreadreq_fu_88_p3 = indata_V_V_TVALID;

assign mplane_state_load_load_fu_129_p1 = mplane_state;

assign out1data_V_1_ack_in = out1data_V_1_state[1'd1];

assign out1data_V_1_ack_out = out1data_V_TREADY;

assign out1data_V_1_load_A = (out1data_V_1_state_cmp_full & ~out1data_V_1_sel_wr);

assign out1data_V_1_load_B = (out1data_V_1_state_cmp_full & out1data_V_1_sel_wr);

assign out1data_V_1_sel = out1data_V_1_sel_rd;

assign out1data_V_1_state_cmp_full = ((out1data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out1data_V_1_vld_out = out1data_V_1_state[1'd0];

assign out1data_V_TDATA = out1data_V_1_data_out;

assign out1data_V_TVALID = out1data_V_1_state[1'd0];

assign out2data_V_V_1_ack_in = out2data_V_V_1_state[1'd1];

assign out2data_V_V_1_ack_out = out2data_V_V_TREADY;

assign out2data_V_V_1_load_A = (out2data_V_V_1_state_cmp_full & ~out2data_V_V_1_sel_wr);

assign out2data_V_V_1_load_B = (out2data_V_V_1_state_cmp_full & out2data_V_V_1_sel_wr);

assign out2data_V_V_1_sel = out2data_V_V_1_sel_rd;

assign out2data_V_V_1_state_cmp_full = ((out2data_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out2data_V_V_1_vld_out = out2data_V_V_1_state[1'd0];

assign out2data_V_V_TDATA = out2data_V_V_1_data_out;

assign out2data_V_V_TVALID = out2data_V_V_1_state[1'd0];

assign p_Result_s_4_fu_209_p3 = {{p_Result_s_fu_199_p4}, {trunc_ln647_fu_180_p1}};

assign p_Result_s_fu_199_p4 = {{datainp2_V[57:52]}};

assign state_out_V = mplane_state_load_reg_256_pp0_iter1_reg;

assign tmp1_fu_239_p5 = {{{{{{16'd44798}, {tmp_V_3_fu_223_p4}}}, {p_Result_s_fu_199_p4}}}, {trunc_ln647_fu_180_p1}};

assign tmp_17_fu_165_p4 = {{{{16'd44798}, {l1_inp1_dmac_V}}}, {l1_inp1_smac_V}};

assign tmp_V_3_fu_223_p4 = {{datainp2_V[51:4]}};

assign trunc_ln647_fu_180_p1 = datainp1_V[41:0];

endmodule //mparam
