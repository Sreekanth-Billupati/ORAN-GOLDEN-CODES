// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mparam.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mparam::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mparam::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> mparam::ap_ST_iter0_fsm_state1 = "1";
const sc_lv<2> mparam::ap_ST_iter1_fsm_state2 = "10";
const sc_lv<2> mparam::ap_ST_iter2_fsm_state3 = "10";
const sc_lv<2> mparam::ap_ST_iter1_fsm_state0 = "1";
const sc_lv<2> mparam::ap_ST_iter2_fsm_state0 = "1";
const bool mparam::ap_const_boolean_1 = true;
const sc_lv<1> mparam::ap_const_lv1_0 = "0";
const sc_lv<1> mparam::ap_const_lv1_1 = "1";
const sc_lv<2> mparam::ap_const_lv2_0 = "00";
const sc_lv<2> mparam::ap_const_lv2_2 = "10";
const sc_lv<2> mparam::ap_const_lv2_3 = "11";
const sc_lv<2> mparam::ap_const_lv2_1 = "1";
const sc_lv<32> mparam::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> mparam::ap_const_lv32_1 = "1";
const sc_lv<16> mparam::ap_const_lv16_AEFE = "1010111011111110";
const sc_lv<32> mparam::ap_const_lv32_2A = "101010";
const sc_lv<32> mparam::ap_const_lv32_39 = "111001";
const sc_lv<32> mparam::ap_const_lv32_34 = "110100";
const sc_lv<32> mparam::ap_const_lv32_4 = "100";
const sc_lv<32> mparam::ap_const_lv32_33 = "110011";
const bool mparam::ap_const_boolean_0 = false;

mparam::mparam(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_iter0_fsm_state1);
    sensitive << ( ap_CS_iter0_fsm );

    SC_METHOD(thread_ap_CS_iter1_fsm_state2);
    sensitive << ( ap_CS_iter1_fsm );

    SC_METHOD(thread_ap_CS_iter2_fsm_state3);
    sensitive << ( ap_CS_iter2_fsm );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( indata_V_V_TVALID );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( ap_predicate_op12_read_state1 );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( out1data_V_1_ack_in );
    sensitive << ( out2data_V_V_1_ack_in );
    sensitive << ( mplane_state_load_reg_256 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( out1data_V_1_ack_in );
    sensitive << ( out2data_V_V_1_ack_in );
    sensitive << ( mplane_state_load_reg_256_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);
    sensitive << ( out1data_V_TREADY );
    sensitive << ( out1data_V_1_state );
    sensitive << ( out2data_V_V_TREADY );
    sensitive << ( out2data_V_V_1_state );

    SC_METHOD(thread_ap_condition_296);
    sensitive << ( out1data_V_TREADY );
    sensitive << ( out1data_V_1_state );
    sensitive << ( out2data_V_V_TREADY );
    sensitive << ( out2data_V_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_ap_predicate_op12_read_state1);
    sensitive << ( mplane_state );
    sensitive << ( grp_nbreadreq_fu_88_p3 );

    SC_METHOD(thread_ap_predicate_op8_read_state1);
    sensitive << ( mplane_state );
    sensitive << ( grp_nbreadreq_fu_88_p3 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_nbreadreq_fu_88_p3);
    sensitive << ( indata_V_V_TVALID );

    SC_METHOD(thread_indata_V_V_TDATA_blk_n);
    sensitive << ( indata_V_V_TVALID );
    sensitive << ( mplane_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( grp_nbreadreq_fu_88_p3 );

    SC_METHOD(thread_indata_V_V_TREADY);
    sensitive << ( indata_V_V_TVALID );
    sensitive << ( out1data_V_TREADY );
    sensitive << ( out1data_V_1_state );
    sensitive << ( out2data_V_V_TREADY );
    sensitive << ( out2data_V_V_1_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( ap_predicate_op12_read_state1 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_mplane_state_load_load_fu_129_p1);
    sensitive << ( mplane_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );

    SC_METHOD(thread_out1data_V_1_ack_in);
    sensitive << ( out1data_V_1_state );

    SC_METHOD(thread_out1data_V_1_ack_out);
    sensitive << ( out1data_V_TREADY );

    SC_METHOD(thread_out1data_V_1_data_in);
    sensitive << ( mplane_state_load_reg_256 );
    sensitive << ( tmp_17_fu_165_p4 );
    sensitive << ( tmp1_fu_239_p5 );
    sensitive << ( ap_condition_296 );

    SC_METHOD(thread_out1data_V_1_data_out);
    sensitive << ( out1data_V_1_payload_A );
    sensitive << ( out1data_V_1_payload_B );
    sensitive << ( out1data_V_1_sel );

    SC_METHOD(thread_out1data_V_1_load_A);
    sensitive << ( out1data_V_1_sel_wr );
    sensitive << ( out1data_V_1_state_cmp_full );

    SC_METHOD(thread_out1data_V_1_load_B);
    sensitive << ( out1data_V_1_sel_wr );
    sensitive << ( out1data_V_1_state_cmp_full );

    SC_METHOD(thread_out1data_V_1_sel);
    sensitive << ( out1data_V_1_sel_rd );

    SC_METHOD(thread_out1data_V_1_state_cmp_full);
    sensitive << ( out1data_V_1_state );

    SC_METHOD(thread_out1data_V_1_vld_in);
    sensitive << ( out1data_V_TREADY );
    sensitive << ( out1data_V_1_state );
    sensitive << ( out2data_V_V_TREADY );
    sensitive << ( out2data_V_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( mplane_state_load_reg_256 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_out1data_V_1_vld_out);
    sensitive << ( out1data_V_1_state );

    SC_METHOD(thread_out1data_V_TDATA);
    sensitive << ( out1data_V_1_data_out );

    SC_METHOD(thread_out1data_V_TDATA_blk_n);
    sensitive << ( out1data_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( mplane_state_load_reg_256 );
    sensitive << ( mplane_state_load_reg_256_pp0_iter1_reg );

    SC_METHOD(thread_out1data_V_TVALID);
    sensitive << ( out1data_V_1_state );

    SC_METHOD(thread_out2data_V_V_1_ack_in);
    sensitive << ( out2data_V_V_1_state );

    SC_METHOD(thread_out2data_V_V_1_ack_out);
    sensitive << ( out2data_V_V_TREADY );

    SC_METHOD(thread_out2data_V_V_1_data_out);
    sensitive << ( out2data_V_V_1_payload_A );
    sensitive << ( out2data_V_V_1_payload_B );
    sensitive << ( out2data_V_V_1_sel );

    SC_METHOD(thread_out2data_V_V_1_load_A);
    sensitive << ( out2data_V_V_1_sel_wr );
    sensitive << ( out2data_V_V_1_state_cmp_full );

    SC_METHOD(thread_out2data_V_V_1_load_B);
    sensitive << ( out2data_V_V_1_sel_wr );
    sensitive << ( out2data_V_V_1_state_cmp_full );

    SC_METHOD(thread_out2data_V_V_1_sel);
    sensitive << ( out2data_V_V_1_sel_rd );

    SC_METHOD(thread_out2data_V_V_1_state_cmp_full);
    sensitive << ( out2data_V_V_1_state );

    SC_METHOD(thread_out2data_V_V_1_vld_in);
    sensitive << ( out1data_V_TREADY );
    sensitive << ( out1data_V_1_state );
    sensitive << ( out2data_V_V_TREADY );
    sensitive << ( out2data_V_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( mplane_state_load_reg_256 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_out2data_V_V_1_vld_out);
    sensitive << ( out2data_V_V_1_state );

    SC_METHOD(thread_out2data_V_V_TDATA);
    sensitive << ( out2data_V_V_1_data_out );

    SC_METHOD(thread_out2data_V_V_TDATA_blk_n);
    sensitive << ( out2data_V_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( mplane_state_load_reg_256 );
    sensitive << ( mplane_state_load_reg_256_pp0_iter1_reg );

    SC_METHOD(thread_out2data_V_V_TVALID);
    sensitive << ( out2data_V_V_1_state );

    SC_METHOD(thread_p_Result_s_4_fu_209_p3);
    sensitive << ( p_Result_s_fu_199_p4 );
    sensitive << ( trunc_ln647_fu_180_p1 );

    SC_METHOD(thread_p_Result_s_fu_199_p4);
    sensitive << ( datainp2_V );

    SC_METHOD(thread_state_out_V);
    sensitive << ( out1data_V_TREADY );
    sensitive << ( out1data_V_1_state );
    sensitive << ( out2data_V_V_TREADY );
    sensitive << ( out2data_V_V_1_state );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( mplane_state_load_reg_256_pp0_iter1_reg );

    SC_METHOD(thread_tmp1_fu_239_p5);
    sensitive << ( tmp_V_3_fu_223_p4 );
    sensitive << ( p_Result_s_fu_199_p4 );
    sensitive << ( trunc_ln647_fu_180_p1 );

    SC_METHOD(thread_tmp_17_fu_165_p4);
    sensitive << ( l1_inp1_smac_V );
    sensitive << ( l1_inp1_dmac_V );

    SC_METHOD(thread_tmp_V_3_fu_223_p4);
    sensitive << ( datainp2_V );

    SC_METHOD(thread_trunc_ln647_fu_180_p1);
    sensitive << ( datainp1_V );

    SC_METHOD(thread_ap_NS_iter0_fsm);
    sensitive << ( indata_V_V_TVALID );
    sensitive << ( out1data_V_TREADY );
    sensitive << ( out1data_V_1_state );
    sensitive << ( out2data_V_V_TREADY );
    sensitive << ( out2data_V_V_1_state );
    sensitive << ( ap_CS_iter0_fsm );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( ap_predicate_op12_read_state1 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_NS_iter1_fsm);
    sensitive << ( indata_V_V_TVALID );
    sensitive << ( out1data_V_TREADY );
    sensitive << ( out1data_V_1_state );
    sensitive << ( out2data_V_V_TREADY );
    sensitive << ( out2data_V_V_1_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( ap_predicate_op12_read_state1 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_NS_iter2_fsm);
    sensitive << ( out1data_V_TREADY );
    sensitive << ( out1data_V_1_state );
    sensitive << ( out2data_V_V_TREADY );
    sensitive << ( out2data_V_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    out1data_V_1_sel_rd = SC_LOGIC_0;
    out1data_V_1_sel_wr = SC_LOGIC_0;
    out1data_V_1_state = "00";
    out2data_V_V_1_sel_rd = SC_LOGIC_0;
    out2data_V_V_1_sel_wr = SC_LOGIC_0;
    out2data_V_V_1_state = "00";
    mplane_state = "00";
    datainp1_V = "0000000000000000000000000000000000000000000000000000000000000000";
    datainp2_V = "0000000000000000000000000000000000000000000000000000000000000000";
    l1_inp1_smac_V = "000000000000000000000000000000000000000000000000";
    l1_inp1_dmac_V = "000000000000000000000000000000000000000000000000";
    ap_CS_iter0_fsm = "1";
    ap_CS_iter1_fsm = "01";
    ap_CS_iter2_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mparam_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, indata_V_V_TDATA, "(port)indata_V_V_TDATA");
    sc_trace(mVcdFile, indata_V_V_TVALID, "(port)indata_V_V_TVALID");
    sc_trace(mVcdFile, indata_V_V_TREADY, "(port)indata_V_V_TREADY");
    sc_trace(mVcdFile, out1data_V_TDATA, "(port)out1data_V_TDATA");
    sc_trace(mVcdFile, out1data_V_TVALID, "(port)out1data_V_TVALID");
    sc_trace(mVcdFile, out1data_V_TREADY, "(port)out1data_V_TREADY");
    sc_trace(mVcdFile, out2data_V_V_TDATA, "(port)out2data_V_V_TDATA");
    sc_trace(mVcdFile, out2data_V_V_TVALID, "(port)out2data_V_V_TVALID");
    sc_trace(mVcdFile, out2data_V_V_TREADY, "(port)out2data_V_V_TREADY");
    sc_trace(mVcdFile, state_out_V, "(port)state_out_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, out1data_V_1_data_in, "out1data_V_1_data_in");
    sc_trace(mVcdFile, out1data_V_1_data_out, "out1data_V_1_data_out");
    sc_trace(mVcdFile, out1data_V_1_vld_in, "out1data_V_1_vld_in");
    sc_trace(mVcdFile, out1data_V_1_vld_out, "out1data_V_1_vld_out");
    sc_trace(mVcdFile, out1data_V_1_ack_in, "out1data_V_1_ack_in");
    sc_trace(mVcdFile, out1data_V_1_ack_out, "out1data_V_1_ack_out");
    sc_trace(mVcdFile, out1data_V_1_payload_A, "out1data_V_1_payload_A");
    sc_trace(mVcdFile, out1data_V_1_payload_B, "out1data_V_1_payload_B");
    sc_trace(mVcdFile, out1data_V_1_sel_rd, "out1data_V_1_sel_rd");
    sc_trace(mVcdFile, out1data_V_1_sel_wr, "out1data_V_1_sel_wr");
    sc_trace(mVcdFile, out1data_V_1_sel, "out1data_V_1_sel");
    sc_trace(mVcdFile, out1data_V_1_load_A, "out1data_V_1_load_A");
    sc_trace(mVcdFile, out1data_V_1_load_B, "out1data_V_1_load_B");
    sc_trace(mVcdFile, out1data_V_1_state, "out1data_V_1_state");
    sc_trace(mVcdFile, out1data_V_1_state_cmp_full, "out1data_V_1_state_cmp_full");
    sc_trace(mVcdFile, out2data_V_V_1_data_out, "out2data_V_V_1_data_out");
    sc_trace(mVcdFile, out2data_V_V_1_vld_in, "out2data_V_V_1_vld_in");
    sc_trace(mVcdFile, out2data_V_V_1_vld_out, "out2data_V_V_1_vld_out");
    sc_trace(mVcdFile, out2data_V_V_1_ack_in, "out2data_V_V_1_ack_in");
    sc_trace(mVcdFile, out2data_V_V_1_ack_out, "out2data_V_V_1_ack_out");
    sc_trace(mVcdFile, out2data_V_V_1_payload_A, "out2data_V_V_1_payload_A");
    sc_trace(mVcdFile, out2data_V_V_1_payload_B, "out2data_V_V_1_payload_B");
    sc_trace(mVcdFile, out2data_V_V_1_sel_rd, "out2data_V_V_1_sel_rd");
    sc_trace(mVcdFile, out2data_V_V_1_sel_wr, "out2data_V_V_1_sel_wr");
    sc_trace(mVcdFile, out2data_V_V_1_sel, "out2data_V_V_1_sel");
    sc_trace(mVcdFile, out2data_V_V_1_load_A, "out2data_V_V_1_load_A");
    sc_trace(mVcdFile, out2data_V_V_1_load_B, "out2data_V_V_1_load_B");
    sc_trace(mVcdFile, out2data_V_V_1_state, "out2data_V_V_1_state");
    sc_trace(mVcdFile, out2data_V_V_1_state_cmp_full, "out2data_V_V_1_state_cmp_full");
    sc_trace(mVcdFile, mplane_state, "mplane_state");
    sc_trace(mVcdFile, datainp1_V, "datainp1_V");
    sc_trace(mVcdFile, datainp2_V, "datainp2_V");
    sc_trace(mVcdFile, l1_inp1_smac_V, "l1_inp1_smac_V");
    sc_trace(mVcdFile, l1_inp1_dmac_V, "l1_inp1_dmac_V");
    sc_trace(mVcdFile, indata_V_V_TDATA_blk_n, "indata_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_iter0_fsm, "ap_CS_iter0_fsm");
    sc_trace(mVcdFile, ap_CS_iter0_fsm_state1, "ap_CS_iter0_fsm_state1");
    sc_trace(mVcdFile, ap_CS_iter1_fsm, "ap_CS_iter1_fsm");
    sc_trace(mVcdFile, ap_CS_iter1_fsm_state2, "ap_CS_iter1_fsm_state2");
    sc_trace(mVcdFile, ap_CS_iter2_fsm, "ap_CS_iter2_fsm");
    sc_trace(mVcdFile, ap_CS_iter2_fsm_state3, "ap_CS_iter2_fsm_state3");
    sc_trace(mVcdFile, mplane_state_load_load_fu_129_p1, "mplane_state_load_load_fu_129_p1");
    sc_trace(mVcdFile, grp_nbreadreq_fu_88_p3, "grp_nbreadreq_fu_88_p3");
    sc_trace(mVcdFile, out1data_V_TDATA_blk_n, "out1data_V_TDATA_blk_n");
    sc_trace(mVcdFile, mplane_state_load_reg_256, "mplane_state_load_reg_256");
    sc_trace(mVcdFile, mplane_state_load_reg_256_pp0_iter1_reg, "mplane_state_load_reg_256_pp0_iter1_reg");
    sc_trace(mVcdFile, out2data_V_V_TDATA_blk_n, "out2data_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_predicate_op8_read_state1, "ap_predicate_op8_read_state1");
    sc_trace(mVcdFile, ap_predicate_op12_read_state1, "ap_predicate_op12_read_state1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, tmp_17_fu_165_p4, "tmp_17_fu_165_p4");
    sc_trace(mVcdFile, tmp1_fu_239_p5, "tmp1_fu_239_p5");
    sc_trace(mVcdFile, p_Result_s_4_fu_209_p3, "p_Result_s_4_fu_209_p3");
    sc_trace(mVcdFile, tmp_V_3_fu_223_p4, "tmp_V_3_fu_223_p4");
    sc_trace(mVcdFile, p_Result_s_fu_199_p4, "p_Result_s_fu_199_p4");
    sc_trace(mVcdFile, trunc_ln647_fu_180_p1, "trunc_ln647_fu_180_p1");
    sc_trace(mVcdFile, ap_NS_iter0_fsm, "ap_NS_iter0_fsm");
    sc_trace(mVcdFile, ap_NS_iter1_fsm, "ap_NS_iter1_fsm");
    sc_trace(mVcdFile, ap_NS_iter2_fsm, "ap_NS_iter2_fsm");
    sc_trace(mVcdFile, ap_condition_296, "ap_condition_296");
#endif

    }
    mHdltvinHandle.open("mparam.hdltvin.dat");
    mHdltvoutHandle.open("mparam.hdltvout.dat");
}

mparam::~mparam() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void mparam::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_iter0_fsm = ap_ST_iter0_fsm_state1;
    } else {
        ap_CS_iter0_fsm = ap_NS_iter0_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_iter1_fsm = ap_ST_iter1_fsm_state0;
    } else {
        ap_CS_iter1_fsm = ap_NS_iter1_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_iter2_fsm = ap_ST_iter2_fsm_state0;
    } else {
        ap_CS_iter2_fsm = ap_NS_iter2_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mplane_state = ap_const_lv2_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
             esl_seteq<1,2,2>(ap_const_lv2_0, mplane_state.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, grp_nbreadreq_fu_88_p3.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
    esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))))) {
            mplane_state = ap_const_lv2_1;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, grp_nbreadreq_fu_88_p3.read()) && 
                    esl_seteq<1,2,2>(ap_const_lv2_1, mplane_state.read()) && 
                    !((esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
    esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))))) {
            mplane_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
                     !((esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
    esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, mplane_state_load_load_fu_129_p1.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
                     !((esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
    esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, mplane_state_load_load_fu_129_p1.read())))) {
            mplane_state = ap_const_lv2_3;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out1data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out1data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out1data_V_1_vld_out.read()))) {
            out1data_V_1_sel_rd =  (sc_logic) (~out1data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out1data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out1data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out1data_V_1_ack_in.read()))) {
            out1data_V_1_sel_wr =  (sc_logic) (~out1data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out1data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out1data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_2)))) {
            out1data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out1data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
                     esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
                     esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1)))) {
            out1data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out1data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out1data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out1data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out1data_V_1_ack_out.read()))))) {
            out1data_V_1_state = ap_const_lv2_3;
        } else {
            out1data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out2data_V_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out2data_V_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out2data_V_V_1_vld_out.read()))) {
            out2data_V_V_1_sel_rd =  (sc_logic) (~out2data_V_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out2data_V_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out2data_V_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out2data_V_V_1_ack_in.read()))) {
            out2data_V_V_1_sel_wr =  (sc_logic) (~out2data_V_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out2data_V_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out2data_V_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out2data_V_V_1_state.read())))) {
            out2data_V_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out2data_V_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read())))) {
            out2data_V_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out2data_V_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out2data_V_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out2data_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out2data_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out2data_V_V_1_ack_out.read()))))) {
            out2data_V_V_1_state = ap_const_lv2_3;
        } else {
            out2data_V_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && esl_seteq<1,2,2>(ap_const_lv2_0, mplane_state.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, grp_nbreadreq_fu_88_p3.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
    esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))))) {
        datainp1_V = indata_V_V_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, grp_nbreadreq_fu_88_p3.read()) && esl_seteq<1,2,2>(ap_const_lv2_1, mplane_state.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
    esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))))) {
        datainp2_V = indata_V_V_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && esl_seteq<1,2,2>(ap_const_lv2_2, mplane_state_load_reg_256.read()) && !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
    esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))))) {
        l1_inp1_dmac_V = datainp2_V.read().range(51, 4);
        l1_inp1_smac_V = p_Result_s_4_fu_209_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
    esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))))) {
        mplane_state_load_reg_256 = mplane_state.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
    esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))))) {
        mplane_state_load_reg_256_pp0_iter1_reg = mplane_state_load_reg_256.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out1data_V_1_load_A.read())) {
        out1data_V_1_payload_A = out1data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out1data_V_1_load_B.read())) {
        out1data_V_1_payload_B = out1data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out2data_V_V_1_load_A.read())) {
        out2data_V_V_1_payload_A = datainp1_V.read().range(57, 42);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out2data_V_V_1_load_B.read())) {
        out2data_V_V_1_payload_B = datainp1_V.read().range(57, 42);
    }
}

void mparam::thread_ap_CS_iter0_fsm_state1() {
    ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm.read()[0];
}

void mparam::thread_ap_CS_iter1_fsm_state2() {
    ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm.read()[1];
}

void mparam::thread_ap_CS_iter2_fsm_state3() {
    ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm.read()[1];
}

void mparam::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = ((esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read())));
}

void mparam::thread_ap_block_state2_io() {
    ap_block_state2_io = ((esl_seteq<1,2,2>(ap_const_lv2_3, mplane_state_load_reg_256.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_1_ack_in.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, mplane_state_load_reg_256.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_1_ack_in.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, mplane_state_load_reg_256.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_1_ack_in.read())));
}

void mparam::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mparam::thread_ap_block_state3_io() {
    ap_block_state3_io = ((esl_seteq<1,2,2>(ap_const_lv2_3, mplane_state_load_reg_256_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_1_ack_in.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, mplane_state_load_reg_256_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_1_ack_in.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, mplane_state_load_reg_256_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_1_ack_in.read())));
}

void mparam::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
  esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())));
}

void mparam::thread_ap_condition_296() {
    ap_condition_296 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || 
  esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || 
  (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
   esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
  (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
   esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())))));
}

void mparam::thread_ap_predicate_op12_read_state1() {
    ap_predicate_op12_read_state1 = (esl_seteq<1,2,2>(ap_const_lv2_0, mplane_state.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, grp_nbreadreq_fu_88_p3.read()));
}

void mparam::thread_ap_predicate_op8_read_state1() {
    ap_predicate_op8_read_state1 = (esl_seteq<1,1,1>(ap_const_lv1_1, grp_nbreadreq_fu_88_p3.read()) && esl_seteq<1,2,2>(ap_const_lv2_1, mplane_state.read()));
}

void mparam::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void mparam::thread_grp_nbreadreq_fu_88_p3() {
    grp_nbreadreq_fu_88_p3 =  (sc_lv<1>) ((indata_V_V_TVALID.read()));
}

void mparam::thread_indata_V_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_0, mplane_state.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, grp_nbreadreq_fu_88_p3.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, grp_nbreadreq_fu_88_p3.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_1, mplane_state.read())))) {
        indata_V_V_TDATA_blk_n = indata_V_V_TVALID.read();
    } else {
        indata_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void mparam::thread_indata_V_V_TREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read()) && 
          !((esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
    esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read()) && 
          !((esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
    esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))))))) {
        indata_V_V_TREADY = ap_const_logic_1;
    } else {
        indata_V_V_TREADY = ap_const_logic_0;
    }
}

void mparam::thread_mplane_state_load_load_fu_129_p1() {
    mplane_state_load_load_fu_129_p1 = mplane_state.read();
}

void mparam::thread_out1data_V_1_ack_in() {
    out1data_V_1_ack_in = out1data_V_1_state.read()[1];
}

void mparam::thread_out1data_V_1_ack_out() {
    out1data_V_1_ack_out = out1data_V_TREADY.read();
}

void mparam::thread_out1data_V_1_data_in() {
    if (esl_seteq<1,1,1>(ap_condition_296.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,2,2>(ap_const_lv2_2, mplane_state_load_reg_256.read())) {
            out1data_V_1_data_in = tmp1_fu_239_p5.read();
        } else if (esl_seteq<1,2,2>(ap_const_lv2_3, mplane_state_load_reg_256.read())) {
            out1data_V_1_data_in = tmp_17_fu_165_p4.read();
        } else {
            out1data_V_1_data_in = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        out1data_V_1_data_in = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void mparam::thread_out1data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out1data_V_1_sel.read())) {
        out1data_V_1_data_out = out1data_V_1_payload_B.read();
    } else {
        out1data_V_1_data_out = out1data_V_1_payload_A.read();
    }
}

void mparam::thread_out1data_V_1_load_A() {
    out1data_V_1_load_A = (out1data_V_1_state_cmp_full.read() & ~out1data_V_1_sel_wr.read());
}

void mparam::thread_out1data_V_1_load_B() {
    out1data_V_1_load_B = (out1data_V_1_sel_wr.read() & out1data_V_1_state_cmp_full.read());
}

void mparam::thread_out1data_V_1_sel() {
    out1data_V_1_sel = out1data_V_1_sel_rd.read();
}

void mparam::thread_out1data_V_1_state_cmp_full() {
    out1data_V_1_state_cmp_full =  (sc_logic) ((!out1data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out1data_V_1_state.read() != ap_const_lv2_1))[0];
}

void mparam::thread_out1data_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_3, mplane_state_load_reg_256.read()) && 
          !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
    esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_2, mplane_state_load_reg_256.read()) && 
          !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
    esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))))))) {
        out1data_V_1_vld_in = ap_const_logic_1;
    } else {
        out1data_V_1_vld_in = ap_const_logic_0;
    }
}

void mparam::thread_out1data_V_1_vld_out() {
    out1data_V_1_vld_out = out1data_V_1_state.read()[0];
}

void mparam::thread_out1data_V_TDATA() {
    out1data_V_TDATA = out1data_V_1_data_out.read();
}

void mparam::thread_out1data_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_2, mplane_state_load_reg_256.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_2, mplane_state_load_reg_256_pp0_iter1_reg.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_3, mplane_state_load_reg_256.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_3, mplane_state_load_reg_256_pp0_iter1_reg.read())))) {
        out1data_V_TDATA_blk_n = out1data_V_1_state.read()[1];
    } else {
        out1data_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void mparam::thread_out1data_V_TVALID() {
    out1data_V_TVALID = out1data_V_1_state.read()[0];
}

void mparam::thread_out2data_V_V_1_ack_in() {
    out2data_V_V_1_ack_in = out2data_V_V_1_state.read()[1];
}

void mparam::thread_out2data_V_V_1_ack_out() {
    out2data_V_V_1_ack_out = out2data_V_V_TREADY.read();
}

void mparam::thread_out2data_V_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out2data_V_V_1_sel.read())) {
        out2data_V_V_1_data_out = out2data_V_V_1_payload_B.read();
    } else {
        out2data_V_V_1_data_out = out2data_V_V_1_payload_A.read();
    }
}

void mparam::thread_out2data_V_V_1_load_A() {
    out2data_V_V_1_load_A = (out2data_V_V_1_state_cmp_full.read() & ~out2data_V_V_1_sel_wr.read());
}

void mparam::thread_out2data_V_V_1_load_B() {
    out2data_V_V_1_load_B = (out2data_V_V_1_sel_wr.read() & out2data_V_V_1_state_cmp_full.read());
}

void mparam::thread_out2data_V_V_1_sel() {
    out2data_V_V_1_sel = out2data_V_V_1_sel_rd.read();
}

void mparam::thread_out2data_V_V_1_state_cmp_full() {
    out2data_V_V_1_state_cmp_full =  (sc_logic) ((!out2data_V_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out2data_V_V_1_state.read() != ap_const_lv2_1))[0];
}

void mparam::thread_out2data_V_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
         esl_seteq<1,2,2>(ap_const_lv2_2, mplane_state_load_reg_256.read()) && 
         !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
    esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))))) {
        out2data_V_V_1_vld_in = ap_const_logic_1;
    } else {
        out2data_V_V_1_vld_in = ap_const_logic_0;
    }
}

void mparam::thread_out2data_V_V_1_vld_out() {
    out2data_V_V_1_vld_out = out2data_V_V_1_state.read()[0];
}

void mparam::thread_out2data_V_V_TDATA() {
    out2data_V_V_TDATA = out2data_V_V_1_data_out.read();
}

void mparam::thread_out2data_V_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_2, mplane_state_load_reg_256.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_2, mplane_state_load_reg_256_pp0_iter1_reg.read())))) {
        out2data_V_V_TDATA_blk_n = out2data_V_V_1_state.read()[1];
    } else {
        out2data_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void mparam::thread_out2data_V_V_TVALID() {
    out2data_V_V_TVALID = out2data_V_V_1_state.read()[0];
}

void mparam::thread_p_Result_s_4_fu_209_p3() {
    p_Result_s_4_fu_209_p3 = esl_concat<6,42>(p_Result_s_fu_199_p4.read(), trunc_ln647_fu_180_p1.read());
}

void mparam::thread_p_Result_s_fu_199_p4() {
    p_Result_s_fu_199_p4 = datainp2_V.read().range(57, 52);
}

void mparam::thread_state_out_V() {
    state_out_V = esl_zext<8,2>(mplane_state_load_reg_256_pp0_iter1_reg.read());
}

void mparam::thread_tmp1_fu_239_p5() {
    tmp1_fu_239_p5 = esl_concat<70,42>(esl_concat<64,6>(esl_concat<16,48>(ap_const_lv16_AEFE, tmp_V_3_fu_223_p4.read()), p_Result_s_fu_199_p4.read()), trunc_ln647_fu_180_p1.read());
}

void mparam::thread_tmp_17_fu_165_p4() {
    tmp_17_fu_165_p4 = esl_concat<64,48>(esl_concat<16,48>(ap_const_lv16_AEFE, l1_inp1_dmac_V.read()), l1_inp1_smac_V.read());
}

void mparam::thread_tmp_V_3_fu_223_p4() {
    tmp_V_3_fu_223_p4 = datainp2_V.read().range(51, 4);
}

void mparam::thread_trunc_ln647_fu_180_p1() {
    trunc_ln647_fu_180_p1 = datainp1_V.read().range(42-1, 0);
}

void mparam::thread_ap_NS_iter0_fsm() {
    switch (ap_CS_iter0_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
break;
        default : 
            ap_NS_iter0_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

void mparam::thread_ap_NS_iter1_fsm() {
    switch (ap_CS_iter1_fsm.read().to_uint64()) {
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
    esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) && !((esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read()))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            } else if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
    esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) && (esl_seteq<1,1,1>(ap_CS_iter0_fsm_state1.read(), ap_const_logic_0) || 
  (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
   ((esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
     esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || 
    (esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
     esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read()))))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            } else {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            }
            break;
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, indata_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
    esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            } else {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            }
            break;
        default : 
            ap_NS_iter1_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

void mparam::thread_ap_NS_iter2_fsm() {
    switch (ap_CS_iter2_fsm.read().to_uint64()) {
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0) && !(esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
  esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            } else if ((((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || 
  esl_seteq<1,1,1>(ap_CS_iter1_fsm_state2.read(), ap_const_logic_0)) && !(esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
  esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            } else {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            }
            break;
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_1) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, out2data_V_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out1data_V_TREADY.read()) && 
    esl_seteq<1,2,2>(out1data_V_1_state.read(), ap_const_lv2_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, out2data_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, out2data_V_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))))) {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            } else {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            }
            break;
        default : 
            ap_NS_iter2_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

void mparam::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"indata_V_V_TDATA\" :  \"" << indata_V_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"indata_V_V_TVALID\" :  \"" << indata_V_V_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"indata_V_V_TREADY\" :  \"" << indata_V_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out1data_V_TDATA\" :  \"" << out1data_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out1data_V_TVALID\" :  \"" << out1data_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out1data_V_TREADY\" :  \"" << out1data_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out2data_V_V_TDATA\" :  \"" << out2data_V_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out2data_V_V_TVALID\" :  \"" << out2data_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out2data_V_V_TREADY\" :  \"" << out2data_V_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_out_V\" :  \"" << state_out_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

