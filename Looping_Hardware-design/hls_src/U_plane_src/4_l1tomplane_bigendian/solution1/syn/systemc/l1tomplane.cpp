// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "l1tomplane.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic l1tomplane::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic l1tomplane::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> l1tomplane::ap_ST_iter0_fsm_state1 = "1";
const sc_lv<2> l1tomplane::ap_ST_iter1_fsm_state2 = "10";
const sc_lv<2> l1tomplane::ap_ST_iter2_fsm_state3 = "10";
const sc_lv<2> l1tomplane::ap_ST_iter1_fsm_state0 = "1";
const sc_lv<2> l1tomplane::ap_ST_iter2_fsm_state0 = "1";
const bool l1tomplane::ap_const_boolean_1 = true;
const sc_lv<1> l1tomplane::ap_const_lv1_0 = "0";
const sc_lv<1> l1tomplane::ap_const_lv1_1 = "1";
const sc_lv<2> l1tomplane::ap_const_lv2_0 = "00";
const sc_lv<2> l1tomplane::ap_const_lv2_2 = "10";
const sc_lv<2> l1tomplane::ap_const_lv2_3 = "11";
const sc_lv<2> l1tomplane::ap_const_lv2_1 = "1";
const sc_lv<32> l1tomplane::ap_const_lv32_1 = "1";
const sc_lv<32> l1tomplane::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<64> l1tomplane::ap_const_lv64_63F000A350000010 = "110001111110000000000001010001101010000000000000000000000010000";
const sc_lv<64> l1tomplane::ap_const_lv64_604003FFFFFFFFFF = "110000001000000000000111111111111111111111111111111111111111111";
const bool l1tomplane::ap_const_boolean_0 = false;

l1tomplane::l1tomplane(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_iter0_fsm_state1);
    sensitive << ( ap_CS_iter0_fsm );

    SC_METHOD(thread_ap_CS_iter1_fsm_state2);
    sensitive << ( ap_CS_iter1_fsm );

    SC_METHOD(thread_ap_CS_iter2_fsm_state3);
    sensitive << ( ap_CS_iter2_fsm );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( outdata_V_V_1_ack_in );
    sensitive << ( j_V_load_reg_80 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( outdata_V_V_1_ack_in );
    sensitive << ( j_V_load_reg_80_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);
    sensitive << ( outdata_V_V_TREADY );
    sensitive << ( outdata_V_V_1_state );

    SC_METHOD(thread_ap_condition_146);
    sensitive << ( outdata_V_V_TREADY );
    sensitive << ( outdata_V_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_condition_159);
    sensitive << ( outdata_V_V_TREADY );
    sensitive << ( outdata_V_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_j_V_load_load_fu_64_p1);
    sensitive << ( j_V );
    sensitive << ( ap_CS_iter0_fsm_state1 );

    SC_METHOD(thread_outdata_V_V_1_ack_in);
    sensitive << ( outdata_V_V_1_state );

    SC_METHOD(thread_outdata_V_V_1_ack_out);
    sensitive << ( outdata_V_V_TREADY );

    SC_METHOD(thread_outdata_V_V_1_data_in);
    sensitive << ( j_V_load_reg_80 );
    sensitive << ( ap_condition_159 );

    SC_METHOD(thread_outdata_V_V_1_data_out);
    sensitive << ( outdata_V_V_1_payload_A );
    sensitive << ( outdata_V_V_1_payload_B );
    sensitive << ( outdata_V_V_1_sel );

    SC_METHOD(thread_outdata_V_V_1_load_A);
    sensitive << ( outdata_V_V_1_sel_wr );
    sensitive << ( outdata_V_V_1_state_cmp_full );

    SC_METHOD(thread_outdata_V_V_1_load_B);
    sensitive << ( outdata_V_V_1_sel_wr );
    sensitive << ( outdata_V_V_1_state_cmp_full );

    SC_METHOD(thread_outdata_V_V_1_sel);
    sensitive << ( outdata_V_V_1_sel_rd );

    SC_METHOD(thread_outdata_V_V_1_state_cmp_full);
    sensitive << ( outdata_V_V_1_state );

    SC_METHOD(thread_outdata_V_V_1_vld_in);
    sensitive << ( outdata_V_V_TREADY );
    sensitive << ( outdata_V_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( j_V_load_reg_80 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_outdata_V_V_1_vld_out);
    sensitive << ( outdata_V_V_1_state );

    SC_METHOD(thread_outdata_V_V_TDATA);
    sensitive << ( outdata_V_V_1_data_out );

    SC_METHOD(thread_outdata_V_V_TDATA_blk_n);
    sensitive << ( outdata_V_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( j_V_load_reg_80 );
    sensitive << ( j_V_load_reg_80_pp0_iter1_reg );

    SC_METHOD(thread_outdata_V_V_TVALID);
    sensitive << ( outdata_V_V_1_state );

    SC_METHOD(thread_state_out_V);
    sensitive << ( outdata_V_V_TREADY );
    sensitive << ( outdata_V_V_1_state );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( j_V_load_reg_80_pp0_iter1_reg );

    SC_METHOD(thread_ap_NS_iter0_fsm);
    sensitive << ( outdata_V_V_TREADY );
    sensitive << ( outdata_V_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ap_CS_iter0_fsm );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_NS_iter1_fsm);
    sensitive << ( outdata_V_V_TREADY );
    sensitive << ( outdata_V_V_1_state );
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_NS_iter2_fsm);
    sensitive << ( outdata_V_V_TREADY );
    sensitive << ( outdata_V_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    outdata_V_V_1_sel_rd = SC_LOGIC_0;
    outdata_V_V_1_sel_wr = SC_LOGIC_0;
    outdata_V_V_1_state = "00";
    j_V = "01";
    ap_CS_iter1_fsm = "01";
    ap_CS_iter2_fsm = "01";
    ap_CS_iter0_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "l1tomplane_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, outdata_V_V_TDATA, "(port)outdata_V_V_TDATA");
    sc_trace(mVcdFile, outdata_V_V_TVALID, "(port)outdata_V_V_TVALID");
    sc_trace(mVcdFile, outdata_V_V_TREADY, "(port)outdata_V_V_TREADY");
    sc_trace(mVcdFile, state_out_V, "(port)state_out_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, outdata_V_V_1_data_in, "outdata_V_V_1_data_in");
    sc_trace(mVcdFile, outdata_V_V_1_data_out, "outdata_V_V_1_data_out");
    sc_trace(mVcdFile, outdata_V_V_1_vld_in, "outdata_V_V_1_vld_in");
    sc_trace(mVcdFile, outdata_V_V_1_vld_out, "outdata_V_V_1_vld_out");
    sc_trace(mVcdFile, outdata_V_V_1_ack_in, "outdata_V_V_1_ack_in");
    sc_trace(mVcdFile, outdata_V_V_1_ack_out, "outdata_V_V_1_ack_out");
    sc_trace(mVcdFile, outdata_V_V_1_payload_A, "outdata_V_V_1_payload_A");
    sc_trace(mVcdFile, outdata_V_V_1_payload_B, "outdata_V_V_1_payload_B");
    sc_trace(mVcdFile, outdata_V_V_1_sel_rd, "outdata_V_V_1_sel_rd");
    sc_trace(mVcdFile, outdata_V_V_1_sel_wr, "outdata_V_V_1_sel_wr");
    sc_trace(mVcdFile, outdata_V_V_1_sel, "outdata_V_V_1_sel");
    sc_trace(mVcdFile, outdata_V_V_1_load_A, "outdata_V_V_1_load_A");
    sc_trace(mVcdFile, outdata_V_V_1_load_B, "outdata_V_V_1_load_B");
    sc_trace(mVcdFile, outdata_V_V_1_state, "outdata_V_V_1_state");
    sc_trace(mVcdFile, outdata_V_V_1_state_cmp_full, "outdata_V_V_1_state_cmp_full");
    sc_trace(mVcdFile, j_V, "j_V");
    sc_trace(mVcdFile, outdata_V_V_TDATA_blk_n, "outdata_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_iter1_fsm, "ap_CS_iter1_fsm");
    sc_trace(mVcdFile, ap_CS_iter1_fsm_state2, "ap_CS_iter1_fsm_state2");
    sc_trace(mVcdFile, ap_CS_iter2_fsm, "ap_CS_iter2_fsm");
    sc_trace(mVcdFile, ap_CS_iter2_fsm_state3, "ap_CS_iter2_fsm_state3");
    sc_trace(mVcdFile, j_V_load_reg_80, "j_V_load_reg_80");
    sc_trace(mVcdFile, j_V_load_reg_80_pp0_iter1_reg, "j_V_load_reg_80_pp0_iter1_reg");
    sc_trace(mVcdFile, j_V_load_load_fu_64_p1, "j_V_load_load_fu_64_p1");
    sc_trace(mVcdFile, ap_CS_iter0_fsm, "ap_CS_iter0_fsm");
    sc_trace(mVcdFile, ap_CS_iter0_fsm_state1, "ap_CS_iter0_fsm_state1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_NS_iter0_fsm, "ap_NS_iter0_fsm");
    sc_trace(mVcdFile, ap_NS_iter1_fsm, "ap_NS_iter1_fsm");
    sc_trace(mVcdFile, ap_NS_iter2_fsm, "ap_NS_iter2_fsm");
    sc_trace(mVcdFile, ap_condition_146, "ap_condition_146");
    sc_trace(mVcdFile, ap_condition_159, "ap_condition_159");
#endif

    }
    mHdltvinHandle.open("l1tomplane.hdltvin.dat");
    mHdltvoutHandle.open("l1tomplane.hdltvout.dat");
}

l1tomplane::~l1tomplane() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void l1tomplane::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_iter0_fsm = ap_ST_iter0_fsm_state1;
    } else {
        ap_CS_iter0_fsm = ap_NS_iter0_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_iter1_fsm = ap_ST_iter1_fsm_state0;
    } else {
        ap_CS_iter1_fsm = ap_NS_iter1_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_iter2_fsm = ap_ST_iter2_fsm_state0;
    } else {
        ap_CS_iter2_fsm = ap_NS_iter2_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        j_V = ap_const_lv2_1;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_146.read(), ap_const_boolean_1)) {
            if (esl_seteq<1,2,2>(ap_const_lv2_1, j_V_load_load_fu_64_p1.read())) {
                j_V = ap_const_lv2_2;
            } else if (esl_seteq<1,2,2>(ap_const_lv2_2, j_V_load_load_fu_64_p1.read())) {
                j_V = ap_const_lv2_3;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outdata_V_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outdata_V_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outdata_V_V_1_vld_out.read()))) {
            outdata_V_V_1_sel_rd =  (sc_logic) (~outdata_V_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outdata_V_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outdata_V_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outdata_V_V_1_ack_in.read()))) {
            outdata_V_V_1_sel_wr =  (sc_logic) (~outdata_V_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outdata_V_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outdata_V_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_2)))) {
            outdata_V_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outdata_V_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_TREADY.read()) && 
                     esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_TREADY.read()) && 
                     esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_1)))) {
            outdata_V_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outdata_V_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outdata_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outdata_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outdata_V_V_1_ack_out.read()))))) {
            outdata_V_V_1_state = ap_const_lv2_3;
        } else {
            outdata_V_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_1) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_3)) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))))) {
        j_V_load_reg_80 = j_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_1) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_3)) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))))) {
        j_V_load_reg_80_pp0_iter1_reg = j_V_load_reg_80.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outdata_V_V_1_load_A.read())) {
        outdata_V_V_1_payload_A = outdata_V_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outdata_V_V_1_load_B.read())) {
        outdata_V_V_1_payload_B = outdata_V_V_1_data_in.read();
    }
}

void l1tomplane::thread_ap_CS_iter0_fsm_state1() {
    ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm.read()[0];
}

void l1tomplane::thread_ap_CS_iter1_fsm_state2() {
    ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm.read()[1];
}

void l1tomplane::thread_ap_CS_iter2_fsm_state3() {
    ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm.read()[1];
}

void l1tomplane::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void l1tomplane::thread_ap_block_state2_io() {
    ap_block_state2_io = ((esl_seteq<1,2,2>(ap_const_lv2_2, j_V_load_reg_80.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_1_ack_in.read())) || (esl_seteq<1,2,2>(ap_const_lv2_1, j_V_load_reg_80.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_1_ack_in.read())));
}

void l1tomplane::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void l1tomplane::thread_ap_block_state3_io() {
    ap_block_state3_io = ((esl_seteq<1,2,2>(ap_const_lv2_2, j_V_load_reg_80_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_1_ack_in.read())) || (esl_seteq<1,2,2>(ap_const_lv2_1, j_V_load_reg_80_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_1_ack_in.read())));
}

void l1tomplane::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = (esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_1) || (esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_TREADY.read()) && 
  esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_3)));
}

void l1tomplane::thread_ap_condition_146() {
    ap_condition_146 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_1) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_3)) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))));
}

void l1tomplane::thread_ap_condition_159() {
    ap_condition_159 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && (esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_1) || 
  (esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_TREADY.read()) && 
   esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_3)))));
}

void l1tomplane::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void l1tomplane::thread_j_V_load_load_fu_64_p1() {
    j_V_load_load_fu_64_p1 = j_V.read();
}

void l1tomplane::thread_outdata_V_V_1_ack_in() {
    outdata_V_V_1_ack_in = outdata_V_V_1_state.read()[1];
}

void l1tomplane::thread_outdata_V_V_1_ack_out() {
    outdata_V_V_1_ack_out = outdata_V_V_TREADY.read();
}

void l1tomplane::thread_outdata_V_V_1_data_in() {
    if (esl_seteq<1,1,1>(ap_condition_159.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,2,2>(ap_const_lv2_1, j_V_load_reg_80.read())) {
            outdata_V_V_1_data_in = ap_const_lv64_604003FFFFFFFFFF;
        } else if (esl_seteq<1,2,2>(ap_const_lv2_2, j_V_load_reg_80.read())) {
            outdata_V_V_1_data_in = ap_const_lv64_63F000A350000010;
        } else {
            outdata_V_V_1_data_in = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        outdata_V_V_1_data_in = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void l1tomplane::thread_outdata_V_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outdata_V_V_1_sel.read())) {
        outdata_V_V_1_data_out = outdata_V_V_1_payload_B.read();
    } else {
        outdata_V_V_1_data_out = outdata_V_V_1_payload_A.read();
    }
}

void l1tomplane::thread_outdata_V_V_1_load_A() {
    outdata_V_V_1_load_A = (outdata_V_V_1_state_cmp_full.read() & ~outdata_V_V_1_sel_wr.read());
}

void l1tomplane::thread_outdata_V_V_1_load_B() {
    outdata_V_V_1_load_B = (outdata_V_V_1_sel_wr.read() & outdata_V_V_1_state_cmp_full.read());
}

void l1tomplane::thread_outdata_V_V_1_sel() {
    outdata_V_V_1_sel = outdata_V_V_1_sel_rd.read();
}

void l1tomplane::thread_outdata_V_V_1_state_cmp_full() {
    outdata_V_V_1_state_cmp_full =  (sc_logic) ((!outdata_V_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outdata_V_V_1_state.read() != ap_const_lv2_1))[0];
}

void l1tomplane::thread_outdata_V_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_2, j_V_load_reg_80.read()) && 
          !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_1) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_3)) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_1, j_V_load_reg_80.read()) && 
          !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_1) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_3)) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))))))) {
        outdata_V_V_1_vld_in = ap_const_logic_1;
    } else {
        outdata_V_V_1_vld_in = ap_const_logic_0;
    }
}

void l1tomplane::thread_outdata_V_V_1_vld_out() {
    outdata_V_V_1_vld_out = outdata_V_V_1_state.read()[0];
}

void l1tomplane::thread_outdata_V_V_TDATA() {
    outdata_V_V_TDATA = outdata_V_V_1_data_out.read();
}

void l1tomplane::thread_outdata_V_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_1, j_V_load_reg_80.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_1, j_V_load_reg_80_pp0_iter1_reg.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_2, j_V_load_reg_80.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_2, j_V_load_reg_80_pp0_iter1_reg.read())))) {
        outdata_V_V_TDATA_blk_n = outdata_V_V_1_state.read()[1];
    } else {
        outdata_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void l1tomplane::thread_outdata_V_V_TVALID() {
    outdata_V_V_TVALID = outdata_V_V_1_state.read()[0];
}

void l1tomplane::thread_state_out_V() {
    state_out_V = j_V_load_reg_80_pp0_iter1_reg.read();
}

void l1tomplane::thread_ap_NS_iter0_fsm() {
    switch (ap_CS_iter0_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
break;
        default : 
            ap_NS_iter0_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

void l1tomplane::thread_ap_NS_iter1_fsm() {
    switch (ap_CS_iter1_fsm.read().to_uint64()) {
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_1) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_3)) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            } else if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_1) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_3)) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) && esl_seteq<1,1,1>(ap_CS_iter0_fsm_state1.read(), ap_const_logic_0))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            } else {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            }
            break;
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_1) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_3)) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            } else {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            }
            break;
        default : 
            ap_NS_iter1_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

void l1tomplane::thread_ap_NS_iter2_fsm() {
    switch (ap_CS_iter2_fsm.read().to_uint64()) {
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0) && !(esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_1) || (esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_TREADY.read()) && 
  esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_3)) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            } else if ((((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || 
  esl_seteq<1,1,1>(ap_CS_iter1_fsm_state2.read(), ap_const_logic_0)) && !(esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_1) || (esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_TREADY.read()) && 
  esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_3)) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            } else {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            }
            break;
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_1) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outdata_V_V_TREADY.read()) && 
    esl_seteq<1,2,2>(outdata_V_V_1_state.read(), ap_const_lv2_3)) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))))) {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            } else {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            }
            break;
        default : 
            ap_NS_iter2_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

void l1tomplane::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"outdata_V_V_TDATA\" :  \"" << outdata_V_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outdata_V_V_TVALID\" :  \"" << outdata_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outdata_V_V_TREADY\" :  \"" << outdata_V_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_out_V\" :  \"" << state_out_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

