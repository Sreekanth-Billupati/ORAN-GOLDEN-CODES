// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _l1tomplane_HH_
#define _l1tomplane_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct l1tomplane : public sc_module {
    // Port declarations 6
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_lv<64> > outdata_V_V_TDATA;
    sc_out< sc_logic > outdata_V_V_TVALID;
    sc_in< sc_logic > outdata_V_V_TREADY;
    sc_out< sc_lv<2> > state_out_V;


    // Module declarations
    l1tomplane(sc_module_name name);
    SC_HAS_PROCESS(l1tomplane);

    ~l1tomplane();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<64> > outdata_V_V_1_data_in;
    sc_signal< sc_lv<64> > outdata_V_V_1_data_out;
    sc_signal< sc_logic > outdata_V_V_1_vld_in;
    sc_signal< sc_logic > outdata_V_V_1_vld_out;
    sc_signal< sc_logic > outdata_V_V_1_ack_in;
    sc_signal< sc_logic > outdata_V_V_1_ack_out;
    sc_signal< sc_lv<64> > outdata_V_V_1_payload_A;
    sc_signal< sc_lv<64> > outdata_V_V_1_payload_B;
    sc_signal< sc_logic > outdata_V_V_1_sel_rd;
    sc_signal< sc_logic > outdata_V_V_1_sel_wr;
    sc_signal< sc_logic > outdata_V_V_1_sel;
    sc_signal< sc_logic > outdata_V_V_1_load_A;
    sc_signal< sc_logic > outdata_V_V_1_load_B;
    sc_signal< sc_lv<2> > outdata_V_V_1_state;
    sc_signal< sc_logic > outdata_V_V_1_state_cmp_full;
    sc_signal< sc_lv<2> > j_V;
    sc_signal< sc_logic > outdata_V_V_TDATA_blk_n;
    sc_signal< sc_lv<2> > ap_CS_iter1_fsm;
    sc_signal< sc_logic > ap_CS_iter1_fsm_state2;
    sc_signal< sc_lv<2> > ap_CS_iter2_fsm;
    sc_signal< sc_logic > ap_CS_iter2_fsm_state3;
    sc_signal< sc_lv<2> > j_V_load_reg_80;
    sc_signal< sc_lv<2> > j_V_load_reg_80_pp0_iter1_reg;
    sc_signal< sc_lv<2> > j_V_load_load_fu_64_p1;
    sc_signal< sc_lv<1> > ap_CS_iter0_fsm;
    sc_signal< sc_logic > ap_CS_iter0_fsm_state1;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< sc_lv<1> > ap_NS_iter0_fsm;
    sc_signal< sc_lv<2> > ap_NS_iter1_fsm;
    sc_signal< sc_lv<2> > ap_NS_iter2_fsm;
    sc_signal< bool > ap_condition_146;
    sc_signal< bool > ap_condition_159;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_iter0_fsm_state1;
    static const sc_lv<2> ap_ST_iter1_fsm_state2;
    static const sc_lv<2> ap_ST_iter2_fsm_state3;
    static const sc_lv<2> ap_ST_iter1_fsm_state0;
    static const sc_lv<2> ap_ST_iter2_fsm_state0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<64> ap_const_lv64_63F000A350000010;
    static const sc_lv<64> ap_const_lv64_604003FFFFFFFFFF;
    static const bool ap_const_boolean_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_iter0_fsm_state1();
    void thread_ap_CS_iter1_fsm_state2();
    void thread_ap_CS_iter2_fsm_state3();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_io();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_condition_146();
    void thread_ap_condition_159();
    void thread_ap_rst_n_inv();
    void thread_j_V_load_load_fu_64_p1();
    void thread_outdata_V_V_1_ack_in();
    void thread_outdata_V_V_1_ack_out();
    void thread_outdata_V_V_1_data_in();
    void thread_outdata_V_V_1_data_out();
    void thread_outdata_V_V_1_load_A();
    void thread_outdata_V_V_1_load_B();
    void thread_outdata_V_V_1_sel();
    void thread_outdata_V_V_1_state_cmp_full();
    void thread_outdata_V_V_1_vld_in();
    void thread_outdata_V_V_1_vld_out();
    void thread_outdata_V_V_TDATA();
    void thread_outdata_V_V_TDATA_blk_n();
    void thread_outdata_V_V_TVALID();
    void thread_state_out_V();
    void thread_ap_NS_iter0_fsm();
    void thread_ap_NS_iter1_fsm();
    void thread_ap_NS_iter2_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
