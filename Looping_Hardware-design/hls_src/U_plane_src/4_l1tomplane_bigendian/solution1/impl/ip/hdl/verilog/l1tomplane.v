// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="l1tomplane,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.656000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=143,HLS_SYN_LUT=109,HLS_VERSION=2019_1}" *)

module l1tomplane (
        ap_clk,
        ap_rst_n,
        outdata_V_V_TDATA,
        outdata_V_V_TVALID,
        outdata_V_V_TREADY,
        state_out_V
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst_n;
output  [63:0] outdata_V_V_TDATA;
output   outdata_V_V_TVALID;
input   outdata_V_V_TREADY;
output  [1:0] state_out_V;

 reg    ap_rst_n_inv;
reg   [63:0] outdata_V_V_1_data_in;
reg   [63:0] outdata_V_V_1_data_out;
reg    outdata_V_V_1_vld_in;
wire    outdata_V_V_1_vld_out;
wire    outdata_V_V_1_ack_in;
wire    outdata_V_V_1_ack_out;
reg   [63:0] outdata_V_V_1_payload_A;
reg   [63:0] outdata_V_V_1_payload_B;
reg    outdata_V_V_1_sel_rd;
reg    outdata_V_V_1_sel_wr;
wire    outdata_V_V_1_sel;
wire    outdata_V_V_1_load_A;
wire    outdata_V_V_1_load_B;
reg   [1:0] outdata_V_V_1_state;
wire    outdata_V_V_1_state_cmp_full;
reg   [1:0] j_V;
reg    outdata_V_V_TDATA_blk_n;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state2;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state3;
reg   [1:0] j_V_load_reg_80;
reg   [1:0] j_V_load_reg_80_pp0_iter1_reg;
wire   [1:0] j_V_load_load_fu_64_p1;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_condition_146;
reg    ap_condition_159;

// power-on initialization
initial begin
#0 outdata_V_V_1_sel_rd = 1'b0;
#0 outdata_V_V_1_sel_wr = 1'b0;
#0 outdata_V_V_1_state = 2'd0;
#0 j_V = 2'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ap_CS_iter2_fsm = 2'd1;
#0 ap_CS_iter0_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        j_V <= 2'd1;
    end else begin
        if ((1'b1 == ap_condition_146)) begin
            if ((j_V_load_load_fu_64_p1 == 2'd1)) begin
                j_V <= 2'd2;
            end else if ((j_V_load_load_fu_64_p1 == 2'd2)) begin
                j_V <= 2'd3;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outdata_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outdata_V_V_1_ack_out == 1'b1) & (outdata_V_V_1_vld_out == 1'b1))) begin
            outdata_V_V_1_sel_rd <= ~outdata_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outdata_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outdata_V_V_1_ack_in == 1'b1) & (outdata_V_V_1_vld_in == 1'b1))) begin
            outdata_V_V_1_sel_wr <= ~outdata_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outdata_V_V_1_state <= 2'd0;
    end else begin
        if ((((outdata_V_V_1_vld_in == 1'b0) & (outdata_V_V_1_state == 2'd2)) | ((outdata_V_V_1_vld_in == 1'b0) & (outdata_V_V_1_ack_out == 1'b1) & (outdata_V_V_1_state == 2'd3)))) begin
            outdata_V_V_1_state <= 2'd2;
        end else if ((((outdata_V_V_TREADY == 1'b0) & (outdata_V_V_1_state == 2'd1)) | ((outdata_V_V_TREADY == 1'b0) & (outdata_V_V_1_vld_in == 1'b1) & (outdata_V_V_1_state == 2'd3)))) begin
            outdata_V_V_1_state <= 2'd1;
        end else if (((~((outdata_V_V_1_vld_in == 1'b0) & (outdata_V_V_1_ack_out == 1'b1)) & ~((outdata_V_V_TREADY == 1'b0) & (outdata_V_V_1_vld_in == 1'b1)) & (outdata_V_V_1_state == 2'd3)) | ((outdata_V_V_1_ack_out == 1'b1) & (outdata_V_V_1_state == 2'd1)) | ((outdata_V_V_1_vld_in == 1'b1) & (outdata_V_V_1_state == 2'd2)))) begin
            outdata_V_V_1_state <= 2'd3;
        end else begin
            outdata_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (outdata_V_V_1_state == 2'd1) | ((outdata_V_V_TREADY == 1'b0) & (outdata_V_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        j_V_load_reg_80 <= j_V;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (outdata_V_V_1_state == 2'd1) | ((outdata_V_V_TREADY == 1'b0) & (outdata_V_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        j_V_load_reg_80_pp0_iter1_reg <= j_V_load_reg_80;
    end
end

always @ (posedge ap_clk) begin
    if ((outdata_V_V_1_load_A == 1'b1)) begin
        outdata_V_V_1_payload_A <= outdata_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outdata_V_V_1_load_B == 1'b1)) begin
        outdata_V_V_1_payload_B <= outdata_V_V_1_data_in;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_159)) begin
        if ((j_V_load_reg_80 == 2'd1)) begin
            outdata_V_V_1_data_in = 64'd6935547824197074943;
        end else if ((j_V_load_reg_80 == 2'd2)) begin
            outdata_V_V_1_data_in = 64'd7201256505587269648;
        end else begin
            outdata_V_V_1_data_in = 'bx;
        end
    end else begin
        outdata_V_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outdata_V_V_1_sel == 1'b1)) begin
        outdata_V_V_1_data_out = outdata_V_V_1_payload_B;
    end else begin
        outdata_V_V_1_data_out = outdata_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (outdata_V_V_1_state == 2'd1) | ((outdata_V_V_TREADY == 1'b0) & (outdata_V_V_1_state == 2'd3))))) & (j_V_load_reg_80 == 2'd2) & (1'b1 == ap_CS_iter1_fsm_state2)) | (~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (outdata_V_V_1_state == 2'd1) | ((outdata_V_V_TREADY == 1'b0) & (outdata_V_V_1_state == 2'd3))))) & (j_V_load_reg_80 == 2'd1) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        outdata_V_V_1_vld_in = 1'b1;
    end else begin
        outdata_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((j_V_load_reg_80 == 2'd2) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((j_V_load_reg_80 == 2'd1) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((j_V_load_reg_80_pp0_iter1_reg == 2'd2) & (1'b1 == ap_CS_iter2_fsm_state3)) | ((j_V_load_reg_80_pp0_iter1_reg == 2'd1) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
        outdata_V_V_TDATA_blk_n = outdata_V_V_1_state[1'd1];
    end else begin
        outdata_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (outdata_V_V_1_state == 2'd1) | ((outdata_V_V_TREADY == 1'b0) & (outdata_V_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (outdata_V_V_1_state == 2'd1) | ((outdata_V_V_TREADY == 1'b0) & (outdata_V_V_1_state == 2'd3))))) & (1'b0 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~(((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (outdata_V_V_1_state == 2'd1) | ((outdata_V_V_TREADY == 1'b0) & (outdata_V_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_block_state3_io) | (outdata_V_V_1_state == 2'd1) | ((outdata_V_V_TREADY == 1'b0) & (outdata_V_V_1_state == 2'd3))) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b1 == ap_block_state3_io) | (outdata_V_V_1_state == 2'd1) | ((outdata_V_V_TREADY == 1'b0) & (outdata_V_V_1_state == 2'd3))) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (outdata_V_V_1_state == 2'd1) | ((outdata_V_V_TREADY == 1'b0) & (outdata_V_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = (((outdata_V_V_1_ack_in == 1'b0) & (j_V_load_reg_80 == 2'd2)) | ((outdata_V_V_1_ack_in == 1'b0) & (j_V_load_reg_80 == 2'd1)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = (((outdata_V_V_1_ack_in == 1'b0) & (j_V_load_reg_80_pp0_iter1_reg == 2'd2)) | ((outdata_V_V_1_ack_in == 1'b0) & (j_V_load_reg_80_pp0_iter1_reg == 2'd1)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((outdata_V_V_1_state == 2'd1) | ((outdata_V_V_TREADY == 1'b0) & (outdata_V_V_1_state == 2'd3)));
end

always @ (*) begin
    ap_condition_146 = (~(((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (outdata_V_V_1_state == 2'd1) | ((outdata_V_V_TREADY == 1'b0) & (outdata_V_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

always @ (*) begin
    ap_condition_159 = (~((1'b1 == ap_CS_iter2_fsm_state3) & ((outdata_V_V_1_state == 2'd1) | ((outdata_V_V_TREADY == 1'b0) & (outdata_V_V_1_state == 2'd3)))) & (1'b1 == ap_CS_iter1_fsm_state2));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign j_V_load_load_fu_64_p1 = j_V;

assign outdata_V_V_1_ack_in = outdata_V_V_1_state[1'd1];

assign outdata_V_V_1_ack_out = outdata_V_V_TREADY;

assign outdata_V_V_1_load_A = (outdata_V_V_1_state_cmp_full & ~outdata_V_V_1_sel_wr);

assign outdata_V_V_1_load_B = (outdata_V_V_1_state_cmp_full & outdata_V_V_1_sel_wr);

assign outdata_V_V_1_sel = outdata_V_V_1_sel_rd;

assign outdata_V_V_1_state_cmp_full = ((outdata_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outdata_V_V_1_vld_out = outdata_V_V_1_state[1'd0];

assign outdata_V_V_TDATA = outdata_V_V_1_data_out;

assign outdata_V_V_TVALID = outdata_V_V_1_state[1'd0];

assign state_out_V = j_V_load_reg_80_pp0_iter1_reg;

endmodule //l1tomplane
