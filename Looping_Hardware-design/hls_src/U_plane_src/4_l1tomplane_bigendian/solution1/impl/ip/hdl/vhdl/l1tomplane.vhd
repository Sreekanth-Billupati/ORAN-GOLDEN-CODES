-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity l1tomplane is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    outdata_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    outdata_V_V_TVALID : OUT STD_LOGIC;
    outdata_V_V_TREADY : IN STD_LOGIC;
    state_out_V : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of l1tomplane is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "l1tomplane,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.656000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=143,HLS_SYN_LUT=109,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_iter0_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_ST_iter1_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_iter2_fsm_state3 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_iter1_fsm_state0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_iter2_fsm_state0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_63F000A350000010 : STD_LOGIC_VECTOR (63 downto 0) := "0110001111110000000000001010001101010000000000000000000000010000";
    constant ap_const_lv64_604003FFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0110000001000000000000111111111111111111111111111111111111111111";
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_rst_n_inv : STD_LOGIC;
    signal outdata_V_V_1_data_in : STD_LOGIC_VECTOR (63 downto 0);
    signal outdata_V_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal outdata_V_V_1_vld_in : STD_LOGIC;
    signal outdata_V_V_1_vld_out : STD_LOGIC;
    signal outdata_V_V_1_ack_in : STD_LOGIC;
    signal outdata_V_V_1_ack_out : STD_LOGIC;
    signal outdata_V_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal outdata_V_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal outdata_V_V_1_sel_rd : STD_LOGIC := '0';
    signal outdata_V_V_1_sel_wr : STD_LOGIC := '0';
    signal outdata_V_V_1_sel : STD_LOGIC;
    signal outdata_V_V_1_load_A : STD_LOGIC;
    signal outdata_V_V_1_load_B : STD_LOGIC;
    signal outdata_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outdata_V_V_1_state_cmp_full : STD_LOGIC;
    signal j_V : STD_LOGIC_VECTOR (1 downto 0) := "01";
    signal outdata_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    signal ap_CS_iter1_fsm_state2 : STD_LOGIC;
    signal ap_CS_iter2_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    signal ap_CS_iter2_fsm_state3 : STD_LOGIC;
    signal j_V_load_reg_80 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_V_load_reg_80_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal j_V_load_load_fu_64_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal ap_CS_iter0_fsm_state1 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_NS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_iter2_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_condition_146 : BOOLEAN;
    signal ap_condition_159 : BOOLEAN;


begin




    ap_CS_iter0_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            else
                ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
            end if;
        end if;
    end process;


    ap_CS_iter1_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
            else
                ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
            end if;
        end if;
    end process;


    ap_CS_iter2_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
            else
                ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
            end if;
        end if;
    end process;


    j_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                j_V <= ap_const_lv2_1;
            else
                if ((ap_const_boolean_1 = ap_condition_146)) then
                    if ((j_V_load_load_fu_64_p1 = ap_const_lv2_1)) then 
                        j_V <= ap_const_lv2_2;
                    elsif ((j_V_load_load_fu_64_p1 = ap_const_lv2_2)) then 
                        j_V <= ap_const_lv2_3;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    outdata_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outdata_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outdata_V_V_1_ack_out = ap_const_logic_1) and (outdata_V_V_1_vld_out = ap_const_logic_1))) then 
                                        outdata_V_V_1_sel_rd <= not(outdata_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outdata_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outdata_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outdata_V_V_1_ack_in = ap_const_logic_1) and (outdata_V_V_1_vld_in = ap_const_logic_1))) then 
                                        outdata_V_V_1_sel_wr <= not(outdata_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outdata_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outdata_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((outdata_V_V_1_vld_in = ap_const_logic_0) and (outdata_V_V_1_state = ap_const_lv2_2)) or ((outdata_V_V_1_vld_in = ap_const_logic_0) and (outdata_V_V_1_ack_out = ap_const_logic_1) and (outdata_V_V_1_state = ap_const_lv2_3)))) then 
                    outdata_V_V_1_state <= ap_const_lv2_2;
                elsif ((((outdata_V_V_TREADY = ap_const_logic_0) and (outdata_V_V_1_state = ap_const_lv2_1)) or ((outdata_V_V_TREADY = ap_const_logic_0) and (outdata_V_V_1_vld_in = ap_const_logic_1) and (outdata_V_V_1_state = ap_const_lv2_3)))) then 
                    outdata_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outdata_V_V_1_vld_in = ap_const_logic_0) and (outdata_V_V_1_ack_out = ap_const_logic_1))) and not(((outdata_V_V_TREADY = ap_const_logic_0) and (outdata_V_V_1_vld_in = ap_const_logic_1))) and (outdata_V_V_1_state = ap_const_lv2_3)) or ((outdata_V_V_1_ack_out = ap_const_logic_1) and (outdata_V_V_1_state = ap_const_lv2_1)) or ((outdata_V_V_1_vld_in = ap_const_logic_1) and (outdata_V_V_1_state = ap_const_lv2_2)))) then 
                    outdata_V_V_1_state <= ap_const_lv2_3;
                else 
                    outdata_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_const_boolean_1 = ap_block_state2_io)) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ap_const_boolean_1 = ap_block_state3_io) or (outdata_V_V_1_state = ap_const_lv2_1) or ((outdata_V_V_TREADY = ap_const_logic_0) and (outdata_V_V_1_state = ap_const_lv2_3)))))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                j_V_load_reg_80 <= j_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ap_const_boolean_1 = ap_block_state3_io) or (outdata_V_V_1_state = ap_const_lv2_1) or ((outdata_V_V_TREADY = ap_const_logic_0) and (outdata_V_V_1_state = ap_const_lv2_3)))))) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then
                j_V_load_reg_80_pp0_iter1_reg <= j_V_load_reg_80;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outdata_V_V_1_load_A = ap_const_logic_1)) then
                outdata_V_V_1_payload_A <= outdata_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outdata_V_V_1_load_B = ap_const_logic_1)) then
                outdata_V_V_1_payload_B <= outdata_V_V_1_data_in;
            end if;
        end if;
    end process;

    ap_NS_iter0_fsm_assign_proc : process (outdata_V_V_TREADY, outdata_V_V_1_state, ap_CS_iter1_fsm_state2, ap_CS_iter2_fsm_state3, ap_CS_iter0_fsm, ap_block_state2_io, ap_block_state3_io)
    begin
        case ap_CS_iter0_fsm is
            when ap_ST_iter0_fsm_state1 => 
                ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            when others =>  
                ap_NS_iter0_fsm <= "X";
        end case;
    end process;

    ap_NS_iter1_fsm_assign_proc : process (outdata_V_V_TREADY, outdata_V_V_1_state, ap_CS_iter1_fsm, ap_CS_iter1_fsm_state2, ap_CS_iter2_fsm_state3, ap_CS_iter0_fsm_state1, ap_block_state2_io, ap_block_state3_io)
    begin
        case ap_CS_iter1_fsm is
            when ap_ST_iter1_fsm_state2 => 
                if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ap_const_boolean_1 = ap_block_state3_io) or (outdata_V_V_1_state = ap_const_lv2_1) or ((outdata_V_V_TREADY = ap_const_logic_0) and (outdata_V_V_1_state = ap_const_lv2_3)))))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                elsif ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ap_const_boolean_1 = ap_block_state3_io) or (outdata_V_V_1_state = ap_const_lv2_1) or ((outdata_V_V_TREADY = ap_const_logic_0) and (outdata_V_V_1_state = ap_const_lv2_3)))))) and (ap_const_logic_0 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                end if;
            when ap_ST_iter1_fsm_state0 => 
                if ((not((((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_const_boolean_1 = ap_block_state2_io)) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ap_const_boolean_1 = ap_block_state3_io) or (outdata_V_V_1_state = ap_const_lv2_1) or ((outdata_V_V_TREADY = ap_const_logic_0) and (outdata_V_V_1_state = ap_const_lv2_3)))))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                end if;
            when others =>  
                ap_NS_iter1_fsm <= "XX";
        end case;
    end process;

    ap_NS_iter2_fsm_assign_proc : process (outdata_V_V_TREADY, outdata_V_V_1_state, ap_CS_iter1_fsm_state2, ap_CS_iter2_fsm, ap_CS_iter2_fsm_state3, ap_block_state2_io, ap_block_state3_io)
    begin
        case ap_CS_iter2_fsm is
            when ap_ST_iter2_fsm_state3 => 
                if ((not(((ap_const_boolean_1 = ap_block_state3_io) or (outdata_V_V_1_state = ap_const_lv2_1) or ((outdata_V_V_TREADY = ap_const_logic_0) and (outdata_V_V_1_state = ap_const_lv2_3)))) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then
                    ap_NS_iter2_fsm <= ap_ST_iter2_fsm_state3;
                elsif ((not(((ap_const_boolean_1 = ap_block_state3_io) or (outdata_V_V_1_state = ap_const_lv2_1) or ((outdata_V_V_TREADY = ap_const_logic_0) and (outdata_V_V_1_state = ap_const_lv2_3)))) and ((ap_const_logic_0 = ap_CS_iter1_fsm_state2) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_const_boolean_1 = ap_block_state2_io))))) then
                    ap_NS_iter2_fsm <= ap_ST_iter2_fsm_state0;
                else
                    ap_NS_iter2_fsm <= ap_ST_iter2_fsm_state3;
                end if;
            when ap_ST_iter2_fsm_state0 => 
                if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ap_const_boolean_1 = ap_block_state3_io) or (outdata_V_V_1_state = ap_const_lv2_1) or ((outdata_V_V_TREADY = ap_const_logic_0) and (outdata_V_V_1_state = ap_const_lv2_3)))))) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then
                    ap_NS_iter2_fsm <= ap_ST_iter2_fsm_state3;
                else
                    ap_NS_iter2_fsm <= ap_ST_iter2_fsm_state0;
                end if;
            when others =>  
                ap_NS_iter2_fsm <= "XX";
        end case;
    end process;
    ap_CS_iter0_fsm_state1 <= ap_CS_iter0_fsm(0);
    ap_CS_iter1_fsm_state2 <= ap_CS_iter1_fsm(1);
    ap_CS_iter2_fsm_state3 <= ap_CS_iter2_fsm(1);
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(outdata_V_V_1_ack_in, j_V_load_reg_80)
    begin
                ap_block_state2_io <= (((outdata_V_V_1_ack_in = ap_const_logic_0) and (j_V_load_reg_80 = ap_const_lv2_2)) or ((outdata_V_V_1_ack_in = ap_const_logic_0) and (j_V_load_reg_80 = ap_const_lv2_1)));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(outdata_V_V_1_ack_in, j_V_load_reg_80_pp0_iter1_reg)
    begin
                ap_block_state3_io <= (((outdata_V_V_1_ack_in = ap_const_logic_0) and (j_V_load_reg_80_pp0_iter1_reg = ap_const_lv2_2)) or ((outdata_V_V_1_ack_in = ap_const_logic_0) and (j_V_load_reg_80_pp0_iter1_reg = ap_const_lv2_1)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(outdata_V_V_TREADY, outdata_V_V_1_state)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((outdata_V_V_1_state = ap_const_lv2_1) or ((outdata_V_V_TREADY = ap_const_logic_0) and (outdata_V_V_1_state = ap_const_lv2_3)));
    end process;


    ap_condition_146_assign_proc : process(outdata_V_V_TREADY, outdata_V_V_1_state, ap_CS_iter1_fsm_state2, ap_CS_iter2_fsm_state3, ap_CS_iter0_fsm_state1, ap_block_state2_io, ap_block_state3_io)
    begin
                ap_condition_146 <= (not((((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_const_boolean_1 = ap_block_state2_io)) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ap_const_boolean_1 = ap_block_state3_io) or (outdata_V_V_1_state = ap_const_lv2_1) or ((outdata_V_V_TREADY = ap_const_logic_0) and (outdata_V_V_1_state = ap_const_lv2_3)))))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1));
    end process;


    ap_condition_159_assign_proc : process(outdata_V_V_TREADY, outdata_V_V_1_state, ap_CS_iter1_fsm_state2, ap_CS_iter2_fsm_state3)
    begin
                ap_condition_159 <= (not(((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((outdata_V_V_1_state = ap_const_lv2_1) or ((outdata_V_V_TREADY = ap_const_logic_0) and (outdata_V_V_1_state = ap_const_lv2_3))))) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    j_V_load_load_fu_64_p1 <= j_V;
    outdata_V_V_1_ack_in <= outdata_V_V_1_state(1);
    outdata_V_V_1_ack_out <= outdata_V_V_TREADY;

    outdata_V_V_1_data_in_assign_proc : process(j_V_load_reg_80, ap_condition_159)
    begin
        if ((ap_const_boolean_1 = ap_condition_159)) then
            if ((j_V_load_reg_80 = ap_const_lv2_1)) then 
                outdata_V_V_1_data_in <= ap_const_lv64_604003FFFFFFFFFF;
            elsif ((j_V_load_reg_80 = ap_const_lv2_2)) then 
                outdata_V_V_1_data_in <= ap_const_lv64_63F000A350000010;
            else 
                outdata_V_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            outdata_V_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    outdata_V_V_1_data_out_assign_proc : process(outdata_V_V_1_payload_A, outdata_V_V_1_payload_B, outdata_V_V_1_sel)
    begin
        if ((outdata_V_V_1_sel = ap_const_logic_1)) then 
            outdata_V_V_1_data_out <= outdata_V_V_1_payload_B;
        else 
            outdata_V_V_1_data_out <= outdata_V_V_1_payload_A;
        end if; 
    end process;

    outdata_V_V_1_load_A <= (outdata_V_V_1_state_cmp_full and not(outdata_V_V_1_sel_wr));
    outdata_V_V_1_load_B <= (outdata_V_V_1_state_cmp_full and outdata_V_V_1_sel_wr);
    outdata_V_V_1_sel <= outdata_V_V_1_sel_rd;
    outdata_V_V_1_state_cmp_full <= '0' when (outdata_V_V_1_state = ap_const_lv2_1) else '1';

    outdata_V_V_1_vld_in_assign_proc : process(outdata_V_V_TREADY, outdata_V_V_1_state, ap_CS_iter1_fsm_state2, ap_CS_iter2_fsm_state3, j_V_load_reg_80, ap_block_state2_io, ap_block_state3_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state2_io) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ap_const_boolean_1 = ap_block_state3_io) or (outdata_V_V_1_state = ap_const_lv2_1) or ((outdata_V_V_TREADY = ap_const_logic_0) and (outdata_V_V_1_state = ap_const_lv2_3)))))) and (j_V_load_reg_80 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)) or (not(((ap_const_boolean_1 = ap_block_state2_io) or ((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and ((ap_const_boolean_1 = ap_block_state3_io) or (outdata_V_V_1_state = ap_const_lv2_1) or ((outdata_V_V_TREADY = ap_const_logic_0) and (outdata_V_V_1_state = ap_const_lv2_3)))))) and (j_V_load_reg_80 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)))) then 
            outdata_V_V_1_vld_in <= ap_const_logic_1;
        else 
            outdata_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outdata_V_V_1_vld_out <= outdata_V_V_1_state(0);
    outdata_V_V_TDATA <= outdata_V_V_1_data_out;

    outdata_V_V_TDATA_blk_n_assign_proc : process(outdata_V_V_1_state, ap_CS_iter1_fsm_state2, ap_CS_iter2_fsm_state3, j_V_load_reg_80, j_V_load_reg_80_pp0_iter1_reg)
    begin
        if ((((j_V_load_reg_80 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)) or ((j_V_load_reg_80 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)) or ((j_V_load_reg_80_pp0_iter1_reg = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_iter2_fsm_state3)) or ((j_V_load_reg_80_pp0_iter1_reg = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_iter2_fsm_state3)))) then 
            outdata_V_V_TDATA_blk_n <= outdata_V_V_1_state(1);
        else 
            outdata_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outdata_V_V_TVALID <= outdata_V_V_1_state(0);
    state_out_V <= j_V_load_reg_80_pp0_iter1_reg;
end behav;
