// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Userplane_L1_Data_Gen,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.280750,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=185,HLS_SYN_LUT=433,HLS_VERSION=2019_1}" *)

module Userplane_L1_Data_Gen (
        ap_clk,
        ap_rst_n,
        L1_data_out_V_TDATA,
        L1_data_out_V_TVALID,
        L1_data_out_V_TREADY,
        slot_in_V,
        frameID_in_V,
        st_out_V,
        symbol_number_V
);

parameter    ap_ST_iter0_fsm_state1 = 1'd0;
parameter    ap_ST_iter1_fsm_state2 = 1'd0;
parameter    ap_ST_iter2_fsm_state3 = 1'd0;
parameter    ap_ST_iter1_fsm_state0 = 1'd1;
parameter    ap_ST_iter2_fsm_state0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
output  [63:0] L1_data_out_V_TDATA;
output   L1_data_out_V_TVALID;
input   L1_data_out_V_TREADY;
input  [5:0] slot_in_V;
input  [7:0] frameID_in_V;
output  [3:0] st_out_V;
output  [5:0] symbol_number_V;

 reg    ap_rst_n_inv;
reg   [63:0] L1_data_out_V_1_data_in;
reg   [63:0] L1_data_out_V_1_data_out;
reg    L1_data_out_V_1_vld_in;
wire    L1_data_out_V_1_vld_out;
wire    L1_data_out_V_1_ack_in;
wire    L1_data_out_V_1_ack_out;
reg   [63:0] L1_data_out_V_1_payload_A;
reg   [63:0] L1_data_out_V_1_payload_B;
reg    L1_data_out_V_1_sel_rd;
reg    L1_data_out_V_1_sel_wr;
wire    L1_data_out_V_1_sel;
wire    L1_data_out_V_1_load_A;
wire    L1_data_out_V_1_load_B;
reg   [1:0] L1_data_out_V_1_state;
wire    L1_data_out_V_1_state_cmp_full;
reg   [1:0] data_src_state;
reg   [5:0] sym_count_V;
reg   [3:0] subframeID_val_V;
reg   [3:0] section_count_V;
reg    L1_data_out_V_TDATA_blk_n;
reg   [0:0] ap_CS_iter1_fsm;
reg   [0:0] ap_CS_iter2_fsm;
reg   [1:0] data_src_state_load_reg_651;
reg   [1:0] data_src_state_load_reg_651_pp0_iter1_reg;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
wire   [1:0] data_src_state_load_load_fu_241_p1;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [5:0] t_V_reg_656;
reg   [5:0] t_V_reg_656_pp0_iter1_reg;
reg   [5:0] slot_in_V_read_reg_662;
reg   [3:0] sec_count_V_reg_667;
reg   [7:0] frameID_in_V_read_reg_683;
wire   [63:0] tmp_1_fu_612_p7;
wire   [63:0] tmp_fu_633_p7;
reg   [0:0] ap_phi_mux_sym_count_V_flag_0_phi_fu_178_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_sym_count_V_flag_0_reg_175;
wire   [0:0] icmp_ln879_fu_275_p2;
reg   [5:0] ap_phi_mux_sym_count_V_new_0_phi_fu_189_p4;
wire   [5:0] select_ln70_fu_311_p3;
wire   [5:0] ap_phi_reg_pp0_iter0_sym_count_V_new_0_reg_186;
reg   [1:0] ap_phi_mux_storemerge576_phi_fu_199_p4;
wire   [1:0] ap_phi_reg_pp0_iter0_storemerge576_reg_196;
wire   [1:0] select_ln70_1_fu_320_p3;
reg   [0:0] ap_phi_mux_sym_count_V_flag_1_phi_fu_209_p8;
wire   [0:0] ap_phi_reg_pp0_iter0_sym_count_V_flag_1_reg_206;
reg   [5:0] ap_phi_mux_sym_count_V_new_1_phi_fu_227_p8;
wire   [5:0] ap_phi_reg_pp0_iter0_sym_count_V_new_1_reg_224;
wire   [3:0] add_ln700_1_fu_281_p2;
wire   [5:0] add_ln700_fu_299_p2;
wire   [0:0] icmp_ln879_1_fu_305_p2;
wire   [0:0] icmp_ln31_8_fu_387_p2;
wire   [0:0] icmp_ln31_7_fu_382_p2;
wire   [0:0] icmp_ln31_6_fu_377_p2;
wire   [0:0] icmp_ln31_5_fu_372_p2;
wire   [0:0] icmp_ln31_4_fu_367_p2;
wire   [0:0] icmp_ln31_3_fu_362_p2;
wire   [0:0] icmp_ln31_2_fu_357_p2;
wire   [0:0] icmp_ln31_1_fu_352_p2;
wire   [0:0] icmp_ln31_fu_347_p2;
wire   [0:0] or_ln215_fu_400_p2;
wire   [3:0] select_ln215_fu_392_p3;
wire   [3:0] select_ln215_1_fu_406_p3;
wire   [0:0] or_ln215_1_fu_414_p2;
wire   [0:0] or_ln215_2_fu_428_p2;
wire   [2:0] select_ln215_2_fu_420_p3;
wire   [2:0] select_ln215_3_fu_434_p3;
wire   [2:0] select_ln215_6_fu_470_p3;
wire   [0:0] or_ln215_3_fu_442_p2;
wire   [0:0] or_ln215_4_fu_464_p2;
wire   [3:0] select_ln215_5_fu_456_p3;
wire   [3:0] zext_ln215_fu_478_p1;
wire   [0:0] or_ln215_5_fu_482_p2;
wire   [0:0] or_ln215_6_fu_496_p2;
wire   [3:0] select_ln215_7_fu_488_p3;
wire   [3:0] select_ln215_4_fu_448_p3;
wire   [3:0] select_ln215_8_fu_502_p3;
wire   [7:0] select_ln215_9_fu_514_p3;
wire   [7:0] select_ln215_10_fu_522_p3;
wire   [6:0] select_ln215_11_fu_530_p3;
wire   [6:0] select_ln215_12_fu_538_p3;
wire   [6:0] select_ln215_15_fu_562_p3;
wire   [7:0] select_ln215_14_fu_554_p3;
wire   [7:0] zext_ln215_2_fu_570_p1;
wire   [7:0] select_ln215_16_fu_574_p3;
wire   [8:0] zext_ln215_3_fu_582_p1;
wire   [8:0] select_ln215_13_fu_546_p3;
wire   [8:0] select_ln215_17_fu_586_p3;
wire   [0:0] or_ln215_7_fu_598_p2;
wire   [11:0] zext_ln215_1_fu_510_p1;
wire   [9:0] zext_ln215_4_fu_594_p1;
wire   [7:0] select_ln215_18_fu_604_p3;
reg   [0:0] ap_NS_iter0_fsm;
reg   [0:0] ap_NS_iter1_fsm;
reg   [0:0] ap_NS_iter2_fsm;
reg    ap_condition_227;
reg    ap_condition_152;
reg    ap_condition_166;

// power-on initialization
initial begin
#0 L1_data_out_V_1_sel_rd = 1'b0;
#0 L1_data_out_V_1_sel_wr = 1'b0;
#0 L1_data_out_V_1_state = 2'd0;
#0 data_src_state = 2'd0;
#0 sym_count_V = 6'd0;
#0 subframeID_val_V = 4'd0;
#0 section_count_V = 4'd0;
#0 ap_CS_iter1_fsm = 1'd1;
#0 ap_CS_iter2_fsm = 1'd1;
#0 ap_CS_iter0_fsm = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        L1_data_out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == L1_data_out_V_1_ack_out) & (1'b1 == L1_data_out_V_1_vld_out))) begin
            L1_data_out_V_1_sel_rd <= ~L1_data_out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        L1_data_out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == L1_data_out_V_1_ack_in) & (1'b1 == L1_data_out_V_1_vld_in))) begin
            L1_data_out_V_1_sel_wr <= ~L1_data_out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        L1_data_out_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == L1_data_out_V_1_vld_in) & (2'd2 == L1_data_out_V_1_state)) | ((1'b0 == L1_data_out_V_1_vld_in) & (1'b1 == L1_data_out_V_1_ack_out) & (2'd3 == L1_data_out_V_1_state)))) begin
            L1_data_out_V_1_state <= 2'd2;
        end else if ((((1'b0 == L1_data_out_V_TREADY) & (2'd1 == L1_data_out_V_1_state)) | ((1'b0 == L1_data_out_V_TREADY) & (1'b1 == L1_data_out_V_1_vld_in) & (2'd3 == L1_data_out_V_1_state)))) begin
            L1_data_out_V_1_state <= 2'd1;
        end else if (((~((1'b0 == L1_data_out_V_1_vld_in) & (1'b1 == L1_data_out_V_1_ack_out)) & ~((1'b0 == L1_data_out_V_TREADY) & (1'b1 == L1_data_out_V_1_vld_in)) & (2'd3 == L1_data_out_V_1_state)) | ((1'b1 == L1_data_out_V_1_ack_out) & (2'd1 == L1_data_out_V_1_state)) | ((1'b1 == L1_data_out_V_1_vld_in) & (2'd2 == L1_data_out_V_1_state)))) begin
            L1_data_out_V_1_state <= 2'd3;
        end else begin
            L1_data_out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_src_state <= 2'd0;
    end else begin
        if ((1'b1 == ap_condition_152)) begin
            if ((data_src_state_load_load_fu_241_p1 == 2'd0)) begin
                data_src_state <= 2'd1;
            end else if ((data_src_state_load_load_fu_241_p1 == 2'd1)) begin
                data_src_state <= ap_phi_mux_storemerge576_phi_fu_199_p4;
            end else if ((data_src_state_load_load_fu_241_p1 == 2'd2)) begin
                data_src_state <= 2'd0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        section_count_V <= 4'd0;
    end else begin
        if ((1'b1 == ap_condition_166)) begin
            if ((icmp_ln879_fu_275_p2 == 1'd1)) begin
                section_count_V <= 4'd0;
            end else if ((icmp_ln879_fu_275_p2 == 1'd0)) begin
                section_count_V <= add_ln700_1_fu_281_p2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        subframeID_val_V <= 4'd0;
    end else begin
        if ((~(((ap_ST_iter2_fsm_state3 == ap_CS_iter2_fsm) & ((1'b1 == ap_block_state3_io) | (2'd1 == L1_data_out_V_1_state) | ((1'b0 == L1_data_out_V_TREADY) & (2'd3 == L1_data_out_V_1_state)))) | ((ap_ST_iter1_fsm_state2 == ap_CS_iter1_fsm) & (1'b1 == ap_block_state2_io))) & (ap_ST_iter0_fsm_state1 == ap_CS_iter0_fsm) & (data_src_state_load_load_fu_241_p1 == 2'd2))) begin
            subframeID_val_V <= {{slot_in_V[4:1]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sym_count_V <= 6'd0;
    end else begin
        if ((~(((ap_ST_iter2_fsm_state3 == ap_CS_iter2_fsm) & ((1'b1 == ap_block_state3_io) | (2'd1 == L1_data_out_V_1_state) | ((1'b0 == L1_data_out_V_TREADY) & (2'd3 == L1_data_out_V_1_state)))) | ((ap_ST_iter1_fsm_state2 == ap_CS_iter1_fsm) & (1'b1 == ap_block_state2_io))) & (ap_ST_iter0_fsm_state1 == ap_CS_iter0_fsm) & (ap_phi_mux_sym_count_V_flag_1_phi_fu_209_p8 == 1'd1))) begin
            sym_count_V <= ap_phi_mux_sym_count_V_new_1_phi_fu_227_p8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == L1_data_out_V_1_load_A)) begin
        L1_data_out_V_1_payload_A <= L1_data_out_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == L1_data_out_V_1_load_B)) begin
        L1_data_out_V_1_payload_B <= L1_data_out_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((ap_ST_iter2_fsm_state3 == ap_CS_iter2_fsm) & ((1'b1 == ap_block_state3_io) | (2'd1 == L1_data_out_V_1_state) | ((1'b0 == L1_data_out_V_TREADY) & (2'd3 == L1_data_out_V_1_state)))) | ((ap_ST_iter1_fsm_state2 == ap_CS_iter1_fsm) & (1'b1 == ap_block_state2_io))) & (ap_ST_iter0_fsm_state1 == ap_CS_iter0_fsm))) begin
        data_src_state_load_reg_651 <= data_src_state;
        slot_in_V_read_reg_662 <= slot_in_V;
        t_V_reg_656 <= sym_count_V;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | ((ap_ST_iter2_fsm_state3 == ap_CS_iter2_fsm) & ((1'b1 == ap_block_state3_io) | (2'd1 == L1_data_out_V_1_state) | ((1'b0 == L1_data_out_V_TREADY) & (2'd3 == L1_data_out_V_1_state))))) & (ap_ST_iter1_fsm_state2 == ap_CS_iter1_fsm))) begin
        data_src_state_load_reg_651_pp0_iter1_reg <= data_src_state_load_reg_651;
        t_V_reg_656_pp0_iter1_reg <= t_V_reg_656;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((ap_ST_iter2_fsm_state3 == ap_CS_iter2_fsm) & ((1'b1 == ap_block_state3_io) | (2'd1 == L1_data_out_V_1_state) | ((1'b0 == L1_data_out_V_TREADY) & (2'd3 == L1_data_out_V_1_state)))) | ((ap_ST_iter1_fsm_state2 == ap_CS_iter1_fsm) & (1'b1 == ap_block_state2_io))) & (ap_ST_iter0_fsm_state1 == ap_CS_iter0_fsm) & (data_src_state_load_load_fu_241_p1 == 2'd0))) begin
        frameID_in_V_read_reg_683 <= frameID_in_V;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((ap_ST_iter2_fsm_state3 == ap_CS_iter2_fsm) & ((1'b1 == ap_block_state3_io) | (2'd1 == L1_data_out_V_1_state) | ((1'b0 == L1_data_out_V_TREADY) & (2'd3 == L1_data_out_V_1_state)))) | ((ap_ST_iter1_fsm_state2 == ap_CS_iter1_fsm) & (1'b1 == ap_block_state2_io))) & (ap_ST_iter0_fsm_state1 == ap_CS_iter0_fsm) & (data_src_state_load_load_fu_241_p1 == 2'd1))) begin
        sec_count_V_reg_667 <= section_count_V;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_227)) begin
        if ((data_src_state_load_reg_651 == 2'd0)) begin
            L1_data_out_V_1_data_in = tmp_fu_633_p7;
        end else if ((data_src_state_load_reg_651 == 2'd1)) begin
            L1_data_out_V_1_data_in = tmp_1_fu_612_p7;
        end else begin
            L1_data_out_V_1_data_in = 'bx;
        end
    end else begin
        L1_data_out_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == L1_data_out_V_1_sel)) begin
        L1_data_out_V_1_data_out = L1_data_out_V_1_payload_B;
    end else begin
        L1_data_out_V_1_data_out = L1_data_out_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state2_io) | ((ap_ST_iter2_fsm_state3 == ap_CS_iter2_fsm) & ((1'b1 == ap_block_state3_io) | (2'd1 == L1_data_out_V_1_state) | ((1'b0 == L1_data_out_V_TREADY) & (2'd3 == L1_data_out_V_1_state))))) & (ap_ST_iter1_fsm_state2 == ap_CS_iter1_fsm) & (data_src_state_load_reg_651 == 2'd1)) | (~((1'b1 == ap_block_state2_io) | ((ap_ST_iter2_fsm_state3 == ap_CS_iter2_fsm) & ((1'b1 == ap_block_state3_io) | (2'd1 == L1_data_out_V_1_state) | ((1'b0 == L1_data_out_V_TREADY) & (2'd3 == L1_data_out_V_1_state))))) & (ap_ST_iter1_fsm_state2 == ap_CS_iter1_fsm) & (data_src_state_load_reg_651 == 2'd0)))) begin
        L1_data_out_V_1_vld_in = 1'b1;
    end else begin
        L1_data_out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_ST_iter2_fsm_state3 == ap_CS_iter2_fsm) & (data_src_state_load_reg_651_pp0_iter1_reg == 2'd1)) | ((ap_ST_iter2_fsm_state3 == ap_CS_iter2_fsm) & (data_src_state_load_reg_651_pp0_iter1_reg == 2'd0)) | ((ap_ST_iter1_fsm_state2 == ap_CS_iter1_fsm) & (data_src_state_load_reg_651 == 2'd1)) | ((ap_ST_iter1_fsm_state2 == ap_CS_iter1_fsm) & (data_src_state_load_reg_651 == 2'd0)))) begin
        L1_data_out_V_TDATA_blk_n = L1_data_out_V_1_state[1'd1];
    end else begin
        L1_data_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_ST_iter0_fsm_state1 == ap_CS_iter0_fsm) & (data_src_state_load_load_fu_241_p1 == 2'd1))) begin
        if ((icmp_ln879_fu_275_p2 == 1'd1)) begin
            ap_phi_mux_storemerge576_phi_fu_199_p4 = select_ln70_1_fu_320_p3;
        end else if ((icmp_ln879_fu_275_p2 == 1'd0)) begin
            ap_phi_mux_storemerge576_phi_fu_199_p4 = 2'd0;
        end else begin
            ap_phi_mux_storemerge576_phi_fu_199_p4 = ap_phi_reg_pp0_iter0_storemerge576_reg_196;
        end
    end else begin
        ap_phi_mux_storemerge576_phi_fu_199_p4 = ap_phi_reg_pp0_iter0_storemerge576_reg_196;
    end
end

always @ (*) begin
    if (((ap_ST_iter0_fsm_state1 == ap_CS_iter0_fsm) & (data_src_state_load_load_fu_241_p1 == 2'd1))) begin
        if ((icmp_ln879_fu_275_p2 == 1'd1)) begin
            ap_phi_mux_sym_count_V_flag_0_phi_fu_178_p4 = 1'd1;
        end else if ((icmp_ln879_fu_275_p2 == 1'd0)) begin
            ap_phi_mux_sym_count_V_flag_0_phi_fu_178_p4 = 1'd0;
        end else begin
            ap_phi_mux_sym_count_V_flag_0_phi_fu_178_p4 = ap_phi_reg_pp0_iter0_sym_count_V_flag_0_reg_175;
        end
    end else begin
        ap_phi_mux_sym_count_V_flag_0_phi_fu_178_p4 = ap_phi_reg_pp0_iter0_sym_count_V_flag_0_reg_175;
    end
end

always @ (*) begin
    if (((ap_ST_iter0_fsm_state1 == ap_CS_iter0_fsm) & (data_src_state_load_load_fu_241_p1 == 2'd1))) begin
        ap_phi_mux_sym_count_V_flag_1_phi_fu_209_p8 = ap_phi_mux_sym_count_V_flag_0_phi_fu_178_p4;
    end else if (((ap_ST_iter0_fsm_state1 == ap_CS_iter0_fsm) & (data_src_state_load_load_fu_241_p1 == 2'd2))) begin
        ap_phi_mux_sym_count_V_flag_1_phi_fu_209_p8 = 1'd1;
    end else if ((((ap_ST_iter0_fsm_state1 == ap_CS_iter0_fsm) & (data_src_state_load_load_fu_241_p1 == 2'd3)) | ((ap_ST_iter0_fsm_state1 == ap_CS_iter0_fsm) & (data_src_state_load_load_fu_241_p1 == 2'd0)))) begin
        ap_phi_mux_sym_count_V_flag_1_phi_fu_209_p8 = 1'd0;
    end else begin
        ap_phi_mux_sym_count_V_flag_1_phi_fu_209_p8 = ap_phi_reg_pp0_iter0_sym_count_V_flag_1_reg_206;
    end
end

always @ (*) begin
    if (((ap_ST_iter0_fsm_state1 == ap_CS_iter0_fsm) & (data_src_state_load_load_fu_241_p1 == 2'd1) & (icmp_ln879_fu_275_p2 == 1'd1))) begin
        ap_phi_mux_sym_count_V_new_0_phi_fu_189_p4 = select_ln70_fu_311_p3;
    end else begin
        ap_phi_mux_sym_count_V_new_0_phi_fu_189_p4 = ap_phi_reg_pp0_iter0_sym_count_V_new_0_reg_186;
    end
end

always @ (*) begin
    if ((ap_ST_iter0_fsm_state1 == ap_CS_iter0_fsm)) begin
        if ((data_src_state_load_load_fu_241_p1 == 2'd1)) begin
            ap_phi_mux_sym_count_V_new_1_phi_fu_227_p8 = ap_phi_mux_sym_count_V_new_0_phi_fu_189_p4;
        end else if ((data_src_state_load_load_fu_241_p1 == 2'd2)) begin
            ap_phi_mux_sym_count_V_new_1_phi_fu_227_p8 = 6'd0;
        end else begin
            ap_phi_mux_sym_count_V_new_1_phi_fu_227_p8 = ap_phi_reg_pp0_iter0_sym_count_V_new_1_reg_224;
        end
    end else begin
        ap_phi_mux_sym_count_V_new_1_phi_fu_227_p8 = ap_phi_reg_pp0_iter0_sym_count_V_new_1_reg_224;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((ap_ST_iter2_fsm_state3 == ap_CS_iter2_fsm) & ((1'b1 == ap_block_state3_io) | (2'd1 == L1_data_out_V_1_state) | ((1'b0 == L1_data_out_V_TREADY) & (2'd3 == L1_data_out_V_1_state))))) & (ap_ST_iter0_fsm_state1 == ap_CS_iter0_fsm))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~(ap_ST_iter0_fsm_state1 == ap_CS_iter0_fsm) & ~((1'b1 == ap_block_state2_io) | ((ap_ST_iter2_fsm_state3 == ap_CS_iter2_fsm) & ((1'b1 == ap_block_state3_io) | (2'd1 == L1_data_out_V_1_state) | ((1'b0 == L1_data_out_V_TREADY) & (2'd3 == L1_data_out_V_1_state))))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~(((ap_ST_iter2_fsm_state3 == ap_CS_iter2_fsm) & ((1'b1 == ap_block_state3_io) | (2'd1 == L1_data_out_V_1_state) | ((1'b0 == L1_data_out_V_TREADY) & (2'd3 == L1_data_out_V_1_state)))) | ((ap_ST_iter1_fsm_state2 == ap_CS_iter1_fsm) & (1'b1 == ap_block_state2_io))) & (ap_ST_iter0_fsm_state1 == ap_CS_iter0_fsm))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_block_state3_io) | (2'd1 == L1_data_out_V_1_state) | ((1'b0 == L1_data_out_V_TREADY) & (2'd3 == L1_data_out_V_1_state))) & (ap_ST_iter1_fsm_state2 == ap_CS_iter1_fsm) & (1'b0 == ap_block_state2_io))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b1 == ap_block_state3_io) | (2'd1 == L1_data_out_V_1_state) | ((1'b0 == L1_data_out_V_TREADY) & (2'd3 == L1_data_out_V_1_state))) & (~(ap_ST_iter1_fsm_state2 == ap_CS_iter1_fsm) | ((ap_ST_iter1_fsm_state2 == ap_CS_iter1_fsm) & (1'b1 == ap_block_state2_io))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((ap_ST_iter2_fsm_state3 == ap_CS_iter2_fsm) & ((1'b1 == ap_block_state3_io) | (2'd1 == L1_data_out_V_1_state) | ((1'b0 == L1_data_out_V_TREADY) & (2'd3 == L1_data_out_V_1_state))))) & (ap_ST_iter1_fsm_state2 == ap_CS_iter1_fsm))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign L1_data_out_V_1_ack_in = L1_data_out_V_1_state[1'd1];

assign L1_data_out_V_1_ack_out = L1_data_out_V_TREADY;

assign L1_data_out_V_1_load_A = (~L1_data_out_V_1_sel_wr & L1_data_out_V_1_state_cmp_full);

assign L1_data_out_V_1_load_B = (L1_data_out_V_1_state_cmp_full & L1_data_out_V_1_sel_wr);

assign L1_data_out_V_1_sel = L1_data_out_V_1_sel_rd;

assign L1_data_out_V_1_state_cmp_full = ((L1_data_out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign L1_data_out_V_1_vld_out = L1_data_out_V_1_state[1'd0];

assign L1_data_out_V_TDATA = L1_data_out_V_1_data_out;

assign L1_data_out_V_TVALID = L1_data_out_V_1_state[1'd0];

assign add_ln700_1_fu_281_p2 = (section_count_V + 4'd1);

assign add_ln700_fu_299_p2 = (sym_count_V + 6'd1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = (((1'b0 == L1_data_out_V_1_ack_in) & (data_src_state_load_reg_651 == 2'd1)) | ((1'b0 == L1_data_out_V_1_ack_in) & (data_src_state_load_reg_651 == 2'd0)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = (((1'b0 == L1_data_out_V_1_ack_in) & (data_src_state_load_reg_651_pp0_iter1_reg == 2'd1)) | ((1'b0 == L1_data_out_V_1_ack_in) & (data_src_state_load_reg_651_pp0_iter1_reg == 2'd0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((2'd1 == L1_data_out_V_1_state) | ((1'b0 == L1_data_out_V_TREADY) & (2'd3 == L1_data_out_V_1_state)));
end

always @ (*) begin
    ap_condition_152 = (~(((ap_ST_iter2_fsm_state3 == ap_CS_iter2_fsm) & ((1'b1 == ap_block_state3_io) | (2'd1 == L1_data_out_V_1_state) | ((1'b0 == L1_data_out_V_TREADY) & (2'd3 == L1_data_out_V_1_state)))) | ((ap_ST_iter1_fsm_state2 == ap_CS_iter1_fsm) & (1'b1 == ap_block_state2_io))) & (ap_ST_iter0_fsm_state1 == ap_CS_iter0_fsm));
end

always @ (*) begin
    ap_condition_166 = (~(((ap_ST_iter2_fsm_state3 == ap_CS_iter2_fsm) & ((1'b1 == ap_block_state3_io) | (2'd1 == L1_data_out_V_1_state) | ((1'b0 == L1_data_out_V_TREADY) & (2'd3 == L1_data_out_V_1_state)))) | ((ap_ST_iter1_fsm_state2 == ap_CS_iter1_fsm) & (1'b1 == ap_block_state2_io))) & (ap_ST_iter0_fsm_state1 == ap_CS_iter0_fsm) & (data_src_state_load_load_fu_241_p1 == 2'd1));
end

always @ (*) begin
    ap_condition_227 = (~((ap_ST_iter2_fsm_state3 == ap_CS_iter2_fsm) & ((2'd1 == L1_data_out_V_1_state) | ((1'b0 == L1_data_out_V_TREADY) & (2'd3 == L1_data_out_V_1_state)))) & (ap_ST_iter1_fsm_state2 == ap_CS_iter1_fsm));
end

assign ap_phi_reg_pp0_iter0_storemerge576_reg_196 = 'bx;

assign ap_phi_reg_pp0_iter0_sym_count_V_flag_0_reg_175 = 'bx;

assign ap_phi_reg_pp0_iter0_sym_count_V_flag_1_reg_206 = 'bx;

assign ap_phi_reg_pp0_iter0_sym_count_V_new_0_reg_186 = 'bx;

assign ap_phi_reg_pp0_iter0_sym_count_V_new_1_reg_224 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data_src_state_load_load_fu_241_p1 = data_src_state;

assign icmp_ln31_1_fu_352_p2 = ((sec_count_V_reg_667 == 4'd1) ? 1'b1 : 1'b0);

assign icmp_ln31_2_fu_357_p2 = ((sec_count_V_reg_667 == 4'd2) ? 1'b1 : 1'b0);

assign icmp_ln31_3_fu_362_p2 = ((sec_count_V_reg_667 == 4'd3) ? 1'b1 : 1'b0);

assign icmp_ln31_4_fu_367_p2 = ((sec_count_V_reg_667 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln31_5_fu_372_p2 = ((sec_count_V_reg_667 == 4'd5) ? 1'b1 : 1'b0);

assign icmp_ln31_6_fu_377_p2 = ((sec_count_V_reg_667 == 4'd6) ? 1'b1 : 1'b0);

assign icmp_ln31_7_fu_382_p2 = ((sec_count_V_reg_667 == 4'd7) ? 1'b1 : 1'b0);

assign icmp_ln31_8_fu_387_p2 = ((sec_count_V_reg_667 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_347_p2 = ((sec_count_V_reg_667 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_305_p2 = ((add_ln700_fu_299_p2 == 6'd14) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_275_p2 = ((section_count_V == 4'd9) ? 1'b1 : 1'b0);

assign or_ln215_1_fu_414_p2 = (icmp_ln31_6_fu_377_p2 | icmp_ln31_5_fu_372_p2);

assign or_ln215_2_fu_428_p2 = (icmp_ln31_4_fu_367_p2 | icmp_ln31_3_fu_362_p2);

assign or_ln215_3_fu_442_p2 = (icmp_ln31_2_fu_357_p2 | icmp_ln31_1_fu_352_p2);

assign or_ln215_4_fu_464_p2 = (or_ln215_fu_400_p2 | or_ln215_1_fu_414_p2);

assign or_ln215_5_fu_482_p2 = (or_ln215_3_fu_442_p2 | or_ln215_2_fu_428_p2);

assign or_ln215_6_fu_496_p2 = (or_ln215_5_fu_482_p2 | or_ln215_4_fu_464_p2);

assign or_ln215_7_fu_598_p2 = (or_ln215_6_fu_496_p2 | icmp_ln31_fu_347_p2);

assign or_ln215_fu_400_p2 = (icmp_ln31_8_fu_387_p2 | icmp_ln31_7_fu_382_p2);

assign select_ln215_10_fu_522_p3 = ((icmp_ln31_6_fu_377_p2[0:0] === 1'b1) ? 8'd180 : 8'd150);

assign select_ln215_11_fu_530_p3 = ((icmp_ln31_4_fu_367_p2[0:0] === 1'b1) ? 7'd120 : 7'd90);

assign select_ln215_12_fu_538_p3 = ((icmp_ln31_2_fu_357_p2[0:0] === 1'b1) ? 7'd60 : 7'd30);

assign select_ln215_13_fu_546_p3 = ((icmp_ln31_fu_347_p2[0:0] === 1'b1) ? 9'd0 : 9'd270);

assign select_ln215_14_fu_554_p3 = ((or_ln215_fu_400_p2[0:0] === 1'b1) ? select_ln215_9_fu_514_p3 : select_ln215_10_fu_522_p3);

assign select_ln215_15_fu_562_p3 = ((or_ln215_2_fu_428_p2[0:0] === 1'b1) ? select_ln215_11_fu_530_p3 : select_ln215_12_fu_538_p3);

assign select_ln215_16_fu_574_p3 = ((or_ln215_4_fu_464_p2[0:0] === 1'b1) ? select_ln215_14_fu_554_p3 : zext_ln215_2_fu_570_p1);

assign select_ln215_17_fu_586_p3 = ((or_ln215_6_fu_496_p2[0:0] === 1'b1) ? zext_ln215_3_fu_582_p1 : select_ln215_13_fu_546_p3);

assign select_ln215_18_fu_604_p3 = ((or_ln215_7_fu_598_p2[0:0] === 1'b1) ? 8'd30 : 8'd3);

assign select_ln215_1_fu_406_p3 = ((icmp_ln31_6_fu_377_p2[0:0] === 1'b1) ? 4'd7 : 4'd6);

assign select_ln215_2_fu_420_p3 = ((icmp_ln31_4_fu_367_p2[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign select_ln215_3_fu_434_p3 = ((icmp_ln31_2_fu_357_p2[0:0] === 1'b1) ? 3'd3 : 3'd2);

assign select_ln215_4_fu_448_p3 = ((icmp_ln31_fu_347_p2[0:0] === 1'b1) ? 4'd1 : 4'd10);

assign select_ln215_5_fu_456_p3 = ((or_ln215_fu_400_p2[0:0] === 1'b1) ? select_ln215_fu_392_p3 : select_ln215_1_fu_406_p3);

assign select_ln215_6_fu_470_p3 = ((or_ln215_2_fu_428_p2[0:0] === 1'b1) ? select_ln215_2_fu_420_p3 : select_ln215_3_fu_434_p3);

assign select_ln215_7_fu_488_p3 = ((or_ln215_4_fu_464_p2[0:0] === 1'b1) ? select_ln215_5_fu_456_p3 : zext_ln215_fu_478_p1);

assign select_ln215_8_fu_502_p3 = ((or_ln215_6_fu_496_p2[0:0] === 1'b1) ? select_ln215_7_fu_488_p3 : select_ln215_4_fu_448_p3);

assign select_ln215_9_fu_514_p3 = ((icmp_ln31_8_fu_387_p2[0:0] === 1'b1) ? 8'd240 : 8'd210);

assign select_ln215_fu_392_p3 = ((icmp_ln31_8_fu_387_p2[0:0] === 1'b1) ? 4'd9 : 4'd8);

assign select_ln70_1_fu_320_p3 = ((icmp_ln879_1_fu_305_p2[0:0] === 1'b1) ? 2'd2 : 2'd0);

assign select_ln70_fu_311_p3 = ((icmp_ln879_1_fu_305_p2[0:0] === 1'b1) ? 6'd0 : add_ln700_fu_299_p2);

assign st_out_V = data_src_state_load_reg_651_pp0_iter1_reg;

assign symbol_number_V = t_V_reg_656_pp0_iter1_reg;

assign tmp_1_fu_612_p7 = {{{{{{{{{{12'd69}, {zext_ln215_1_fu_510_p1}}}, {2'd0}}}, {zext_ln215_4_fu_594_p1}}}, {select_ln215_18_fu_604_p3}}}, {20'd0}};

assign tmp_fu_633_p7 = {{{{{{{{{{20'd17552}, {frameID_in_V_read_reg_683}}}, {subframeID_val_V}}}, {slot_in_V_read_reg_662}}}, {t_V_reg_656}}}, {20'd0}};

assign zext_ln215_1_fu_510_p1 = select_ln215_8_fu_502_p3;

assign zext_ln215_2_fu_570_p1 = select_ln215_15_fu_562_p3;

assign zext_ln215_3_fu_582_p1 = select_ln215_16_fu_574_p3;

assign zext_ln215_4_fu_594_p1 = select_ln215_17_fu_586_p3;

assign zext_ln215_fu_478_p1 = select_ln215_6_fu_470_p3;

endmodule //Userplane_L1_Data_Gen
