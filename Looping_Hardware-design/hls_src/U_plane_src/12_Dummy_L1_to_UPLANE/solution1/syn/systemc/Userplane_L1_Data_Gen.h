// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Userplane_L1_Data_Gen_HH_
#define _Userplane_L1_Data_Gen_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Userplane_L1_Data_Gen : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_lv<64> > L1_data_out_V_TDATA;
    sc_out< sc_logic > L1_data_out_V_TVALID;
    sc_in< sc_logic > L1_data_out_V_TREADY;
    sc_in< sc_lv<6> > slot_in_V;
    sc_in< sc_lv<8> > frameID_in_V;
    sc_out< sc_lv<4> > st_out_V;
    sc_out< sc_lv<6> > symbol_number_V;


    // Module declarations
    Userplane_L1_Data_Gen(sc_module_name name);
    SC_HAS_PROCESS(Userplane_L1_Data_Gen);

    ~Userplane_L1_Data_Gen();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<64> > L1_data_out_V_1_data_in;
    sc_signal< sc_lv<64> > L1_data_out_V_1_data_out;
    sc_signal< sc_logic > L1_data_out_V_1_vld_in;
    sc_signal< sc_logic > L1_data_out_V_1_vld_out;
    sc_signal< sc_logic > L1_data_out_V_1_ack_in;
    sc_signal< sc_logic > L1_data_out_V_1_ack_out;
    sc_signal< sc_lv<64> > L1_data_out_V_1_payload_A;
    sc_signal< sc_lv<64> > L1_data_out_V_1_payload_B;
    sc_signal< sc_logic > L1_data_out_V_1_sel_rd;
    sc_signal< sc_logic > L1_data_out_V_1_sel_wr;
    sc_signal< sc_logic > L1_data_out_V_1_sel;
    sc_signal< sc_logic > L1_data_out_V_1_load_A;
    sc_signal< sc_logic > L1_data_out_V_1_load_B;
    sc_signal< sc_lv<2> > L1_data_out_V_1_state;
    sc_signal< sc_logic > L1_data_out_V_1_state_cmp_full;
    sc_signal< sc_lv<2> > data_src_state;
    sc_signal< sc_lv<6> > sym_count_V;
    sc_signal< sc_lv<4> > subframeID_val_V;
    sc_signal< sc_lv<4> > section_count_V;
    sc_signal< sc_logic > L1_data_out_V_TDATA_blk_n;
    sc_signal< sc_lv<1> > ap_CS_iter1_fsm;
    sc_signal< sc_lv<1> > ap_CS_iter2_fsm;
    sc_signal< sc_lv<2> > data_src_state_load_reg_651;
    sc_signal< sc_lv<2> > data_src_state_load_reg_651_pp0_iter1_reg;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< sc_lv<2> > data_src_state_load_load_fu_241_p1;
    sc_signal< sc_lv<1> > ap_CS_iter0_fsm;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_lv<6> > t_V_reg_656;
    sc_signal< sc_lv<6> > t_V_reg_656_pp0_iter1_reg;
    sc_signal< sc_lv<6> > slot_in_V_read_reg_662;
    sc_signal< sc_lv<4> > sec_count_V_reg_667;
    sc_signal< sc_lv<8> > frameID_in_V_read_reg_683;
    sc_signal< sc_lv<64> > tmp_1_fu_612_p7;
    sc_signal< sc_lv<64> > tmp_fu_633_p7;
    sc_signal< sc_lv<1> > ap_phi_mux_sym_count_V_flag_0_phi_fu_178_p4;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_sym_count_V_flag_0_reg_175;
    sc_signal< sc_lv<1> > icmp_ln879_fu_275_p2;
    sc_signal< sc_lv<6> > ap_phi_mux_sym_count_V_new_0_phi_fu_189_p4;
    sc_signal< sc_lv<6> > select_ln70_fu_311_p3;
    sc_signal< sc_lv<6> > ap_phi_reg_pp0_iter0_sym_count_V_new_0_reg_186;
    sc_signal< sc_lv<2> > ap_phi_mux_storemerge576_phi_fu_199_p4;
    sc_signal< sc_lv<2> > ap_phi_reg_pp0_iter0_storemerge576_reg_196;
    sc_signal< sc_lv<2> > select_ln70_1_fu_320_p3;
    sc_signal< sc_lv<1> > ap_phi_mux_sym_count_V_flag_1_phi_fu_209_p8;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_sym_count_V_flag_1_reg_206;
    sc_signal< sc_lv<6> > ap_phi_mux_sym_count_V_new_1_phi_fu_227_p8;
    sc_signal< sc_lv<6> > ap_phi_reg_pp0_iter0_sym_count_V_new_1_reg_224;
    sc_signal< sc_lv<4> > add_ln700_1_fu_281_p2;
    sc_signal< sc_lv<6> > add_ln700_fu_299_p2;
    sc_signal< sc_lv<1> > icmp_ln879_1_fu_305_p2;
    sc_signal< sc_lv<1> > icmp_ln31_8_fu_387_p2;
    sc_signal< sc_lv<1> > icmp_ln31_7_fu_382_p2;
    sc_signal< sc_lv<1> > icmp_ln31_6_fu_377_p2;
    sc_signal< sc_lv<1> > icmp_ln31_5_fu_372_p2;
    sc_signal< sc_lv<1> > icmp_ln31_4_fu_367_p2;
    sc_signal< sc_lv<1> > icmp_ln31_3_fu_362_p2;
    sc_signal< sc_lv<1> > icmp_ln31_2_fu_357_p2;
    sc_signal< sc_lv<1> > icmp_ln31_1_fu_352_p2;
    sc_signal< sc_lv<1> > icmp_ln31_fu_347_p2;
    sc_signal< sc_lv<1> > or_ln215_fu_400_p2;
    sc_signal< sc_lv<4> > select_ln215_fu_392_p3;
    sc_signal< sc_lv<4> > select_ln215_1_fu_406_p3;
    sc_signal< sc_lv<1> > or_ln215_1_fu_414_p2;
    sc_signal< sc_lv<1> > or_ln215_2_fu_428_p2;
    sc_signal< sc_lv<3> > select_ln215_2_fu_420_p3;
    sc_signal< sc_lv<3> > select_ln215_3_fu_434_p3;
    sc_signal< sc_lv<3> > select_ln215_6_fu_470_p3;
    sc_signal< sc_lv<1> > or_ln215_3_fu_442_p2;
    sc_signal< sc_lv<1> > or_ln215_4_fu_464_p2;
    sc_signal< sc_lv<4> > select_ln215_5_fu_456_p3;
    sc_signal< sc_lv<4> > zext_ln215_fu_478_p1;
    sc_signal< sc_lv<1> > or_ln215_5_fu_482_p2;
    sc_signal< sc_lv<1> > or_ln215_6_fu_496_p2;
    sc_signal< sc_lv<4> > select_ln215_7_fu_488_p3;
    sc_signal< sc_lv<4> > select_ln215_4_fu_448_p3;
    sc_signal< sc_lv<4> > select_ln215_8_fu_502_p3;
    sc_signal< sc_lv<8> > select_ln215_9_fu_514_p3;
    sc_signal< sc_lv<8> > select_ln215_10_fu_522_p3;
    sc_signal< sc_lv<7> > select_ln215_11_fu_530_p3;
    sc_signal< sc_lv<7> > select_ln215_12_fu_538_p3;
    sc_signal< sc_lv<7> > select_ln215_15_fu_562_p3;
    sc_signal< sc_lv<8> > select_ln215_14_fu_554_p3;
    sc_signal< sc_lv<8> > zext_ln215_2_fu_570_p1;
    sc_signal< sc_lv<8> > select_ln215_16_fu_574_p3;
    sc_signal< sc_lv<9> > zext_ln215_3_fu_582_p1;
    sc_signal< sc_lv<9> > select_ln215_13_fu_546_p3;
    sc_signal< sc_lv<9> > select_ln215_17_fu_586_p3;
    sc_signal< sc_lv<1> > or_ln215_7_fu_598_p2;
    sc_signal< sc_lv<12> > zext_ln215_1_fu_510_p1;
    sc_signal< sc_lv<10> > zext_ln215_4_fu_594_p1;
    sc_signal< sc_lv<8> > select_ln215_18_fu_604_p3;
    sc_signal< sc_lv<1> > ap_NS_iter0_fsm;
    sc_signal< sc_lv<1> > ap_NS_iter1_fsm;
    sc_signal< sc_lv<1> > ap_NS_iter2_fsm;
    sc_signal< bool > ap_condition_227;
    sc_signal< bool > ap_condition_152;
    sc_signal< bool > ap_condition_166;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_iter0_fsm_state1;
    static const sc_lv<1> ap_ST_iter1_fsm_state2;
    static const sc_lv<1> ap_ST_iter2_fsm_state3;
    static const sc_lv<1> ap_ST_iter1_fsm_state0;
    static const sc_lv<1> ap_ST_iter2_fsm_state0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_9;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<6> ap_const_lv6_E;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<4> ap_const_lv4_3;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<4> ap_const_lv4_5;
    static const sc_lv<4> ap_const_lv4_6;
    static const sc_lv<4> ap_const_lv4_7;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<8> ap_const_lv8_F0;
    static const sc_lv<8> ap_const_lv8_D2;
    static const sc_lv<8> ap_const_lv8_B4;
    static const sc_lv<8> ap_const_lv8_96;
    static const sc_lv<7> ap_const_lv7_78;
    static const sc_lv<7> ap_const_lv7_5A;
    static const sc_lv<7> ap_const_lv7_3C;
    static const sc_lv<7> ap_const_lv7_1E;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<9> ap_const_lv9_10E;
    static const sc_lv<8> ap_const_lv8_1E;
    static const sc_lv<8> ap_const_lv8_3;
    static const sc_lv<12> ap_const_lv12_45;
    static const sc_lv<20> ap_const_lv20_0;
    static const sc_lv<20> ap_const_lv20_4490;
    static const bool ap_const_boolean_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_L1_data_out_V_1_ack_in();
    void thread_L1_data_out_V_1_ack_out();
    void thread_L1_data_out_V_1_data_in();
    void thread_L1_data_out_V_1_data_out();
    void thread_L1_data_out_V_1_load_A();
    void thread_L1_data_out_V_1_load_B();
    void thread_L1_data_out_V_1_sel();
    void thread_L1_data_out_V_1_state_cmp_full();
    void thread_L1_data_out_V_1_vld_in();
    void thread_L1_data_out_V_1_vld_out();
    void thread_L1_data_out_V_TDATA();
    void thread_L1_data_out_V_TDATA_blk_n();
    void thread_L1_data_out_V_TVALID();
    void thread_add_ln700_1_fu_281_p2();
    void thread_add_ln700_fu_299_p2();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_io();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_condition_152();
    void thread_ap_condition_166();
    void thread_ap_condition_227();
    void thread_ap_phi_mux_storemerge576_phi_fu_199_p4();
    void thread_ap_phi_mux_sym_count_V_flag_0_phi_fu_178_p4();
    void thread_ap_phi_mux_sym_count_V_flag_1_phi_fu_209_p8();
    void thread_ap_phi_mux_sym_count_V_new_0_phi_fu_189_p4();
    void thread_ap_phi_mux_sym_count_V_new_1_phi_fu_227_p8();
    void thread_ap_phi_reg_pp0_iter0_storemerge576_reg_196();
    void thread_ap_phi_reg_pp0_iter0_sym_count_V_flag_0_reg_175();
    void thread_ap_phi_reg_pp0_iter0_sym_count_V_flag_1_reg_206();
    void thread_ap_phi_reg_pp0_iter0_sym_count_V_new_0_reg_186();
    void thread_ap_phi_reg_pp0_iter0_sym_count_V_new_1_reg_224();
    void thread_ap_rst_n_inv();
    void thread_data_src_state_load_load_fu_241_p1();
    void thread_icmp_ln31_1_fu_352_p2();
    void thread_icmp_ln31_2_fu_357_p2();
    void thread_icmp_ln31_3_fu_362_p2();
    void thread_icmp_ln31_4_fu_367_p2();
    void thread_icmp_ln31_5_fu_372_p2();
    void thread_icmp_ln31_6_fu_377_p2();
    void thread_icmp_ln31_7_fu_382_p2();
    void thread_icmp_ln31_8_fu_387_p2();
    void thread_icmp_ln31_fu_347_p2();
    void thread_icmp_ln879_1_fu_305_p2();
    void thread_icmp_ln879_fu_275_p2();
    void thread_or_ln215_1_fu_414_p2();
    void thread_or_ln215_2_fu_428_p2();
    void thread_or_ln215_3_fu_442_p2();
    void thread_or_ln215_4_fu_464_p2();
    void thread_or_ln215_5_fu_482_p2();
    void thread_or_ln215_6_fu_496_p2();
    void thread_or_ln215_7_fu_598_p2();
    void thread_or_ln215_fu_400_p2();
    void thread_select_ln215_10_fu_522_p3();
    void thread_select_ln215_11_fu_530_p3();
    void thread_select_ln215_12_fu_538_p3();
    void thread_select_ln215_13_fu_546_p3();
    void thread_select_ln215_14_fu_554_p3();
    void thread_select_ln215_15_fu_562_p3();
    void thread_select_ln215_16_fu_574_p3();
    void thread_select_ln215_17_fu_586_p3();
    void thread_select_ln215_18_fu_604_p3();
    void thread_select_ln215_1_fu_406_p3();
    void thread_select_ln215_2_fu_420_p3();
    void thread_select_ln215_3_fu_434_p3();
    void thread_select_ln215_4_fu_448_p3();
    void thread_select_ln215_5_fu_456_p3();
    void thread_select_ln215_6_fu_470_p3();
    void thread_select_ln215_7_fu_488_p3();
    void thread_select_ln215_8_fu_502_p3();
    void thread_select_ln215_9_fu_514_p3();
    void thread_select_ln215_fu_392_p3();
    void thread_select_ln70_1_fu_320_p3();
    void thread_select_ln70_fu_311_p3();
    void thread_st_out_V();
    void thread_symbol_number_V();
    void thread_tmp_1_fu_612_p7();
    void thread_tmp_fu_633_p7();
    void thread_zext_ln215_1_fu_510_p1();
    void thread_zext_ln215_2_fu_570_p1();
    void thread_zext_ln215_3_fu_582_p1();
    void thread_zext_ln215_4_fu_594_p1();
    void thread_zext_ln215_fu_478_p1();
    void thread_ap_NS_iter0_fsm();
    void thread_ap_NS_iter1_fsm();
    void thread_ap_NS_iter2_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
