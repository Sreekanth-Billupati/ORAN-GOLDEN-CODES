// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Data_Gen.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Data_Gen::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Data_Gen::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> Data_Gen::ap_ST_iter0_fsm_state1 = "0";
const sc_lv<1> Data_Gen::ap_ST_iter1_fsm_state2 = "0";
const sc_lv<1> Data_Gen::ap_ST_iter1_fsm_state0 = "1";
const sc_lv<2> Data_Gen::ap_const_lv2_0 = "00";
const bool Data_Gen::ap_const_boolean_1 = true;
const sc_lv<1> Data_Gen::ap_const_lv1_1 = "1";
const sc_lv<2> Data_Gen::ap_const_lv2_1 = "1";
const bool Data_Gen::ap_const_boolean_0 = false;
const sc_lv<32> Data_Gen::ap_const_lv32_36 = "110110";
const sc_lv<32> Data_Gen::ap_const_lv32_3F = "111111";
const sc_lv<10> Data_Gen::ap_const_lv10_11 = "10001";
const sc_lv<32> Data_Gen::ap_const_lv32_34 = "110100";
const sc_lv<32> Data_Gen::ap_const_lv32_35 = "110101";
const sc_lv<32> Data_Gen::ap_const_lv32_28 = "101000";
const sc_lv<32> Data_Gen::ap_const_lv32_33 = "110011";
const sc_lv<32> Data_Gen::ap_const_lv32_1C = "11100";
const sc_lv<32> Data_Gen::ap_const_lv32_25 = "100101";
const sc_lv<32> Data_Gen::ap_const_lv32_14 = "10100";
const sc_lv<32> Data_Gen::ap_const_lv32_1B = "11011";
const sc_lv<32> Data_Gen::ap_const_lv32_27 = "100111";
const sc_lv<32> Data_Gen::ap_const_lv32_26 = "100110";
const sc_lv<16> Data_Gen::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> Data_Gen::ap_const_lv32_24 = "100100";
const sc_lv<32> Data_Gen::ap_const_lv32_2B = "101011";
const sc_lv<32> Data_Gen::ap_const_lv32_20 = "100000";
const sc_lv<32> Data_Gen::ap_const_lv32_23 = "100011";
const sc_lv<32> Data_Gen::ap_const_lv32_1A = "11010";
const sc_lv<32> Data_Gen::ap_const_lv32_1F = "11111";
const sc_lv<32> Data_Gen::ap_const_lv32_19 = "11001";
const sc_lv<32> Data_Gen::ap_const_lv32_2C = "101100";

Data_Gen::Data_Gen(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_L1_axis_V_TDATA_blk_n);
    sensitive << ( L1_axis_V_TVALID );
    sensitive << ( ap_CS_iter0_fsm );
    sensitive << ( tmp_nbreadreq_fu_116_p3 );

    SC_METHOD(thread_L1_axis_V_TREADY);
    sensitive << ( L1_axis_V_TVALID );
    sensitive << ( ap_CS_iter0_fsm );
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( tmp_nbreadreq_fu_116_p3 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( L1_axis_V_TVALID );
    sensitive << ( tmp_nbreadreq_fu_116_p3 );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( application_header_V_TREADY );
    sensitive << ( section_header_V_TREADY );
    sensitive << ( ap_predicate_op34_write_state2 );
    sensitive << ( ap_predicate_op44_write_state2 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_predicate_op34_write_state2);
    sensitive << ( tmp_reg_318 );
    sensitive << ( icmp_ln879_reg_335 );
    sensitive << ( p_Result_s_reg_339 );

    SC_METHOD(thread_ap_predicate_op44_write_state2);
    sensitive << ( tmp_reg_318 );
    sensitive << ( icmp_ln879_reg_335 );
    sensitive << ( p_Result_s_reg_339 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_application_header_V_TDATA);
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( ap_predicate_op44_write_state2 );
    sensitive << ( tmp_startsymbolId_V_fu_283_p4 );
    sensitive << ( tmp_slotID_V_fu_274_p4 );
    sensitive << ( tmp_subframeId_V_fu_265_p4 );
    sensitive << ( tmp_frameId_V_fu_256_p4 );
    sensitive << ( tmp_3_fu_294_p4 );

    SC_METHOD(thread_application_header_V_TDATA_blk_n);
    sensitive << ( application_header_V_TREADY );
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( tmp_reg_318 );
    sensitive << ( icmp_ln879_reg_335 );
    sensitive << ( p_Result_s_reg_339 );

    SC_METHOD(thread_application_header_V_TVALID);
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( ap_predicate_op44_write_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_icmp_ln879_fu_175_p2);
    sensitive << ( L1_axis_V_TVALID );
    sensitive << ( ap_CS_iter0_fsm );
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( tmp_nbreadreq_fu_116_p3 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( tmp_dst_module_V_loa_fu_165_p4 );

    SC_METHOD(thread_section_header_V_TDATA);
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( ap_predicate_op34_write_state2 );
    sensitive << ( tmp_numPrbu_V_fu_223_p4 );
    sensitive << ( tmp_startPrbu_V_fu_214_p4 );
    sensitive << ( tmp_4_fu_232_p4 );
    sensitive << ( tmp_sectionID_V_fu_205_p4 );

    SC_METHOD(thread_section_header_V_TDATA_blk_n);
    sensitive << ( section_header_V_TREADY );
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( tmp_reg_318 );
    sensitive << ( icmp_ln879_reg_335 );
    sensitive << ( p_Result_s_reg_339 );

    SC_METHOD(thread_section_header_V_TVALID);
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( ap_predicate_op34_write_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_state_out_V);
    sensitive << ( state_V );
    sensitive << ( ap_CS_iter1_fsm );

    SC_METHOD(thread_symb_check_V);
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( tmp_reg_318 );
    sensitive << ( icmp_ln879_reg_335 );
    sensitive << ( p_Result_s_reg_339 );
    sensitive << ( tmp1_reg_322 );

    SC_METHOD(thread_symb_check_V_ap_vld);
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( tmp_reg_318 );
    sensitive << ( icmp_ln879_reg_335 );
    sensitive << ( p_Result_s_reg_339 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_symbol_check_id_V);
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( tmp_reg_318 );
    sensitive << ( icmp_ln879_reg_335 );
    sensitive << ( p_Result_s_reg_339 );
    sensitive << ( tmp1_reg_322 );

    SC_METHOD(thread_symbol_check_id_V_ap_vld);
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( tmp_reg_318 );
    sensitive << ( icmp_ln879_reg_335 );
    sensitive << ( p_Result_s_reg_339 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_tmp_3_fu_294_p4);
    sensitive << ( tmp1_reg_322 );

    SC_METHOD(thread_tmp_4_fu_232_p4);
    sensitive << ( tmp1_reg_322 );

    SC_METHOD(thread_tmp_dst_module_V_loa_fu_165_p4);
    sensitive << ( L1_axis_V_TDATA );

    SC_METHOD(thread_tmp_frameId_V_fu_256_p4);
    sensitive << ( tmp1_reg_322 );

    SC_METHOD(thread_tmp_nbreadreq_fu_116_p3);
    sensitive << ( L1_axis_V_TVALID );

    SC_METHOD(thread_tmp_numPrbu_V_fu_223_p4);
    sensitive << ( tmp1_reg_322 );

    SC_METHOD(thread_tmp_sectionID_V_fu_205_p4);
    sensitive << ( tmp1_reg_322 );

    SC_METHOD(thread_tmp_slotID_V_fu_274_p4);
    sensitive << ( tmp1_reg_322 );

    SC_METHOD(thread_tmp_startPrbu_V_fu_214_p4);
    sensitive << ( tmp1_reg_322 );

    SC_METHOD(thread_tmp_startsymbolId_V_fu_283_p4);
    sensitive << ( tmp1_reg_322 );

    SC_METHOD(thread_tmp_subframeId_V_fu_265_p4);
    sensitive << ( tmp1_reg_322 );

    SC_METHOD(thread_ap_NS_iter0_fsm);
    sensitive << ( L1_axis_V_TVALID );
    sensitive << ( ap_CS_iter0_fsm );
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( tmp_nbreadreq_fu_116_p3 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_ap_NS_iter1_fsm);
    sensitive << ( L1_axis_V_TVALID );
    sensitive << ( ap_CS_iter0_fsm );
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( tmp_nbreadreq_fu_116_p3 );
    sensitive << ( ap_block_state2_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    state_V = "00";
    ap_CS_iter0_fsm = "0";
    ap_CS_iter1_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Data_Gen_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, L1_axis_V_TDATA, "(port)L1_axis_V_TDATA");
    sc_trace(mVcdFile, L1_axis_V_TVALID, "(port)L1_axis_V_TVALID");
    sc_trace(mVcdFile, L1_axis_V_TREADY, "(port)L1_axis_V_TREADY");
    sc_trace(mVcdFile, application_header_V_TDATA, "(port)application_header_V_TDATA");
    sc_trace(mVcdFile, application_header_V_TVALID, "(port)application_header_V_TVALID");
    sc_trace(mVcdFile, application_header_V_TREADY, "(port)application_header_V_TREADY");
    sc_trace(mVcdFile, section_header_V_TDATA, "(port)section_header_V_TDATA");
    sc_trace(mVcdFile, section_header_V_TVALID, "(port)section_header_V_TVALID");
    sc_trace(mVcdFile, section_header_V_TREADY, "(port)section_header_V_TREADY");
    sc_trace(mVcdFile, state_out_V, "(port)state_out_V");
    sc_trace(mVcdFile, symb_check_V, "(port)symb_check_V");
    sc_trace(mVcdFile, symb_check_V_ap_vld, "(port)symb_check_V_ap_vld");
    sc_trace(mVcdFile, symbol_check_id_V, "(port)symbol_check_id_V");
    sc_trace(mVcdFile, symbol_check_id_V_ap_vld, "(port)symbol_check_id_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, state_V, "state_V");
    sc_trace(mVcdFile, L1_axis_V_TDATA_blk_n, "L1_axis_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_iter0_fsm, "ap_CS_iter0_fsm");
    sc_trace(mVcdFile, ap_CS_iter1_fsm, "ap_CS_iter1_fsm");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_116_p3, "tmp_nbreadreq_fu_116_p3");
    sc_trace(mVcdFile, application_header_V_TDATA_blk_n, "application_header_V_TDATA_blk_n");
    sc_trace(mVcdFile, tmp_reg_318, "tmp_reg_318");
    sc_trace(mVcdFile, icmp_ln879_reg_335, "icmp_ln879_reg_335");
    sc_trace(mVcdFile, p_Result_s_reg_339, "p_Result_s_reg_339");
    sc_trace(mVcdFile, section_header_V_TDATA_blk_n, "section_header_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_predicate_op34_write_state2, "ap_predicate_op34_write_state2");
    sc_trace(mVcdFile, ap_predicate_op44_write_state2, "ap_predicate_op44_write_state2");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, tmp1_reg_322, "tmp1_reg_322");
    sc_trace(mVcdFile, icmp_ln879_fu_175_p2, "icmp_ln879_fu_175_p2");
    sc_trace(mVcdFile, tmp_startsymbolId_V_fu_283_p4, "tmp_startsymbolId_V_fu_283_p4");
    sc_trace(mVcdFile, tmp_dst_module_V_loa_fu_165_p4, "tmp_dst_module_V_loa_fu_165_p4");
    sc_trace(mVcdFile, tmp_numPrbu_V_fu_223_p4, "tmp_numPrbu_V_fu_223_p4");
    sc_trace(mVcdFile, tmp_startPrbu_V_fu_214_p4, "tmp_startPrbu_V_fu_214_p4");
    sc_trace(mVcdFile, tmp_4_fu_232_p4, "tmp_4_fu_232_p4");
    sc_trace(mVcdFile, tmp_sectionID_V_fu_205_p4, "tmp_sectionID_V_fu_205_p4");
    sc_trace(mVcdFile, tmp_slotID_V_fu_274_p4, "tmp_slotID_V_fu_274_p4");
    sc_trace(mVcdFile, tmp_subframeId_V_fu_265_p4, "tmp_subframeId_V_fu_265_p4");
    sc_trace(mVcdFile, tmp_frameId_V_fu_256_p4, "tmp_frameId_V_fu_256_p4");
    sc_trace(mVcdFile, tmp_3_fu_294_p4, "tmp_3_fu_294_p4");
    sc_trace(mVcdFile, ap_NS_iter0_fsm, "ap_NS_iter0_fsm");
    sc_trace(mVcdFile, ap_NS_iter1_fsm, "ap_NS_iter1_fsm");
#endif

    }
    mHdltvinHandle.open("Data_Gen.hdltvin.dat");
    mHdltvoutHandle.open("Data_Gen.hdltvout.dat");
}

Data_Gen::~Data_Gen() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void Data_Gen::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_iter0_fsm = ap_ST_iter0_fsm_state1;
    } else {
        ap_CS_iter0_fsm = ap_NS_iter0_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_iter1_fsm = ap_ST_iter1_fsm_state0;
    } else {
        ap_CS_iter1_fsm = ap_NS_iter1_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        state_V = ap_const_lv2_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_iter1_fsm_state2, ap_CS_iter1_fsm.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_318.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_reg_335.read()) && 
             esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0))) {
            state_V = p_Result_s_reg_339.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_ST_iter0_fsm_state1, ap_CS_iter0_fsm.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_116_p3.read(), ap_const_lv1_1) && !((esl_seteq<1,1,1>(tmp_nbreadreq_fu_116_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, L1_axis_V_TVALID.read())) || (esl_seteq<1,1,1>(ap_ST_iter1_fsm_state2, ap_CS_iter1_fsm.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))))) {
        icmp_ln879_reg_335 = icmp_ln879_fu_175_p2.read();
        tmp1_reg_322 = L1_axis_V_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_ST_iter0_fsm_state1, ap_CS_iter0_fsm.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_116_p3.read(), ap_const_lv1_1) && !((esl_seteq<1,1,1>(tmp_nbreadreq_fu_116_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, L1_axis_V_TVALID.read())) || (esl_seteq<1,1,1>(ap_ST_iter1_fsm_state2, ap_CS_iter1_fsm.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_175_p2.read()))) {
        p_Result_s_reg_339 = L1_axis_V_TDATA.read().range(53, 52);
    }
    if ((esl_seteq<1,1,1>(ap_ST_iter0_fsm_state1, ap_CS_iter0_fsm.read()) && !((esl_seteq<1,1,1>(tmp_nbreadreq_fu_116_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, L1_axis_V_TVALID.read())) || (esl_seteq<1,1,1>(ap_ST_iter1_fsm_state2, ap_CS_iter1_fsm.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))))) {
        tmp_reg_318 = tmp_nbreadreq_fu_116_p3.read();
    }
}

void Data_Gen::thread_L1_axis_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_ST_iter0_fsm_state1, ap_CS_iter0_fsm.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_116_p3.read(), ap_const_lv1_1))) {
        L1_axis_V_TDATA_blk_n = L1_axis_V_TVALID.read();
    } else {
        L1_axis_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void Data_Gen::thread_L1_axis_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_ST_iter0_fsm_state1, ap_CS_iter0_fsm.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_116_p3.read(), ap_const_lv1_1) && 
         !((esl_seteq<1,1,1>(tmp_nbreadreq_fu_116_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, L1_axis_V_TVALID.read())) || (esl_seteq<1,1,1>(ap_ST_iter1_fsm_state2, ap_CS_iter1_fsm.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))))) {
        L1_axis_V_TREADY = ap_const_logic_1;
    } else {
        L1_axis_V_TREADY = ap_const_logic_0;
    }
}

void Data_Gen::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(tmp_nbreadreq_fu_116_p3.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, L1_axis_V_TVALID.read()));
}

void Data_Gen::thread_ap_block_state2_io() {
    ap_block_state2_io = ((esl_seteq<1,1,1>(ap_const_logic_0, section_header_V_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, application_header_V_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read())));
}

void Data_Gen::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Data_Gen::thread_ap_predicate_op34_write_state2() {
    ap_predicate_op34_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_318.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_reg_335.read()) && esl_seteq<1,2,2>(p_Result_s_reg_339.read(), ap_const_lv2_1));
}

void Data_Gen::thread_ap_predicate_op44_write_state2() {
    ap_predicate_op44_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_318.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_reg_335.read()) && esl_seteq<1,2,2>(ap_const_lv2_0, p_Result_s_reg_339.read()));
}

void Data_Gen::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void Data_Gen::thread_application_header_V_TDATA() {
    application_header_V_TDATA = esl_concat<24,8>(esl_concat<16,8>(esl_concat<12,4>(esl_concat<6,6>(tmp_startsymbolId_V_fu_283_p4.read(), tmp_slotID_V_fu_274_p4.read()), tmp_subframeId_V_fu_265_p4.read()), tmp_frameId_V_fu_256_p4.read()), tmp_3_fu_294_p4.read());
}

void Data_Gen::thread_application_header_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_ST_iter1_fsm_state2, ap_CS_iter1_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_318.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_reg_335.read()) && 
         esl_seteq<1,2,2>(ap_const_lv2_0, p_Result_s_reg_339.read()))) {
        application_header_V_TDATA_blk_n = application_header_V_TREADY.read();
    } else {
        application_header_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void Data_Gen::thread_application_header_V_TVALID() {
    if ((esl_seteq<1,1,1>(ap_ST_iter1_fsm_state2, ap_CS_iter1_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0))) {
        application_header_V_TVALID = ap_const_logic_1;
    } else {
        application_header_V_TVALID = ap_const_logic_0;
    }
}

void Data_Gen::thread_icmp_ln879_fu_175_p2() {
    icmp_ln879_fu_175_p2 = (!tmp_dst_module_V_loa_fu_165_p4.read().is_01() || !ap_const_lv10_11.is_01())? sc_lv<1>(): sc_lv<1>(tmp_dst_module_V_loa_fu_165_p4.read() == ap_const_lv10_11);
}

void Data_Gen::thread_section_header_V_TDATA() {
    section_header_V_TDATA = esl_concat<36,12>(esl_concat<34,2>(esl_concat<24,10>(esl_concat<16,8>(ap_const_lv16_0, tmp_numPrbu_V_fu_223_p4.read()), tmp_startPrbu_V_fu_214_p4.read()), tmp_4_fu_232_p4.read()), tmp_sectionID_V_fu_205_p4.read());
}

void Data_Gen::thread_section_header_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_ST_iter1_fsm_state2, ap_CS_iter1_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_318.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_reg_335.read()) && 
         esl_seteq<1,2,2>(p_Result_s_reg_339.read(), ap_const_lv2_1))) {
        section_header_V_TDATA_blk_n = section_header_V_TREADY.read();
    } else {
        section_header_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void Data_Gen::thread_section_header_V_TVALID() {
    if ((esl_seteq<1,1,1>(ap_ST_iter1_fsm_state2, ap_CS_iter1_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0))) {
        section_header_V_TVALID = ap_const_logic_1;
    } else {
        section_header_V_TVALID = ap_const_logic_0;
    }
}

void Data_Gen::thread_state_out_V() {
    state_out_V = esl_zext<8,2>(state_V.read());
}

void Data_Gen::thread_symb_check_V() {
    symb_check_V = tmp1_reg_322.read().range(25, 20);
}

void Data_Gen::thread_symb_check_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_ST_iter1_fsm_state2, ap_CS_iter1_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_318.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_reg_335.read()) && 
         esl_seteq<1,2,2>(ap_const_lv2_0, p_Result_s_reg_339.read()) && 
         esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0))) {
        symb_check_V_ap_vld = ap_const_logic_1;
    } else {
        symb_check_V_ap_vld = ap_const_logic_0;
    }
}

void Data_Gen::thread_symbol_check_id_V() {
    symbol_check_id_V = tmp1_reg_322.read().range(25, 20);
}

void Data_Gen::thread_symbol_check_id_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_ST_iter1_fsm_state2, ap_CS_iter1_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_318.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_reg_335.read()) && 
         esl_seteq<1,2,2>(ap_const_lv2_0, p_Result_s_reg_339.read()) && 
         esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0))) {
        symbol_check_id_V_ap_vld = ap_const_logic_1;
    } else {
        symbol_check_id_V_ap_vld = ap_const_logic_0;
    }
}

void Data_Gen::thread_tmp_3_fu_294_p4() {
    tmp_3_fu_294_p4 = tmp1_reg_322.read().range(51, 44);
}

void Data_Gen::thread_tmp_4_fu_232_p4() {
    tmp_4_fu_232_p4 = tmp1_reg_322.read().range(38, 39);
}

void Data_Gen::thread_tmp_dst_module_V_loa_fu_165_p4() {
    tmp_dst_module_V_loa_fu_165_p4 = L1_axis_V_TDATA.read().range(63, 54);
}

void Data_Gen::thread_tmp_frameId_V_fu_256_p4() {
    tmp_frameId_V_fu_256_p4 = tmp1_reg_322.read().range(43, 36);
}

void Data_Gen::thread_tmp_nbreadreq_fu_116_p3() {
    tmp_nbreadreq_fu_116_p3 =  (sc_lv<1>) ((L1_axis_V_TVALID.read()));
}

void Data_Gen::thread_tmp_numPrbu_V_fu_223_p4() {
    tmp_numPrbu_V_fu_223_p4 = tmp1_reg_322.read().range(27, 20);
}

void Data_Gen::thread_tmp_sectionID_V_fu_205_p4() {
    tmp_sectionID_V_fu_205_p4 = tmp1_reg_322.read().range(51, 40);
}

void Data_Gen::thread_tmp_slotID_V_fu_274_p4() {
    tmp_slotID_V_fu_274_p4 = tmp1_reg_322.read().range(31, 26);
}

void Data_Gen::thread_tmp_startPrbu_V_fu_214_p4() {
    tmp_startPrbu_V_fu_214_p4 = tmp1_reg_322.read().range(37, 28);
}

void Data_Gen::thread_tmp_startsymbolId_V_fu_283_p4() {
    tmp_startsymbolId_V_fu_283_p4 = tmp1_reg_322.read().range(25, 20);
}

void Data_Gen::thread_tmp_subframeId_V_fu_265_p4() {
    tmp_subframeId_V_fu_265_p4 = tmp1_reg_322.read().range(35, 32);
}

void Data_Gen::thread_ap_NS_iter0_fsm() {
    switch (ap_CS_iter0_fsm.read().to_uint64()) {
        case 0 : 
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
break;
        default : 
            ap_NS_iter0_fsm = "X";
            break;
    }
}

void Data_Gen::thread_ap_NS_iter1_fsm() {
    switch (ap_CS_iter1_fsm.read().to_uint64()) {
        case 0 : 
            if ((esl_seteq<1,1,1>(ap_ST_iter0_fsm_state1, ap_CS_iter0_fsm.read()) && esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(tmp_nbreadreq_fu_116_p3.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, L1_axis_V_TVALID.read())))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0) && (!esl_seteq<1,1,1>(ap_ST_iter0_fsm_state1, ap_CS_iter0_fsm.read()) || 
  (esl_seteq<1,1,1>(ap_ST_iter0_fsm_state1, ap_CS_iter0_fsm.read()) && 
   esl_seteq<1,1,1>(tmp_nbreadreq_fu_116_p3.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_logic_0, L1_axis_V_TVALID.read()))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            } else {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            }
            break;
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_ST_iter0_fsm_state1, ap_CS_iter0_fsm.read()) && !((esl_seteq<1,1,1>(tmp_nbreadreq_fu_116_p3.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, L1_axis_V_TVALID.read())) || (esl_seteq<1,1,1>(ap_ST_iter1_fsm_state2, ap_CS_iter1_fsm.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            } else {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            }
            break;
        default : 
            ap_NS_iter1_fsm = "X";
            break;
    }
}

void Data_Gen::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"L1_axis_V_TDATA\" :  \"" << L1_axis_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"L1_axis_V_TVALID\" :  \"" << L1_axis_V_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"L1_axis_V_TREADY\" :  \"" << L1_axis_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"application_header_V_TDATA\" :  \"" << application_header_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"application_header_V_TVALID\" :  \"" << application_header_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"application_header_V_TREADY\" :  \"" << application_header_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"section_header_V_TDATA\" :  \"" << section_header_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"section_header_V_TVALID\" :  \"" << section_header_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"section_header_V_TREADY\" :  \"" << section_header_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_out_V\" :  \"" << state_out_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"symb_check_V\" :  \"" << symb_check_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"symb_check_V_ap_vld\" :  \"" << symb_check_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"symbol_check_id_V\" :  \"" << symbol_check_id_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"symbol_check_id_V_ap_vld\" :  \"" << symbol_check_id_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

