-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Data_Gen is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    L1_axis_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    L1_axis_V_TVALID : IN STD_LOGIC;
    L1_axis_V_TREADY : OUT STD_LOGIC;
    application_header_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    application_header_V_TVALID : OUT STD_LOGIC;
    application_header_V_TREADY : IN STD_LOGIC;
    section_header_V_TDATA : OUT STD_LOGIC_VECTOR (47 downto 0);
    section_header_V_TVALID : OUT STD_LOGIC;
    section_header_V_TREADY : IN STD_LOGIC;
    state_out_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    symb_check_V : OUT STD_LOGIC_VECTOR (5 downto 0);
    symb_check_V_ap_vld : OUT STD_LOGIC;
    symbol_check_id_V : OUT STD_LOGIC_VECTOR (5 downto 0);
    symbol_check_id_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Data_Gen is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Data_Gen,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=3.200000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.486250,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=72,HLS_SYN_LUT=50,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_iter0_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_ST_iter1_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_ST_iter1_fsm_state0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv10_11 : STD_LOGIC_VECTOR (9 downto 0) := "0000010001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal state_V : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal L1_axis_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_iter1_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal tmp_nbreadreq_fu_116_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal application_header_V_TDATA_blk_n : STD_LOGIC;
    signal tmp_reg_318 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_335 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_339 : STD_LOGIC_VECTOR (1 downto 0);
    signal section_header_V_TDATA_blk_n : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_predicate_op34_write_state2 : BOOLEAN;
    signal ap_predicate_op44_write_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal tmp1_reg_322 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln879_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_startsymbolId_V_fu_283_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dst_module_V_loa_fu_165_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_numPrbu_V_fu_223_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_startPrbu_V_fu_214_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_232_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_sectionID_V_fu_205_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_slotID_V_fu_274_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_subframeId_V_fu_265_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_frameId_V_fu_256_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_294_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_iter1_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_iter0_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            else
                ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
            end if;
        end if;
    end process;


    ap_CS_iter1_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
            else
                ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
            end if;
        end if;
    end process;


    state_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                state_V <= ap_const_lv2_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_ST_iter1_fsm_state2 = ap_CS_iter1_fsm) and (icmp_ln879_reg_335 = ap_const_lv1_1) and (tmp_reg_318 = ap_const_lv1_1))) then 
                    state_V <= p_Result_s_reg_339;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = L1_axis_V_TVALID) and (tmp_nbreadreq_fu_116_p3 = ap_const_lv1_1)) or ((ap_ST_iter1_fsm_state2 = ap_CS_iter1_fsm) and (ap_const_boolean_1 = ap_block_state2_io)))) and (ap_ST_iter0_fsm_state1 = ap_CS_iter0_fsm) and (tmp_nbreadreq_fu_116_p3 = ap_const_lv1_1))) then
                icmp_ln879_reg_335 <= icmp_ln879_fu_175_p2;
                tmp1_reg_322 <= L1_axis_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = L1_axis_V_TVALID) and (tmp_nbreadreq_fu_116_p3 = ap_const_lv1_1)) or ((ap_ST_iter1_fsm_state2 = ap_CS_iter1_fsm) and (ap_const_boolean_1 = ap_block_state2_io)))) and (ap_ST_iter0_fsm_state1 = ap_CS_iter0_fsm) and (icmp_ln879_fu_175_p2 = ap_const_lv1_1) and (tmp_nbreadreq_fu_116_p3 = ap_const_lv1_1))) then
                p_Result_s_reg_339 <= L1_axis_V_TDATA(53 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = L1_axis_V_TVALID) and (tmp_nbreadreq_fu_116_p3 = ap_const_lv1_1)) or ((ap_ST_iter1_fsm_state2 = ap_CS_iter1_fsm) and (ap_const_boolean_1 = ap_block_state2_io)))) and (ap_ST_iter0_fsm_state1 = ap_CS_iter0_fsm))) then
                tmp_reg_318 <= tmp_nbreadreq_fu_116_p3;
            end if;
        end if;
    end process;

    ap_NS_iter0_fsm_assign_proc : process (L1_axis_V_TVALID, ap_CS_iter0_fsm, ap_CS_iter1_fsm, tmp_nbreadreq_fu_116_p3, ap_block_state2_io)
    begin
        case ap_CS_iter0_fsm is
            when ap_ST_iter0_fsm_state1 => 
                ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            when others =>  
                ap_NS_iter0_fsm <= "X";
        end case;
    end process;

    ap_NS_iter1_fsm_assign_proc : process (L1_axis_V_TVALID, ap_CS_iter0_fsm, ap_CS_iter1_fsm, tmp_nbreadreq_fu_116_p3, ap_block_state2_io)
    begin
        case ap_CS_iter1_fsm is
            when ap_ST_iter1_fsm_state2 => 
                if ((not(((ap_const_logic_0 = L1_axis_V_TVALID) and (tmp_nbreadreq_fu_116_p3 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_state2_io) and (ap_ST_iter0_fsm_state1 = ap_CS_iter0_fsm))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                elsif (((ap_const_boolean_0 = ap_block_state2_io) and (not((ap_ST_iter0_fsm_state1 = ap_CS_iter0_fsm)) or ((ap_ST_iter0_fsm_state1 = ap_CS_iter0_fsm) and (ap_const_logic_0 = L1_axis_V_TVALID) and (tmp_nbreadreq_fu_116_p3 = ap_const_lv1_1))))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                end if;
            when ap_ST_iter1_fsm_state0 => 
                if ((not((((ap_const_logic_0 = L1_axis_V_TVALID) and (tmp_nbreadreq_fu_116_p3 = ap_const_lv1_1)) or ((ap_ST_iter1_fsm_state2 = ap_CS_iter1_fsm) and (ap_const_boolean_1 = ap_block_state2_io)))) and (ap_ST_iter0_fsm_state1 = ap_CS_iter0_fsm))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                end if;
            when others =>  
                ap_NS_iter1_fsm <= "X";
        end case;
    end process;

    L1_axis_V_TDATA_blk_n_assign_proc : process(L1_axis_V_TVALID, ap_CS_iter0_fsm, tmp_nbreadreq_fu_116_p3)
    begin
        if (((ap_ST_iter0_fsm_state1 = ap_CS_iter0_fsm) and (tmp_nbreadreq_fu_116_p3 = ap_const_lv1_1))) then 
            L1_axis_V_TDATA_blk_n <= L1_axis_V_TVALID;
        else 
            L1_axis_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    L1_axis_V_TREADY_assign_proc : process(L1_axis_V_TVALID, ap_CS_iter0_fsm, ap_CS_iter1_fsm, tmp_nbreadreq_fu_116_p3, ap_block_state2_io)
    begin
        if ((not((((ap_const_logic_0 = L1_axis_V_TVALID) and (tmp_nbreadreq_fu_116_p3 = ap_const_lv1_1)) or ((ap_ST_iter1_fsm_state2 = ap_CS_iter1_fsm) and (ap_const_boolean_1 = ap_block_state2_io)))) and (ap_ST_iter0_fsm_state1 = ap_CS_iter0_fsm) and (tmp_nbreadreq_fu_116_p3 = ap_const_lv1_1))) then 
            L1_axis_V_TREADY <= ap_const_logic_1;
        else 
            L1_axis_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(L1_axis_V_TVALID, tmp_nbreadreq_fu_116_p3)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_const_logic_0 = L1_axis_V_TVALID) and (tmp_nbreadreq_fu_116_p3 = ap_const_lv1_1));
    end process;


    ap_block_state2_io_assign_proc : process(application_header_V_TREADY, section_header_V_TREADY, ap_predicate_op34_write_state2, ap_predicate_op44_write_state2)
    begin
                ap_block_state2_io <= (((application_header_V_TREADY = ap_const_logic_0) and (ap_predicate_op44_write_state2 = ap_const_boolean_1)) or ((section_header_V_TREADY = ap_const_logic_0) and (ap_predicate_op34_write_state2 = ap_const_boolean_1)));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_predicate_op34_write_state2_assign_proc : process(tmp_reg_318, icmp_ln879_reg_335, p_Result_s_reg_339)
    begin
                ap_predicate_op34_write_state2 <= ((p_Result_s_reg_339 = ap_const_lv2_1) and (icmp_ln879_reg_335 = ap_const_lv1_1) and (tmp_reg_318 = ap_const_lv1_1));
    end process;


    ap_predicate_op44_write_state2_assign_proc : process(tmp_reg_318, icmp_ln879_reg_335, p_Result_s_reg_339)
    begin
                ap_predicate_op44_write_state2 <= ((icmp_ln879_reg_335 = ap_const_lv1_1) and (tmp_reg_318 = ap_const_lv1_1) and (p_Result_s_reg_339 = ap_const_lv2_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    application_header_V_TDATA <= ((((tmp_startsymbolId_V_fu_283_p4 & tmp_slotID_V_fu_274_p4) & tmp_subframeId_V_fu_265_p4) & tmp_frameId_V_fu_256_p4) & tmp_3_fu_294_p4);

    application_header_V_TDATA_blk_n_assign_proc : process(application_header_V_TREADY, ap_CS_iter1_fsm, tmp_reg_318, icmp_ln879_reg_335, p_Result_s_reg_339)
    begin
        if (((ap_ST_iter1_fsm_state2 = ap_CS_iter1_fsm) and (icmp_ln879_reg_335 = ap_const_lv1_1) and (tmp_reg_318 = ap_const_lv1_1) and (p_Result_s_reg_339 = ap_const_lv2_0))) then 
            application_header_V_TDATA_blk_n <= application_header_V_TREADY;
        else 
            application_header_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    application_header_V_TVALID_assign_proc : process(ap_CS_iter1_fsm, ap_predicate_op44_write_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_ST_iter1_fsm_state2 = ap_CS_iter1_fsm) and (ap_predicate_op44_write_state2 = ap_const_boolean_1))) then 
            application_header_V_TVALID <= ap_const_logic_1;
        else 
            application_header_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln879_fu_175_p2 <= "1" when (tmp_dst_module_V_loa_fu_165_p4 = ap_const_lv10_11) else "0";
    section_header_V_TDATA <= ((((ap_const_lv16_0 & tmp_numPrbu_V_fu_223_p4) & tmp_startPrbu_V_fu_214_p4) & tmp_4_fu_232_p4) & tmp_sectionID_V_fu_205_p4);

    section_header_V_TDATA_blk_n_assign_proc : process(section_header_V_TREADY, ap_CS_iter1_fsm, tmp_reg_318, icmp_ln879_reg_335, p_Result_s_reg_339)
    begin
        if (((ap_ST_iter1_fsm_state2 = ap_CS_iter1_fsm) and (p_Result_s_reg_339 = ap_const_lv2_1) and (icmp_ln879_reg_335 = ap_const_lv1_1) and (tmp_reg_318 = ap_const_lv1_1))) then 
            section_header_V_TDATA_blk_n <= section_header_V_TREADY;
        else 
            section_header_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    section_header_V_TVALID_assign_proc : process(ap_CS_iter1_fsm, ap_predicate_op34_write_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_ST_iter1_fsm_state2 = ap_CS_iter1_fsm) and (ap_predicate_op34_write_state2 = ap_const_boolean_1))) then 
            section_header_V_TVALID <= ap_const_logic_1;
        else 
            section_header_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    state_out_V <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_V),8));
    symb_check_V <= tmp1_reg_322(25 downto 20);

    symb_check_V_ap_vld_assign_proc : process(ap_CS_iter1_fsm, tmp_reg_318, icmp_ln879_reg_335, p_Result_s_reg_339, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_ST_iter1_fsm_state2 = ap_CS_iter1_fsm) and (icmp_ln879_reg_335 = ap_const_lv1_1) and (tmp_reg_318 = ap_const_lv1_1) and (p_Result_s_reg_339 = ap_const_lv2_0))) then 
            symb_check_V_ap_vld <= ap_const_logic_1;
        else 
            symb_check_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    symbol_check_id_V <= tmp1_reg_322(25 downto 20);

    symbol_check_id_V_ap_vld_assign_proc : process(ap_CS_iter1_fsm, tmp_reg_318, icmp_ln879_reg_335, p_Result_s_reg_339, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_ST_iter1_fsm_state2 = ap_CS_iter1_fsm) and (icmp_ln879_reg_335 = ap_const_lv1_1) and (tmp_reg_318 = ap_const_lv1_1) and (p_Result_s_reg_339 = ap_const_lv2_0))) then 
            symbol_check_id_V_ap_vld <= ap_const_logic_1;
        else 
            symbol_check_id_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_294_p4 <= tmp1_reg_322(51 downto 44);
    
    tmp_4_fu_232_p4_proc : process(tmp1_reg_322)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_4_fu_232_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_27(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_26(6 - 1 downto 0);
        v0_cpy := tmp1_reg_322;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_26(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_27(6-1 downto 0)));
            for tmp_4_fu_232_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_4_fu_232_p4_i) := tmp1_reg_322(64-1-tmp_4_fu_232_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_4_fu_232_p4 <= resvalue(2-1 downto 0);
    end process;

    tmp_dst_module_V_loa_fu_165_p4 <= L1_axis_V_TDATA(63 downto 54);
    tmp_frameId_V_fu_256_p4 <= tmp1_reg_322(43 downto 36);
    tmp_nbreadreq_fu_116_p3 <= (0=>(L1_axis_V_TVALID), others=>'-');
    tmp_numPrbu_V_fu_223_p4 <= tmp1_reg_322(27 downto 20);
    tmp_sectionID_V_fu_205_p4 <= tmp1_reg_322(51 downto 40);
    tmp_slotID_V_fu_274_p4 <= tmp1_reg_322(31 downto 26);
    tmp_startPrbu_V_fu_214_p4 <= tmp1_reg_322(37 downto 28);
    tmp_startsymbolId_V_fu_283_p4 <= tmp1_reg_322(25 downto 20);
    tmp_subframeId_V_fu_265_p4 <= tmp1_reg_322(35 downto 32);
end behav;
