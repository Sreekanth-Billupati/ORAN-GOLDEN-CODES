// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="eCpri_header_config,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu19eg-ffvd1760-3-e,HLS_INPUT_CLOCK=3.200000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.004000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=88,HLS_SYN_LUT=181,HLS_VERSION=2019_1}" *)

module eCpri_header_config (
        ap_clk,
        ap_rst_n,
        eCPRI_PCID_config_V_PCID_conf_V_TDATA,
        eCPRI_PCID_config_V_PCID_conf_V_TVALID,
        eCPRI_PCID_config_V_PCID_conf_V_TREADY,
        eCPRI_data_out_V_data_V_TDATA,
        eCPRI_data_out_V_data_V_TVALID,
        eCPRI_data_out_V_data_V_TREADY,
        state_out,
        PAYLOAD_VALUE
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [15:0] eCPRI_PCID_config_V_PCID_conf_V_TDATA;
input   eCPRI_PCID_config_V_PCID_conf_V_TVALID;
output   eCPRI_PCID_config_V_PCID_conf_V_TREADY;
output  [63:0] eCPRI_data_out_V_data_V_TDATA;
output   eCPRI_data_out_V_data_V_TVALID;
input   eCPRI_data_out_V_data_V_TREADY;
output  [7:0] state_out;
output  [15:0] PAYLOAD_VALUE;

reg eCPRI_PCID_config_V_PCID_conf_V_TREADY;
reg[63:0] eCPRI_data_out_V_data_V_TDATA;
reg eCPRI_data_out_V_data_V_TVALID;
reg[15:0] PAYLOAD_VALUE;

 reg    ap_rst_n_inv;
reg   [1:0] data_src_state;
reg   [31:0] count;
reg   [15:0] pcid_config_value_V;
reg   [15:0] start_pcid_config_va;
reg    eCPRI_PCID_config_V_PCID_conf_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
wire   [1:0] data_src_state_load_load_fu_175_p1;
wire   [0:0] tmp_nbreadreq_fu_80_p3;
reg    eCPRI_data_out_V_data_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [1:0] data_src_state_load_reg_264;
reg   [0:0] icmp_ln879_reg_269;
reg    ap_predicate_op19_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_predicate_op48_write_state2;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln879_fu_196_p2;
reg   [0:0] tmp_reg_273;
reg   [15:0] tmp_PCID_conf_V_reg_277;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_count_flag_1_phi_fu_120_p14;
wire   [0:0] ap_phi_reg_pp0_iter0_count_flag_1_reg_117;
reg   [31:0] ap_phi_mux_count_new_1_phi_fu_147_p14;
wire   [31:0] ap_phi_reg_pp0_iter0_count_new_1_reg_144;
wire   [31:0] add_ln52_fu_189_p2;
reg    ap_block_pp0_stage0_01001;
wire   [63:0] p_Result_1_fu_232_p4;
wire   [63:0] p_Result_s_fu_243_p4;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_162;
reg    ap_condition_146;

// power-on initialization
initial begin
#0 data_src_state = 2'd0;
#0 count = 32'd0;
#0 pcid_config_value_V = 16'd0;
#0 start_pcid_config_va = 16'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_src_state <= 2'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_fu_196_p2 == 1'd1) & (data_src_state_load_load_fu_175_p1 == 2'd1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            data_src_state <= 2'd2;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (data_src_state_load_load_fu_175_p1 == 2'd2) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            data_src_state <= 2'd3;
        end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_fu_196_p2 == 1'd0) & (data_src_state_load_load_fu_175_p1 == 2'd1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (data_src_state_load_load_fu_175_p1 == 2'd3) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_80_p3 == 1'd1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (data_src_state == 2'd0)))) begin
            data_src_state <= 2'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_146)) begin
        if (((tmp_reg_273 == 1'd1) & (data_src_state_load_reg_264 == 2'd0))) begin
            pcid_config_value_V <= tmp_PCID_conf_V_reg_277;
        end else if ((data_src_state_load_reg_264 == 2'd3)) begin
            pcid_config_value_V <= start_pcid_config_va;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_count_flag_1_phi_fu_120_p14 == 1'd1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count <= ap_phi_mux_count_new_1_phi_fu_147_p14;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_src_state_load_reg_264 <= data_src_state;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (data_src_state_load_load_fu_175_p1 == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln879_reg_269 <= icmp_ln879_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_273 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (data_src_state_load_reg_264 == 2'd0))) begin
        start_pcid_config_va <= tmp_PCID_conf_V_reg_277;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op19_read_state1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_PCID_conf_V_reg_277 <= eCPRI_PCID_config_V_PCID_conf_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (data_src_state == 2'd0))) begin
        tmp_reg_273 <= tmp_nbreadreq_fu_80_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_162)) begin
        if (((icmp_ln879_reg_269 == 1'd0) & (data_src_state_load_reg_264 == 2'd1))) begin
            PAYLOAD_VALUE = 16'd1440;
        end else if ((data_src_state_load_reg_264 == 2'd2)) begin
            PAYLOAD_VALUE = 16'd144;
        end else begin
            PAYLOAD_VALUE = 'bx;
        end
    end else begin
        PAYLOAD_VALUE = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln879_fu_196_p2 == 1'd0) & (data_src_state_load_load_fu_175_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln879_fu_196_p2 == 1'd1) & (data_src_state_load_load_fu_175_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_nbreadreq_fu_80_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (data_src_state == 2'd0)) | ((data_src_state_load_load_fu_175_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_phi_mux_count_flag_1_phi_fu_120_p14 = 1'd1;
    end else if ((((tmp_nbreadreq_fu_80_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (data_src_state == 2'd0)) | ((data_src_state_load_load_fu_175_p1 == 2'd2) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_phi_mux_count_flag_1_phi_fu_120_p14 = 1'd0;
    end else begin
        ap_phi_mux_count_flag_1_phi_fu_120_p14 = ap_phi_reg_pp0_iter0_count_flag_1_reg_117;
    end
end

always @ (*) begin
    if (((icmp_ln879_fu_196_p2 == 1'd0) & (data_src_state_load_load_fu_175_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_count_new_1_phi_fu_147_p14 = add_ln52_fu_189_p2;
    end else if ((((icmp_ln879_fu_196_p2 == 1'd1) & (data_src_state_load_load_fu_175_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_nbreadreq_fu_80_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (data_src_state == 2'd0)) | ((tmp_nbreadreq_fu_80_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (data_src_state == 2'd0)) | ((data_src_state_load_load_fu_175_p1 == 2'd3) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_phi_mux_count_new_1_phi_fu_147_p14 = 32'd0;
    end else begin
        ap_phi_mux_count_new_1_phi_fu_147_p14 = ap_phi_reg_pp0_iter0_count_new_1_reg_144;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((tmp_nbreadreq_fu_80_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (data_src_state == 2'd0))) begin
        eCPRI_PCID_config_V_PCID_conf_V_TDATA_blk_n = eCPRI_PCID_config_V_PCID_conf_V_TVALID;
    end else begin
        eCPRI_PCID_config_V_PCID_conf_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op19_read_state1 == 1'b1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        eCPRI_PCID_config_V_PCID_conf_V_TREADY = 1'b1;
    end else begin
        eCPRI_PCID_config_V_PCID_conf_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_162)) begin
        if ((ap_predicate_op48_write_state2 == 1'b1)) begin
            eCPRI_data_out_V_data_V_TDATA = p_Result_s_fu_243_p4;
        end else if ((data_src_state_load_reg_264 == 2'd2)) begin
            eCPRI_data_out_V_data_V_TDATA = p_Result_1_fu_232_p4;
        end else begin
            eCPRI_data_out_V_data_V_TDATA = 'bx;
        end
    end else begin
        eCPRI_data_out_V_data_V_TDATA = 'bx;
    end
end

always @ (*) begin
    if ((((data_src_state_load_reg_264 == 2'd2) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln879_reg_269 == 1'd0) & (data_src_state_load_reg_264 == 2'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        eCPRI_data_out_V_data_V_TDATA_blk_n = eCPRI_data_out_V_data_V_TREADY;
    end else begin
        eCPRI_data_out_V_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op48_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (data_src_state_load_reg_264 == 2'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        eCPRI_data_out_V_data_V_TVALID = 1'b1;
    end else begin
        eCPRI_data_out_V_data_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_fu_189_p2 = (count + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((eCPRI_PCID_config_V_PCID_conf_V_TVALID == 1'b0) & (ap_predicate_op19_read_state1 == 1'b1) & (1'b1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state2_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((eCPRI_PCID_config_V_PCID_conf_V_TVALID == 1'b0) & (ap_predicate_op19_read_state1 == 1'b1) & (1'b1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state2_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((eCPRI_PCID_config_V_PCID_conf_V_TVALID == 1'b0) & (ap_predicate_op19_read_state1 == 1'b1) & (1'b1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((eCPRI_PCID_config_V_PCID_conf_V_TVALID == 1'b0) & (ap_predicate_op19_read_state1 == 1'b1));
end

always @ (*) begin
    ap_block_state2_io = (((eCPRI_data_out_V_data_V_TREADY == 1'b0) & (ap_predicate_op48_write_state2 == 1'b1)) | ((data_src_state_load_reg_264 == 2'd2) & (eCPRI_data_out_V_data_V_TREADY == 1'b0)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_146 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_162 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_count_flag_1_reg_117 = 'bx;

assign ap_phi_reg_pp0_iter0_count_new_1_reg_144 = 'bx;

always @ (*) begin
    ap_predicate_op19_read_state1 = ((tmp_nbreadreq_fu_80_p3 == 1'd1) & (data_src_state == 2'd0));
end

always @ (*) begin
    ap_predicate_op48_write_state2 = ((icmp_ln879_reg_269 == 1'd0) & (data_src_state_load_reg_264 == 2'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data_src_state_load_load_fu_175_p1 = data_src_state;

assign icmp_ln879_fu_196_p2 = ((add_ln52_fu_189_p2 == 32'd10) ? 1'b1 : 1'b0);

assign p_Result_1_fu_232_p4 = {{{{16'd256}, {pcid_config_value_V}}}, {32'd9437185}};

assign p_Result_s_fu_243_p4 = {{{{16'd256}, {pcid_config_value_V}}}, {32'd94371841}};

assign state_out = data_src_state_load_reg_264;

assign tmp_nbreadreq_fu_80_p3 = eCPRI_PCID_config_V_PCID_conf_V_TVALID;

endmodule //eCpri_header_config
