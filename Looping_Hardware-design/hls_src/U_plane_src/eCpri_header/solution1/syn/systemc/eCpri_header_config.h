// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _eCpri_header_config_HH_
#define _eCpri_header_config_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct eCpri_header_config : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<16> > eCPRI_PCID_config_V_PCID_conf_V_TDATA;
    sc_in< sc_logic > eCPRI_PCID_config_V_PCID_conf_V_TVALID;
    sc_out< sc_logic > eCPRI_PCID_config_V_PCID_conf_V_TREADY;
    sc_out< sc_lv<64> > eCPRI_data_out_V_data_V_TDATA;
    sc_out< sc_logic > eCPRI_data_out_V_data_V_TVALID;
    sc_in< sc_logic > eCPRI_data_out_V_data_V_TREADY;
    sc_out< sc_lv<8> > state_out;
    sc_out< sc_lv<16> > PAYLOAD_VALUE;


    // Module declarations
    eCpri_header_config(sc_module_name name);
    SC_HAS_PROCESS(eCpri_header_config);

    ~eCpri_header_config();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<2> > data_src_state;
    sc_signal< sc_lv<32> > count;
    sc_signal< sc_lv<16> > pcid_config_value_V;
    sc_signal< sc_lv<16> > start_pcid_config_va;
    sc_signal< sc_logic > eCPRI_PCID_config_V_PCID_conf_V_TDATA_blk_n;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<2> > data_src_state_load_load_fu_175_p1;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_80_p3;
    sc_signal< sc_logic > eCPRI_data_out_V_data_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<2> > data_src_state_load_reg_264;
    sc_signal< sc_lv<1> > icmp_ln879_reg_269;
    sc_signal< bool > ap_predicate_op19_read_state1;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_predicate_op48_write_state2;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln879_fu_196_p2;
    sc_signal< sc_lv<1> > tmp_reg_273;
    sc_signal< sc_lv<16> > tmp_PCID_conf_V_reg_277;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<1> > ap_phi_mux_count_flag_1_phi_fu_120_p14;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_count_flag_1_reg_117;
    sc_signal< sc_lv<32> > ap_phi_mux_count_new_1_phi_fu_147_p14;
    sc_signal< sc_lv<32> > ap_phi_reg_pp0_iter0_count_new_1_reg_144;
    sc_signal< sc_lv<32> > add_ln52_fu_189_p2;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<64> > p_Result_1_fu_232_p4;
    sc_signal< sc_lv<64> > p_Result_s_fu_243_p4;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_162;
    sc_signal< bool > ap_condition_146;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<16> ap_const_lv16_90;
    static const sc_lv<16> ap_const_lv16_5A0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<16> ap_const_lv16_100;
    static const sc_lv<32> ap_const_lv32_900001;
    static const sc_lv<32> ap_const_lv32_5A00001;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_PAYLOAD_VALUE();
    void thread_add_ln52_fu_189_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_io();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_condition_146();
    void thread_ap_condition_162();
    void thread_ap_enable_pp0();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_count_flag_1_phi_fu_120_p14();
    void thread_ap_phi_mux_count_new_1_phi_fu_147_p14();
    void thread_ap_phi_reg_pp0_iter0_count_flag_1_reg_117();
    void thread_ap_phi_reg_pp0_iter0_count_new_1_reg_144();
    void thread_ap_predicate_op19_read_state1();
    void thread_ap_predicate_op48_write_state2();
    void thread_ap_reset_idle_pp0();
    void thread_ap_rst_n_inv();
    void thread_data_src_state_load_load_fu_175_p1();
    void thread_eCPRI_PCID_config_V_PCID_conf_V_TDATA_blk_n();
    void thread_eCPRI_PCID_config_V_PCID_conf_V_TREADY();
    void thread_eCPRI_data_out_V_data_V_TDATA();
    void thread_eCPRI_data_out_V_data_V_TDATA_blk_n();
    void thread_eCPRI_data_out_V_data_V_TVALID();
    void thread_icmp_ln879_fu_196_p2();
    void thread_p_Result_1_fu_232_p4();
    void thread_p_Result_s_fu_243_p4();
    void thread_state_out();
    void thread_tmp_nbreadreq_fu_80_p3();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
