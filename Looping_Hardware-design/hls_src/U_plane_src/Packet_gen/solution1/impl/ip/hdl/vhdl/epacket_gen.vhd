-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity epacket_gen is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dout_TREADY : IN STD_LOGIC;
    dout_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    dout_TVALID : OUT STD_LOGIC;
    dout_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
    dout_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    count_V : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of epacket_gen is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "epacket_gen,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu19eg-ffvd1760-3-e,HLS_INPUT_CLOCK=3.200000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.101562,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=288,HLS_SYN_LUT=196,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_iter0_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_ST_iter1_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_iter1_fsm_state0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_FF : STD_LOGIC_VECTOR (15 downto 0) := "0000000011111111";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal ap_CS_iter0_fsm_state1 : STD_LOGIC;
    signal ap_CS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    signal ap_CS_iter1_fsm_state0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal dout_V_data_V_1_ack_in : STD_LOGIC;
    signal dout_V_data_V_1_ack_out : STD_LOGIC;
    signal dout_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dout_V_keep_V_1_ack_out : STD_LOGIC;
    signal dout_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dout_V_last_V_1_ack_out : STD_LOGIC;
    signal dout_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_CS_iter1_fsm_state2 : STD_LOGIC;
    signal dout_V_data_V_1_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal dout_V_data_V_1_vld_in : STD_LOGIC;
    signal dout_V_data_V_1_vld_out : STD_LOGIC;
    signal dout_V_data_V_1_payload_A : STD_LOGIC_VECTOR (127 downto 0);
    signal dout_V_data_V_1_payload_B : STD_LOGIC_VECTOR (127 downto 0);
    signal dout_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal dout_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal dout_V_data_V_1_sel : STD_LOGIC;
    signal dout_V_data_V_1_load_A : STD_LOGIC;
    signal dout_V_data_V_1_load_B : STD_LOGIC;
    signal dout_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal dout_V_keep_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal dout_V_keep_V_1_vld_in : STD_LOGIC;
    signal dout_V_keep_V_1_vld_out : STD_LOGIC;
    signal dout_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal dout_V_keep_V_1_sel : STD_LOGIC;
    signal dout_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_V_last_V_1_vld_in : STD_LOGIC;
    signal dout_V_last_V_1_vld_out : STD_LOGIC;
    signal dout_V_last_V_1_ack_in : STD_LOGIC;
    signal dout_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal dout_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal dout_V_last_V_1_sel : STD_LOGIC;
    signal dout_V_last_V_1_load_A : STD_LOGIC;
    signal dout_V_last_V_1_load_B : STD_LOGIC;
    signal dout_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal message_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal dout_TDATA_blk_n : STD_LOGIC;
    signal tmp_last_V_fu_86_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_V_fu_113_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln21_fu_99_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln215_fu_68_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln879_fu_82_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_72_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln700_fu_93_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_iter0_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            else
                ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
            end if;
        end if;
    end process;


    ap_CS_iter1_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
            else
                ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
            end if;
        end if;
    end process;


    dout_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dout_V_data_V_1_vld_out = ap_const_logic_1) and (dout_V_data_V_1_ack_out = ap_const_logic_1))) then 
                                        dout_V_data_V_1_sel_rd <= not(dout_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dout_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dout_V_data_V_1_vld_in = ap_const_logic_1) and (dout_V_data_V_1_ack_in = ap_const_logic_1))) then 
                                        dout_V_data_V_1_sel_wr <= not(dout_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dout_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((dout_V_data_V_1_vld_in = ap_const_logic_0) and (dout_V_data_V_1_state = ap_const_lv2_3) and (dout_V_data_V_1_ack_out = ap_const_logic_1)) or ((dout_V_data_V_1_vld_in = ap_const_logic_0) and (dout_V_data_V_1_state = ap_const_lv2_2)))) then 
                    dout_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((dout_TREADY = ap_const_logic_0) and (dout_V_data_V_1_state = ap_const_lv2_1)) or ((dout_TREADY = ap_const_logic_0) and (dout_V_data_V_1_state = ap_const_lv2_3) and (dout_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    dout_V_data_V_1_state <= ap_const_lv2_1;
                elsif ((((dout_V_data_V_1_state = ap_const_lv2_1) and (dout_V_data_V_1_ack_out = ap_const_logic_1)) or (not(((dout_V_data_V_1_vld_in = ap_const_logic_0) and (dout_V_data_V_1_ack_out = ap_const_logic_1))) and not(((dout_TREADY = ap_const_logic_0) and (dout_V_data_V_1_vld_in = ap_const_logic_1))) and (dout_V_data_V_1_state = ap_const_lv2_3)) or ((dout_V_data_V_1_state = ap_const_lv2_2) and (dout_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    dout_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    dout_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dout_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dout_V_keep_V_1_ack_out = ap_const_logic_1) and (dout_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        dout_V_keep_V_1_sel_rd <= not(dout_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dout_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((dout_V_keep_V_1_state = ap_const_lv2_3) and (dout_V_keep_V_1_vld_in = ap_const_logic_0) and (dout_V_keep_V_1_ack_out = ap_const_logic_1)) or ((dout_V_keep_V_1_state = ap_const_lv2_2) and (dout_V_keep_V_1_vld_in = ap_const_logic_0)))) then 
                    dout_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((dout_V_keep_V_1_state = ap_const_lv2_1) and (dout_TREADY = ap_const_logic_0)) or ((dout_V_keep_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0) and (dout_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    dout_V_keep_V_1_state <= ap_const_lv2_1;
                elsif ((((dout_V_keep_V_1_state = ap_const_lv2_1) and (dout_V_keep_V_1_ack_out = ap_const_logic_1)) or (not(((dout_V_keep_V_1_vld_in = ap_const_logic_0) and (dout_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((dout_TREADY = ap_const_logic_0) and (dout_V_keep_V_1_vld_in = ap_const_logic_1))) and (dout_V_keep_V_1_state = ap_const_lv2_3)) or ((dout_V_keep_V_1_state = ap_const_lv2_2) and (dout_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    dout_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    dout_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dout_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dout_V_last_V_1_ack_out = ap_const_logic_1) and (dout_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        dout_V_last_V_1_sel_rd <= not(dout_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dout_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dout_V_last_V_1_ack_in = ap_const_logic_1) and (dout_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        dout_V_last_V_1_sel_wr <= not(dout_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dout_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((dout_V_last_V_1_state = ap_const_lv2_3) and (dout_V_last_V_1_vld_in = ap_const_logic_0) and (dout_V_last_V_1_ack_out = ap_const_logic_1)) or ((dout_V_last_V_1_state = ap_const_lv2_2) and (dout_V_last_V_1_vld_in = ap_const_logic_0)))) then 
                    dout_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((dout_V_last_V_1_state = ap_const_lv2_1) and (dout_TREADY = ap_const_logic_0)) or ((dout_V_last_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0) and (dout_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    dout_V_last_V_1_state <= ap_const_lv2_1;
                elsif ((((dout_V_last_V_1_state = ap_const_lv2_1) and (dout_V_last_V_1_ack_out = ap_const_logic_1)) or (not(((dout_V_last_V_1_vld_in = ap_const_logic_0) and (dout_V_last_V_1_ack_out = ap_const_logic_1))) and not(((dout_TREADY = ap_const_logic_0) and (dout_V_last_V_1_vld_in = ap_const_logic_1))) and (dout_V_last_V_1_state = ap_const_lv2_3)) or ((dout_V_last_V_1_state = ap_const_lv2_2) and (dout_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    dout_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    dout_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dout_V_data_V_1_load_A = ap_const_logic_1)) then
                dout_V_data_V_1_payload_A <= out_data_V_fu_113_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dout_V_data_V_1_load_B = ap_const_logic_1)) then
                dout_V_data_V_1_payload_B <= out_data_V_fu_113_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dout_V_last_V_1_load_A = ap_const_logic_1)) then
                dout_V_last_V_1_payload_A <= tmp_last_V_fu_86_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dout_V_last_V_1_load_B = ap_const_logic_1)) then
                dout_V_last_V_1_payload_B <= tmp_last_V_fu_86_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((dout_V_data_V_1_ack_in = ap_const_logic_0) or (ap_start = ap_const_logic_0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and ((dout_V_last_V_1_state = ap_const_lv2_1) or (dout_V_keep_V_1_state = ap_const_lv2_1) or (dout_V_data_V_1_ack_in = ap_const_logic_0) or (dout_V_data_V_1_state = ap_const_lv2_1) or ((dout_V_last_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0)) or ((dout_V_keep_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0)) or ((dout_TREADY = ap_const_logic_0) and (dout_V_data_V_1_state = ap_const_lv2_3)))))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                message_V <= select_ln21_fu_99_p3;
            end if;
        end if;
    end process;

    ap_NS_iter0_fsm_assign_proc : process (ap_start, ap_CS_iter0_fsm, dout_TREADY, dout_V_data_V_1_ack_in, dout_V_data_V_1_state, dout_V_keep_V_1_state, dout_V_last_V_1_state, ap_CS_iter1_fsm_state2)
    begin
        case ap_CS_iter0_fsm is
            when ap_ST_iter0_fsm_state1 => 
                ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            when others =>  
                ap_NS_iter0_fsm <= "X";
        end case;
    end process;

    ap_NS_iter1_fsm_assign_proc : process (ap_start, ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm, dout_TREADY, dout_V_data_V_1_ack_in, dout_V_data_V_1_state, dout_V_keep_V_1_state, dout_V_last_V_1_state, ap_CS_iter1_fsm_state2)
    begin
        case ap_CS_iter1_fsm is
            when ap_ST_iter1_fsm_state2 => 
                if ((not(((dout_V_last_V_1_state = ap_const_lv2_1) or (dout_V_keep_V_1_state = ap_const_lv2_1) or (dout_V_data_V_1_ack_in = ap_const_logic_0) or (dout_V_data_V_1_state = ap_const_lv2_1) or ((dout_V_last_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0)) or ((dout_V_keep_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0)) or ((dout_TREADY = ap_const_logic_0) and (dout_V_data_V_1_state = ap_const_lv2_3)))) and not(((dout_V_data_V_1_ack_in = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                elsif ((not(((dout_V_last_V_1_state = ap_const_lv2_1) or (dout_V_keep_V_1_state = ap_const_lv2_1) or (dout_V_data_V_1_ack_in = ap_const_logic_0) or (dout_V_data_V_1_state = ap_const_lv2_1) or ((dout_V_last_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0)) or ((dout_V_keep_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0)) or ((dout_TREADY = ap_const_logic_0) and (dout_V_data_V_1_state = ap_const_lv2_3)))) and ((ap_const_logic_0 = ap_CS_iter0_fsm_state1) or ((ap_const_logic_1 = ap_CS_iter0_fsm_state1) and ((dout_V_data_V_1_ack_in = ap_const_logic_0) or (ap_start = ap_const_logic_0)))))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                end if;
            when ap_ST_iter1_fsm_state0 => 
                if ((not(((dout_V_data_V_1_ack_in = ap_const_logic_0) or (ap_start = ap_const_logic_0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and ((dout_V_last_V_1_state = ap_const_lv2_1) or (dout_V_keep_V_1_state = ap_const_lv2_1) or (dout_V_data_V_1_ack_in = ap_const_logic_0) or (dout_V_data_V_1_state = ap_const_lv2_1) or ((dout_V_last_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0)) or ((dout_V_keep_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0)) or ((dout_TREADY = ap_const_logic_0) and (dout_V_data_V_1_state = ap_const_lv2_3)))))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                end if;
            when others =>  
                ap_NS_iter1_fsm <= "XX";
        end case;
    end process;
    add_ln700_fu_93_p2 <= std_logic_vector(unsigned(message_V) + unsigned(ap_const_lv16_1));
    ap_CS_iter0_fsm_state1 <= ap_CS_iter0_fsm(0);
    ap_CS_iter1_fsm_state0 <= ap_CS_iter1_fsm(0);
    ap_CS_iter1_fsm_state2 <= ap_CS_iter1_fsm(1);

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(dout_TREADY, dout_V_data_V_1_state, dout_V_keep_V_1_state, dout_V_last_V_1_state)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((dout_V_last_V_1_state = ap_const_lv2_1) or (dout_V_keep_V_1_state = ap_const_lv2_1) or (dout_V_data_V_1_state = ap_const_lv2_1) or ((dout_V_last_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0)) or ((dout_V_keep_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0)) or ((dout_TREADY = ap_const_logic_0) and (dout_V_data_V_1_state = ap_const_lv2_3)));
    end process;


    ap_done_assign_proc : process(dout_TREADY, dout_V_data_V_1_ack_in, dout_V_data_V_1_state, dout_V_keep_V_1_state, dout_V_last_V_1_state, ap_CS_iter1_fsm_state2)
    begin
        if ((not(((dout_V_last_V_1_state = ap_const_lv2_1) or (dout_V_keep_V_1_state = ap_const_lv2_1) or (dout_V_data_V_1_ack_in = ap_const_logic_0) or (dout_V_data_V_1_state = ap_const_lv2_1) or ((dout_V_last_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0)) or ((dout_V_keep_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0)) or ((dout_TREADY = ap_const_logic_0) and (dout_V_data_V_1_state = ap_const_lv2_3)))) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm_state0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, dout_TREADY, dout_V_data_V_1_ack_in, dout_V_data_V_1_state, dout_V_keep_V_1_state, dout_V_last_V_1_state, ap_CS_iter1_fsm_state2)
    begin
        if ((not(((dout_V_data_V_1_ack_in = ap_const_logic_0) or (ap_start = ap_const_logic_0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and ((dout_V_last_V_1_state = ap_const_lv2_1) or (dout_V_keep_V_1_state = ap_const_lv2_1) or (dout_V_data_V_1_ack_in = ap_const_logic_0) or (dout_V_data_V_1_state = ap_const_lv2_1) or ((dout_V_last_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0)) or ((dout_V_keep_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0)) or ((dout_TREADY = ap_const_logic_0) and (dout_V_data_V_1_state = ap_const_lv2_3)))))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    dout_TDATA <= dout_V_data_V_1_data_out;

    dout_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, dout_V_data_V_1_state, ap_CS_iter1_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_iter1_fsm_state2) or ((ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_start = ap_const_logic_1)))) then 
            dout_TDATA_blk_n <= dout_V_data_V_1_state(1);
        else 
            dout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_TKEEP <= dout_V_keep_V_1_data_out;
    dout_TLAST <= dout_V_last_V_1_data_out;
    dout_TVALID <= dout_V_last_V_1_state(0);
    dout_V_data_V_1_ack_in <= dout_V_data_V_1_state(1);
    dout_V_data_V_1_ack_out <= dout_TREADY;

    dout_V_data_V_1_data_out_assign_proc : process(dout_V_data_V_1_payload_A, dout_V_data_V_1_payload_B, dout_V_data_V_1_sel)
    begin
        if ((dout_V_data_V_1_sel = ap_const_logic_1)) then 
            dout_V_data_V_1_data_out <= dout_V_data_V_1_payload_B;
        else 
            dout_V_data_V_1_data_out <= dout_V_data_V_1_payload_A;
        end if; 
    end process;

    dout_V_data_V_1_load_A <= (not(dout_V_data_V_1_sel_wr) and dout_V_data_V_1_state_cmp_full);
    dout_V_data_V_1_load_B <= (dout_V_data_V_1_state_cmp_full and dout_V_data_V_1_sel_wr);
    dout_V_data_V_1_sel <= dout_V_data_V_1_sel_rd;
    dout_V_data_V_1_state_cmp_full <= '0' when (dout_V_data_V_1_state = ap_const_lv2_1) else '1';

    dout_V_data_V_1_vld_in_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, dout_TREADY, dout_V_data_V_1_ack_in, dout_V_data_V_1_state, dout_V_keep_V_1_state, dout_V_last_V_1_state, ap_CS_iter1_fsm_state2)
    begin
        if ((not(((dout_V_data_V_1_ack_in = ap_const_logic_0) or (ap_start = ap_const_logic_0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and ((dout_V_last_V_1_state = ap_const_lv2_1) or (dout_V_keep_V_1_state = ap_const_lv2_1) or (dout_V_data_V_1_ack_in = ap_const_logic_0) or (dout_V_data_V_1_state = ap_const_lv2_1) or ((dout_V_last_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0)) or ((dout_V_keep_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0)) or ((dout_TREADY = ap_const_logic_0) and (dout_V_data_V_1_state = ap_const_lv2_3)))))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            dout_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            dout_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dout_V_data_V_1_vld_out <= dout_V_data_V_1_state(0);
    dout_V_keep_V_1_ack_out <= dout_TREADY;
    dout_V_keep_V_1_data_out <= ap_const_lv16_FF;
    dout_V_keep_V_1_sel <= dout_V_keep_V_1_sel_rd;

    dout_V_keep_V_1_vld_in_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, dout_TREADY, dout_V_data_V_1_ack_in, dout_V_data_V_1_state, dout_V_keep_V_1_state, dout_V_last_V_1_state, ap_CS_iter1_fsm_state2)
    begin
        if ((not(((dout_V_data_V_1_ack_in = ap_const_logic_0) or (ap_start = ap_const_logic_0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and ((dout_V_last_V_1_state = ap_const_lv2_1) or (dout_V_keep_V_1_state = ap_const_lv2_1) or (dout_V_data_V_1_ack_in = ap_const_logic_0) or (dout_V_data_V_1_state = ap_const_lv2_1) or ((dout_V_last_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0)) or ((dout_V_keep_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0)) or ((dout_TREADY = ap_const_logic_0) and (dout_V_data_V_1_state = ap_const_lv2_3)))))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            dout_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            dout_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dout_V_keep_V_1_vld_out <= dout_V_keep_V_1_state(0);
    dout_V_last_V_1_ack_in <= dout_V_last_V_1_state(1);
    dout_V_last_V_1_ack_out <= dout_TREADY;

    dout_V_last_V_1_data_out_assign_proc : process(dout_V_last_V_1_payload_A, dout_V_last_V_1_payload_B, dout_V_last_V_1_sel)
    begin
        if ((dout_V_last_V_1_sel = ap_const_logic_1)) then 
            dout_V_last_V_1_data_out <= dout_V_last_V_1_payload_B;
        else 
            dout_V_last_V_1_data_out <= dout_V_last_V_1_payload_A;
        end if; 
    end process;

    dout_V_last_V_1_load_A <= (not(dout_V_last_V_1_sel_wr) and dout_V_last_V_1_state_cmp_full);
    dout_V_last_V_1_load_B <= (dout_V_last_V_1_state_cmp_full and dout_V_last_V_1_sel_wr);
    dout_V_last_V_1_sel <= dout_V_last_V_1_sel_rd;
    dout_V_last_V_1_state_cmp_full <= '0' when (dout_V_last_V_1_state = ap_const_lv2_1) else '1';

    dout_V_last_V_1_vld_in_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, dout_TREADY, dout_V_data_V_1_ack_in, dout_V_data_V_1_state, dout_V_keep_V_1_state, dout_V_last_V_1_state, ap_CS_iter1_fsm_state2)
    begin
        if ((not(((dout_V_data_V_1_ack_in = ap_const_logic_0) or (ap_start = ap_const_logic_0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and ((dout_V_last_V_1_state = ap_const_lv2_1) or (dout_V_keep_V_1_state = ap_const_lv2_1) or (dout_V_data_V_1_ack_in = ap_const_logic_0) or (dout_V_data_V_1_state = ap_const_lv2_1) or ((dout_V_last_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0)) or ((dout_V_keep_V_1_state = ap_const_lv2_3) and (dout_TREADY = ap_const_logic_0)) or ((dout_TREADY = ap_const_logic_0) and (dout_V_data_V_1_state = ap_const_lv2_3)))))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            dout_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            dout_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dout_V_last_V_1_vld_out <= dout_V_last_V_1_state(0);
    out_data_V_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_fu_99_p3),128));
    ret_V_fu_72_p2 <= std_logic_vector(unsigned(zext_ln215_fu_68_p1) + unsigned(ap_const_lv17_1FFFF));
    select_ln21_fu_99_p3 <= 
        ap_const_lv16_0 when (tmp_last_V_fu_86_p2(0) = '1') else 
        add_ln700_fu_93_p2;
    tmp_last_V_fu_86_p2 <= "1" when (zext_ln879_fu_82_p1 = ret_V_fu_72_p2) else "0";
    zext_ln215_fu_68_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(count_V),17));
    zext_ln879_fu_82_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(message_V),17));
end behav;
