// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _epacket_gen_HH_
#define _epacket_gen_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct epacket_gen : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > dout_TREADY;
    sc_out< sc_lv<128> > dout_TDATA;
    sc_out< sc_logic > dout_TVALID;
    sc_out< sc_lv<16> > dout_TKEEP;
    sc_out< sc_lv<1> > dout_TLAST;
    sc_in< sc_lv<16> > count_V;


    // Module declarations
    epacket_gen(sc_module_name name);
    SC_HAS_PROCESS(epacket_gen);

    ~epacket_gen();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<1> > ap_CS_iter0_fsm;
    sc_signal< sc_logic > ap_CS_iter0_fsm_state1;
    sc_signal< sc_lv<2> > ap_CS_iter1_fsm;
    sc_signal< sc_logic > ap_CS_iter1_fsm_state0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_logic > dout_V_data_V_1_ack_in;
    sc_signal< sc_logic > dout_V_data_V_1_ack_out;
    sc_signal< sc_lv<2> > dout_V_data_V_1_state;
    sc_signal< sc_logic > dout_V_keep_V_1_ack_out;
    sc_signal< sc_lv<2> > dout_V_keep_V_1_state;
    sc_signal< sc_logic > dout_V_last_V_1_ack_out;
    sc_signal< sc_lv<2> > dout_V_last_V_1_state;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< sc_logic > ap_CS_iter1_fsm_state2;
    sc_signal< sc_lv<128> > dout_V_data_V_1_data_out;
    sc_signal< sc_logic > dout_V_data_V_1_vld_in;
    sc_signal< sc_logic > dout_V_data_V_1_vld_out;
    sc_signal< sc_lv<128> > dout_V_data_V_1_payload_A;
    sc_signal< sc_lv<128> > dout_V_data_V_1_payload_B;
    sc_signal< sc_logic > dout_V_data_V_1_sel_rd;
    sc_signal< sc_logic > dout_V_data_V_1_sel_wr;
    sc_signal< sc_logic > dout_V_data_V_1_sel;
    sc_signal< sc_logic > dout_V_data_V_1_load_A;
    sc_signal< sc_logic > dout_V_data_V_1_load_B;
    sc_signal< sc_logic > dout_V_data_V_1_state_cmp_full;
    sc_signal< sc_lv<16> > dout_V_keep_V_1_data_out;
    sc_signal< sc_logic > dout_V_keep_V_1_vld_in;
    sc_signal< sc_logic > dout_V_keep_V_1_vld_out;
    sc_signal< sc_logic > dout_V_keep_V_1_sel_rd;
    sc_signal< sc_logic > dout_V_keep_V_1_sel;
    sc_signal< sc_lv<1> > dout_V_last_V_1_data_out;
    sc_signal< sc_logic > dout_V_last_V_1_vld_in;
    sc_signal< sc_logic > dout_V_last_V_1_vld_out;
    sc_signal< sc_logic > dout_V_last_V_1_ack_in;
    sc_signal< sc_lv<1> > dout_V_last_V_1_payload_A;
    sc_signal< sc_lv<1> > dout_V_last_V_1_payload_B;
    sc_signal< sc_logic > dout_V_last_V_1_sel_rd;
    sc_signal< sc_logic > dout_V_last_V_1_sel_wr;
    sc_signal< sc_logic > dout_V_last_V_1_sel;
    sc_signal< sc_logic > dout_V_last_V_1_load_A;
    sc_signal< sc_logic > dout_V_last_V_1_load_B;
    sc_signal< sc_logic > dout_V_last_V_1_state_cmp_full;
    sc_signal< sc_lv<16> > message_V;
    sc_signal< sc_logic > dout_TDATA_blk_n;
    sc_signal< sc_lv<1> > tmp_last_V_fu_86_p2;
    sc_signal< sc_lv<128> > out_data_V_fu_113_p1;
    sc_signal< sc_lv<16> > select_ln21_fu_99_p3;
    sc_signal< sc_lv<17> > zext_ln215_fu_68_p1;
    sc_signal< sc_lv<17> > zext_ln879_fu_82_p1;
    sc_signal< sc_lv<17> > ret_V_fu_72_p2;
    sc_signal< sc_lv<16> > add_ln700_fu_93_p2;
    sc_signal< sc_lv<1> > ap_NS_iter0_fsm;
    sc_signal< sc_lv<2> > ap_NS_iter1_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_iter0_fsm_state1;
    static const sc_lv<2> ap_ST_iter1_fsm_state2;
    static const sc_lv<2> ap_ST_iter1_fsm_state0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<16> ap_const_lv16_FF;
    static const sc_lv<17> ap_const_lv17_1FFFF;
    static const sc_lv<16> ap_const_lv16_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln700_fu_93_p2();
    void thread_ap_CS_iter0_fsm_state1();
    void thread_ap_CS_iter1_fsm_state0();
    void thread_ap_CS_iter1_fsm_state2();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_dout_TDATA();
    void thread_dout_TDATA_blk_n();
    void thread_dout_TKEEP();
    void thread_dout_TLAST();
    void thread_dout_TVALID();
    void thread_dout_V_data_V_1_ack_in();
    void thread_dout_V_data_V_1_ack_out();
    void thread_dout_V_data_V_1_data_out();
    void thread_dout_V_data_V_1_load_A();
    void thread_dout_V_data_V_1_load_B();
    void thread_dout_V_data_V_1_sel();
    void thread_dout_V_data_V_1_state_cmp_full();
    void thread_dout_V_data_V_1_vld_in();
    void thread_dout_V_data_V_1_vld_out();
    void thread_dout_V_keep_V_1_ack_out();
    void thread_dout_V_keep_V_1_data_out();
    void thread_dout_V_keep_V_1_sel();
    void thread_dout_V_keep_V_1_vld_in();
    void thread_dout_V_keep_V_1_vld_out();
    void thread_dout_V_last_V_1_ack_in();
    void thread_dout_V_last_V_1_ack_out();
    void thread_dout_V_last_V_1_data_out();
    void thread_dout_V_last_V_1_load_A();
    void thread_dout_V_last_V_1_load_B();
    void thread_dout_V_last_V_1_sel();
    void thread_dout_V_last_V_1_state_cmp_full();
    void thread_dout_V_last_V_1_vld_in();
    void thread_dout_V_last_V_1_vld_out();
    void thread_out_data_V_fu_113_p1();
    void thread_ret_V_fu_72_p2();
    void thread_select_ln21_fu_99_p3();
    void thread_tmp_last_V_fu_86_p2();
    void thread_zext_ln215_fu_68_p1();
    void thread_zext_ln879_fu_82_p1();
    void thread_ap_NS_iter0_fsm();
    void thread_ap_NS_iter1_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
