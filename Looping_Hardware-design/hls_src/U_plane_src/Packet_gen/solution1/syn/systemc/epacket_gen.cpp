// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "epacket_gen.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic epacket_gen::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic epacket_gen::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> epacket_gen::ap_ST_iter0_fsm_state1 = "1";
const sc_lv<2> epacket_gen::ap_ST_iter1_fsm_state2 = "10";
const sc_lv<2> epacket_gen::ap_ST_iter1_fsm_state0 = "1";
const sc_lv<32> epacket_gen::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<2> epacket_gen::ap_const_lv2_0 = "00";
const sc_lv<2> epacket_gen::ap_const_lv2_2 = "10";
const sc_lv<2> epacket_gen::ap_const_lv2_3 = "11";
const sc_lv<2> epacket_gen::ap_const_lv2_1 = "1";
const sc_lv<32> epacket_gen::ap_const_lv32_1 = "1";
const sc_lv<1> epacket_gen::ap_const_lv1_0 = "0";
const sc_lv<1> epacket_gen::ap_const_lv1_1 = "1";
const sc_lv<16> epacket_gen::ap_const_lv16_0 = "0000000000000000";
const sc_lv<16> epacket_gen::ap_const_lv16_FF = "11111111";
const sc_lv<17> epacket_gen::ap_const_lv17_1FFFF = "11111111111111111";
const sc_lv<16> epacket_gen::ap_const_lv16_1 = "1";
const bool epacket_gen::ap_const_boolean_1 = true;

epacket_gen::epacket_gen(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln700_fu_93_p2);
    sensitive << ( message_V );

    SC_METHOD(thread_ap_CS_iter0_fsm_state1);
    sensitive << ( ap_CS_iter0_fsm );

    SC_METHOD(thread_ap_CS_iter1_fsm_state0);
    sensitive << ( ap_CS_iter1_fsm );

    SC_METHOD(thread_ap_CS_iter1_fsm_state2);
    sensitive << ( ap_CS_iter1_fsm );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( dout_TREADY );
    sensitive << ( dout_V_data_V_1_state );
    sensitive << ( dout_V_keep_V_1_state );
    sensitive << ( dout_V_last_V_1_state );

    SC_METHOD(thread_ap_done);
    sensitive << ( dout_TREADY );
    sensitive << ( dout_V_data_V_1_ack_in );
    sensitive << ( dout_V_data_V_1_state );
    sensitive << ( dout_V_keep_V_1_state );
    sensitive << ( dout_V_last_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm_state0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( dout_TREADY );
    sensitive << ( dout_V_data_V_1_ack_in );
    sensitive << ( dout_V_data_V_1_state );
    sensitive << ( dout_V_keep_V_1_state );
    sensitive << ( dout_V_last_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_dout_TDATA);
    sensitive << ( dout_V_data_V_1_data_out );

    SC_METHOD(thread_dout_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( dout_V_data_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_dout_TKEEP);
    sensitive << ( dout_V_keep_V_1_data_out );

    SC_METHOD(thread_dout_TLAST);
    sensitive << ( dout_V_last_V_1_data_out );

    SC_METHOD(thread_dout_TVALID);
    sensitive << ( dout_V_last_V_1_state );

    SC_METHOD(thread_dout_V_data_V_1_ack_in);
    sensitive << ( dout_V_data_V_1_state );

    SC_METHOD(thread_dout_V_data_V_1_ack_out);
    sensitive << ( dout_TREADY );

    SC_METHOD(thread_dout_V_data_V_1_data_out);
    sensitive << ( dout_V_data_V_1_payload_A );
    sensitive << ( dout_V_data_V_1_payload_B );
    sensitive << ( dout_V_data_V_1_sel );

    SC_METHOD(thread_dout_V_data_V_1_load_A);
    sensitive << ( dout_V_data_V_1_sel_wr );
    sensitive << ( dout_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_dout_V_data_V_1_load_B);
    sensitive << ( dout_V_data_V_1_sel_wr );
    sensitive << ( dout_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_dout_V_data_V_1_sel);
    sensitive << ( dout_V_data_V_1_sel_rd );

    SC_METHOD(thread_dout_V_data_V_1_state_cmp_full);
    sensitive << ( dout_V_data_V_1_state );

    SC_METHOD(thread_dout_V_data_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( dout_TREADY );
    sensitive << ( dout_V_data_V_1_ack_in );
    sensitive << ( dout_V_data_V_1_state );
    sensitive << ( dout_V_keep_V_1_state );
    sensitive << ( dout_V_last_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_dout_V_data_V_1_vld_out);
    sensitive << ( dout_V_data_V_1_state );

    SC_METHOD(thread_dout_V_keep_V_1_ack_out);
    sensitive << ( dout_TREADY );

    SC_METHOD(thread_dout_V_keep_V_1_data_out);
    sensitive << ( dout_V_keep_V_1_sel );

    SC_METHOD(thread_dout_V_keep_V_1_sel);
    sensitive << ( dout_V_keep_V_1_sel_rd );

    SC_METHOD(thread_dout_V_keep_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( dout_TREADY );
    sensitive << ( dout_V_data_V_1_ack_in );
    sensitive << ( dout_V_data_V_1_state );
    sensitive << ( dout_V_keep_V_1_state );
    sensitive << ( dout_V_last_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_dout_V_keep_V_1_vld_out);
    sensitive << ( dout_V_keep_V_1_state );

    SC_METHOD(thread_dout_V_last_V_1_ack_in);
    sensitive << ( dout_V_last_V_1_state );

    SC_METHOD(thread_dout_V_last_V_1_ack_out);
    sensitive << ( dout_TREADY );

    SC_METHOD(thread_dout_V_last_V_1_data_out);
    sensitive << ( dout_V_last_V_1_payload_A );
    sensitive << ( dout_V_last_V_1_payload_B );
    sensitive << ( dout_V_last_V_1_sel );

    SC_METHOD(thread_dout_V_last_V_1_load_A);
    sensitive << ( dout_V_last_V_1_sel_wr );
    sensitive << ( dout_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_dout_V_last_V_1_load_B);
    sensitive << ( dout_V_last_V_1_sel_wr );
    sensitive << ( dout_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_dout_V_last_V_1_sel);
    sensitive << ( dout_V_last_V_1_sel_rd );

    SC_METHOD(thread_dout_V_last_V_1_state_cmp_full);
    sensitive << ( dout_V_last_V_1_state );

    SC_METHOD(thread_dout_V_last_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( dout_TREADY );
    sensitive << ( dout_V_data_V_1_ack_in );
    sensitive << ( dout_V_data_V_1_state );
    sensitive << ( dout_V_keep_V_1_state );
    sensitive << ( dout_V_last_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_dout_V_last_V_1_vld_out);
    sensitive << ( dout_V_last_V_1_state );

    SC_METHOD(thread_out_data_V_fu_113_p1);
    sensitive << ( select_ln21_fu_99_p3 );

    SC_METHOD(thread_ret_V_fu_72_p2);
    sensitive << ( zext_ln215_fu_68_p1 );

    SC_METHOD(thread_select_ln21_fu_99_p3);
    sensitive << ( tmp_last_V_fu_86_p2 );
    sensitive << ( add_ln700_fu_93_p2 );

    SC_METHOD(thread_tmp_last_V_fu_86_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( dout_TREADY );
    sensitive << ( dout_V_data_V_1_ack_in );
    sensitive << ( dout_V_data_V_1_state );
    sensitive << ( dout_V_keep_V_1_state );
    sensitive << ( dout_V_last_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( zext_ln879_fu_82_p1 );
    sensitive << ( ret_V_fu_72_p2 );

    SC_METHOD(thread_zext_ln215_fu_68_p1);
    sensitive << ( count_V );

    SC_METHOD(thread_zext_ln879_fu_82_p1);
    sensitive << ( message_V );

    SC_METHOD(thread_ap_NS_iter0_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_iter0_fsm );
    sensitive << ( dout_TREADY );
    sensitive << ( dout_V_data_V_1_ack_in );
    sensitive << ( dout_V_data_V_1_state );
    sensitive << ( dout_V_keep_V_1_state );
    sensitive << ( dout_V_last_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_ap_NS_iter1_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( dout_TREADY );
    sensitive << ( dout_V_data_V_1_ack_in );
    sensitive << ( dout_V_data_V_1_state );
    sensitive << ( dout_V_keep_V_1_state );
    sensitive << ( dout_V_last_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_iter0_fsm = "1";
    ap_CS_iter1_fsm = "01";
    dout_V_data_V_1_state = "00";
    dout_V_keep_V_1_state = "00";
    dout_V_last_V_1_state = "00";
    dout_V_data_V_1_sel_rd = SC_LOGIC_0;
    dout_V_data_V_1_sel_wr = SC_LOGIC_0;
    dout_V_keep_V_1_sel_rd = SC_LOGIC_0;
    dout_V_last_V_1_sel_rd = SC_LOGIC_0;
    dout_V_last_V_1_sel_wr = SC_LOGIC_0;
    message_V = "0000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "epacket_gen_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, dout_TREADY, "(port)dout_TREADY");
    sc_trace(mVcdFile, dout_TDATA, "(port)dout_TDATA");
    sc_trace(mVcdFile, dout_TVALID, "(port)dout_TVALID");
    sc_trace(mVcdFile, dout_TKEEP, "(port)dout_TKEEP");
    sc_trace(mVcdFile, dout_TLAST, "(port)dout_TLAST");
    sc_trace(mVcdFile, count_V, "(port)count_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_iter0_fsm, "ap_CS_iter0_fsm");
    sc_trace(mVcdFile, ap_CS_iter0_fsm_state1, "ap_CS_iter0_fsm_state1");
    sc_trace(mVcdFile, ap_CS_iter1_fsm, "ap_CS_iter1_fsm");
    sc_trace(mVcdFile, ap_CS_iter1_fsm_state0, "ap_CS_iter1_fsm_state0");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, dout_V_data_V_1_ack_in, "dout_V_data_V_1_ack_in");
    sc_trace(mVcdFile, dout_V_data_V_1_ack_out, "dout_V_data_V_1_ack_out");
    sc_trace(mVcdFile, dout_V_data_V_1_state, "dout_V_data_V_1_state");
    sc_trace(mVcdFile, dout_V_keep_V_1_ack_out, "dout_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, dout_V_keep_V_1_state, "dout_V_keep_V_1_state");
    sc_trace(mVcdFile, dout_V_last_V_1_ack_out, "dout_V_last_V_1_ack_out");
    sc_trace(mVcdFile, dout_V_last_V_1_state, "dout_V_last_V_1_state");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_CS_iter1_fsm_state2, "ap_CS_iter1_fsm_state2");
    sc_trace(mVcdFile, dout_V_data_V_1_data_out, "dout_V_data_V_1_data_out");
    sc_trace(mVcdFile, dout_V_data_V_1_vld_in, "dout_V_data_V_1_vld_in");
    sc_trace(mVcdFile, dout_V_data_V_1_vld_out, "dout_V_data_V_1_vld_out");
    sc_trace(mVcdFile, dout_V_data_V_1_payload_A, "dout_V_data_V_1_payload_A");
    sc_trace(mVcdFile, dout_V_data_V_1_payload_B, "dout_V_data_V_1_payload_B");
    sc_trace(mVcdFile, dout_V_data_V_1_sel_rd, "dout_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, dout_V_data_V_1_sel_wr, "dout_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, dout_V_data_V_1_sel, "dout_V_data_V_1_sel");
    sc_trace(mVcdFile, dout_V_data_V_1_load_A, "dout_V_data_V_1_load_A");
    sc_trace(mVcdFile, dout_V_data_V_1_load_B, "dout_V_data_V_1_load_B");
    sc_trace(mVcdFile, dout_V_data_V_1_state_cmp_full, "dout_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, dout_V_keep_V_1_data_out, "dout_V_keep_V_1_data_out");
    sc_trace(mVcdFile, dout_V_keep_V_1_vld_in, "dout_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, dout_V_keep_V_1_vld_out, "dout_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, dout_V_keep_V_1_sel_rd, "dout_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, dout_V_keep_V_1_sel, "dout_V_keep_V_1_sel");
    sc_trace(mVcdFile, dout_V_last_V_1_data_out, "dout_V_last_V_1_data_out");
    sc_trace(mVcdFile, dout_V_last_V_1_vld_in, "dout_V_last_V_1_vld_in");
    sc_trace(mVcdFile, dout_V_last_V_1_vld_out, "dout_V_last_V_1_vld_out");
    sc_trace(mVcdFile, dout_V_last_V_1_ack_in, "dout_V_last_V_1_ack_in");
    sc_trace(mVcdFile, dout_V_last_V_1_payload_A, "dout_V_last_V_1_payload_A");
    sc_trace(mVcdFile, dout_V_last_V_1_payload_B, "dout_V_last_V_1_payload_B");
    sc_trace(mVcdFile, dout_V_last_V_1_sel_rd, "dout_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, dout_V_last_V_1_sel_wr, "dout_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, dout_V_last_V_1_sel, "dout_V_last_V_1_sel");
    sc_trace(mVcdFile, dout_V_last_V_1_load_A, "dout_V_last_V_1_load_A");
    sc_trace(mVcdFile, dout_V_last_V_1_load_B, "dout_V_last_V_1_load_B");
    sc_trace(mVcdFile, dout_V_last_V_1_state_cmp_full, "dout_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, message_V, "message_V");
    sc_trace(mVcdFile, dout_TDATA_blk_n, "dout_TDATA_blk_n");
    sc_trace(mVcdFile, tmp_last_V_fu_86_p2, "tmp_last_V_fu_86_p2");
    sc_trace(mVcdFile, out_data_V_fu_113_p1, "out_data_V_fu_113_p1");
    sc_trace(mVcdFile, select_ln21_fu_99_p3, "select_ln21_fu_99_p3");
    sc_trace(mVcdFile, zext_ln215_fu_68_p1, "zext_ln215_fu_68_p1");
    sc_trace(mVcdFile, zext_ln879_fu_82_p1, "zext_ln879_fu_82_p1");
    sc_trace(mVcdFile, ret_V_fu_72_p2, "ret_V_fu_72_p2");
    sc_trace(mVcdFile, add_ln700_fu_93_p2, "add_ln700_fu_93_p2");
    sc_trace(mVcdFile, ap_NS_iter0_fsm, "ap_NS_iter0_fsm");
    sc_trace(mVcdFile, ap_NS_iter1_fsm, "ap_NS_iter1_fsm");
#endif

    }
    mHdltvinHandle.open("epacket_gen.hdltvin.dat");
    mHdltvoutHandle.open("epacket_gen.hdltvout.dat");
}

epacket_gen::~epacket_gen() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void epacket_gen::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_iter0_fsm = ap_ST_iter0_fsm_state1;
    } else {
        ap_CS_iter0_fsm = ap_NS_iter0_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_iter1_fsm = ap_ST_iter1_fsm_state0;
    } else {
        ap_CS_iter1_fsm = ap_NS_iter1_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dout_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dout_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dout_V_data_V_1_vld_out.read()))) {
            dout_V_data_V_1_sel_rd =  (sc_logic) (~dout_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dout_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dout_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dout_V_data_V_1_ack_in.read()))) {
            dout_V_data_V_1_sel_wr =  (sc_logic) (~dout_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dout_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_3) && 
              esl_seteq<1,1,1>(ap_const_logic_0, dout_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dout_V_data_V_1_ack_out.read())) || 
             (esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_2) && 
              esl_seteq<1,1,1>(ap_const_logic_0, dout_V_data_V_1_vld_in.read())))) {
            dout_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
                     esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, dout_V_data_V_1_vld_in.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
                     esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_1)))) {
            dout_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_2) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, dout_V_data_V_1_vld_in.read())) || 
                    (esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, dout_V_data_V_1_ack_out.read())) || 
                    (esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dout_V_data_V_1_vld_in.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dout_V_data_V_1_ack_out.read()))))) {
            dout_V_data_V_1_state = ap_const_lv2_3;
        } else {
            dout_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dout_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dout_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dout_V_keep_V_1_vld_out.read()))) {
            dout_V_keep_V_1_sel_rd =  (sc_logic) (~dout_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dout_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_keep_V_1_state.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, dout_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dout_V_keep_V_1_ack_out.read())) || 
             (esl_seteq<1,2,2>(ap_const_lv2_2, dout_V_keep_V_1_state.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, dout_V_keep_V_1_vld_in.read())))) {
            dout_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_keep_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, dout_V_keep_V_1_vld_in.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_keep_V_1_state.read())))) {
            dout_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,2,2>(ap_const_lv2_2, dout_V_keep_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, dout_V_keep_V_1_vld_in.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_keep_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, dout_V_keep_V_1_ack_out.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dout_V_keep_V_1_vld_in.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dout_V_keep_V_1_ack_out.read()))))) {
            dout_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            dout_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dout_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dout_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dout_V_last_V_1_vld_out.read()))) {
            dout_V_last_V_1_sel_rd =  (sc_logic) (~dout_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dout_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dout_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dout_V_last_V_1_ack_in.read()))) {
            dout_V_last_V_1_sel_wr =  (sc_logic) (~dout_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dout_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_last_V_1_state.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, dout_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dout_V_last_V_1_ack_out.read())) || 
             (esl_seteq<1,2,2>(ap_const_lv2_2, dout_V_last_V_1_state.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, dout_V_last_V_1_vld_in.read())))) {
            dout_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_last_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, dout_V_last_V_1_vld_in.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_last_V_1_state.read())))) {
            dout_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,2,2>(ap_const_lv2_2, dout_V_last_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, dout_V_last_V_1_vld_in.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_last_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, dout_V_last_V_1_ack_out.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dout_V_last_V_1_vld_in.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dout_V_last_V_1_ack_out.read()))))) {
            dout_V_last_V_1_state = ap_const_lv2_3;
        } else {
            dout_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dout_V_data_V_1_load_A.read())) {
        dout_V_data_V_1_payload_A = out_data_V_fu_113_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dout_V_data_V_1_load_B.read())) {
        dout_V_data_V_1_payload_B = out_data_V_fu_113_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dout_V_last_V_1_load_A.read())) {
        dout_V_last_V_1_payload_A = tmp_last_V_fu_86_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dout_V_last_V_1_load_B.read())) {
        dout_V_last_V_1_payload_B = tmp_last_V_fu_86_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_V_data_V_1_ack_in.read()) || ((esl_seteq<1,1,1>(ap_const_logic_0, dout_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_1) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
    esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_3)) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_keep_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_keep_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_last_V_1_state.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))))) {
        message_V = select_ln21_fu_99_p3.read();
    }
}

void epacket_gen::thread_add_ln700_fu_93_p2() {
    add_ln700_fu_93_p2 = (!message_V.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(message_V.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void epacket_gen::thread_ap_CS_iter0_fsm_state1() {
    ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm.read()[0];
}

void epacket_gen::thread_ap_CS_iter1_fsm_state0() {
    ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm.read()[0];
}

void epacket_gen::thread_ap_CS_iter1_fsm_state2() {
    ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm.read()[1];
}

void epacket_gen::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void epacket_gen::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = (esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_1) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
  esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_3)) || esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_keep_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_keep_V_1_state.read())) || esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_last_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_last_V_1_state.read())));
}

void epacket_gen::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_data_V_1_ack_in.read()) || esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_1) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
  esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_3)) || esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_keep_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_keep_V_1_state.read())) || esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_last_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_last_V_1_state.read()))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void epacket_gen::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void epacket_gen::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_V_data_V_1_ack_in.read()) || ((esl_seteq<1,1,1>(ap_const_logic_0, dout_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_1) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
    esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_3)) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_keep_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_keep_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_last_V_1_state.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void epacket_gen::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void epacket_gen::thread_dout_TDATA() {
    dout_TDATA = dout_V_data_V_1_data_out.read();
}

void epacket_gen::thread_dout_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())))) {
        dout_TDATA_blk_n = dout_V_data_V_1_state.read()[1];
    } else {
        dout_TDATA_blk_n = ap_const_logic_1;
    }
}

void epacket_gen::thread_dout_TKEEP() {
    dout_TKEEP = dout_V_keep_V_1_data_out.read();
}

void epacket_gen::thread_dout_TLAST() {
    dout_TLAST = dout_V_last_V_1_data_out.read();
}

void epacket_gen::thread_dout_TVALID() {
    dout_TVALID = dout_V_last_V_1_state.read()[0];
}

void epacket_gen::thread_dout_V_data_V_1_ack_in() {
    dout_V_data_V_1_ack_in = dout_V_data_V_1_state.read()[1];
}

void epacket_gen::thread_dout_V_data_V_1_ack_out() {
    dout_V_data_V_1_ack_out = dout_TREADY.read();
}

void epacket_gen::thread_dout_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, dout_V_data_V_1_sel.read())) {
        dout_V_data_V_1_data_out = dout_V_data_V_1_payload_B.read();
    } else {
        dout_V_data_V_1_data_out = dout_V_data_V_1_payload_A.read();
    }
}

void epacket_gen::thread_dout_V_data_V_1_load_A() {
    dout_V_data_V_1_load_A = (dout_V_data_V_1_state_cmp_full.read() & ~dout_V_data_V_1_sel_wr.read());
}

void epacket_gen::thread_dout_V_data_V_1_load_B() {
    dout_V_data_V_1_load_B = (dout_V_data_V_1_sel_wr.read() & dout_V_data_V_1_state_cmp_full.read());
}

void epacket_gen::thread_dout_V_data_V_1_sel() {
    dout_V_data_V_1_sel = dout_V_data_V_1_sel_rd.read();
}

void epacket_gen::thread_dout_V_data_V_1_state_cmp_full() {
    dout_V_data_V_1_state_cmp_full =  (sc_logic) ((!dout_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(dout_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void epacket_gen::thread_dout_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_V_data_V_1_ack_in.read()) || ((esl_seteq<1,1,1>(ap_const_logic_0, dout_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_1) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
    esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_3)) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_keep_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_keep_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_last_V_1_state.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))))) {
        dout_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        dout_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void epacket_gen::thread_dout_V_data_V_1_vld_out() {
    dout_V_data_V_1_vld_out = dout_V_data_V_1_state.read()[0];
}

void epacket_gen::thread_dout_V_keep_V_1_ack_out() {
    dout_V_keep_V_1_ack_out = dout_TREADY.read();
}

void epacket_gen::thread_dout_V_keep_V_1_data_out() {
    dout_V_keep_V_1_data_out = ap_const_lv16_FF;
}

void epacket_gen::thread_dout_V_keep_V_1_sel() {
    dout_V_keep_V_1_sel = dout_V_keep_V_1_sel_rd.read();
}

void epacket_gen::thread_dout_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_V_data_V_1_ack_in.read()) || ((esl_seteq<1,1,1>(ap_const_logic_0, dout_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_1) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
    esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_3)) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_keep_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_keep_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_last_V_1_state.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))))) {
        dout_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        dout_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void epacket_gen::thread_dout_V_keep_V_1_vld_out() {
    dout_V_keep_V_1_vld_out = dout_V_keep_V_1_state.read()[0];
}

void epacket_gen::thread_dout_V_last_V_1_ack_in() {
    dout_V_last_V_1_ack_in = dout_V_last_V_1_state.read()[1];
}

void epacket_gen::thread_dout_V_last_V_1_ack_out() {
    dout_V_last_V_1_ack_out = dout_TREADY.read();
}

void epacket_gen::thread_dout_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, dout_V_last_V_1_sel.read())) {
        dout_V_last_V_1_data_out = dout_V_last_V_1_payload_B.read();
    } else {
        dout_V_last_V_1_data_out = dout_V_last_V_1_payload_A.read();
    }
}

void epacket_gen::thread_dout_V_last_V_1_load_A() {
    dout_V_last_V_1_load_A = (dout_V_last_V_1_state_cmp_full.read() & ~dout_V_last_V_1_sel_wr.read());
}

void epacket_gen::thread_dout_V_last_V_1_load_B() {
    dout_V_last_V_1_load_B = (dout_V_last_V_1_sel_wr.read() & dout_V_last_V_1_state_cmp_full.read());
}

void epacket_gen::thread_dout_V_last_V_1_sel() {
    dout_V_last_V_1_sel = dout_V_last_V_1_sel_rd.read();
}

void epacket_gen::thread_dout_V_last_V_1_state_cmp_full() {
    dout_V_last_V_1_state_cmp_full =  (sc_logic) ((!dout_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(dout_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void epacket_gen::thread_dout_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_V_data_V_1_ack_in.read()) || ((esl_seteq<1,1,1>(ap_const_logic_0, dout_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_1) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
    esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_3)) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_keep_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_keep_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_last_V_1_state.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))))) {
        dout_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        dout_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void epacket_gen::thread_dout_V_last_V_1_vld_out() {
    dout_V_last_V_1_vld_out = dout_V_last_V_1_state.read()[0];
}

void epacket_gen::thread_out_data_V_fu_113_p1() {
    out_data_V_fu_113_p1 = esl_zext<128,16>(select_ln21_fu_99_p3.read());
}

void epacket_gen::thread_ret_V_fu_72_p2() {
    ret_V_fu_72_p2 = (!zext_ln215_fu_68_p1.read().is_01() || !ap_const_lv17_1FFFF.is_01())? sc_lv<17>(): (sc_biguint<17>(zext_ln215_fu_68_p1.read()) + sc_bigint<17>(ap_const_lv17_1FFFF));
}

void epacket_gen::thread_select_ln21_fu_99_p3() {
    select_ln21_fu_99_p3 = (!tmp_last_V_fu_86_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_last_V_fu_86_p2.read()[0].to_bool())? ap_const_lv16_0: add_ln700_fu_93_p2.read());
}

void epacket_gen::thread_tmp_last_V_fu_86_p2() {
    tmp_last_V_fu_86_p2 = (!zext_ln879_fu_82_p1.read().is_01() || !ret_V_fu_72_p2.read().is_01())? sc_lv<1>(): sc_lv<1>(zext_ln879_fu_82_p1.read() == ret_V_fu_72_p2.read());
}

void epacket_gen::thread_zext_ln215_fu_68_p1() {
    zext_ln215_fu_68_p1 = esl_zext<17,16>(count_V.read());
}

void epacket_gen::thread_zext_ln879_fu_82_p1() {
    zext_ln879_fu_82_p1 = esl_zext<17,16>(message_V.read());
}

void epacket_gen::thread_ap_NS_iter0_fsm() {
    switch (ap_CS_iter0_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
break;
        default : 
            ap_NS_iter0_fsm = "X";
            break;
    }
}

void epacket_gen::thread_ap_NS_iter1_fsm() {
    switch (ap_CS_iter1_fsm.read().to_uint64()) {
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_data_V_1_ack_in.read()) || esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_1) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
  esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_3)) || esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_keep_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_keep_V_1_state.read())) || esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_last_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_last_V_1_state.read()))) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_V_data_V_1_ack_in.read())))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            } else if ((!(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_data_V_1_ack_in.read()) || esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_1) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
  esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_3)) || esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_keep_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_keep_V_1_state.read())) || esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_last_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_last_V_1_state.read()))) && (esl_seteq<1,1,1>(ap_CS_iter0_fsm_state1.read(), ap_const_logic_0) || 
  (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
   (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
    esl_seteq<1,1,1>(ap_const_logic_0, dout_V_data_V_1_ack_in.read())))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            } else {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            }
            break;
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_V_data_V_1_ack_in.read()) || ((esl_seteq<1,1,1>(ap_const_logic_0, dout_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_1) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
    esl_seteq<1,2,2>(dout_V_data_V_1_state.read(), ap_const_lv2_3)) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_keep_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_keep_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, dout_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, dout_V_last_V_1_state.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            } else {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            }
            break;
        default : 
            ap_NS_iter1_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

void epacket_gen::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dout_TREADY\" :  \"" << dout_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dout_TDATA\" :  \"" << dout_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dout_TVALID\" :  \"" << dout_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dout_TKEEP\" :  \"" << dout_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dout_TLAST\" :  \"" << dout_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"count_V\" :  \"" << count_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

