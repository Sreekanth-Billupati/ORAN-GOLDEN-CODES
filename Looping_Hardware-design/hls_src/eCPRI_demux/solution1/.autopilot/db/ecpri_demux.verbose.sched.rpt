

================================================================
== Vivado HLS Report for 'ecpri_demux'
================================================================
* Date:           Wed Dec  1 10:46:56 2021

* Version:        2019.1 (Build 2552052 on Fri May 24 15:28:33 MDT 2019)
* Project:        eCPRI_demux
* Solution:       solution1
* Product family: zynquplus
* Target device:  xczu9eg-ffvb1156-2-e


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   3.20|     0.849|        0.40|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+----------+
    |  Latency  |  Interval | Pipeline |
    | min | max | min | max |   Type   |
    +-----+-----+-----+-----+----------+
    |    2|    2|    1|    1| function |
    +-----+-----+-----+-----+----------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 1
HasVarLatency: 0
IsPipeline: 1
IsRtlPipelined: 1
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 3
* Pipeline : 1
  Pipeline-0 : II = 1, D = 3, States = { 1 2 3 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 0.84>
ST_1 : Operation 4 [1/1] (0.00ns)   --->   "%state_V_load = load i2* @state_V, align 1" [eCPRI_demux/ecpri_demux.cpp:35]   --->   Operation 4 'load' 'state_V_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%first_read_load = load i1* @first_read, align 1" [eCPRI_demux/ecpri_demux.cpp:77]   --->   Operation 5 'load' 'first_read_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%empty_6 = call { i128, i1, i16, i1 } @_ssdm_op_Read.axis.volatile.i128P.i1P.i16P.i1P(i128* %CU_data_in_V_data_V, i1* %CU_data_in_V_user_V, i16* %CU_data_in_V_keep_V, i1* %CU_data_in_V_last_V)" [eCPRI_demux/ecpri_demux.cpp:97]   --->   Operation 6 'read' 'empty_6' <Predicate = (state_V_load == 3)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%tmp_last_V_3 = extractvalue { i128, i1, i16, i1 } %empty_6, 3" [eCPRI_demux/ecpri_demux.cpp:97]   --->   Operation 7 'extractvalue' 'tmp_last_V_3' <Predicate = (state_V_load == 3)> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "br i1 %tmp_last_V_3, label %20, label %._crit_edge157" [eCPRI_demux/ecpri_demux.cpp:98]   --->   Operation 8 'br' <Predicate = (state_V_load == 3)> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.69ns)   --->   "store i2 0, i2* @state_V, align 1" [eCPRI_demux/ecpri_demux.cpp:99]   --->   Operation 9 'store' <Predicate = (state_V_load == 3 & tmp_last_V_3)> <Delay = 0.69>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%empty_5 = call { i128, i1, i16, i1 } @_ssdm_op_Read.axis.volatile.i128P.i1P.i16P.i1P(i128* %CU_data_in_V_data_V, i1* %CU_data_in_V_user_V, i16* %CU_data_in_V_keep_V, i1* %CU_data_in_V_last_V)" [eCPRI_demux/ecpri_demux.cpp:76]   --->   Operation 10 'read' 'empty_5' <Predicate = (state_V_load == 2)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%tmp_data_V_3 = extractvalue { i128, i1, i16, i1 } %empty_5, 0" [eCPRI_demux/ecpri_demux.cpp:76]   --->   Operation 11 'extractvalue' 'tmp_data_V_3' <Predicate = (state_V_load == 2)> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%tmp_user_V_2 = extractvalue { i128, i1, i16, i1 } %empty_5, 1" [eCPRI_demux/ecpri_demux.cpp:76]   --->   Operation 12 'extractvalue' 'tmp_user_V_2' <Predicate = (state_V_load == 2)> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%tmp_keep_V_2 = extractvalue { i128, i1, i16, i1 } %empty_5, 2" [eCPRI_demux/ecpri_demux.cpp:76]   --->   Operation 13 'extractvalue' 'tmp_keep_V_2' <Predicate = (state_V_load == 2)> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%tmp_last_V_2 = extractvalue { i128, i1, i16, i1 } %empty_5, 3" [eCPRI_demux/ecpri_demux.cpp:76]   --->   Operation 14 'extractvalue' 'tmp_last_V_2' <Predicate = (state_V_load == 2)> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "br i1 %first_read_load, label %10, label %14" [eCPRI_demux/ecpri_demux.cpp:77]   --->   Operation 15 'br' <Predicate = (state_V_load == 2)> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.69ns)   --->   "store i2 0, i2* @state_V, align 1" [eCPRI_demux/ecpri_demux.cpp:88]   --->   Operation 16 'store' <Predicate = (state_V_load == 2 & !first_read_load & tmp_last_V_2)> <Delay = 0.69>
ST_1 : Operation 17 [1/1] (0.65ns)   --->   "store i1 false, i1* @first_read, align 1" [eCPRI_demux/ecpri_demux.cpp:78]   --->   Operation 17 'store' <Predicate = (state_V_load == 2 & first_read_load)> <Delay = 0.65>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%section_type_V = call i8 @_ssdm_op_PartSelect.i8.i128.i32.i32(i128 %tmp_data_V_3, i32 88, i32 95)" [eCPRI_demux/ecpri_demux.cpp:79]   --->   Operation 18 'partselect' 'section_type_V' <Predicate = (state_V_load == 2 & first_read_load)> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.84ns)   --->   "%icmp_ln879 = icmp eq i8 %section_type_V, 1" [eCPRI_demux/ecpri_demux.cpp:80]   --->   Operation 19 'icmp' 'icmp_ln879' <Predicate = (state_V_load == 2 & first_read_load)> <Delay = 0.84> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.84> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "br i1 %icmp_ln879, label %11, label %12" [eCPRI_demux/ecpri_demux.cpp:80]   --->   Operation 20 'br' <Predicate = (state_V_load == 2 & first_read_load)> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.69ns)   --->   "store i2 -1, i2* @state_V, align 1" [eCPRI_demux/ecpri_demux.cpp:84]   --->   Operation 21 'store' <Predicate = (state_V_load == 2 & first_read_load & !icmp_ln879)> <Delay = 0.69>
ST_1 : Operation 22 [1/1] (0.69ns)   --->   "store i2 -2, i2* @state_V, align 1" [eCPRI_demux/ecpri_demux.cpp:81]   --->   Operation 22 'store' <Predicate = (state_V_load == 2 & first_read_load & icmp_ln879)> <Delay = 0.69>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%empty_4 = call { i128, i1, i16, i1 } @_ssdm_op_Read.axis.volatile.i128P.i1P.i16P.i1P(i128* %CU_data_in_V_data_V, i1* %CU_data_in_V_user_V, i16* %CU_data_in_V_keep_V, i1* %CU_data_in_V_last_V)" [eCPRI_demux/ecpri_demux.cpp:64]   --->   Operation 23 'read' 'empty_4' <Predicate = (state_V_load == 1)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%tmp_data_V = extractvalue { i128, i1, i16, i1 } %empty_4, 0" [eCPRI_demux/ecpri_demux.cpp:64]   --->   Operation 24 'extractvalue' 'tmp_data_V' <Predicate = (state_V_load == 1)> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%tmp_user_V_1 = extractvalue { i128, i1, i16, i1 } %empty_4, 1" [eCPRI_demux/ecpri_demux.cpp:64]   --->   Operation 25 'extractvalue' 'tmp_user_V_1' <Predicate = (state_V_load == 1)> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%tmp_keep_V_1 = extractvalue { i128, i1, i16, i1 } %empty_4, 2" [eCPRI_demux/ecpri_demux.cpp:64]   --->   Operation 26 'extractvalue' 'tmp_keep_V_1' <Predicate = (state_V_load == 1)> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%tmp_last_V_1 = extractvalue { i128, i1, i16, i1 } %empty_4, 3" [eCPRI_demux/ecpri_demux.cpp:64]   --->   Operation 27 'extractvalue' 'tmp_last_V_1' <Predicate = (state_V_load == 1)> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "br i1 %tmp_last_V_1, label %6, label %7" [eCPRI_demux/ecpri_demux.cpp:65]   --->   Operation 28 'br' <Predicate = (state_V_load == 1)> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.69ns)   --->   "store i2 0, i2* @state_V, align 1" [eCPRI_demux/ecpri_demux.cpp:66]   --->   Operation 29 'store' <Predicate = (state_V_load == 1 & tmp_last_V_1)> <Delay = 0.69>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%empty = call { i128, i1, i16, i1 } @_ssdm_op_Read.axis.volatile.i128P.i1P.i16P.i1P(i128* %CU_data_in_V_data_V, i1* %CU_data_in_V_user_V, i16* %CU_data_in_V_keep_V, i1* %CU_data_in_V_last_V)" [eCPRI_demux/ecpri_demux.cpp:41]   --->   Operation 30 'read' 'empty' <Predicate = (state_V_load == 0)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%tmp_data_V_2 = extractvalue { i128, i1, i16, i1 } %empty, 0" [eCPRI_demux/ecpri_demux.cpp:41]   --->   Operation 31 'extractvalue' 'tmp_data_V_2' <Predicate = (state_V_load == 0)> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%tmp_user_V = extractvalue { i128, i1, i16, i1 } %empty, 1" [eCPRI_demux/ecpri_demux.cpp:41]   --->   Operation 32 'extractvalue' 'tmp_user_V' <Predicate = (state_V_load == 0)> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%tmp_keep_V = extractvalue { i128, i1, i16, i1 } %empty, 2" [eCPRI_demux/ecpri_demux.cpp:41]   --->   Operation 33 'extractvalue' 'tmp_keep_V' <Predicate = (state_V_load == 0)> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%tmp_last_V = extractvalue { i128, i1, i16, i1 } %empty, 3" [eCPRI_demux/ecpri_demux.cpp:41]   --->   Operation 34 'extractvalue' 'tmp_last_V' <Predicate = (state_V_load == 0)> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%p_Result_s = call i8 @_ssdm_op_PartSelect.i8.i128.i32.i32(i128 %tmp_data_V_2, i32 120, i32 127)" [eCPRI_demux/ecpri_demux.cpp:42]   --->   Operation 35 'partselect' 'p_Result_s' <Predicate = (state_V_load == 0)> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.65ns)   --->   "store i1 true, i1* @first_read, align 1" [eCPRI_demux/ecpri_demux.cpp:43]   --->   Operation 36 'store' <Predicate = (state_V_load == 0)> <Delay = 0.65>
ST_1 : Operation 37 [1/1] (0.69ns)   --->   "store i2 -2, i2* @state_V, align 1" [eCPRI_demux/ecpri_demux.cpp:51]   --->   Operation 37 'store' <Predicate = (state_V_load == 0 & p_Result_s == 2)> <Delay = 0.69>
ST_1 : Operation 38 [1/1] (0.69ns)   --->   "store i2 1, i2* @state_V, align 1" [eCPRI_demux/ecpri_demux.cpp:47]   --->   Operation 38 'store' <Predicate = (state_V_load == 0 & p_Result_s == 0)> <Delay = 0.69>
ST_1 : Operation 39 [1/1] (0.69ns)   --->   "store i2 -1, i2* @state_V, align 1" [eCPRI_demux/ecpri_demux.cpp:55]   --->   Operation 39 'store' <Predicate = (state_V_load == 0 & p_Result_s != 0 & p_Result_s != 2)> <Delay = 0.69>

State 2 <SV = 1> <Delay = 0.00>
ST_2 : Operation 40 [1/1] (0.00ns)   --->   "br i1 %tmp_last_V_2, label %15, label %16" [eCPRI_demux/ecpri_demux.cpp:86]   --->   Operation 40 'br' <Predicate = (state_V_load == 2 & !first_read_load)> <Delay = 0.00>
ST_2 : Operation 41 [2/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i128P.i1P.i16P.i1P(i128* %control_data_out_V_data_V, i1* %control_data_out_V_user_V, i16* %control_data_out_V_keep_V, i1* %control_data_out_V_last_V, i128 %tmp_data_V_3, i1 %tmp_user_V_2, i16 %tmp_keep_V_2, i1 false)" [eCPRI_demux/ecpri_demux.cpp:92]   --->   Operation 41 'write' <Predicate = (state_V_load == 2 & !first_read_load & !tmp_last_V_2)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_2 : Operation 42 [2/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i128P.i1P.i16P.i1P(i128* %control_data_out_V_data_V, i1* %control_data_out_V_user_V, i16* %control_data_out_V_keep_V, i1* %control_data_out_V_last_V, i128 %tmp_data_V_3, i1 %tmp_user_V_2, i16 %tmp_keep_V_2, i1 true)" [eCPRI_demux/ecpri_demux.cpp:89]   --->   Operation 42 'write' <Predicate = (state_V_load == 2 & !first_read_load & tmp_last_V_2)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_2 : Operation 43 [2/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i128P.i1P.i16P.i1P(i128* %control_data_out_V_data_V, i1* %control_data_out_V_user_V, i16* %control_data_out_V_keep_V, i1* %control_data_out_V_last_V, i128 %tmp_data_V_3, i1 %tmp_user_V_2, i16 %tmp_keep_V_2, i1 %tmp_last_V_2)" [eCPRI_demux/ecpri_demux.cpp:82]   --->   Operation 43 'write' <Predicate = (state_V_load == 2 & first_read_load & icmp_ln879)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_2 : Operation 44 [2/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i128P.i1P.i16P.i1P(i128* %user_data_out_V_data_V, i1* %user_data_out_V_user_V, i16* %user_data_out_V_keep_V, i1* %user_data_out_V_last_V, i128 %tmp_data_V, i1 %tmp_user_V_1, i16 %tmp_keep_V_1, i1 false)" [eCPRI_demux/ecpri_demux.cpp:70]   --->   Operation 44 'write' <Predicate = (state_V_load == 1 & !tmp_last_V_1)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_2 : Operation 45 [2/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i128P.i1P.i16P.i1P(i128* %user_data_out_V_data_V, i1* %user_data_out_V_user_V, i16* %user_data_out_V_keep_V, i1* %user_data_out_V_last_V, i128 %tmp_data_V, i1 %tmp_user_V_1, i16 %tmp_keep_V_1, i1 true)" [eCPRI_demux/ecpri_demux.cpp:67]   --->   Operation 45 'write' <Predicate = (state_V_load == 1 & tmp_last_V_1)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_2 : Operation 46 [2/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i128P.i1P.i16P.i1P(i128* %user_data_out_V_data_V, i1* %user_data_out_V_user_V, i16* %user_data_out_V_keep_V, i1* %user_data_out_V_last_V, i128 %tmp_data_V_2, i1 %tmp_user_V, i16 %tmp_keep_V, i1 %tmp_last_V)" [eCPRI_demux/ecpri_demux.cpp:46]   --->   Operation 46 'write' <Predicate = (state_V_load == 0 & p_Result_s == 0)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >

State 3 <SV = 2> <Delay = 0.72>
ST_3 : Operation 47 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i128* %CU_data_in_V_data_V), !map !61"   --->   Operation 47 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 48 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %CU_data_in_V_user_V), !map !67"   --->   Operation 48 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 49 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i16* %CU_data_in_V_keep_V), !map !71"   --->   Operation 49 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 50 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %CU_data_in_V_last_V), !map !75"   --->   Operation 50 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 51 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i128* %control_data_out_V_data_V), !map !79"   --->   Operation 51 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 52 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %control_data_out_V_user_V), !map !83"   --->   Operation 52 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 53 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i16* %control_data_out_V_keep_V), !map !87"   --->   Operation 53 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 54 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %control_data_out_V_last_V), !map !91"   --->   Operation 54 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 55 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i128* %user_data_out_V_data_V), !map !95"   --->   Operation 55 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 56 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %user_data_out_V_user_V), !map !99"   --->   Operation 56 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 57 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i16* %user_data_out_V_keep_V), !map !103"   --->   Operation 57 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 58 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %user_data_out_V_last_V), !map !107"   --->   Operation 58 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 59 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i2* %ecpri_demux_eth_state_out_V), !map !111"   --->   Operation 59 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 60 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8* %msg_type_out_V), !map !115"   --->   Operation 60 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 61 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([12 x i8]* @ecpri_demux_str) nounwind"   --->   Operation 61 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 62 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i128* %CU_data_in_V_data_V, i1* %CU_data_in_V_user_V, i16* %CU_data_in_V_keep_V, i1* %CU_data_in_V_last_V, [5 x i8]* @p_str, i32 1, i32 1, [5 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2, [1 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2) nounwind" [eCPRI_demux/ecpri_demux.cpp:20]   --->   Operation 62 'specinterface' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 63 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i128* %control_data_out_V_data_V, i1* %control_data_out_V_user_V, i16* %control_data_out_V_keep_V, i1* %control_data_out_V_last_V, [5 x i8]* @p_str, i32 1, i32 1, [5 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2, [1 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2) nounwind" [eCPRI_demux/ecpri_demux.cpp:21]   --->   Operation 63 'specinterface' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 64 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i128* %user_data_out_V_data_V, i1* %user_data_out_V_user_V, i16* %user_data_out_V_keep_V, i1* %user_data_out_V_last_V, [5 x i8]* @p_str, i32 1, i32 1, [5 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2, [1 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2) nounwind" [eCPRI_demux/ecpri_demux.cpp:22]   --->   Operation 64 'specinterface' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 65 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i2* %ecpri_demux_eth_state_out_V, [8 x i8]* @p_str3, i32 0, i32 0, [1 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2, [1 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2) nounwind" [eCPRI_demux/ecpri_demux.cpp:23]   --->   Operation 65 'specinterface' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 66 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 2, i32 1, i32 0, [1 x i8]* @p_str2) nounwind" [eCPRI_demux/ecpri_demux.cpp:24]   --->   Operation 66 'specpipeline' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 67 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i8* %msg_type_out_V, [8 x i8]* @p_str3, i32 0, i32 0, [1 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2, [1 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2) nounwind" [eCPRI_demux/ecpri_demux.cpp:25]   --->   Operation 67 'specinterface' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 68 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 0, [13 x i8]* @p_str4, i32 0, i32 0, [1 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2, [1 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2) nounwind" [eCPRI_demux/ecpri_demux.cpp:26]   --->   Operation 68 'specinterface' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 69 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecReset(i2* @state_V, i32 1, [1 x i8]* @p_str2) nounwind" [eCPRI_demux/ecpri_demux.cpp:34]   --->   Operation 69 'specreset' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 70 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_none.i2P(i2* %ecpri_demux_eth_state_out_V, i2 %state_V_load)" [eCPRI_demux/ecpri_demux.cpp:35]   --->   Operation 70 'write' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 71 [1/1] (0.00ns)   --->   "%msg_type_V_load = load i8* @msg_type_V, align 1" [eCPRI_demux/ecpri_demux.cpp:36]   --->   Operation 71 'load' 'msg_type_V_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 72 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_none.i8P(i8* %msg_type_out_V, i8 %msg_type_V_load)" [eCPRI_demux/ecpri_demux.cpp:36]   --->   Operation 72 'write' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 73 [1/1] (0.72ns)   --->   "switch i2 %state_V_load, label %._crit_edge156 [
    i2 0, label %0
    i2 1, label %5
    i2 -2, label %9
    i2 -1, label %19
  ]" [eCPRI_demux/ecpri_demux.cpp:38]   --->   Operation 73 'switch' <Predicate = true> <Delay = 0.72>
ST_3 : Operation 74 [1/1] (0.00ns)   --->   "br label %._crit_edge157" [eCPRI_demux/ecpri_demux.cpp:100]   --->   Operation 74 'br' <Predicate = (state_V_load == 3 & tmp_last_V_3)> <Delay = 0.00>
ST_3 : Operation 75 [1/1] (0.00ns)   --->   "br label %._crit_edge156" [eCPRI_demux/ecpri_demux.cpp:101]   --->   Operation 75 'br' <Predicate = (state_V_load == 3)> <Delay = 0.00>
ST_3 : Operation 76 [1/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i128P.i1P.i16P.i1P(i128* %control_data_out_V_data_V, i1* %control_data_out_V_user_V, i16* %control_data_out_V_keep_V, i1* %control_data_out_V_last_V, i128 %tmp_data_V_3, i1 %tmp_user_V_2, i16 %tmp_keep_V_2, i1 false)" [eCPRI_demux/ecpri_demux.cpp:92]   --->   Operation 76 'write' <Predicate = (state_V_load == 2 & !first_read_load & !tmp_last_V_2)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_3 : Operation 77 [1/1] (0.00ns)   --->   "br label %17"   --->   Operation 77 'br' <Predicate = (state_V_load == 2 & !first_read_load & !tmp_last_V_2)> <Delay = 0.00>
ST_3 : Operation 78 [1/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i128P.i1P.i16P.i1P(i128* %control_data_out_V_data_V, i1* %control_data_out_V_user_V, i16* %control_data_out_V_keep_V, i1* %control_data_out_V_last_V, i128 %tmp_data_V_3, i1 %tmp_user_V_2, i16 %tmp_keep_V_2, i1 true)" [eCPRI_demux/ecpri_demux.cpp:89]   --->   Operation 78 'write' <Predicate = (state_V_load == 2 & !first_read_load & tmp_last_V_2)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_3 : Operation 79 [1/1] (0.00ns)   --->   "br label %17" [eCPRI_demux/ecpri_demux.cpp:90]   --->   Operation 79 'br' <Predicate = (state_V_load == 2 & !first_read_load & tmp_last_V_2)> <Delay = 0.00>
ST_3 : Operation 80 [1/1] (0.00ns)   --->   "br label %18"   --->   Operation 80 'br' <Predicate = (state_V_load == 2 & !first_read_load)> <Delay = 0.00>
ST_3 : Operation 81 [1/1] (0.00ns)   --->   "br label %13"   --->   Operation 81 'br' <Predicate = (state_V_load == 2 & first_read_load & !icmp_ln879)> <Delay = 0.00>
ST_3 : Operation 82 [1/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i128P.i1P.i16P.i1P(i128* %control_data_out_V_data_V, i1* %control_data_out_V_user_V, i16* %control_data_out_V_keep_V, i1* %control_data_out_V_last_V, i128 %tmp_data_V_3, i1 %tmp_user_V_2, i16 %tmp_keep_V_2, i1 %tmp_last_V_2)" [eCPRI_demux/ecpri_demux.cpp:82]   --->   Operation 82 'write' <Predicate = (state_V_load == 2 & first_read_load & icmp_ln879)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_3 : Operation 83 [1/1] (0.00ns)   --->   "br label %13" [eCPRI_demux/ecpri_demux.cpp:83]   --->   Operation 83 'br' <Predicate = (state_V_load == 2 & first_read_load & icmp_ln879)> <Delay = 0.00>
ST_3 : Operation 84 [1/1] (0.00ns)   --->   "br label %18" [eCPRI_demux/ecpri_demux.cpp:86]   --->   Operation 84 'br' <Predicate = (state_V_load == 2 & first_read_load)> <Delay = 0.00>
ST_3 : Operation 85 [1/1] (0.00ns)   --->   "br label %._crit_edge156" [eCPRI_demux/ecpri_demux.cpp:94]   --->   Operation 85 'br' <Predicate = (state_V_load == 2)> <Delay = 0.00>
ST_3 : Operation 86 [1/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i128P.i1P.i16P.i1P(i128* %user_data_out_V_data_V, i1* %user_data_out_V_user_V, i16* %user_data_out_V_keep_V, i1* %user_data_out_V_last_V, i128 %tmp_data_V, i1 %tmp_user_V_1, i16 %tmp_keep_V_1, i1 false)" [eCPRI_demux/ecpri_demux.cpp:70]   --->   Operation 86 'write' <Predicate = (state_V_load == 1 & !tmp_last_V_1)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_3 : Operation 87 [1/1] (0.00ns)   --->   "br label %8"   --->   Operation 87 'br' <Predicate = (state_V_load == 1 & !tmp_last_V_1)> <Delay = 0.00>
ST_3 : Operation 88 [1/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i128P.i1P.i16P.i1P(i128* %user_data_out_V_data_V, i1* %user_data_out_V_user_V, i16* %user_data_out_V_keep_V, i1* %user_data_out_V_last_V, i128 %tmp_data_V, i1 %tmp_user_V_1, i16 %tmp_keep_V_1, i1 true)" [eCPRI_demux/ecpri_demux.cpp:67]   --->   Operation 88 'write' <Predicate = (state_V_load == 1 & tmp_last_V_1)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_3 : Operation 89 [1/1] (0.00ns)   --->   "br label %8" [eCPRI_demux/ecpri_demux.cpp:68]   --->   Operation 89 'br' <Predicate = (state_V_load == 1 & tmp_last_V_1)> <Delay = 0.00>
ST_3 : Operation 90 [1/1] (0.00ns)   --->   "br label %._crit_edge156" [eCPRI_demux/ecpri_demux.cpp:73]   --->   Operation 90 'br' <Predicate = (state_V_load == 1)> <Delay = 0.00>
ST_3 : Operation 91 [1/1] (0.00ns)   --->   "store i8 %p_Result_s, i8* @msg_type_V, align 1" [eCPRI_demux/ecpri_demux.cpp:42]   --->   Operation 91 'store' <Predicate = (state_V_load == 0)> <Delay = 0.00>
ST_3 : Operation 92 [1/1] (0.58ns)   --->   "switch i8 %p_Result_s, label %3 [
    i8 0, label %1
    i8 2, label %2
  ]" [eCPRI_demux/ecpri_demux.cpp:44]   --->   Operation 92 'switch' <Predicate = (state_V_load == 0)> <Delay = 0.58>
ST_3 : Operation 93 [1/1] (0.00ns)   --->   "br label %4" [eCPRI_demux/ecpri_demux.cpp:52]   --->   Operation 93 'br' <Predicate = (state_V_load == 0 & p_Result_s == 2)> <Delay = 0.00>
ST_3 : Operation 94 [1/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i128P.i1P.i16P.i1P(i128* %user_data_out_V_data_V, i1* %user_data_out_V_user_V, i16* %user_data_out_V_keep_V, i1* %user_data_out_V_last_V, i128 %tmp_data_V_2, i1 %tmp_user_V, i16 %tmp_keep_V, i1 %tmp_last_V)" [eCPRI_demux/ecpri_demux.cpp:46]   --->   Operation 94 'write' <Predicate = (state_V_load == 0 & p_Result_s == 0)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_3 : Operation 95 [1/1] (0.00ns)   --->   "br label %4" [eCPRI_demux/ecpri_demux.cpp:48]   --->   Operation 95 'br' <Predicate = (state_V_load == 0 & p_Result_s == 0)> <Delay = 0.00>
ST_3 : Operation 96 [1/1] (0.00ns)   --->   "br label %4" [eCPRI_demux/ecpri_demux.cpp:56]   --->   Operation 96 'br' <Predicate = (state_V_load == 0 & p_Result_s != 0 & p_Result_s != 2)> <Delay = 0.00>
ST_3 : Operation 97 [1/1] (0.00ns)   --->   "br label %._crit_edge156" [eCPRI_demux/ecpri_demux.cpp:59]   --->   Operation 97 'br' <Predicate = (state_V_load == 0)> <Delay = 0.00>
ST_3 : Operation 98 [1/1] (0.00ns)   --->   "ret void" [eCPRI_demux/ecpri_demux.cpp:103]   --->   Operation 98 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 3.2ns, clock uncertainty: 0.4ns.

 <State 1>: 0.849ns
The critical path consists of the following:
	axis read on port 'CU_data_in_V_data_V' (eCPRI_demux/ecpri_demux.cpp:76) [57]  (0 ns)
	'icmp' operation ('icmp_ln879', eCPRI_demux/ecpri_demux.cpp:80) [77]  (0.849 ns)

 <State 2>: 0ns
The critical path consists of the following:

 <State 3>: 0.721ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
