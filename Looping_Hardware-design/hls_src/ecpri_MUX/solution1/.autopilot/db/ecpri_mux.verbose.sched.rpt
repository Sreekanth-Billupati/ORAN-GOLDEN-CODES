

================================================================
== Vivado HLS Report for 'ecpri_mux'
================================================================
* Date:           Fri Feb  4 12:41:27 2022

* Version:        2019.1 (Build 2552052 on Fri May 24 15:28:33 MDT 2019)
* Project:        ecpri_MUX
* Solution:       solution1
* Product family: zynquplus
* Target device:  xczu9eg-ffvb1156-2-e


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   3.20|     3.153|        0.40|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+----------+
    |  Latency  |  Interval | Pipeline |
    | min | max | min | max |   Type   |
    +-----+-----+-----+-----+----------+
    |    2|    2|    1|    1| function |
    +-----+-----+-----+-----+----------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 1
HasVarLatency: 0
IsPipeline: 1
IsRtlPipelined: 1
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 3
* Pipeline : 1
  Pipeline-0 : II = 1, D = 3, States = { 1 2 3 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 3.15>
ST_1 : Operation 4 [1/1] (0.00ns)   --->   "%numSection_V_load = load i12* @numSection_V, align 2" [ecpri_MUX/ecpri_mux.cpp:62]   --->   Operation 4 'load' 'numSection_V_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%t_V = load i12* @section_count_V, align 2" [ecpri_MUX/ecpri_mux.cpp:63]   --->   Operation 5 'load' 't_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%t_V_1 = load i3* @layer_count_V, align 1" [ecpri_MUX/ecpri_mux.cpp:64]   --->   Operation 6 'load' 't_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%ecpri_mux_state_load = load i2* @ecpri_mux_state, align 1" [ecpri_MUX/ecpri_mux.cpp:71]   --->   Operation 7 'load' 'ecpri_mux_state_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%mux_cnfg_V_load = load i96* @mux_cnfg_V, align 8" [ecpri_MUX/ecpri_mux.cpp:102]   --->   Operation 8 'load' 'mux_cnfg_V_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%t_V_2 = load i8* @tlast_counter_V, align 1" [ecpri_MUX/ecpri_mux.cpp:127]   --->   Operation 9 'load' 't_V_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.72ns)   --->   "switch i2 %ecpri_mux_state_load, label %._crit_edge263 [
    i2 0, label %0
    i2 1, label %1
    i2 -2, label %2
    i2 -1, label %5
  ]" [ecpri_MUX/ecpri_mux.cpp:73]   --->   Operation 10 'switch' <Predicate = true> <Delay = 0.72>
ST_1 : Operation 11 [1/1] (0.84ns)   --->   "%icmp_ln887 = icmp ult i8 %t_V_2, -116" [ecpri_MUX/ecpri_mux.cpp:127]   --->   Operation 11 'icmp' 'icmp_ln887' <Predicate = (ecpri_mux_state_load == 3)> <Delay = 0.84> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.58> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "br i1 %icmp_ln887, label %6, label %10" [ecpri_MUX/ecpri_mux.cpp:127]   --->   Operation 12 'br' <Predicate = (ecpri_mux_state_load == 3)> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.71ns)   --->   "store i2 0, i2* @ecpri_mux_state, align 1" [ecpri_MUX/ecpri_mux.cpp:143]   --->   Operation 13 'store' <Predicate = (ecpri_mux_state_load == 3 & !icmp_ln887)> <Delay = 0.71>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%empty_4 = call { i128, i1, i16, i1 } @_ssdm_op_Read.axis.volatile.i128P.i1P.i16P.i1P(i128* %user_data_in_V_data_V, i1* %user_data_in_V_user_V, i16* %user_data_in_V_keep_V, i1* %user_data_in_V_last_V)" [ecpri_MUX/ecpri_mux.cpp:129]   --->   Operation 14 'read' 'empty_4' <Predicate = (ecpri_mux_state_load == 3 & icmp_ln887)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%tmp_data_V_1 = extractvalue { i128, i1, i16, i1 } %empty_4, 0" [ecpri_MUX/ecpri_mux.cpp:129]   --->   Operation 15 'extractvalue' 'tmp_data_V_1' <Predicate = (ecpri_mux_state_load == 3 & icmp_ln887)> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%tmp_last_V_1 = extractvalue { i128, i1, i16, i1 } %empty_4, 3" [ecpri_MUX/ecpri_mux.cpp:129]   --->   Operation 16 'extractvalue' 'tmp_last_V_1' <Predicate = (ecpri_mux_state_load == 3 & icmp_ln887)> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.71ns)   --->   "store i2 -1, i2* @ecpri_mux_state, align 1" [ecpri_MUX/ecpri_mux.cpp:135]   --->   Operation 17 'store' <Predicate = (ecpri_mux_state_load == 3 & icmp_ln887 & !tmp_last_V_1)> <Delay = 0.71>
ST_1 : Operation 18 [1/1] (0.76ns)   --->   "%add_ln700_2 = add i8 %t_V_2, 1" [ecpri_MUX/ecpri_mux.cpp:132]   --->   Operation 18 'add' 'add_ln700_2' <Predicate = (ecpri_mux_state_load == 3 & icmp_ln887 & tmp_last_V_1)> <Delay = 0.76> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 19 [1/1] (0.65ns)   --->   "store i8 %add_ln700_2, i8* @tlast_counter_V, align 1" [ecpri_MUX/ecpri_mux.cpp:132]   --->   Operation 19 'store' <Predicate = (ecpri_mux_state_load == 3 & icmp_ln887 & tmp_last_V_1)> <Delay = 0.65>
ST_1 : Operation 20 [1/1] (0.67ns)   --->   "br label %._crit_edge263" [ecpri_MUX/ecpri_mux.cpp:145]   --->   Operation 20 'br' <Predicate = (ecpri_mux_state_load == 3)> <Delay = 0.67>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%empty = call { i128, i1, i16, i1 } @_ssdm_op_Read.axis.volatile.i128P.i1P.i16P.i1P(i128* %control_data_in_V_data_V, i1* %control_data_in_V_user_V, i16* %control_data_in_V_keep_V, i1* %control_data_in_V_last_V)" [ecpri_MUX/ecpri_mux.cpp:95]   --->   Operation 21 'read' 'empty' <Predicate = (ecpri_mux_state_load == 2)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%tmp_data_V = extractvalue { i128, i1, i16, i1 } %empty, 0" [ecpri_MUX/ecpri_mux.cpp:95]   --->   Operation 22 'extractvalue' 'tmp_data_V' <Predicate = (ecpri_mux_state_load == 2)> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%tmp_last_V = extractvalue { i128, i1, i16, i1 } %empty, 3" [ecpri_MUX/ecpri_mux.cpp:95]   --->   Operation 23 'extractvalue' 'tmp_last_V' <Predicate = (ecpri_mux_state_load == 2)> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.65ns)   --->   "br i1 %tmp_last_V, label %3, label %._crit_edge264" [ecpri_MUX/ecpri_mux.cpp:96]   --->   Operation 24 'br' <Predicate = (ecpri_mux_state_load == 2)> <Delay = 0.65>
ST_1 : Operation 25 [1/1] (0.80ns)   --->   "%add_ln700 = add i12 %t_V, 1" [ecpri_MUX/ecpri_mux.cpp:98]   --->   Operation 25 'add' 'add_ln700' <Predicate = (ecpri_mux_state_load == 2 & tmp_last_V)> <Delay = 0.80> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 26 [1/1] (0.97ns)   --->   "%icmp_ln879 = icmp eq i12 %add_ln700, %numSection_V_load" [ecpri_MUX/ecpri_mux.cpp:99]   --->   Operation 26 'icmp' 'icmp_ln879' <Predicate = (ecpri_mux_state_load == 2 & tmp_last_V)> <Delay = 0.97> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.58> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 27 [1/1] (0.65ns)   --->   "br i1 %icmp_ln879, label %4, label %._crit_edge264" [ecpri_MUX/ecpri_mux.cpp:99]   --->   Operation 27 'br' <Predicate = (ecpri_mux_state_load == 2 & tmp_last_V)> <Delay = 0.65>
ST_1 : Operation 28 [1/1] (0.67ns)   --->   "%add_ln700_1 = add i3 %t_V_1, 1" [ecpri_MUX/ecpri_mux.cpp:100]   --->   Operation 28 'add' 'add_ln700_1' <Predicate = (ecpri_mux_state_load == 2 & tmp_last_V & icmp_ln879)> <Delay = 0.67> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 29 [1/1] (0.65ns)   --->   "store i3 %add_ln700_1, i3* @layer_count_V, align 1" [ecpri_MUX/ecpri_mux.cpp:100]   --->   Operation 29 'store' <Predicate = (ecpri_mux_state_load == 2 & tmp_last_V & icmp_ln879)> <Delay = 0.65>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%trunc_ln209_1 = call i12 @_ssdm_op_PartSelect.i12.i96.i32.i32(i96 %mux_cnfg_V_load, i32 12, i32 23)" [ecpri_MUX/ecpri_mux.cpp:103]   --->   Operation 30 'partselect' 'trunc_ln209_1' <Predicate = (ecpri_mux_state_load == 2 & tmp_last_V & icmp_ln879)> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.65ns)   --->   "store i12 %trunc_ln209_1, i12* @numSection_V, align 2" [ecpri_MUX/ecpri_mux.cpp:103]   --->   Operation 31 'store' <Predicate = (ecpri_mux_state_load == 2 & tmp_last_V & icmp_ln879)> <Delay = 0.65>
ST_1 : Operation 32 [1/1] (0.58ns)   --->   "%icmp_ln879_1 = icmp eq i3 %t_V_1, 0" [ecpri_MUX/ecpri_mux.cpp:104]   --->   Operation 32 'icmp' 'icmp_ln879_1' <Predicate = (ecpri_mux_state_load == 2 & tmp_last_V & icmp_ln879)> <Delay = 0.58> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.58> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 33 [1/1] (0.17ns)   --->   "%select_ln104 = select i1 %icmp_ln879_1, i2 -1, i2 -2" [ecpri_MUX/ecpri_mux.cpp:104]   --->   Operation 33 'select' 'select_ln104' <Predicate = (ecpri_mux_state_load == 2 & tmp_last_V & icmp_ln879)> <Delay = 0.17> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 34 [1/1] (0.65ns)   --->   "br label %._crit_edge264" [ecpri_MUX/ecpri_mux.cpp:110]   --->   Operation 34 'br' <Predicate = (ecpri_mux_state_load == 2 & tmp_last_V & icmp_ln879)> <Delay = 0.65>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%section_count_V_flag = phi i1 [ true, %4 ], [ true, %3 ], [ false, %2 ]"   --->   Operation 35 'phi' 'section_count_V_flag' <Predicate = (ecpri_mux_state_load == 2)> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%section_count_V_new_s = phi i12 [ 0, %4 ], [ %add_ln700, %3 ], [ undef, %2 ]" [ecpri_MUX/ecpri_mux.cpp:98]   --->   Operation 36 'phi' 'section_count_V_new_s' <Predicate = (ecpri_mux_state_load == 2)> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%storemerge255 = phi i2 [ %select_ln104, %4 ], [ -2, %3 ], [ -2, %2 ]" [ecpri_MUX/ecpri_mux.cpp:104]   --->   Operation 37 'phi' 'storemerge255' <Predicate = (ecpri_mux_state_load == 2)> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.71ns)   --->   "store i2 %storemerge255, i2* @ecpri_mux_state, align 1" [ecpri_MUX/ecpri_mux.cpp:116]   --->   Operation 38 'store' <Predicate = (ecpri_mux_state_load == 2)> <Delay = 0.71>
ST_1 : Operation 39 [1/1] (0.67ns)   --->   "br label %._crit_edge263" [ecpri_MUX/ecpri_mux.cpp:121]   --->   Operation 39 'br' <Predicate = (ecpri_mux_state_load == 2)> <Delay = 0.67>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%tmp_V = call i96 @_ssdm_op_Read.axis.volatile.i96P(i96* %mux_config_in_V_V)" [ecpri_MUX/ecpri_mux.cpp:86]   --->   Operation 40 'read' 'tmp_V' <Predicate = (ecpri_mux_state_load == 1)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "store i96 %tmp_V, i96* @mux_cnfg_V, align 8" [ecpri_MUX/ecpri_mux.cpp:86]   --->   Operation 41 'store' <Predicate = (ecpri_mux_state_load == 1)> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (0.65ns)   --->   "store i3 0, i3* @layer_count_V, align 1" [ecpri_MUX/ecpri_mux.cpp:87]   --->   Operation 42 'store' <Predicate = (ecpri_mux_state_load == 1)> <Delay = 0.65>
ST_1 : Operation 43 [1/1] (0.00ns)   --->   "%trunc_ln209 = trunc i96 %tmp_V to i12" [ecpri_MUX/ecpri_mux.cpp:89]   --->   Operation 43 'trunc' 'trunc_ln209' <Predicate = (ecpri_mux_state_load == 1)> <Delay = 0.00>
ST_1 : Operation 44 [1/1] (0.65ns)   --->   "store i12 %trunc_ln209, i12* @numSection_V, align 2" [ecpri_MUX/ecpri_mux.cpp:89]   --->   Operation 44 'store' <Predicate = (ecpri_mux_state_load == 1)> <Delay = 0.65>
ST_1 : Operation 45 [1/1] (0.71ns)   --->   "store i2 -2, i2* @ecpri_mux_state, align 1" [ecpri_MUX/ecpri_mux.cpp:90]   --->   Operation 45 'store' <Predicate = (ecpri_mux_state_load == 1)> <Delay = 0.71>
ST_1 : Operation 46 [1/1] (0.65ns)   --->   "store i8 0, i8* @tlast_counter_V, align 1" [ecpri_MUX/ecpri_mux.cpp:91]   --->   Operation 46 'store' <Predicate = (ecpri_mux_state_load == 1)> <Delay = 0.65>
ST_1 : Operation 47 [1/1] (0.67ns)   --->   "br label %._crit_edge263" [ecpri_MUX/ecpri_mux.cpp:92]   --->   Operation 47 'br' <Predicate = (ecpri_mux_state_load == 1)> <Delay = 0.67>
ST_1 : Operation 48 [1/1] (0.00ns)   --->   "%tmp = call i1 @_ssdm_op_NbReadReq.axis.i96P(i96* %mux_config_in_V_V, i32 1)" [ecpri_MUX/ecpri_mux.cpp:76]   --->   Operation 48 'nbreadreq' 'tmp' <Predicate = (ecpri_mux_state_load == 0)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_1 : Operation 49 [1/1] (0.00ns)   --->   "%zext_ln76 = zext i1 %tmp to i2" [ecpri_MUX/ecpri_mux.cpp:76]   --->   Operation 49 'zext' 'zext_ln76' <Predicate = (ecpri_mux_state_load == 0)> <Delay = 0.00>
ST_1 : Operation 50 [1/1] (0.71ns)   --->   "store i2 %zext_ln76, i2* @ecpri_mux_state, align 1" [ecpri_MUX/ecpri_mux.cpp:80]   --->   Operation 50 'store' <Predicate = (ecpri_mux_state_load == 0)> <Delay = 0.71>
ST_1 : Operation 51 [1/1] (0.67ns)   --->   "br label %._crit_edge263" [ecpri_MUX/ecpri_mux.cpp:83]   --->   Operation 51 'br' <Predicate = (ecpri_mux_state_load == 0)> <Delay = 0.67>
ST_1 : Operation 52 [1/1] (0.00ns)   --->   "%section_count_V_flag_1 = phi i1 [ false, %codeRepl ], [ false, %11 ], [ %section_count_V_flag, %._crit_edge264 ], [ true, %1 ], [ false, %0 ]"   --->   Operation 52 'phi' 'section_count_V_flag_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 53 [1/1] (0.00ns)   --->   "%section_count_V_new_1 = phi i12 [ undef, %codeRepl ], [ undef, %11 ], [ %section_count_V_new_s, %._crit_edge264 ], [ 0, %1 ], [ undef, %0 ]" [ecpri_MUX/ecpri_mux.cpp:98]   --->   Operation 53 'phi' 'section_count_V_new_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 54 [1/1] (0.00ns)   --->   "br i1 %section_count_V_flag_1, label %mergeST, label %._crit_edge263.new"   --->   Operation 54 'br' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 55 [1/1] (0.00ns)   --->   "store i12 %section_count_V_new_1, i12* @section_count_V, align 2" [ecpri_MUX/ecpri_mux.cpp:88]   --->   Operation 55 'store' <Predicate = (section_count_V_flag_1)> <Delay = 0.00>

State 2 <SV = 1> <Delay = 0.00>
ST_2 : Operation 56 [1/1] (0.00ns)   --->   "br i1 %tmp_last_V_1, label %7, label %8" [ecpri_MUX/ecpri_mux.cpp:130]   --->   Operation 56 'br' <Predicate = (ecpri_mux_state_load == 3 & icmp_ln887)> <Delay = 0.00>
ST_2 : Operation 57 [2/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i128P.i1P.i16P.i1P(i128* %mux_data_out_V_data_V, i1* %mux_data_out_V_user_V, i16* %mux_data_out_V_keep_V, i1* %mux_data_out_V_last_V, i128 %tmp_data_V_1, i1 false, i16 -1, i1 %tmp_last_V_1)" [ecpri_MUX/ecpri_mux.cpp:139]   --->   Operation 57 'write' <Predicate = (ecpri_mux_state_load == 3 & icmp_ln887)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_2 : Operation 58 [2/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i128P.i1P.i16P.i1P(i128* %mux_data_out_V_data_V, i1* %mux_data_out_V_user_V, i16* %mux_data_out_V_keep_V, i1* %mux_data_out_V_last_V, i128 %tmp_data_V, i1 false, i16 -1, i1 %tmp_last_V)" [ecpri_MUX/ecpri_mux.cpp:120]   --->   Operation 58 'write' <Predicate = (ecpri_mux_state_load == 2)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >

State 3 <SV = 2> <Delay = 0.00>
ST_3 : Operation 59 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i128* %control_data_in_V_data_V), !map !76"   --->   Operation 59 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 60 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %control_data_in_V_user_V), !map !82"   --->   Operation 60 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 61 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i16* %control_data_in_V_keep_V), !map !86"   --->   Operation 61 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 62 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %control_data_in_V_last_V), !map !90"   --->   Operation 62 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 63 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i128* %user_data_in_V_data_V), !map !94"   --->   Operation 63 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 64 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %user_data_in_V_user_V), !map !98"   --->   Operation 64 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 65 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i16* %user_data_in_V_keep_V), !map !102"   --->   Operation 65 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 66 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %user_data_in_V_last_V), !map !106"   --->   Operation 66 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 67 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i128* %mux_data_out_V_data_V), !map !110"   --->   Operation 67 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 68 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %mux_data_out_V_user_V), !map !114"   --->   Operation 68 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 69 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i16* %mux_data_out_V_keep_V), !map !118"   --->   Operation 69 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 70 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %mux_data_out_V_last_V), !map !122"   --->   Operation 70 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 71 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i96* %mux_config_in_V_V), !map !126"   --->   Operation 71 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 72 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i2* %ecpri_mux_state_out_V), !map !130"   --->   Operation 72 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 73 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i12* %num_section_out_V), !map !134"   --->   Operation 73 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 74 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i12* %section_count_out_V), !map !138"   --->   Operation 74 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 75 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i3* %layer_count_out_V), !map !142"   --->   Operation 75 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 76 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([10 x i8]* @ecpri_mux_str) nounwind"   --->   Operation 76 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 77 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 2, i32 1, i32 0, [1 x i8]* @p_str) nounwind" [ecpri_MUX/ecpri_mux.cpp:27]   --->   Operation 77 'specpipeline' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 78 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 0, [13 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [ecpri_MUX/ecpri_mux.cpp:29]   --->   Operation 78 'specinterface' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 79 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i128* %mux_data_out_V_data_V, i1* %mux_data_out_V_user_V, i16* %mux_data_out_V_keep_V, i1* %mux_data_out_V_last_V, [5 x i8]* @p_str3, i32 1, i32 1, [5 x i8]* @p_str4, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [ecpri_MUX/ecpri_mux.cpp:30]   --->   Operation 79 'specinterface' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 80 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i2* %ecpri_mux_state_out_V, [8 x i8]* @p_str5, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [ecpri_MUX/ecpri_mux.cpp:31]   --->   Operation 80 'specinterface' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 81 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i12* %num_section_out_V, [8 x i8]* @p_str5, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [ecpri_MUX/ecpri_mux.cpp:33]   --->   Operation 81 'specinterface' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 82 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i12* %section_count_out_V, [8 x i8]* @p_str5, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [ecpri_MUX/ecpri_mux.cpp:34]   --->   Operation 82 'specinterface' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 83 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i3* %layer_count_out_V, [8 x i8]* @p_str5, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [ecpri_MUX/ecpri_mux.cpp:35]   --->   Operation 83 'specinterface' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 84 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i128* %user_data_in_V_data_V, i1* %user_data_in_V_user_V, i16* %user_data_in_V_keep_V, i1* %user_data_in_V_last_V, [5 x i8]* @p_str3, i32 1, i32 1, [5 x i8]* @p_str4, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [ecpri_MUX/ecpri_mux.cpp:37]   --->   Operation 84 'specinterface' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 85 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i128* %control_data_in_V_data_V, i1* %control_data_in_V_user_V, i16* %control_data_in_V_keep_V, i1* %control_data_in_V_last_V, [5 x i8]* @p_str3, i32 1, i32 1, [5 x i8]* @p_str4, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [ecpri_MUX/ecpri_mux.cpp:38]   --->   Operation 85 'specinterface' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 86 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i96* %mux_config_in_V_V, [5 x i8]* @p_str3, i32 1, i32 1, [5 x i8]* @p_str4, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [ecpri_MUX/ecpri_mux.cpp:39]   --->   Operation 86 'specinterface' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 87 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_none.i12P(i12* %num_section_out_V, i12 %numSection_V_load)" [ecpri_MUX/ecpri_mux.cpp:62]   --->   Operation 87 'write' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 88 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_none.i12P(i12* %section_count_out_V, i12 %t_V)" [ecpri_MUX/ecpri_mux.cpp:63]   --->   Operation 88 'write' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 89 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_none.i3P(i3* %layer_count_out_V, i3 %t_V_1)" [ecpri_MUX/ecpri_mux.cpp:64]   --->   Operation 89 'write' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 90 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_none.i2P(i2* %ecpri_mux_state_out_V, i2 %ecpri_mux_state_load)" [ecpri_MUX/ecpri_mux.cpp:71]   --->   Operation 90 'write' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 91 [1/1] (0.00ns)   --->   "br label %11"   --->   Operation 91 'br' <Predicate = (ecpri_mux_state_load == 3 & !icmp_ln887)> <Delay = 0.00>
ST_3 : Operation 92 [1/1] (0.00ns)   --->   "br label %9"   --->   Operation 92 'br' <Predicate = (ecpri_mux_state_load == 3 & icmp_ln887 & !tmp_last_V_1)> <Delay = 0.00>
ST_3 : Operation 93 [1/1] (0.00ns)   --->   "br label %9" [ecpri_MUX/ecpri_mux.cpp:133]   --->   Operation 93 'br' <Predicate = (ecpri_mux_state_load == 3 & icmp_ln887 & tmp_last_V_1)> <Delay = 0.00>
ST_3 : Operation 94 [1/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i128P.i1P.i16P.i1P(i128* %mux_data_out_V_data_V, i1* %mux_data_out_V_user_V, i16* %mux_data_out_V_keep_V, i1* %mux_data_out_V_last_V, i128 %tmp_data_V_1, i1 false, i16 -1, i1 %tmp_last_V_1)" [ecpri_MUX/ecpri_mux.cpp:139]   --->   Operation 94 'write' <Predicate = (ecpri_mux_state_load == 3 & icmp_ln887)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_3 : Operation 95 [1/1] (0.00ns)   --->   "br label %11" [ecpri_MUX/ecpri_mux.cpp:140]   --->   Operation 95 'br' <Predicate = (ecpri_mux_state_load == 3 & icmp_ln887)> <Delay = 0.00>
ST_3 : Operation 96 [1/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i128P.i1P.i16P.i1P(i128* %mux_data_out_V_data_V, i1* %mux_data_out_V_user_V, i16* %mux_data_out_V_keep_V, i1* %mux_data_out_V_last_V, i128 %tmp_data_V, i1 false, i16 -1, i1 %tmp_last_V)" [ecpri_MUX/ecpri_mux.cpp:120]   --->   Operation 96 'write' <Predicate = (ecpri_mux_state_load == 2)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_3 : Operation 97 [1/1] (0.00ns)   --->   "br label %._crit_edge263.new"   --->   Operation 97 'br' <Predicate = (section_count_V_flag_1)> <Delay = 0.00>
ST_3 : Operation 98 [1/1] (0.00ns)   --->   "ret void" [ecpri_MUX/ecpri_mux.cpp:147]   --->   Operation 98 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 3.2ns, clock uncertainty: 0.4ns.

 <State 1>: 3.15ns
The critical path consists of the following:
	'load' operation ('t.V', ecpri_MUX/ecpri_mux.cpp:63) on static variable 'section_count_V' [54]  (0 ns)
	'add' operation ('add_ln700', ecpri_MUX/ecpri_mux.cpp:98) [92]  (0.809 ns)
	'icmp' operation ('icmp_ln879', ecpri_MUX/ecpri_mux.cpp:99) [93]  (0.976 ns)
	multiplexor before 'phi' operation ('storemerge255', ecpri_MUX/ecpri_mux.cpp:104) with incoming values : ('select_ln104', ecpri_MUX/ecpri_mux.cpp:104) [106]  (0.656 ns)
	'phi' operation ('storemerge255', ecpri_MUX/ecpri_mux.cpp:104) with incoming values : ('select_ln104', ecpri_MUX/ecpri_mux.cpp:104) [106]  (0 ns)
	'store' operation ('store_ln116', ecpri_MUX/ecpri_mux.cpp:116) of variable 'storemerge255', ecpri_MUX/ecpri_mux.cpp:104 on static variable 'ecpri_mux_state' [107]  (0.712 ns)

 <State 2>: 0ns
The critical path consists of the following:

 <State 3>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
