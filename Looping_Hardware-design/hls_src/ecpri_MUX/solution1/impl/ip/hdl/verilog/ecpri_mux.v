// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ecpri_mux,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=3.200000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.152750,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1260,HLS_SYN_LUT=586,HLS_VERSION=2019_1}" *)

module ecpri_mux (
        ap_clk,
        ap_rst_n,
        control_data_in_TDATA,
        control_data_in_TVALID,
        control_data_in_TREADY,
        control_data_in_TUSER,
        control_data_in_TKEEP,
        control_data_in_TLAST,
        user_data_in_TDATA,
        user_data_in_TVALID,
        user_data_in_TREADY,
        user_data_in_TUSER,
        user_data_in_TKEEP,
        user_data_in_TLAST,
        mux_data_out_TDATA,
        mux_data_out_TVALID,
        mux_data_out_TREADY,
        mux_data_out_TUSER,
        mux_data_out_TKEEP,
        mux_data_out_TLAST,
        mux_config_in_V_V_TDATA,
        mux_config_in_V_V_TVALID,
        mux_config_in_V_V_TREADY,
        ecpri_mux_state_out_V,
        num_section_out_V,
        section_count_out_V,
        layer_count_out_V
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst_n;
input  [127:0] control_data_in_TDATA;
input   control_data_in_TVALID;
output   control_data_in_TREADY;
input  [0:0] control_data_in_TUSER;
input  [15:0] control_data_in_TKEEP;
input  [0:0] control_data_in_TLAST;
input  [127:0] user_data_in_TDATA;
input   user_data_in_TVALID;
output   user_data_in_TREADY;
input  [0:0] user_data_in_TUSER;
input  [15:0] user_data_in_TKEEP;
input  [0:0] user_data_in_TLAST;
output  [127:0] mux_data_out_TDATA;
output   mux_data_out_TVALID;
input   mux_data_out_TREADY;
output  [0:0] mux_data_out_TUSER;
output  [15:0] mux_data_out_TKEEP;
output  [0:0] mux_data_out_TLAST;
input  [95:0] mux_config_in_V_V_TDATA;
input   mux_config_in_V_V_TVALID;
output   mux_config_in_V_V_TREADY;
output  [1:0] ecpri_mux_state_out_V;
output  [11:0] num_section_out_V;
output  [11:0] section_count_out_V;
output  [2:0] layer_count_out_V;

reg mux_config_in_V_V_TREADY;

 reg    ap_rst_n_inv;
reg   [127:0] control_data_in_V_data_V_0_data_out;
wire    control_data_in_V_data_V_0_vld_in;
wire    control_data_in_V_data_V_0_vld_out;
wire    control_data_in_V_data_V_0_ack_in;
reg    control_data_in_V_data_V_0_ack_out;
reg   [127:0] control_data_in_V_data_V_0_payload_A;
reg   [127:0] control_data_in_V_data_V_0_payload_B;
reg    control_data_in_V_data_V_0_sel_rd;
reg    control_data_in_V_data_V_0_sel_wr;
wire    control_data_in_V_data_V_0_sel;
wire    control_data_in_V_data_V_0_load_A;
wire    control_data_in_V_data_V_0_load_B;
reg   [1:0] control_data_in_V_data_V_0_state;
wire    control_data_in_V_data_V_0_state_cmp_full;
reg   [0:0] control_data_in_V_last_V_0_data_out;
wire    control_data_in_V_last_V_0_vld_in;
wire    control_data_in_V_last_V_0_vld_out;
wire    control_data_in_V_last_V_0_ack_in;
reg    control_data_in_V_last_V_0_ack_out;
reg   [0:0] control_data_in_V_last_V_0_payload_A;
reg   [0:0] control_data_in_V_last_V_0_payload_B;
reg    control_data_in_V_last_V_0_sel_rd;
reg    control_data_in_V_last_V_0_sel_wr;
wire    control_data_in_V_last_V_0_sel;
wire    control_data_in_V_last_V_0_load_A;
wire    control_data_in_V_last_V_0_load_B;
reg   [1:0] control_data_in_V_last_V_0_state;
wire    control_data_in_V_last_V_0_state_cmp_full;
reg   [127:0] user_data_in_V_data_V_0_data_out;
wire    user_data_in_V_data_V_0_vld_in;
wire    user_data_in_V_data_V_0_vld_out;
wire    user_data_in_V_data_V_0_ack_in;
reg    user_data_in_V_data_V_0_ack_out;
reg   [127:0] user_data_in_V_data_V_0_payload_A;
reg   [127:0] user_data_in_V_data_V_0_payload_B;
reg    user_data_in_V_data_V_0_sel_rd;
reg    user_data_in_V_data_V_0_sel_wr;
wire    user_data_in_V_data_V_0_sel;
wire    user_data_in_V_data_V_0_load_A;
wire    user_data_in_V_data_V_0_load_B;
reg   [1:0] user_data_in_V_data_V_0_state;
wire    user_data_in_V_data_V_0_state_cmp_full;
reg   [0:0] user_data_in_V_last_V_0_data_out;
wire    user_data_in_V_last_V_0_vld_in;
wire    user_data_in_V_last_V_0_vld_out;
wire    user_data_in_V_last_V_0_ack_in;
reg    user_data_in_V_last_V_0_ack_out;
reg   [0:0] user_data_in_V_last_V_0_payload_A;
reg   [0:0] user_data_in_V_last_V_0_payload_B;
reg    user_data_in_V_last_V_0_sel_rd;
reg    user_data_in_V_last_V_0_sel_wr;
wire    user_data_in_V_last_V_0_sel;
wire    user_data_in_V_last_V_0_load_A;
wire    user_data_in_V_last_V_0_load_B;
reg   [1:0] user_data_in_V_last_V_0_state;
wire    user_data_in_V_last_V_0_state_cmp_full;
reg   [127:0] mux_data_out_V_data_V_1_data_in;
reg   [127:0] mux_data_out_V_data_V_1_data_out;
reg    mux_data_out_V_data_V_1_vld_in;
wire    mux_data_out_V_data_V_1_vld_out;
wire    mux_data_out_V_data_V_1_ack_in;
wire    mux_data_out_V_data_V_1_ack_out;
reg   [127:0] mux_data_out_V_data_V_1_payload_A;
reg   [127:0] mux_data_out_V_data_V_1_payload_B;
reg    mux_data_out_V_data_V_1_sel_rd;
reg    mux_data_out_V_data_V_1_sel_wr;
wire    mux_data_out_V_data_V_1_sel;
wire    mux_data_out_V_data_V_1_load_A;
wire    mux_data_out_V_data_V_1_load_B;
reg   [1:0] mux_data_out_V_data_V_1_state;
wire    mux_data_out_V_data_V_1_state_cmp_full;
wire   [0:0] mux_data_out_V_user_V_1_data_out;
reg    mux_data_out_V_user_V_1_vld_in;
wire    mux_data_out_V_user_V_1_vld_out;
wire    mux_data_out_V_user_V_1_ack_out;
reg    mux_data_out_V_user_V_1_sel_rd;
wire    mux_data_out_V_user_V_1_sel;
reg   [1:0] mux_data_out_V_user_V_1_state;
wire   [15:0] mux_data_out_V_keep_V_1_data_out;
reg    mux_data_out_V_keep_V_1_vld_in;
wire    mux_data_out_V_keep_V_1_vld_out;
wire    mux_data_out_V_keep_V_1_ack_out;
reg    mux_data_out_V_keep_V_1_sel_rd;
wire    mux_data_out_V_keep_V_1_sel;
reg   [1:0] mux_data_out_V_keep_V_1_state;
reg   [0:0] mux_data_out_V_last_V_1_data_in;
reg   [0:0] mux_data_out_V_last_V_1_data_out;
reg    mux_data_out_V_last_V_1_vld_in;
wire    mux_data_out_V_last_V_1_vld_out;
wire    mux_data_out_V_last_V_1_ack_in;
wire    mux_data_out_V_last_V_1_ack_out;
reg   [0:0] mux_data_out_V_last_V_1_payload_A;
reg   [0:0] mux_data_out_V_last_V_1_payload_B;
reg    mux_data_out_V_last_V_1_sel_rd;
reg    mux_data_out_V_last_V_1_sel_wr;
wire    mux_data_out_V_last_V_1_sel;
wire    mux_data_out_V_last_V_1_load_A;
wire    mux_data_out_V_last_V_1_load_B;
reg   [1:0] mux_data_out_V_last_V_1_state;
wire    mux_data_out_V_last_V_1_state_cmp_full;
reg   [11:0] numSection_V;
reg   [11:0] section_count_V;
reg   [2:0] layer_count_V;
reg   [1:0] ecpri_mux_state;
reg   [95:0] mux_cnfg_V;
reg   [7:0] tlast_counter_V;
reg    control_data_in_TDATA_blk_n;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state2;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state3;
wire   [1:0] ecpri_mux_state_load_load_fu_299_p1;
reg    user_data_in_TDATA_blk_n;
wire   [0:0] icmp_ln887_fu_311_p2;
reg    mux_data_out_TDATA_blk_n;
reg   [1:0] ecpri_mux_state_load_reg_484;
reg   [1:0] ecpri_mux_state_load_reg_484_pp0_iter1_reg;
reg   [0:0] icmp_ln887_reg_489;
reg   [0:0] icmp_ln887_reg_489_pp0_iter1_reg;
reg    mux_config_in_V_V_TDATA_blk_n;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_predicate_op57_write_state2;
reg    ap_block_state2_io;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_predicate_op94_write_state3;
reg    ap_block_state3_io;
reg   [11:0] numSection_V_load_reg_469;
reg    ap_predicate_op14_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [11:0] numSection_V_load_reg_469_pp0_iter1_reg;
reg   [11:0] t_V_reg_474;
reg   [11:0] t_V_reg_474_pp0_iter1_reg;
reg   [2:0] t_V_1_reg_479;
reg   [2:0] t_V_1_reg_479_pp0_iter1_reg;
reg   [127:0] tmp_data_V_1_reg_493;
wire   [0:0] tmp_last_V_1_fu_327_p1;
reg   [0:0] tmp_last_V_1_reg_498;
reg   [127:0] tmp_data_V_reg_503;
wire   [0:0] tmp_last_V_fu_353_p1;
reg   [0:0] tmp_last_V_reg_508;
reg   [0:0] ap_phi_mux_section_count_V_flag_phi_fu_209_p6;
wire   [0:0] ap_phi_reg_pp0_iter0_section_count_V_flag_reg_206;
wire   [0:0] icmp_ln879_fu_364_p2;
reg   [11:0] ap_phi_mux_section_count_V_new_s_phi_fu_223_p6;
wire   [11:0] ap_phi_reg_pp0_iter0_section_count_V_new_s_reg_220;
wire   [11:0] add_ln700_fu_357_p2;
reg   [1:0] ap_phi_mux_storemerge255_phi_fu_236_p6;
wire   [1:0] select_ln104_fu_404_p3;
wire   [1:0] ap_phi_reg_pp0_iter0_storemerge255_reg_233;
reg   [0:0] ap_phi_mux_section_count_V_flag_1_phi_fu_249_p10;
wire   [0:0] ap_phi_reg_pp0_iter0_section_count_V_flag_1_reg_246;
reg   [11:0] ap_phi_mux_section_count_V_new_1_phi_fu_270_p10;
wire   [11:0] ap_phi_reg_pp0_iter0_section_count_V_new_1_reg_267;
wire   [11:0] trunc_ln209_fu_431_p1;
wire   [2:0] add_ln700_1_fu_370_p2;
wire   [1:0] zext_ln76_fu_453_p1;
wire   [7:0] add_ln700_2_fu_337_p2;
wire   [0:0] tmp_nbreadreq_fu_152_p3;
wire   [0:0] icmp_ln879_1_fu_398_p2;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_condition_1065;
reg    ap_condition_941;
reg    ap_condition_852;
reg    ap_condition_897;
reg    ap_condition_969;
reg    ap_condition_950;

// power-on initialization
initial begin
#0 control_data_in_V_data_V_0_sel_rd = 1'b0;
#0 control_data_in_V_data_V_0_sel_wr = 1'b0;
#0 control_data_in_V_data_V_0_state = 2'd0;
#0 control_data_in_V_last_V_0_sel_rd = 1'b0;
#0 control_data_in_V_last_V_0_sel_wr = 1'b0;
#0 control_data_in_V_last_V_0_state = 2'd0;
#0 user_data_in_V_data_V_0_sel_rd = 1'b0;
#0 user_data_in_V_data_V_0_sel_wr = 1'b0;
#0 user_data_in_V_data_V_0_state = 2'd0;
#0 user_data_in_V_last_V_0_sel_rd = 1'b0;
#0 user_data_in_V_last_V_0_sel_wr = 1'b0;
#0 user_data_in_V_last_V_0_state = 2'd0;
#0 mux_data_out_V_data_V_1_sel_rd = 1'b0;
#0 mux_data_out_V_data_V_1_sel_wr = 1'b0;
#0 mux_data_out_V_data_V_1_state = 2'd0;
#0 mux_data_out_V_user_V_1_sel_rd = 1'b0;
#0 mux_data_out_V_user_V_1_state = 2'd0;
#0 mux_data_out_V_keep_V_1_sel_rd = 1'b0;
#0 mux_data_out_V_keep_V_1_state = 2'd0;
#0 mux_data_out_V_last_V_1_sel_rd = 1'b0;
#0 mux_data_out_V_last_V_1_sel_wr = 1'b0;
#0 mux_data_out_V_last_V_1_state = 2'd0;
#0 numSection_V = 12'd0;
#0 section_count_V = 12'd0;
#0 layer_count_V = 3'd0;
#0 ecpri_mux_state = 2'd1;
#0 mux_cnfg_V = 96'd0;
#0 tlast_counter_V = 8'd0;
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ap_CS_iter2_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        control_data_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((control_data_in_V_data_V_0_ack_out == 1'b1) & (control_data_in_V_data_V_0_vld_out == 1'b1))) begin
            control_data_in_V_data_V_0_sel_rd <= ~control_data_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        control_data_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((control_data_in_V_data_V_0_ack_in == 1'b1) & (control_data_in_V_data_V_0_vld_in == 1'b1))) begin
            control_data_in_V_data_V_0_sel_wr <= ~control_data_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        control_data_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((control_data_in_V_data_V_0_vld_in == 1'b0) & (control_data_in_V_data_V_0_state == 2'd2)) | ((control_data_in_V_data_V_0_vld_in == 1'b0) & (control_data_in_V_data_V_0_ack_out == 1'b1) & (control_data_in_V_data_V_0_state == 2'd3)))) begin
            control_data_in_V_data_V_0_state <= 2'd2;
        end else if ((((control_data_in_V_data_V_0_ack_out == 1'b0) & (control_data_in_V_data_V_0_state == 2'd1)) | ((control_data_in_V_data_V_0_ack_out == 1'b0) & (control_data_in_V_data_V_0_vld_in == 1'b1) & (control_data_in_V_data_V_0_state == 2'd3)))) begin
            control_data_in_V_data_V_0_state <= 2'd1;
        end else if (((~((control_data_in_V_data_V_0_vld_in == 1'b0) & (control_data_in_V_data_V_0_ack_out == 1'b1)) & ~((control_data_in_V_data_V_0_ack_out == 1'b0) & (control_data_in_V_data_V_0_vld_in == 1'b1)) & (control_data_in_V_data_V_0_state == 2'd3)) | ((control_data_in_V_data_V_0_ack_out == 1'b1) & (control_data_in_V_data_V_0_state == 2'd1)) | ((control_data_in_V_data_V_0_vld_in == 1'b1) & (control_data_in_V_data_V_0_state == 2'd2)))) begin
            control_data_in_V_data_V_0_state <= 2'd3;
        end else begin
            control_data_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        control_data_in_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((control_data_in_V_last_V_0_ack_out == 1'b1) & (control_data_in_V_last_V_0_vld_out == 1'b1))) begin
            control_data_in_V_last_V_0_sel_rd <= ~control_data_in_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        control_data_in_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((control_data_in_V_last_V_0_ack_in == 1'b1) & (control_data_in_V_last_V_0_vld_in == 1'b1))) begin
            control_data_in_V_last_V_0_sel_wr <= ~control_data_in_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        control_data_in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((control_data_in_V_last_V_0_vld_in == 1'b0) & (control_data_in_V_last_V_0_state == 2'd2)) | ((control_data_in_V_last_V_0_vld_in == 1'b0) & (control_data_in_V_last_V_0_state == 2'd3) & (control_data_in_V_last_V_0_ack_out == 1'b1)))) begin
            control_data_in_V_last_V_0_state <= 2'd2;
        end else if ((((control_data_in_V_last_V_0_ack_out == 1'b0) & (control_data_in_V_last_V_0_state == 2'd1)) | ((control_data_in_V_last_V_0_ack_out == 1'b0) & (control_data_in_V_last_V_0_state == 2'd3) & (control_data_in_V_last_V_0_vld_in == 1'b1)))) begin
            control_data_in_V_last_V_0_state <= 2'd1;
        end else if (((~((control_data_in_V_last_V_0_vld_in == 1'b0) & (control_data_in_V_last_V_0_ack_out == 1'b1)) & ~((control_data_in_V_last_V_0_ack_out == 1'b0) & (control_data_in_V_last_V_0_vld_in == 1'b1)) & (control_data_in_V_last_V_0_state == 2'd3)) | ((control_data_in_V_last_V_0_state == 2'd1) & (control_data_in_V_last_V_0_ack_out == 1'b1)) | ((control_data_in_V_last_V_0_state == 2'd2) & (control_data_in_V_last_V_0_vld_in == 1'b1)))) begin
            control_data_in_V_last_V_0_state <= 2'd3;
        end else begin
            control_data_in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mux_data_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((mux_data_out_V_data_V_1_ack_out == 1'b1) & (mux_data_out_V_data_V_1_vld_out == 1'b1))) begin
            mux_data_out_V_data_V_1_sel_rd <= ~mux_data_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mux_data_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((mux_data_out_V_data_V_1_ack_in == 1'b1) & (mux_data_out_V_data_V_1_vld_in == 1'b1))) begin
            mux_data_out_V_data_V_1_sel_wr <= ~mux_data_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mux_data_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((mux_data_out_V_data_V_1_vld_in == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd2)) | ((mux_data_out_V_data_V_1_vld_in == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3) & (mux_data_out_V_data_V_1_ack_out == 1'b1)))) begin
            mux_data_out_V_data_V_1_state <= 2'd2;
        end else if ((((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd1)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3) & (mux_data_out_V_data_V_1_vld_in == 1'b1)))) begin
            mux_data_out_V_data_V_1_state <= 2'd1;
        end else if (((~((mux_data_out_V_data_V_1_vld_in == 1'b0) & (mux_data_out_V_data_V_1_ack_out == 1'b1)) & ~((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_vld_in == 1'b1)) & (mux_data_out_V_data_V_1_state == 2'd3)) | ((mux_data_out_V_data_V_1_state == 2'd1) & (mux_data_out_V_data_V_1_ack_out == 1'b1)) | ((mux_data_out_V_data_V_1_state == 2'd2) & (mux_data_out_V_data_V_1_vld_in == 1'b1)))) begin
            mux_data_out_V_data_V_1_state <= 2'd3;
        end else begin
            mux_data_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mux_data_out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((mux_data_out_V_keep_V_1_ack_out == 1'b1) & (mux_data_out_V_keep_V_1_vld_out == 1'b1))) begin
            mux_data_out_V_keep_V_1_sel_rd <= ~mux_data_out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mux_data_out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((mux_data_out_V_keep_V_1_vld_in == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd2)) | ((mux_data_out_V_keep_V_1_vld_in == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3) & (mux_data_out_V_keep_V_1_ack_out == 1'b1)))) begin
            mux_data_out_V_keep_V_1_state <= 2'd2;
        end else if ((((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd1)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3) & (mux_data_out_V_keep_V_1_vld_in == 1'b1)))) begin
            mux_data_out_V_keep_V_1_state <= 2'd1;
        end else if (((~((mux_data_out_V_keep_V_1_vld_in == 1'b0) & (mux_data_out_V_keep_V_1_ack_out == 1'b1)) & ~((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_vld_in == 1'b1)) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_V_keep_V_1_state == 2'd1) & (mux_data_out_V_keep_V_1_ack_out == 1'b1)) | ((mux_data_out_V_keep_V_1_state == 2'd2) & (mux_data_out_V_keep_V_1_vld_in == 1'b1)))) begin
            mux_data_out_V_keep_V_1_state <= 2'd3;
        end else begin
            mux_data_out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mux_data_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((mux_data_out_V_last_V_1_ack_out == 1'b1) & (mux_data_out_V_last_V_1_vld_out == 1'b1))) begin
            mux_data_out_V_last_V_1_sel_rd <= ~mux_data_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mux_data_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((mux_data_out_V_last_V_1_ack_in == 1'b1) & (mux_data_out_V_last_V_1_vld_in == 1'b1))) begin
            mux_data_out_V_last_V_1_sel_wr <= ~mux_data_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mux_data_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((mux_data_out_V_last_V_1_vld_in == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd2)) | ((mux_data_out_V_last_V_1_vld_in == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3) & (mux_data_out_V_last_V_1_ack_out == 1'b1)))) begin
            mux_data_out_V_last_V_1_state <= 2'd2;
        end else if ((((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd1)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3) & (mux_data_out_V_last_V_1_vld_in == 1'b1)))) begin
            mux_data_out_V_last_V_1_state <= 2'd1;
        end else if (((~((mux_data_out_V_last_V_1_vld_in == 1'b0) & (mux_data_out_V_last_V_1_ack_out == 1'b1)) & ~((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_vld_in == 1'b1)) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_V_last_V_1_state == 2'd1) & (mux_data_out_V_last_V_1_ack_out == 1'b1)) | ((mux_data_out_V_last_V_1_state == 2'd2) & (mux_data_out_V_last_V_1_vld_in == 1'b1)))) begin
            mux_data_out_V_last_V_1_state <= 2'd3;
        end else begin
            mux_data_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mux_data_out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((mux_data_out_V_user_V_1_ack_out == 1'b1) & (mux_data_out_V_user_V_1_vld_out == 1'b1))) begin
            mux_data_out_V_user_V_1_sel_rd <= ~mux_data_out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mux_data_out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((mux_data_out_V_user_V_1_vld_in == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd2)) | ((mux_data_out_V_user_V_1_vld_in == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3) & (mux_data_out_V_user_V_1_ack_out == 1'b1)))) begin
            mux_data_out_V_user_V_1_state <= 2'd2;
        end else if ((((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd1)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3) & (mux_data_out_V_user_V_1_vld_in == 1'b1)))) begin
            mux_data_out_V_user_V_1_state <= 2'd1;
        end else if (((~((mux_data_out_V_user_V_1_vld_in == 1'b0) & (mux_data_out_V_user_V_1_ack_out == 1'b1)) & ~((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_vld_in == 1'b1)) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_V_user_V_1_state == 2'd1) & (mux_data_out_V_user_V_1_ack_out == 1'b1)) | ((mux_data_out_V_user_V_1_state == 2'd2) & (mux_data_out_V_user_V_1_vld_in == 1'b1)))) begin
            mux_data_out_V_user_V_1_state <= 2'd3;
        end else begin
            mux_data_out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        user_data_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((user_data_in_V_data_V_0_ack_out == 1'b1) & (user_data_in_V_data_V_0_vld_out == 1'b1))) begin
            user_data_in_V_data_V_0_sel_rd <= ~user_data_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        user_data_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((user_data_in_V_data_V_0_ack_in == 1'b1) & (user_data_in_V_data_V_0_vld_in == 1'b1))) begin
            user_data_in_V_data_V_0_sel_wr <= ~user_data_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        user_data_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((user_data_in_V_data_V_0_vld_in == 1'b0) & (user_data_in_V_data_V_0_state == 2'd2)) | ((user_data_in_V_data_V_0_vld_in == 1'b0) & (user_data_in_V_data_V_0_state == 2'd3) & (user_data_in_V_data_V_0_ack_out == 1'b1)))) begin
            user_data_in_V_data_V_0_state <= 2'd2;
        end else if ((((user_data_in_V_data_V_0_ack_out == 1'b0) & (user_data_in_V_data_V_0_state == 2'd1)) | ((user_data_in_V_data_V_0_ack_out == 1'b0) & (user_data_in_V_data_V_0_state == 2'd3) & (user_data_in_V_data_V_0_vld_in == 1'b1)))) begin
            user_data_in_V_data_V_0_state <= 2'd1;
        end else if (((~((user_data_in_V_data_V_0_vld_in == 1'b0) & (user_data_in_V_data_V_0_ack_out == 1'b1)) & ~((user_data_in_V_data_V_0_ack_out == 1'b0) & (user_data_in_V_data_V_0_vld_in == 1'b1)) & (user_data_in_V_data_V_0_state == 2'd3)) | ((user_data_in_V_data_V_0_state == 2'd1) & (user_data_in_V_data_V_0_ack_out == 1'b1)) | ((user_data_in_V_data_V_0_state == 2'd2) & (user_data_in_V_data_V_0_vld_in == 1'b1)))) begin
            user_data_in_V_data_V_0_state <= 2'd3;
        end else begin
            user_data_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        user_data_in_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((user_data_in_V_last_V_0_ack_out == 1'b1) & (user_data_in_V_last_V_0_vld_out == 1'b1))) begin
            user_data_in_V_last_V_0_sel_rd <= ~user_data_in_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        user_data_in_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((user_data_in_V_last_V_0_ack_in == 1'b1) & (user_data_in_V_last_V_0_vld_in == 1'b1))) begin
            user_data_in_V_last_V_0_sel_wr <= ~user_data_in_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        user_data_in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((user_data_in_V_last_V_0_vld_in == 1'b0) & (user_data_in_V_last_V_0_state == 2'd2)) | ((user_data_in_V_last_V_0_vld_in == 1'b0) & (user_data_in_V_last_V_0_state == 2'd3) & (user_data_in_V_last_V_0_ack_out == 1'b1)))) begin
            user_data_in_V_last_V_0_state <= 2'd2;
        end else if ((((user_data_in_V_last_V_0_ack_out == 1'b0) & (user_data_in_V_last_V_0_state == 2'd1)) | ((user_data_in_V_last_V_0_ack_out == 1'b0) & (user_data_in_V_last_V_0_state == 2'd3) & (user_data_in_V_last_V_0_vld_in == 1'b1)))) begin
            user_data_in_V_last_V_0_state <= 2'd1;
        end else if (((~((user_data_in_V_last_V_0_vld_in == 1'b0) & (user_data_in_V_last_V_0_ack_out == 1'b1)) & ~((user_data_in_V_last_V_0_ack_out == 1'b0) & (user_data_in_V_last_V_0_vld_in == 1'b1)) & (user_data_in_V_last_V_0_state == 2'd3)) | ((user_data_in_V_last_V_0_state == 2'd1) & (user_data_in_V_last_V_0_ack_out == 1'b1)) | ((user_data_in_V_last_V_0_state == 2'd2) & (user_data_in_V_last_V_0_vld_in == 1'b1)))) begin
            user_data_in_V_last_V_0_state <= 2'd3;
        end else begin
            user_data_in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_852)) begin
        if ((ecpri_mux_state_load_load_fu_299_p1 == 2'd0)) begin
            ecpri_mux_state <= zext_ln76_fu_453_p1;
        end else if ((ecpri_mux_state == 2'd1)) begin
            ecpri_mux_state <= 2'd2;
        end else if ((ecpri_mux_state == 2'd2)) begin
            ecpri_mux_state <= ap_phi_mux_storemerge255_phi_fu_236_p6;
        end else if ((1'b1 == ap_condition_941)) begin
            ecpri_mux_state <= 2'd3;
        end else if (((ecpri_mux_state == 2'd3) & (icmp_ln887_fu_311_p2 == 1'd0))) begin
            ecpri_mux_state <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_852)) begin
        if ((ecpri_mux_state == 2'd1)) begin
            layer_count_V <= 3'd0;
        end else if ((1'b1 == ap_condition_897)) begin
            layer_count_V <= add_ln700_1_fu_370_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_852)) begin
        if ((ecpri_mux_state == 2'd1)) begin
            numSection_V <= trunc_ln209_fu_431_p1;
        end else if ((1'b1 == ap_condition_897)) begin
            numSection_V <= {{mux_cnfg_V[23:12]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_852)) begin
        if ((ecpri_mux_state == 2'd1)) begin
            tlast_counter_V <= 8'd0;
        end else if ((1'b1 == ap_condition_950)) begin
            tlast_counter_V <= add_ln700_2_fu_337_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((control_data_in_V_data_V_0_load_A == 1'b1)) begin
        control_data_in_V_data_V_0_payload_A <= control_data_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((control_data_in_V_data_V_0_load_B == 1'b1)) begin
        control_data_in_V_data_V_0_payload_B <= control_data_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((control_data_in_V_last_V_0_load_A == 1'b1)) begin
        control_data_in_V_last_V_0_payload_A <= control_data_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((control_data_in_V_last_V_0_load_B == 1'b1)) begin
        control_data_in_V_last_V_0_payload_B <= control_data_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((user_data_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op14_read_state1 == 1'b1)) | ((mux_config_in_V_V_TVALID == 1'b0) & (ecpri_mux_state == 2'd1)) | ((control_data_in_V_data_V_0_vld_out == 1'b0) & (ecpri_mux_state == 2'd2)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ecpri_mux_state_load_reg_484 <= ecpri_mux_state;
        numSection_V_load_reg_469 <= numSection_V;
        t_V_1_reg_479 <= layer_count_V;
        t_V_reg_474 <= section_count_V;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ecpri_mux_state_load_reg_484_pp0_iter1_reg <= ecpri_mux_state_load_reg_484;
        icmp_ln887_reg_489_pp0_iter1_reg <= icmp_ln887_reg_489;
        numSection_V_load_reg_469_pp0_iter1_reg <= numSection_V_load_reg_469;
        t_V_1_reg_479_pp0_iter1_reg <= t_V_1_reg_479;
        t_V_reg_474_pp0_iter1_reg <= t_V_reg_474;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((user_data_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op14_read_state1 == 1'b1)) | ((mux_config_in_V_V_TVALID == 1'b0) & (ecpri_mux_state == 2'd1)) | ((control_data_in_V_data_V_0_vld_out == 1'b0) & (ecpri_mux_state == 2'd2)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (ecpri_mux_state == 2'd3) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        icmp_ln887_reg_489 <= icmp_ln887_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((user_data_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op14_read_state1 == 1'b1)) | ((mux_config_in_V_V_TVALID == 1'b0) & (ecpri_mux_state == 2'd1)) | ((control_data_in_V_data_V_0_vld_out == 1'b0) & (ecpri_mux_state == 2'd2)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (ecpri_mux_state == 2'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        mux_cnfg_V <= mux_config_in_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((mux_data_out_V_data_V_1_load_A == 1'b1)) begin
        mux_data_out_V_data_V_1_payload_A <= mux_data_out_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((mux_data_out_V_data_V_1_load_B == 1'b1)) begin
        mux_data_out_V_data_V_1_payload_B <= mux_data_out_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((mux_data_out_V_last_V_1_load_A == 1'b1)) begin
        mux_data_out_V_last_V_1_payload_A <= mux_data_out_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((mux_data_out_V_last_V_1_load_B == 1'b1)) begin
        mux_data_out_V_last_V_1_payload_B <= mux_data_out_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((user_data_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op14_read_state1 == 1'b1)) | ((mux_config_in_V_V_TVALID == 1'b0) & (ecpri_mux_state == 2'd1)) | ((control_data_in_V_data_V_0_vld_out == 1'b0) & (ecpri_mux_state == 2'd2)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_phi_mux_section_count_V_flag_1_phi_fu_249_p10 == 1'd1))) begin
        section_count_V <= ap_phi_mux_section_count_V_new_1_phi_fu_270_p10;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((user_data_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op14_read_state1 == 1'b1)) | ((mux_config_in_V_V_TVALID == 1'b0) & (ecpri_mux_state == 2'd1)) | ((control_data_in_V_data_V_0_vld_out == 1'b0) & (ecpri_mux_state == 2'd2)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (ecpri_mux_state == 2'd3) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln887_fu_311_p2 == 1'd1))) begin
        tmp_data_V_1_reg_493 <= user_data_in_V_data_V_0_data_out;
        tmp_last_V_1_reg_498 <= user_data_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((user_data_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op14_read_state1 == 1'b1)) | ((mux_config_in_V_V_TVALID == 1'b0) & (ecpri_mux_state == 2'd1)) | ((control_data_in_V_data_V_0_vld_out == 1'b0) & (ecpri_mux_state == 2'd2)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (ecpri_mux_state == 2'd2) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        tmp_data_V_reg_503 <= control_data_in_V_data_V_0_data_out;
        tmp_last_V_reg_508 <= control_data_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((user_data_in_V_data_V_0_load_A == 1'b1)) begin
        user_data_in_V_data_V_0_payload_A <= user_data_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((user_data_in_V_data_V_0_load_B == 1'b1)) begin
        user_data_in_V_data_V_0_payload_B <= user_data_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((user_data_in_V_last_V_0_load_A == 1'b1)) begin
        user_data_in_V_last_V_0_payload_A <= user_data_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((user_data_in_V_last_V_0_load_B == 1'b1)) begin
        user_data_in_V_last_V_0_payload_B <= user_data_in_TLAST;
    end
end

always @ (*) begin
    if (((ecpri_mux_state == 2'd2) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_phi_mux_section_count_V_flag_1_phi_fu_249_p10 = ap_phi_mux_section_count_V_flag_phi_fu_209_p6;
    end else if (((ecpri_mux_state == 2'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_phi_mux_section_count_V_flag_1_phi_fu_249_p10 = 1'd1;
    end else if ((((ecpri_mux_state_load_load_fu_299_p1 == 2'd0) & (1'b1 == ap_CS_iter0_fsm_state1)) | ((ecpri_mux_state == 2'd3) & (1'b1 == ap_CS_iter0_fsm_state1)))) begin
        ap_phi_mux_section_count_V_flag_1_phi_fu_249_p10 = 1'd0;
    end else begin
        ap_phi_mux_section_count_V_flag_1_phi_fu_249_p10 = ap_phi_reg_pp0_iter0_section_count_V_flag_1_reg_246;
    end
end

always @ (*) begin
    if (((ecpri_mux_state == 2'd2) & (1'b1 == ap_CS_iter0_fsm_state1) & (tmp_last_V_fu_353_p1 == 1'd0))) begin
        ap_phi_mux_section_count_V_flag_phi_fu_209_p6 = 1'd0;
    end else if ((((ecpri_mux_state == 2'd2) & (1'b1 == ap_CS_iter0_fsm_state1) & (tmp_last_V_fu_353_p1 == 1'd1) & (icmp_ln879_fu_364_p2 == 1'd0)) | ((ecpri_mux_state == 2'd2) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln879_fu_364_p2 == 1'd1) & (tmp_last_V_fu_353_p1 == 1'd1)))) begin
        ap_phi_mux_section_count_V_flag_phi_fu_209_p6 = 1'd1;
    end else begin
        ap_phi_mux_section_count_V_flag_phi_fu_209_p6 = ap_phi_reg_pp0_iter0_section_count_V_flag_reg_206;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter0_fsm_state1)) begin
        if ((ecpri_mux_state == 2'd2)) begin
            ap_phi_mux_section_count_V_new_1_phi_fu_270_p10 = ap_phi_mux_section_count_V_new_s_phi_fu_223_p6;
        end else if ((ecpri_mux_state == 2'd1)) begin
            ap_phi_mux_section_count_V_new_1_phi_fu_270_p10 = 12'd0;
        end else begin
            ap_phi_mux_section_count_V_new_1_phi_fu_270_p10 = ap_phi_reg_pp0_iter0_section_count_V_new_1_reg_267;
        end
    end else begin
        ap_phi_mux_section_count_V_new_1_phi_fu_270_p10 = ap_phi_reg_pp0_iter0_section_count_V_new_1_reg_267;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1065)) begin
        if ((icmp_ln879_fu_364_p2 == 1'd0)) begin
            ap_phi_mux_section_count_V_new_s_phi_fu_223_p6 = add_ln700_fu_357_p2;
        end else if ((icmp_ln879_fu_364_p2 == 1'd1)) begin
            ap_phi_mux_section_count_V_new_s_phi_fu_223_p6 = 12'd0;
        end else begin
            ap_phi_mux_section_count_V_new_s_phi_fu_223_p6 = ap_phi_reg_pp0_iter0_section_count_V_new_s_reg_220;
        end
    end else begin
        ap_phi_mux_section_count_V_new_s_phi_fu_223_p6 = ap_phi_reg_pp0_iter0_section_count_V_new_s_reg_220;
    end
end

always @ (*) begin
    if ((((ecpri_mux_state == 2'd2) & (1'b1 == ap_CS_iter0_fsm_state1) & (tmp_last_V_fu_353_p1 == 1'd0)) | ((ecpri_mux_state == 2'd2) & (1'b1 == ap_CS_iter0_fsm_state1) & (tmp_last_V_fu_353_p1 == 1'd1) & (icmp_ln879_fu_364_p2 == 1'd0)))) begin
        ap_phi_mux_storemerge255_phi_fu_236_p6 = 2'd2;
    end else if (((ecpri_mux_state == 2'd2) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln879_fu_364_p2 == 1'd1) & (tmp_last_V_fu_353_p1 == 1'd1))) begin
        ap_phi_mux_storemerge255_phi_fu_236_p6 = select_ln104_fu_404_p3;
    end else begin
        ap_phi_mux_storemerge255_phi_fu_236_p6 = ap_phi_reg_pp0_iter0_storemerge255_reg_233;
    end
end

always @ (*) begin
    if (((ecpri_mux_state == 2'd2) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        control_data_in_TDATA_blk_n = control_data_in_V_data_V_0_state[1'd0];
    end else begin
        control_data_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((user_data_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op14_read_state1 == 1'b1)) | ((mux_config_in_V_V_TVALID == 1'b0) & (ecpri_mux_state == 2'd1)) | ((control_data_in_V_data_V_0_vld_out == 1'b0) & (ecpri_mux_state == 2'd2)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (ecpri_mux_state == 2'd2) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        control_data_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        control_data_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((control_data_in_V_data_V_0_sel == 1'b1)) begin
        control_data_in_V_data_V_0_data_out = control_data_in_V_data_V_0_payload_B;
    end else begin
        control_data_in_V_data_V_0_data_out = control_data_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~(((user_data_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op14_read_state1 == 1'b1)) | ((mux_config_in_V_V_TVALID == 1'b0) & (ecpri_mux_state == 2'd1)) | ((control_data_in_V_data_V_0_vld_out == 1'b0) & (ecpri_mux_state == 2'd2)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (ecpri_mux_state == 2'd2) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        control_data_in_V_last_V_0_ack_out = 1'b1;
    end else begin
        control_data_in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((control_data_in_V_last_V_0_sel == 1'b1)) begin
        control_data_in_V_last_V_0_data_out = control_data_in_V_last_V_0_payload_B;
    end else begin
        control_data_in_V_last_V_0_data_out = control_data_in_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ecpri_mux_state == 2'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        mux_config_in_V_V_TDATA_blk_n = mux_config_in_V_V_TVALID;
    end else begin
        mux_config_in_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((user_data_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op14_read_state1 == 1'b1)) | ((mux_config_in_V_V_TVALID == 1'b0) & (ecpri_mux_state == 2'd1)) | ((control_data_in_V_data_V_0_vld_out == 1'b0) & (ecpri_mux_state == 2'd2)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (ecpri_mux_state == 2'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        mux_config_in_V_V_TREADY = 1'b1;
    end else begin
        mux_config_in_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ecpri_mux_state_load_reg_484_pp0_iter1_reg == 2'd3) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln887_reg_489_pp0_iter1_reg == 1'd1)) | ((ecpri_mux_state_load_reg_484_pp0_iter1_reg == 2'd2) & (1'b1 == ap_CS_iter2_fsm_state3)) | ((ecpri_mux_state_load_reg_484 == 2'd3) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln887_reg_489 == 1'd1)) | ((ecpri_mux_state_load_reg_484 == 2'd2) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        mux_data_out_TDATA_blk_n = mux_data_out_V_data_V_1_state[1'd1];
    end else begin
        mux_data_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_969)) begin
        if ((ecpri_mux_state_load_reg_484 == 2'd2)) begin
            mux_data_out_V_data_V_1_data_in = tmp_data_V_reg_503;
        end else if ((ap_predicate_op57_write_state2 == 1'b1)) begin
            mux_data_out_V_data_V_1_data_in = tmp_data_V_1_reg_493;
        end else begin
            mux_data_out_V_data_V_1_data_in = 'bx;
        end
    end else begin
        mux_data_out_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((mux_data_out_V_data_V_1_sel == 1'b1)) begin
        mux_data_out_V_data_V_1_data_out = mux_data_out_V_data_V_1_payload_B;
    end else begin
        mux_data_out_V_data_V_1_data_out = mux_data_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_predicate_op57_write_state2 == 1'b1)) | (~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3))))) & (ecpri_mux_state_load_reg_484 == 2'd2) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        mux_data_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        mux_data_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_predicate_op57_write_state2 == 1'b1)) | (~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3))))) & (ecpri_mux_state_load_reg_484 == 2'd2) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        mux_data_out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        mux_data_out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_969)) begin
        if ((ecpri_mux_state_load_reg_484 == 2'd2)) begin
            mux_data_out_V_last_V_1_data_in = tmp_last_V_reg_508;
        end else if ((ap_predicate_op57_write_state2 == 1'b1)) begin
            mux_data_out_V_last_V_1_data_in = tmp_last_V_1_reg_498;
        end else begin
            mux_data_out_V_last_V_1_data_in = 'bx;
        end
    end else begin
        mux_data_out_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((mux_data_out_V_last_V_1_sel == 1'b1)) begin
        mux_data_out_V_last_V_1_data_out = mux_data_out_V_last_V_1_payload_B;
    end else begin
        mux_data_out_V_last_V_1_data_out = mux_data_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_predicate_op57_write_state2 == 1'b1)) | (~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3))))) & (ecpri_mux_state_load_reg_484 == 2'd2) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        mux_data_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        mux_data_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_predicate_op57_write_state2 == 1'b1)) | (~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3))))) & (ecpri_mux_state_load_reg_484 == 2'd2) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        mux_data_out_V_user_V_1_vld_in = 1'b1;
    end else begin
        mux_data_out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ecpri_mux_state == 2'd3) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln887_fu_311_p2 == 1'd1))) begin
        user_data_in_TDATA_blk_n = user_data_in_V_data_V_0_state[1'd0];
    end else begin
        user_data_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((user_data_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op14_read_state1 == 1'b1)) | ((mux_config_in_V_V_TVALID == 1'b0) & (ecpri_mux_state == 2'd1)) | ((control_data_in_V_data_V_0_vld_out == 1'b0) & (ecpri_mux_state == 2'd2)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_predicate_op14_read_state1 == 1'b1))) begin
        user_data_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        user_data_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((user_data_in_V_data_V_0_sel == 1'b1)) begin
        user_data_in_V_data_V_0_data_out = user_data_in_V_data_V_0_payload_B;
    end else begin
        user_data_in_V_data_V_0_data_out = user_data_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~(((user_data_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op14_read_state1 == 1'b1)) | ((mux_config_in_V_V_TVALID == 1'b0) & (ecpri_mux_state == 2'd1)) | ((control_data_in_V_data_V_0_vld_out == 1'b0) & (ecpri_mux_state == 2'd2)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_predicate_op14_read_state1 == 1'b1))) begin
        user_data_in_V_last_V_0_ack_out = 1'b1;
    end else begin
        user_data_in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((user_data_in_V_last_V_0_sel == 1'b1)) begin
        user_data_in_V_last_V_0_data_out = user_data_in_V_last_V_0_payload_B;
    end else begin
        user_data_in_V_last_V_0_data_out = user_data_in_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~(((user_data_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op14_read_state1 == 1'b1)) | ((mux_config_in_V_V_TVALID == 1'b0) & (ecpri_mux_state == 2'd1)) | ((control_data_in_V_data_V_0_vld_out == 1'b0) & (ecpri_mux_state == 2'd2))) & ~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3))))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (((user_data_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op14_read_state1 == 1'b1)) | ((mux_config_in_V_V_TVALID == 1'b0) & (ecpri_mux_state == 2'd1)) | ((control_data_in_V_data_V_0_vld_out == 1'b0) & (ecpri_mux_state == 2'd2))))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~(((user_data_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op14_read_state1 == 1'b1)) | ((mux_config_in_V_V_TVALID == 1'b0) & (ecpri_mux_state == 2'd1)) | ((control_data_in_V_data_V_0_vld_out == 1'b0) & (ecpri_mux_state == 2'd2)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3))) & (1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3))) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3))))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln700_1_fu_370_p2 = (layer_count_V + 3'd1);

assign add_ln700_2_fu_337_p2 = (tlast_counter_V + 8'd1);

assign add_ln700_fu_357_p2 = (section_count_V + 12'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (((user_data_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op14_read_state1 == 1'b1)) | ((mux_config_in_V_V_TVALID == 1'b0) & (ecpri_mux_state == 2'd1)) | ((control_data_in_V_data_V_0_vld_out == 1'b0) & (ecpri_mux_state == 2'd2)));
end

always @ (*) begin
    ap_block_state2_io = (((mux_data_out_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op57_write_state2 == 1'b1)) | ((mux_data_out_V_data_V_1_ack_in == 1'b0) & (ecpri_mux_state_load_reg_484 == 2'd2)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = (((mux_data_out_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op94_write_state3 == 1'b1)) | ((mux_data_out_V_data_V_1_ack_in == 1'b0) & (ecpri_mux_state_load_reg_484_pp0_iter1_reg == 2'd2)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3)));
end

always @ (*) begin
    ap_condition_1065 = ((ecpri_mux_state == 2'd2) & (1'b1 == ap_CS_iter0_fsm_state1) & (tmp_last_V_fu_353_p1 == 1'd1));
end

always @ (*) begin
    ap_condition_852 = (~(((user_data_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op14_read_state1 == 1'b1)) | ((mux_config_in_V_V_TVALID == 1'b0) & (ecpri_mux_state == 2'd1)) | ((control_data_in_V_data_V_0_vld_out == 1'b0) & (ecpri_mux_state == 2'd2)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

always @ (*) begin
    ap_condition_897 = ((ecpri_mux_state == 2'd2) & (icmp_ln879_fu_364_p2 == 1'd1) & (tmp_last_V_fu_353_p1 == 1'd1));
end

always @ (*) begin
    ap_condition_941 = ((ecpri_mux_state == 2'd3) & (icmp_ln887_fu_311_p2 == 1'd1) & (tmp_last_V_1_fu_327_p1 == 1'd0));
end

always @ (*) begin
    ap_condition_950 = ((ecpri_mux_state == 2'd3) & (tmp_last_V_1_fu_327_p1 == 1'd1) & (icmp_ln887_fu_311_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_969 = (~((1'b1 == ap_CS_iter2_fsm_state3) & ((mux_data_out_V_last_V_1_state == 2'd1) | (mux_data_out_V_keep_V_1_state == 2'd1) | (mux_data_out_V_user_V_1_state == 2'd1) | (mux_data_out_V_data_V_1_state == 2'd1) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_last_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_keep_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_user_V_1_state == 2'd3)) | ((mux_data_out_TREADY == 1'b0) & (mux_data_out_V_data_V_1_state == 2'd3)))) & (1'b1 == ap_CS_iter1_fsm_state2));
end

assign ap_phi_reg_pp0_iter0_section_count_V_flag_1_reg_246 = 'bx;

assign ap_phi_reg_pp0_iter0_section_count_V_flag_reg_206 = 'bx;

assign ap_phi_reg_pp0_iter0_section_count_V_new_1_reg_267 = 'bx;

assign ap_phi_reg_pp0_iter0_section_count_V_new_s_reg_220 = 'bx;

assign ap_phi_reg_pp0_iter0_storemerge255_reg_233 = 'bx;

always @ (*) begin
    ap_predicate_op14_read_state1 = ((ecpri_mux_state == 2'd3) & (icmp_ln887_fu_311_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op57_write_state2 = ((ecpri_mux_state_load_reg_484 == 2'd3) & (icmp_ln887_reg_489 == 1'd1));
end

always @ (*) begin
    ap_predicate_op94_write_state3 = ((ecpri_mux_state_load_reg_484_pp0_iter1_reg == 2'd3) & (icmp_ln887_reg_489_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign control_data_in_TREADY = control_data_in_V_last_V_0_state[1'd1];

assign control_data_in_V_data_V_0_ack_in = control_data_in_V_data_V_0_state[1'd1];

assign control_data_in_V_data_V_0_load_A = (~control_data_in_V_data_V_0_sel_wr & control_data_in_V_data_V_0_state_cmp_full);

assign control_data_in_V_data_V_0_load_B = (control_data_in_V_data_V_0_state_cmp_full & control_data_in_V_data_V_0_sel_wr);

assign control_data_in_V_data_V_0_sel = control_data_in_V_data_V_0_sel_rd;

assign control_data_in_V_data_V_0_state_cmp_full = ((control_data_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign control_data_in_V_data_V_0_vld_in = control_data_in_TVALID;

assign control_data_in_V_data_V_0_vld_out = control_data_in_V_data_V_0_state[1'd0];

assign control_data_in_V_last_V_0_ack_in = control_data_in_V_last_V_0_state[1'd1];

assign control_data_in_V_last_V_0_load_A = (~control_data_in_V_last_V_0_sel_wr & control_data_in_V_last_V_0_state_cmp_full);

assign control_data_in_V_last_V_0_load_B = (control_data_in_V_last_V_0_state_cmp_full & control_data_in_V_last_V_0_sel_wr);

assign control_data_in_V_last_V_0_sel = control_data_in_V_last_V_0_sel_rd;

assign control_data_in_V_last_V_0_state_cmp_full = ((control_data_in_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign control_data_in_V_last_V_0_vld_in = control_data_in_TVALID;

assign control_data_in_V_last_V_0_vld_out = control_data_in_V_last_V_0_state[1'd0];

assign ecpri_mux_state_load_load_fu_299_p1 = ecpri_mux_state;

assign ecpri_mux_state_out_V = ecpri_mux_state_load_reg_484_pp0_iter1_reg;

assign icmp_ln879_1_fu_398_p2 = ((layer_count_V == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_364_p2 = ((add_ln700_fu_357_p2 == numSection_V) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_311_p2 = ((tlast_counter_V < 8'd140) ? 1'b1 : 1'b0);

assign layer_count_out_V = t_V_1_reg_479_pp0_iter1_reg;

assign mux_data_out_TDATA = mux_data_out_V_data_V_1_data_out;

assign mux_data_out_TKEEP = mux_data_out_V_keep_V_1_data_out;

assign mux_data_out_TLAST = mux_data_out_V_last_V_1_data_out;

assign mux_data_out_TUSER = mux_data_out_V_user_V_1_data_out;

assign mux_data_out_TVALID = mux_data_out_V_last_V_1_state[1'd0];

assign mux_data_out_V_data_V_1_ack_in = mux_data_out_V_data_V_1_state[1'd1];

assign mux_data_out_V_data_V_1_ack_out = mux_data_out_TREADY;

assign mux_data_out_V_data_V_1_load_A = (mux_data_out_V_data_V_1_state_cmp_full & ~mux_data_out_V_data_V_1_sel_wr);

assign mux_data_out_V_data_V_1_load_B = (mux_data_out_V_data_V_1_state_cmp_full & mux_data_out_V_data_V_1_sel_wr);

assign mux_data_out_V_data_V_1_sel = mux_data_out_V_data_V_1_sel_rd;

assign mux_data_out_V_data_V_1_state_cmp_full = ((mux_data_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign mux_data_out_V_data_V_1_vld_out = mux_data_out_V_data_V_1_state[1'd0];

assign mux_data_out_V_keep_V_1_ack_out = mux_data_out_TREADY;

assign mux_data_out_V_keep_V_1_data_out = 16'd65535;

assign mux_data_out_V_keep_V_1_sel = mux_data_out_V_keep_V_1_sel_rd;

assign mux_data_out_V_keep_V_1_vld_out = mux_data_out_V_keep_V_1_state[1'd0];

assign mux_data_out_V_last_V_1_ack_in = mux_data_out_V_last_V_1_state[1'd1];

assign mux_data_out_V_last_V_1_ack_out = mux_data_out_TREADY;

assign mux_data_out_V_last_V_1_load_A = (mux_data_out_V_last_V_1_state_cmp_full & ~mux_data_out_V_last_V_1_sel_wr);

assign mux_data_out_V_last_V_1_load_B = (mux_data_out_V_last_V_1_state_cmp_full & mux_data_out_V_last_V_1_sel_wr);

assign mux_data_out_V_last_V_1_sel = mux_data_out_V_last_V_1_sel_rd;

assign mux_data_out_V_last_V_1_state_cmp_full = ((mux_data_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign mux_data_out_V_last_V_1_vld_out = mux_data_out_V_last_V_1_state[1'd0];

assign mux_data_out_V_user_V_1_ack_out = mux_data_out_TREADY;

assign mux_data_out_V_user_V_1_data_out = 1'd0;

assign mux_data_out_V_user_V_1_sel = mux_data_out_V_user_V_1_sel_rd;

assign mux_data_out_V_user_V_1_vld_out = mux_data_out_V_user_V_1_state[1'd0];

assign num_section_out_V = numSection_V_load_reg_469_pp0_iter1_reg;

assign section_count_out_V = t_V_reg_474_pp0_iter1_reg;

assign select_ln104_fu_404_p3 = ((icmp_ln879_1_fu_398_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign tmp_last_V_1_fu_327_p1 = user_data_in_V_last_V_0_data_out;

assign tmp_last_V_fu_353_p1 = control_data_in_V_last_V_0_data_out;

assign tmp_nbreadreq_fu_152_p3 = mux_config_in_V_V_TVALID;

assign trunc_ln209_fu_431_p1 = mux_config_in_V_V_TDATA[11:0];

assign user_data_in_TREADY = user_data_in_V_last_V_0_state[1'd1];

assign user_data_in_V_data_V_0_ack_in = user_data_in_V_data_V_0_state[1'd1];

assign user_data_in_V_data_V_0_load_A = (user_data_in_V_data_V_0_state_cmp_full & ~user_data_in_V_data_V_0_sel_wr);

assign user_data_in_V_data_V_0_load_B = (user_data_in_V_data_V_0_state_cmp_full & user_data_in_V_data_V_0_sel_wr);

assign user_data_in_V_data_V_0_sel = user_data_in_V_data_V_0_sel_rd;

assign user_data_in_V_data_V_0_state_cmp_full = ((user_data_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign user_data_in_V_data_V_0_vld_in = user_data_in_TVALID;

assign user_data_in_V_data_V_0_vld_out = user_data_in_V_data_V_0_state[1'd0];

assign user_data_in_V_last_V_0_ack_in = user_data_in_V_last_V_0_state[1'd1];

assign user_data_in_V_last_V_0_load_A = (user_data_in_V_last_V_0_state_cmp_full & ~user_data_in_V_last_V_0_sel_wr);

assign user_data_in_V_last_V_0_load_B = (user_data_in_V_last_V_0_state_cmp_full & user_data_in_V_last_V_0_sel_wr);

assign user_data_in_V_last_V_0_sel = user_data_in_V_last_V_0_sel_rd;

assign user_data_in_V_last_V_0_state_cmp_full = ((user_data_in_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign user_data_in_V_last_V_0_vld_in = user_data_in_TVALID;

assign user_data_in_V_last_V_0_vld_out = user_data_in_V_last_V_0_state[1'd0];

assign zext_ln76_fu_453_p1 = tmp_nbreadreq_fu_152_p3;

endmodule //ecpri_mux
