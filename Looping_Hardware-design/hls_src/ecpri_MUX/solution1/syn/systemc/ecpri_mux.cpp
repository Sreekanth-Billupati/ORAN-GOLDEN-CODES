// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ecpri_mux.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ecpri_mux::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ecpri_mux::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> ecpri_mux::ap_ST_iter0_fsm_state1 = "1";
const sc_lv<2> ecpri_mux::ap_ST_iter1_fsm_state2 = "10";
const sc_lv<2> ecpri_mux::ap_ST_iter2_fsm_state3 = "10";
const sc_lv<2> ecpri_mux::ap_ST_iter1_fsm_state0 = "1";
const sc_lv<2> ecpri_mux::ap_ST_iter2_fsm_state0 = "1";
const bool ecpri_mux::ap_const_boolean_1 = true;
const sc_lv<1> ecpri_mux::ap_const_lv1_0 = "0";
const sc_lv<1> ecpri_mux::ap_const_lv1_1 = "1";
const sc_lv<2> ecpri_mux::ap_const_lv2_0 = "00";
const sc_lv<2> ecpri_mux::ap_const_lv2_2 = "10";
const sc_lv<2> ecpri_mux::ap_const_lv2_3 = "11";
const sc_lv<2> ecpri_mux::ap_const_lv2_1 = "1";
const sc_lv<12> ecpri_mux::ap_const_lv12_0 = "000000000000";
const sc_lv<3> ecpri_mux::ap_const_lv3_0 = "000";
const sc_lv<8> ecpri_mux::ap_const_lv8_0 = "00000000";
const sc_lv<32> ecpri_mux::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> ecpri_mux::ap_const_lv32_1 = "1";
const sc_lv<16> ecpri_mux::ap_const_lv16_FFFF = "1111111111111111";
const sc_lv<8> ecpri_mux::ap_const_lv8_8C = "10001100";
const sc_lv<8> ecpri_mux::ap_const_lv8_1 = "1";
const sc_lv<12> ecpri_mux::ap_const_lv12_1 = "1";
const sc_lv<3> ecpri_mux::ap_const_lv3_1 = "1";
const sc_lv<32> ecpri_mux::ap_const_lv32_C = "1100";
const sc_lv<32> ecpri_mux::ap_const_lv32_17 = "10111";
const bool ecpri_mux::ap_const_boolean_0 = false;

ecpri_mux::ecpri_mux(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln700_1_fu_370_p2);
    sensitive << ( layer_count_V );

    SC_METHOD(thread_add_ln700_2_fu_337_p2);
    sensitive << ( tlast_counter_V );

    SC_METHOD(thread_add_ln700_fu_357_p2);
    sensitive << ( section_count_V );

    SC_METHOD(thread_ap_CS_iter0_fsm_state1);
    sensitive << ( ap_CS_iter0_fsm );

    SC_METHOD(thread_ap_CS_iter1_fsm_state2);
    sensitive << ( ap_CS_iter1_fsm );

    SC_METHOD(thread_ap_CS_iter2_fsm_state3);
    sensitive << ( ap_CS_iter2_fsm );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( control_data_in_V_data_V_0_vld_out );
    sensitive << ( user_data_in_V_data_V_0_vld_out );
    sensitive << ( mux_config_in_V_V_TVALID );
    sensitive << ( ecpri_mux_state );
    sensitive << ( ap_predicate_op14_read_state1 );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( mux_data_out_V_data_V_1_ack_in );
    sensitive << ( ecpri_mux_state_load_reg_484 );
    sensitive << ( ap_predicate_op57_write_state2 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( mux_data_out_V_data_V_1_ack_in );
    sensitive << ( ecpri_mux_state_load_reg_484_pp0_iter1_reg );
    sensitive << ( ap_predicate_op94_write_state3 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );

    SC_METHOD(thread_ap_condition_1065);
    sensitive << ( ecpri_mux_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( tmp_last_V_fu_353_p1 );

    SC_METHOD(thread_ap_condition_852);
    sensitive << ( control_data_in_V_data_V_0_vld_out );
    sensitive << ( user_data_in_V_data_V_0_vld_out );
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( mux_config_in_V_V_TVALID );
    sensitive << ( ecpri_mux_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_predicate_op14_read_state1 );

    SC_METHOD(thread_ap_condition_897);
    sensitive << ( ecpri_mux_state );
    sensitive << ( tmp_last_V_fu_353_p1 );
    sensitive << ( icmp_ln879_fu_364_p2 );

    SC_METHOD(thread_ap_condition_941);
    sensitive << ( ecpri_mux_state );
    sensitive << ( icmp_ln887_fu_311_p2 );
    sensitive << ( tmp_last_V_1_fu_327_p1 );

    SC_METHOD(thread_ap_condition_950);
    sensitive << ( ecpri_mux_state );
    sensitive << ( icmp_ln887_fu_311_p2 );
    sensitive << ( tmp_last_V_1_fu_327_p1 );

    SC_METHOD(thread_ap_condition_969);
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_ap_phi_mux_section_count_V_flag_1_phi_fu_249_p10);
    sensitive << ( ecpri_mux_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ecpri_mux_state_load_load_fu_299_p1 );
    sensitive << ( ap_phi_mux_section_count_V_flag_phi_fu_209_p6 );
    sensitive << ( ap_phi_reg_pp0_iter0_section_count_V_flag_1_reg_246 );

    SC_METHOD(thread_ap_phi_mux_section_count_V_flag_phi_fu_209_p6);
    sensitive << ( ecpri_mux_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( tmp_last_V_fu_353_p1 );
    sensitive << ( ap_phi_reg_pp0_iter0_section_count_V_flag_reg_206 );
    sensitive << ( icmp_ln879_fu_364_p2 );

    SC_METHOD(thread_ap_phi_mux_section_count_V_new_1_phi_fu_270_p10);
    sensitive << ( ecpri_mux_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_phi_mux_section_count_V_new_s_phi_fu_223_p6 );
    sensitive << ( ap_phi_reg_pp0_iter0_section_count_V_new_1_reg_267 );

    SC_METHOD(thread_ap_phi_mux_section_count_V_new_s_phi_fu_223_p6);
    sensitive << ( icmp_ln879_fu_364_p2 );
    sensitive << ( ap_phi_reg_pp0_iter0_section_count_V_new_s_reg_220 );
    sensitive << ( add_ln700_fu_357_p2 );
    sensitive << ( ap_condition_1065 );

    SC_METHOD(thread_ap_phi_mux_storemerge255_phi_fu_236_p6);
    sensitive << ( ecpri_mux_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( tmp_last_V_fu_353_p1 );
    sensitive << ( icmp_ln879_fu_364_p2 );
    sensitive << ( select_ln104_fu_404_p3 );
    sensitive << ( ap_phi_reg_pp0_iter0_storemerge255_reg_233 );

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_section_count_V_flag_1_reg_246);

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_section_count_V_flag_reg_206);

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_section_count_V_new_1_reg_267);

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_section_count_V_new_s_reg_220);

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_storemerge255_reg_233);

    SC_METHOD(thread_ap_predicate_op14_read_state1);
    sensitive << ( ecpri_mux_state );
    sensitive << ( icmp_ln887_fu_311_p2 );

    SC_METHOD(thread_ap_predicate_op57_write_state2);
    sensitive << ( ecpri_mux_state_load_reg_484 );
    sensitive << ( icmp_ln887_reg_489 );

    SC_METHOD(thread_ap_predicate_op94_write_state3);
    sensitive << ( ecpri_mux_state_load_reg_484_pp0_iter1_reg );
    sensitive << ( icmp_ln887_reg_489_pp0_iter1_reg );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_control_data_in_TDATA_blk_n);
    sensitive << ( control_data_in_V_data_V_0_state );
    sensitive << ( ecpri_mux_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );

    SC_METHOD(thread_control_data_in_TREADY);
    sensitive << ( control_data_in_V_last_V_0_state );

    SC_METHOD(thread_control_data_in_V_data_V_0_ack_in);
    sensitive << ( control_data_in_V_data_V_0_state );

    SC_METHOD(thread_control_data_in_V_data_V_0_ack_out);
    sensitive << ( control_data_in_V_data_V_0_vld_out );
    sensitive << ( user_data_in_V_data_V_0_vld_out );
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( mux_config_in_V_V_TVALID );
    sensitive << ( ecpri_mux_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_predicate_op14_read_state1 );

    SC_METHOD(thread_control_data_in_V_data_V_0_data_out);
    sensitive << ( control_data_in_V_data_V_0_payload_A );
    sensitive << ( control_data_in_V_data_V_0_payload_B );
    sensitive << ( control_data_in_V_data_V_0_sel );

    SC_METHOD(thread_control_data_in_V_data_V_0_load_A);
    sensitive << ( control_data_in_V_data_V_0_sel_wr );
    sensitive << ( control_data_in_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_control_data_in_V_data_V_0_load_B);
    sensitive << ( control_data_in_V_data_V_0_sel_wr );
    sensitive << ( control_data_in_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_control_data_in_V_data_V_0_sel);
    sensitive << ( control_data_in_V_data_V_0_sel_rd );

    SC_METHOD(thread_control_data_in_V_data_V_0_state_cmp_full);
    sensitive << ( control_data_in_V_data_V_0_state );

    SC_METHOD(thread_control_data_in_V_data_V_0_vld_in);
    sensitive << ( control_data_in_TVALID );

    SC_METHOD(thread_control_data_in_V_data_V_0_vld_out);
    sensitive << ( control_data_in_V_data_V_0_state );

    SC_METHOD(thread_control_data_in_V_last_V_0_ack_in);
    sensitive << ( control_data_in_V_last_V_0_state );

    SC_METHOD(thread_control_data_in_V_last_V_0_ack_out);
    sensitive << ( control_data_in_V_data_V_0_vld_out );
    sensitive << ( user_data_in_V_data_V_0_vld_out );
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( mux_config_in_V_V_TVALID );
    sensitive << ( ecpri_mux_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_predicate_op14_read_state1 );

    SC_METHOD(thread_control_data_in_V_last_V_0_data_out);
    sensitive << ( control_data_in_V_last_V_0_payload_A );
    sensitive << ( control_data_in_V_last_V_0_payload_B );
    sensitive << ( control_data_in_V_last_V_0_sel );

    SC_METHOD(thread_control_data_in_V_last_V_0_load_A);
    sensitive << ( control_data_in_V_last_V_0_sel_wr );
    sensitive << ( control_data_in_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_control_data_in_V_last_V_0_load_B);
    sensitive << ( control_data_in_V_last_V_0_sel_wr );
    sensitive << ( control_data_in_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_control_data_in_V_last_V_0_sel);
    sensitive << ( control_data_in_V_last_V_0_sel_rd );

    SC_METHOD(thread_control_data_in_V_last_V_0_state_cmp_full);
    sensitive << ( control_data_in_V_last_V_0_state );

    SC_METHOD(thread_control_data_in_V_last_V_0_vld_in);
    sensitive << ( control_data_in_TVALID );

    SC_METHOD(thread_control_data_in_V_last_V_0_vld_out);
    sensitive << ( control_data_in_V_last_V_0_state );

    SC_METHOD(thread_ecpri_mux_state_load_load_fu_299_p1);
    sensitive << ( ecpri_mux_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );

    SC_METHOD(thread_ecpri_mux_state_out_V);
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ecpri_mux_state_load_reg_484_pp0_iter1_reg );

    SC_METHOD(thread_icmp_ln879_1_fu_398_p2);
    sensitive << ( control_data_in_V_data_V_0_vld_out );
    sensitive << ( user_data_in_V_data_V_0_vld_out );
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( mux_config_in_V_V_TVALID );
    sensitive << ( layer_count_V );
    sensitive << ( ecpri_mux_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_predicate_op14_read_state1 );
    sensitive << ( tmp_last_V_fu_353_p1 );
    sensitive << ( icmp_ln879_fu_364_p2 );

    SC_METHOD(thread_icmp_ln879_fu_364_p2);
    sensitive << ( control_data_in_V_data_V_0_vld_out );
    sensitive << ( user_data_in_V_data_V_0_vld_out );
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( mux_config_in_V_V_TVALID );
    sensitive << ( numSection_V );
    sensitive << ( ecpri_mux_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_predicate_op14_read_state1 );
    sensitive << ( tmp_last_V_fu_353_p1 );
    sensitive << ( add_ln700_fu_357_p2 );

    SC_METHOD(thread_icmp_ln887_fu_311_p2);
    sensitive << ( control_data_in_V_data_V_0_vld_out );
    sensitive << ( user_data_in_V_data_V_0_vld_out );
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( mux_config_in_V_V_TVALID );
    sensitive << ( ecpri_mux_state );
    sensitive << ( tlast_counter_V );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_predicate_op14_read_state1 );

    SC_METHOD(thread_layer_count_out_V);
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( t_V_1_reg_479_pp0_iter1_reg );

    SC_METHOD(thread_mux_config_in_V_V_TDATA_blk_n);
    sensitive << ( mux_config_in_V_V_TVALID );
    sensitive << ( ecpri_mux_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );

    SC_METHOD(thread_mux_config_in_V_V_TREADY);
    sensitive << ( control_data_in_V_data_V_0_vld_out );
    sensitive << ( user_data_in_V_data_V_0_vld_out );
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( mux_config_in_V_V_TVALID );
    sensitive << ( ecpri_mux_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_predicate_op14_read_state1 );

    SC_METHOD(thread_mux_data_out_TDATA);
    sensitive << ( mux_data_out_V_data_V_1_data_out );

    SC_METHOD(thread_mux_data_out_TDATA_blk_n);
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ecpri_mux_state_load_reg_484 );
    sensitive << ( ecpri_mux_state_load_reg_484_pp0_iter1_reg );
    sensitive << ( icmp_ln887_reg_489 );
    sensitive << ( icmp_ln887_reg_489_pp0_iter1_reg );

    SC_METHOD(thread_mux_data_out_TKEEP);
    sensitive << ( mux_data_out_V_keep_V_1_data_out );

    SC_METHOD(thread_mux_data_out_TLAST);
    sensitive << ( mux_data_out_V_last_V_1_data_out );

    SC_METHOD(thread_mux_data_out_TUSER);
    sensitive << ( mux_data_out_V_user_V_1_data_out );

    SC_METHOD(thread_mux_data_out_TVALID);
    sensitive << ( mux_data_out_V_last_V_1_state );

    SC_METHOD(thread_mux_data_out_V_data_V_1_ack_in);
    sensitive << ( mux_data_out_V_data_V_1_state );

    SC_METHOD(thread_mux_data_out_V_data_V_1_ack_out);
    sensitive << ( mux_data_out_TREADY );

    SC_METHOD(thread_mux_data_out_V_data_V_1_data_in);
    sensitive << ( ecpri_mux_state_load_reg_484 );
    sensitive << ( ap_predicate_op57_write_state2 );
    sensitive << ( tmp_data_V_1_reg_493 );
    sensitive << ( tmp_data_V_reg_503 );
    sensitive << ( ap_condition_969 );

    SC_METHOD(thread_mux_data_out_V_data_V_1_data_out);
    sensitive << ( mux_data_out_V_data_V_1_payload_A );
    sensitive << ( mux_data_out_V_data_V_1_payload_B );
    sensitive << ( mux_data_out_V_data_V_1_sel );

    SC_METHOD(thread_mux_data_out_V_data_V_1_load_A);
    sensitive << ( mux_data_out_V_data_V_1_sel_wr );
    sensitive << ( mux_data_out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_mux_data_out_V_data_V_1_load_B);
    sensitive << ( mux_data_out_V_data_V_1_sel_wr );
    sensitive << ( mux_data_out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_mux_data_out_V_data_V_1_sel);
    sensitive << ( mux_data_out_V_data_V_1_sel_rd );

    SC_METHOD(thread_mux_data_out_V_data_V_1_state_cmp_full);
    sensitive << ( mux_data_out_V_data_V_1_state );

    SC_METHOD(thread_mux_data_out_V_data_V_1_vld_in);
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ecpri_mux_state_load_reg_484 );
    sensitive << ( ap_predicate_op57_write_state2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_mux_data_out_V_data_V_1_vld_out);
    sensitive << ( mux_data_out_V_data_V_1_state );

    SC_METHOD(thread_mux_data_out_V_keep_V_1_ack_out);
    sensitive << ( mux_data_out_TREADY );

    SC_METHOD(thread_mux_data_out_V_keep_V_1_data_out);
    sensitive << ( mux_data_out_V_keep_V_1_sel );

    SC_METHOD(thread_mux_data_out_V_keep_V_1_sel);
    sensitive << ( mux_data_out_V_keep_V_1_sel_rd );

    SC_METHOD(thread_mux_data_out_V_keep_V_1_vld_in);
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ecpri_mux_state_load_reg_484 );
    sensitive << ( ap_predicate_op57_write_state2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_mux_data_out_V_keep_V_1_vld_out);
    sensitive << ( mux_data_out_V_keep_V_1_state );

    SC_METHOD(thread_mux_data_out_V_last_V_1_ack_in);
    sensitive << ( mux_data_out_V_last_V_1_state );

    SC_METHOD(thread_mux_data_out_V_last_V_1_ack_out);
    sensitive << ( mux_data_out_TREADY );

    SC_METHOD(thread_mux_data_out_V_last_V_1_data_in);
    sensitive << ( ecpri_mux_state_load_reg_484 );
    sensitive << ( ap_predicate_op57_write_state2 );
    sensitive << ( tmp_last_V_1_reg_498 );
    sensitive << ( tmp_last_V_reg_508 );
    sensitive << ( ap_condition_969 );

    SC_METHOD(thread_mux_data_out_V_last_V_1_data_out);
    sensitive << ( mux_data_out_V_last_V_1_payload_A );
    sensitive << ( mux_data_out_V_last_V_1_payload_B );
    sensitive << ( mux_data_out_V_last_V_1_sel );

    SC_METHOD(thread_mux_data_out_V_last_V_1_load_A);
    sensitive << ( mux_data_out_V_last_V_1_sel_wr );
    sensitive << ( mux_data_out_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_mux_data_out_V_last_V_1_load_B);
    sensitive << ( mux_data_out_V_last_V_1_sel_wr );
    sensitive << ( mux_data_out_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_mux_data_out_V_last_V_1_sel);
    sensitive << ( mux_data_out_V_last_V_1_sel_rd );

    SC_METHOD(thread_mux_data_out_V_last_V_1_state_cmp_full);
    sensitive << ( mux_data_out_V_last_V_1_state );

    SC_METHOD(thread_mux_data_out_V_last_V_1_vld_in);
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ecpri_mux_state_load_reg_484 );
    sensitive << ( ap_predicate_op57_write_state2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_mux_data_out_V_last_V_1_vld_out);
    sensitive << ( mux_data_out_V_last_V_1_state );

    SC_METHOD(thread_mux_data_out_V_user_V_1_ack_out);
    sensitive << ( mux_data_out_TREADY );

    SC_METHOD(thread_mux_data_out_V_user_V_1_data_out);
    sensitive << ( mux_data_out_V_user_V_1_sel );

    SC_METHOD(thread_mux_data_out_V_user_V_1_sel);
    sensitive << ( mux_data_out_V_user_V_1_sel_rd );

    SC_METHOD(thread_mux_data_out_V_user_V_1_vld_in);
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ecpri_mux_state_load_reg_484 );
    sensitive << ( ap_predicate_op57_write_state2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_mux_data_out_V_user_V_1_vld_out);
    sensitive << ( mux_data_out_V_user_V_1_state );

    SC_METHOD(thread_num_section_out_V);
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( numSection_V_load_reg_469_pp0_iter1_reg );

    SC_METHOD(thread_section_count_out_V);
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( t_V_reg_474_pp0_iter1_reg );

    SC_METHOD(thread_select_ln104_fu_404_p3);
    sensitive << ( icmp_ln879_1_fu_398_p2 );

    SC_METHOD(thread_tmp_last_V_1_fu_327_p1);
    sensitive << ( user_data_in_V_last_V_0_data_out );

    SC_METHOD(thread_tmp_last_V_fu_353_p1);
    sensitive << ( control_data_in_V_last_V_0_data_out );

    SC_METHOD(thread_tmp_nbreadreq_fu_152_p3);
    sensitive << ( mux_config_in_V_V_TVALID );

    SC_METHOD(thread_trunc_ln209_fu_431_p1);
    sensitive << ( mux_config_in_V_V_TDATA );

    SC_METHOD(thread_user_data_in_TDATA_blk_n);
    sensitive << ( user_data_in_V_data_V_0_state );
    sensitive << ( ecpri_mux_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( icmp_ln887_fu_311_p2 );

    SC_METHOD(thread_user_data_in_TREADY);
    sensitive << ( user_data_in_V_last_V_0_state );

    SC_METHOD(thread_user_data_in_V_data_V_0_ack_in);
    sensitive << ( user_data_in_V_data_V_0_state );

    SC_METHOD(thread_user_data_in_V_data_V_0_ack_out);
    sensitive << ( control_data_in_V_data_V_0_vld_out );
    sensitive << ( user_data_in_V_data_V_0_vld_out );
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( mux_config_in_V_V_TVALID );
    sensitive << ( ecpri_mux_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_predicate_op14_read_state1 );

    SC_METHOD(thread_user_data_in_V_data_V_0_data_out);
    sensitive << ( user_data_in_V_data_V_0_payload_A );
    sensitive << ( user_data_in_V_data_V_0_payload_B );
    sensitive << ( user_data_in_V_data_V_0_sel );

    SC_METHOD(thread_user_data_in_V_data_V_0_load_A);
    sensitive << ( user_data_in_V_data_V_0_sel_wr );
    sensitive << ( user_data_in_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_user_data_in_V_data_V_0_load_B);
    sensitive << ( user_data_in_V_data_V_0_sel_wr );
    sensitive << ( user_data_in_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_user_data_in_V_data_V_0_sel);
    sensitive << ( user_data_in_V_data_V_0_sel_rd );

    SC_METHOD(thread_user_data_in_V_data_V_0_state_cmp_full);
    sensitive << ( user_data_in_V_data_V_0_state );

    SC_METHOD(thread_user_data_in_V_data_V_0_vld_in);
    sensitive << ( user_data_in_TVALID );

    SC_METHOD(thread_user_data_in_V_data_V_0_vld_out);
    sensitive << ( user_data_in_V_data_V_0_state );

    SC_METHOD(thread_user_data_in_V_last_V_0_ack_in);
    sensitive << ( user_data_in_V_last_V_0_state );

    SC_METHOD(thread_user_data_in_V_last_V_0_ack_out);
    sensitive << ( control_data_in_V_data_V_0_vld_out );
    sensitive << ( user_data_in_V_data_V_0_vld_out );
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( mux_config_in_V_V_TVALID );
    sensitive << ( ecpri_mux_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_predicate_op14_read_state1 );

    SC_METHOD(thread_user_data_in_V_last_V_0_data_out);
    sensitive << ( user_data_in_V_last_V_0_payload_A );
    sensitive << ( user_data_in_V_last_V_0_payload_B );
    sensitive << ( user_data_in_V_last_V_0_sel );

    SC_METHOD(thread_user_data_in_V_last_V_0_load_A);
    sensitive << ( user_data_in_V_last_V_0_sel_wr );
    sensitive << ( user_data_in_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_user_data_in_V_last_V_0_load_B);
    sensitive << ( user_data_in_V_last_V_0_sel_wr );
    sensitive << ( user_data_in_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_user_data_in_V_last_V_0_sel);
    sensitive << ( user_data_in_V_last_V_0_sel_rd );

    SC_METHOD(thread_user_data_in_V_last_V_0_state_cmp_full);
    sensitive << ( user_data_in_V_last_V_0_state );

    SC_METHOD(thread_user_data_in_V_last_V_0_vld_in);
    sensitive << ( user_data_in_TVALID );

    SC_METHOD(thread_user_data_in_V_last_V_0_vld_out);
    sensitive << ( user_data_in_V_last_V_0_state );

    SC_METHOD(thread_zext_ln76_fu_453_p1);
    sensitive << ( tmp_nbreadreq_fu_152_p3 );

    SC_METHOD(thread_ap_NS_iter0_fsm);
    sensitive << ( control_data_in_V_data_V_0_vld_out );
    sensitive << ( user_data_in_V_data_V_0_vld_out );
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( mux_config_in_V_V_TVALID );
    sensitive << ( ecpri_mux_state );
    sensitive << ( ap_CS_iter0_fsm );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_predicate_op14_read_state1 );

    SC_METHOD(thread_ap_NS_iter1_fsm);
    sensitive << ( control_data_in_V_data_V_0_vld_out );
    sensitive << ( user_data_in_V_data_V_0_vld_out );
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( mux_config_in_V_V_TVALID );
    sensitive << ( ecpri_mux_state );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_predicate_op14_read_state1 );

    SC_METHOD(thread_ap_NS_iter2_fsm);
    sensitive << ( mux_data_out_TREADY );
    sensitive << ( mux_data_out_V_data_V_1_state );
    sensitive << ( mux_data_out_V_user_V_1_state );
    sensitive << ( mux_data_out_V_keep_V_1_state );
    sensitive << ( mux_data_out_V_last_V_1_state );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    control_data_in_V_data_V_0_sel_rd = SC_LOGIC_0;
    control_data_in_V_data_V_0_sel_wr = SC_LOGIC_0;
    control_data_in_V_data_V_0_state = "00";
    control_data_in_V_last_V_0_sel_rd = SC_LOGIC_0;
    control_data_in_V_last_V_0_sel_wr = SC_LOGIC_0;
    control_data_in_V_last_V_0_state = "00";
    user_data_in_V_data_V_0_sel_rd = SC_LOGIC_0;
    user_data_in_V_data_V_0_sel_wr = SC_LOGIC_0;
    user_data_in_V_data_V_0_state = "00";
    user_data_in_V_last_V_0_sel_rd = SC_LOGIC_0;
    user_data_in_V_last_V_0_sel_wr = SC_LOGIC_0;
    user_data_in_V_last_V_0_state = "00";
    mux_data_out_V_data_V_1_sel_rd = SC_LOGIC_0;
    mux_data_out_V_data_V_1_sel_wr = SC_LOGIC_0;
    mux_data_out_V_data_V_1_state = "00";
    mux_data_out_V_user_V_1_sel_rd = SC_LOGIC_0;
    mux_data_out_V_user_V_1_state = "00";
    mux_data_out_V_keep_V_1_sel_rd = SC_LOGIC_0;
    mux_data_out_V_keep_V_1_state = "00";
    mux_data_out_V_last_V_1_sel_rd = SC_LOGIC_0;
    mux_data_out_V_last_V_1_sel_wr = SC_LOGIC_0;
    mux_data_out_V_last_V_1_state = "00";
    numSection_V = "000000000000";
    section_count_V = "000000000000";
    layer_count_V = "000";
    ecpri_mux_state = "01";
    mux_cnfg_V = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    tlast_counter_V = "00000000";
    ap_CS_iter0_fsm = "1";
    ap_CS_iter1_fsm = "01";
    ap_CS_iter2_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ecpri_mux_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, control_data_in_TDATA, "(port)control_data_in_TDATA");
    sc_trace(mVcdFile, control_data_in_TVALID, "(port)control_data_in_TVALID");
    sc_trace(mVcdFile, control_data_in_TREADY, "(port)control_data_in_TREADY");
    sc_trace(mVcdFile, control_data_in_TUSER, "(port)control_data_in_TUSER");
    sc_trace(mVcdFile, control_data_in_TKEEP, "(port)control_data_in_TKEEP");
    sc_trace(mVcdFile, control_data_in_TLAST, "(port)control_data_in_TLAST");
    sc_trace(mVcdFile, user_data_in_TDATA, "(port)user_data_in_TDATA");
    sc_trace(mVcdFile, user_data_in_TVALID, "(port)user_data_in_TVALID");
    sc_trace(mVcdFile, user_data_in_TREADY, "(port)user_data_in_TREADY");
    sc_trace(mVcdFile, user_data_in_TUSER, "(port)user_data_in_TUSER");
    sc_trace(mVcdFile, user_data_in_TKEEP, "(port)user_data_in_TKEEP");
    sc_trace(mVcdFile, user_data_in_TLAST, "(port)user_data_in_TLAST");
    sc_trace(mVcdFile, mux_data_out_TDATA, "(port)mux_data_out_TDATA");
    sc_trace(mVcdFile, mux_data_out_TVALID, "(port)mux_data_out_TVALID");
    sc_trace(mVcdFile, mux_data_out_TREADY, "(port)mux_data_out_TREADY");
    sc_trace(mVcdFile, mux_data_out_TUSER, "(port)mux_data_out_TUSER");
    sc_trace(mVcdFile, mux_data_out_TKEEP, "(port)mux_data_out_TKEEP");
    sc_trace(mVcdFile, mux_data_out_TLAST, "(port)mux_data_out_TLAST");
    sc_trace(mVcdFile, mux_config_in_V_V_TDATA, "(port)mux_config_in_V_V_TDATA");
    sc_trace(mVcdFile, mux_config_in_V_V_TVALID, "(port)mux_config_in_V_V_TVALID");
    sc_trace(mVcdFile, mux_config_in_V_V_TREADY, "(port)mux_config_in_V_V_TREADY");
    sc_trace(mVcdFile, ecpri_mux_state_out_V, "(port)ecpri_mux_state_out_V");
    sc_trace(mVcdFile, num_section_out_V, "(port)num_section_out_V");
    sc_trace(mVcdFile, section_count_out_V, "(port)section_count_out_V");
    sc_trace(mVcdFile, layer_count_out_V, "(port)layer_count_out_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, control_data_in_V_data_V_0_data_out, "control_data_in_V_data_V_0_data_out");
    sc_trace(mVcdFile, control_data_in_V_data_V_0_vld_in, "control_data_in_V_data_V_0_vld_in");
    sc_trace(mVcdFile, control_data_in_V_data_V_0_vld_out, "control_data_in_V_data_V_0_vld_out");
    sc_trace(mVcdFile, control_data_in_V_data_V_0_ack_in, "control_data_in_V_data_V_0_ack_in");
    sc_trace(mVcdFile, control_data_in_V_data_V_0_ack_out, "control_data_in_V_data_V_0_ack_out");
    sc_trace(mVcdFile, control_data_in_V_data_V_0_payload_A, "control_data_in_V_data_V_0_payload_A");
    sc_trace(mVcdFile, control_data_in_V_data_V_0_payload_B, "control_data_in_V_data_V_0_payload_B");
    sc_trace(mVcdFile, control_data_in_V_data_V_0_sel_rd, "control_data_in_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, control_data_in_V_data_V_0_sel_wr, "control_data_in_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, control_data_in_V_data_V_0_sel, "control_data_in_V_data_V_0_sel");
    sc_trace(mVcdFile, control_data_in_V_data_V_0_load_A, "control_data_in_V_data_V_0_load_A");
    sc_trace(mVcdFile, control_data_in_V_data_V_0_load_B, "control_data_in_V_data_V_0_load_B");
    sc_trace(mVcdFile, control_data_in_V_data_V_0_state, "control_data_in_V_data_V_0_state");
    sc_trace(mVcdFile, control_data_in_V_data_V_0_state_cmp_full, "control_data_in_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, control_data_in_V_last_V_0_data_out, "control_data_in_V_last_V_0_data_out");
    sc_trace(mVcdFile, control_data_in_V_last_V_0_vld_in, "control_data_in_V_last_V_0_vld_in");
    sc_trace(mVcdFile, control_data_in_V_last_V_0_vld_out, "control_data_in_V_last_V_0_vld_out");
    sc_trace(mVcdFile, control_data_in_V_last_V_0_ack_in, "control_data_in_V_last_V_0_ack_in");
    sc_trace(mVcdFile, control_data_in_V_last_V_0_ack_out, "control_data_in_V_last_V_0_ack_out");
    sc_trace(mVcdFile, control_data_in_V_last_V_0_payload_A, "control_data_in_V_last_V_0_payload_A");
    sc_trace(mVcdFile, control_data_in_V_last_V_0_payload_B, "control_data_in_V_last_V_0_payload_B");
    sc_trace(mVcdFile, control_data_in_V_last_V_0_sel_rd, "control_data_in_V_last_V_0_sel_rd");
    sc_trace(mVcdFile, control_data_in_V_last_V_0_sel_wr, "control_data_in_V_last_V_0_sel_wr");
    sc_trace(mVcdFile, control_data_in_V_last_V_0_sel, "control_data_in_V_last_V_0_sel");
    sc_trace(mVcdFile, control_data_in_V_last_V_0_load_A, "control_data_in_V_last_V_0_load_A");
    sc_trace(mVcdFile, control_data_in_V_last_V_0_load_B, "control_data_in_V_last_V_0_load_B");
    sc_trace(mVcdFile, control_data_in_V_last_V_0_state, "control_data_in_V_last_V_0_state");
    sc_trace(mVcdFile, control_data_in_V_last_V_0_state_cmp_full, "control_data_in_V_last_V_0_state_cmp_full");
    sc_trace(mVcdFile, user_data_in_V_data_V_0_data_out, "user_data_in_V_data_V_0_data_out");
    sc_trace(mVcdFile, user_data_in_V_data_V_0_vld_in, "user_data_in_V_data_V_0_vld_in");
    sc_trace(mVcdFile, user_data_in_V_data_V_0_vld_out, "user_data_in_V_data_V_0_vld_out");
    sc_trace(mVcdFile, user_data_in_V_data_V_0_ack_in, "user_data_in_V_data_V_0_ack_in");
    sc_trace(mVcdFile, user_data_in_V_data_V_0_ack_out, "user_data_in_V_data_V_0_ack_out");
    sc_trace(mVcdFile, user_data_in_V_data_V_0_payload_A, "user_data_in_V_data_V_0_payload_A");
    sc_trace(mVcdFile, user_data_in_V_data_V_0_payload_B, "user_data_in_V_data_V_0_payload_B");
    sc_trace(mVcdFile, user_data_in_V_data_V_0_sel_rd, "user_data_in_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, user_data_in_V_data_V_0_sel_wr, "user_data_in_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, user_data_in_V_data_V_0_sel, "user_data_in_V_data_V_0_sel");
    sc_trace(mVcdFile, user_data_in_V_data_V_0_load_A, "user_data_in_V_data_V_0_load_A");
    sc_trace(mVcdFile, user_data_in_V_data_V_0_load_B, "user_data_in_V_data_V_0_load_B");
    sc_trace(mVcdFile, user_data_in_V_data_V_0_state, "user_data_in_V_data_V_0_state");
    sc_trace(mVcdFile, user_data_in_V_data_V_0_state_cmp_full, "user_data_in_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, user_data_in_V_last_V_0_data_out, "user_data_in_V_last_V_0_data_out");
    sc_trace(mVcdFile, user_data_in_V_last_V_0_vld_in, "user_data_in_V_last_V_0_vld_in");
    sc_trace(mVcdFile, user_data_in_V_last_V_0_vld_out, "user_data_in_V_last_V_0_vld_out");
    sc_trace(mVcdFile, user_data_in_V_last_V_0_ack_in, "user_data_in_V_last_V_0_ack_in");
    sc_trace(mVcdFile, user_data_in_V_last_V_0_ack_out, "user_data_in_V_last_V_0_ack_out");
    sc_trace(mVcdFile, user_data_in_V_last_V_0_payload_A, "user_data_in_V_last_V_0_payload_A");
    sc_trace(mVcdFile, user_data_in_V_last_V_0_payload_B, "user_data_in_V_last_V_0_payload_B");
    sc_trace(mVcdFile, user_data_in_V_last_V_0_sel_rd, "user_data_in_V_last_V_0_sel_rd");
    sc_trace(mVcdFile, user_data_in_V_last_V_0_sel_wr, "user_data_in_V_last_V_0_sel_wr");
    sc_trace(mVcdFile, user_data_in_V_last_V_0_sel, "user_data_in_V_last_V_0_sel");
    sc_trace(mVcdFile, user_data_in_V_last_V_0_load_A, "user_data_in_V_last_V_0_load_A");
    sc_trace(mVcdFile, user_data_in_V_last_V_0_load_B, "user_data_in_V_last_V_0_load_B");
    sc_trace(mVcdFile, user_data_in_V_last_V_0_state, "user_data_in_V_last_V_0_state");
    sc_trace(mVcdFile, user_data_in_V_last_V_0_state_cmp_full, "user_data_in_V_last_V_0_state_cmp_full");
    sc_trace(mVcdFile, mux_data_out_V_data_V_1_data_in, "mux_data_out_V_data_V_1_data_in");
    sc_trace(mVcdFile, mux_data_out_V_data_V_1_data_out, "mux_data_out_V_data_V_1_data_out");
    sc_trace(mVcdFile, mux_data_out_V_data_V_1_vld_in, "mux_data_out_V_data_V_1_vld_in");
    sc_trace(mVcdFile, mux_data_out_V_data_V_1_vld_out, "mux_data_out_V_data_V_1_vld_out");
    sc_trace(mVcdFile, mux_data_out_V_data_V_1_ack_in, "mux_data_out_V_data_V_1_ack_in");
    sc_trace(mVcdFile, mux_data_out_V_data_V_1_ack_out, "mux_data_out_V_data_V_1_ack_out");
    sc_trace(mVcdFile, mux_data_out_V_data_V_1_payload_A, "mux_data_out_V_data_V_1_payload_A");
    sc_trace(mVcdFile, mux_data_out_V_data_V_1_payload_B, "mux_data_out_V_data_V_1_payload_B");
    sc_trace(mVcdFile, mux_data_out_V_data_V_1_sel_rd, "mux_data_out_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, mux_data_out_V_data_V_1_sel_wr, "mux_data_out_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, mux_data_out_V_data_V_1_sel, "mux_data_out_V_data_V_1_sel");
    sc_trace(mVcdFile, mux_data_out_V_data_V_1_load_A, "mux_data_out_V_data_V_1_load_A");
    sc_trace(mVcdFile, mux_data_out_V_data_V_1_load_B, "mux_data_out_V_data_V_1_load_B");
    sc_trace(mVcdFile, mux_data_out_V_data_V_1_state, "mux_data_out_V_data_V_1_state");
    sc_trace(mVcdFile, mux_data_out_V_data_V_1_state_cmp_full, "mux_data_out_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, mux_data_out_V_user_V_1_data_out, "mux_data_out_V_user_V_1_data_out");
    sc_trace(mVcdFile, mux_data_out_V_user_V_1_vld_in, "mux_data_out_V_user_V_1_vld_in");
    sc_trace(mVcdFile, mux_data_out_V_user_V_1_vld_out, "mux_data_out_V_user_V_1_vld_out");
    sc_trace(mVcdFile, mux_data_out_V_user_V_1_ack_out, "mux_data_out_V_user_V_1_ack_out");
    sc_trace(mVcdFile, mux_data_out_V_user_V_1_sel_rd, "mux_data_out_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, mux_data_out_V_user_V_1_sel, "mux_data_out_V_user_V_1_sel");
    sc_trace(mVcdFile, mux_data_out_V_user_V_1_state, "mux_data_out_V_user_V_1_state");
    sc_trace(mVcdFile, mux_data_out_V_keep_V_1_data_out, "mux_data_out_V_keep_V_1_data_out");
    sc_trace(mVcdFile, mux_data_out_V_keep_V_1_vld_in, "mux_data_out_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, mux_data_out_V_keep_V_1_vld_out, "mux_data_out_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, mux_data_out_V_keep_V_1_ack_out, "mux_data_out_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, mux_data_out_V_keep_V_1_sel_rd, "mux_data_out_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, mux_data_out_V_keep_V_1_sel, "mux_data_out_V_keep_V_1_sel");
    sc_trace(mVcdFile, mux_data_out_V_keep_V_1_state, "mux_data_out_V_keep_V_1_state");
    sc_trace(mVcdFile, mux_data_out_V_last_V_1_data_in, "mux_data_out_V_last_V_1_data_in");
    sc_trace(mVcdFile, mux_data_out_V_last_V_1_data_out, "mux_data_out_V_last_V_1_data_out");
    sc_trace(mVcdFile, mux_data_out_V_last_V_1_vld_in, "mux_data_out_V_last_V_1_vld_in");
    sc_trace(mVcdFile, mux_data_out_V_last_V_1_vld_out, "mux_data_out_V_last_V_1_vld_out");
    sc_trace(mVcdFile, mux_data_out_V_last_V_1_ack_in, "mux_data_out_V_last_V_1_ack_in");
    sc_trace(mVcdFile, mux_data_out_V_last_V_1_ack_out, "mux_data_out_V_last_V_1_ack_out");
    sc_trace(mVcdFile, mux_data_out_V_last_V_1_payload_A, "mux_data_out_V_last_V_1_payload_A");
    sc_trace(mVcdFile, mux_data_out_V_last_V_1_payload_B, "mux_data_out_V_last_V_1_payload_B");
    sc_trace(mVcdFile, mux_data_out_V_last_V_1_sel_rd, "mux_data_out_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, mux_data_out_V_last_V_1_sel_wr, "mux_data_out_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, mux_data_out_V_last_V_1_sel, "mux_data_out_V_last_V_1_sel");
    sc_trace(mVcdFile, mux_data_out_V_last_V_1_load_A, "mux_data_out_V_last_V_1_load_A");
    sc_trace(mVcdFile, mux_data_out_V_last_V_1_load_B, "mux_data_out_V_last_V_1_load_B");
    sc_trace(mVcdFile, mux_data_out_V_last_V_1_state, "mux_data_out_V_last_V_1_state");
    sc_trace(mVcdFile, mux_data_out_V_last_V_1_state_cmp_full, "mux_data_out_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, numSection_V, "numSection_V");
    sc_trace(mVcdFile, section_count_V, "section_count_V");
    sc_trace(mVcdFile, layer_count_V, "layer_count_V");
    sc_trace(mVcdFile, ecpri_mux_state, "ecpri_mux_state");
    sc_trace(mVcdFile, mux_cnfg_V, "mux_cnfg_V");
    sc_trace(mVcdFile, tlast_counter_V, "tlast_counter_V");
    sc_trace(mVcdFile, control_data_in_TDATA_blk_n, "control_data_in_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_iter0_fsm, "ap_CS_iter0_fsm");
    sc_trace(mVcdFile, ap_CS_iter0_fsm_state1, "ap_CS_iter0_fsm_state1");
    sc_trace(mVcdFile, ap_CS_iter1_fsm, "ap_CS_iter1_fsm");
    sc_trace(mVcdFile, ap_CS_iter1_fsm_state2, "ap_CS_iter1_fsm_state2");
    sc_trace(mVcdFile, ap_CS_iter2_fsm, "ap_CS_iter2_fsm");
    sc_trace(mVcdFile, ap_CS_iter2_fsm_state3, "ap_CS_iter2_fsm_state3");
    sc_trace(mVcdFile, ecpri_mux_state_load_load_fu_299_p1, "ecpri_mux_state_load_load_fu_299_p1");
    sc_trace(mVcdFile, user_data_in_TDATA_blk_n, "user_data_in_TDATA_blk_n");
    sc_trace(mVcdFile, icmp_ln887_fu_311_p2, "icmp_ln887_fu_311_p2");
    sc_trace(mVcdFile, mux_data_out_TDATA_blk_n, "mux_data_out_TDATA_blk_n");
    sc_trace(mVcdFile, ecpri_mux_state_load_reg_484, "ecpri_mux_state_load_reg_484");
    sc_trace(mVcdFile, ecpri_mux_state_load_reg_484_pp0_iter1_reg, "ecpri_mux_state_load_reg_484_pp0_iter1_reg");
    sc_trace(mVcdFile, icmp_ln887_reg_489, "icmp_ln887_reg_489");
    sc_trace(mVcdFile, icmp_ln887_reg_489_pp0_iter1_reg, "icmp_ln887_reg_489_pp0_iter1_reg");
    sc_trace(mVcdFile, mux_config_in_V_V_TDATA_blk_n, "mux_config_in_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_predicate_op57_write_state2, "ap_predicate_op57_write_state2");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_predicate_op94_write_state3, "ap_predicate_op94_write_state3");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, numSection_V_load_reg_469, "numSection_V_load_reg_469");
    sc_trace(mVcdFile, ap_predicate_op14_read_state1, "ap_predicate_op14_read_state1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, numSection_V_load_reg_469_pp0_iter1_reg, "numSection_V_load_reg_469_pp0_iter1_reg");
    sc_trace(mVcdFile, t_V_reg_474, "t_V_reg_474");
    sc_trace(mVcdFile, t_V_reg_474_pp0_iter1_reg, "t_V_reg_474_pp0_iter1_reg");
    sc_trace(mVcdFile, t_V_1_reg_479, "t_V_1_reg_479");
    sc_trace(mVcdFile, t_V_1_reg_479_pp0_iter1_reg, "t_V_1_reg_479_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_data_V_1_reg_493, "tmp_data_V_1_reg_493");
    sc_trace(mVcdFile, tmp_last_V_1_fu_327_p1, "tmp_last_V_1_fu_327_p1");
    sc_trace(mVcdFile, tmp_last_V_1_reg_498, "tmp_last_V_1_reg_498");
    sc_trace(mVcdFile, tmp_data_V_reg_503, "tmp_data_V_reg_503");
    sc_trace(mVcdFile, tmp_last_V_fu_353_p1, "tmp_last_V_fu_353_p1");
    sc_trace(mVcdFile, tmp_last_V_reg_508, "tmp_last_V_reg_508");
    sc_trace(mVcdFile, ap_phi_mux_section_count_V_flag_phi_fu_209_p6, "ap_phi_mux_section_count_V_flag_phi_fu_209_p6");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_section_count_V_flag_reg_206, "ap_phi_reg_pp0_iter0_section_count_V_flag_reg_206");
    sc_trace(mVcdFile, icmp_ln879_fu_364_p2, "icmp_ln879_fu_364_p2");
    sc_trace(mVcdFile, ap_phi_mux_section_count_V_new_s_phi_fu_223_p6, "ap_phi_mux_section_count_V_new_s_phi_fu_223_p6");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_section_count_V_new_s_reg_220, "ap_phi_reg_pp0_iter0_section_count_V_new_s_reg_220");
    sc_trace(mVcdFile, add_ln700_fu_357_p2, "add_ln700_fu_357_p2");
    sc_trace(mVcdFile, ap_phi_mux_storemerge255_phi_fu_236_p6, "ap_phi_mux_storemerge255_phi_fu_236_p6");
    sc_trace(mVcdFile, select_ln104_fu_404_p3, "select_ln104_fu_404_p3");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_storemerge255_reg_233, "ap_phi_reg_pp0_iter0_storemerge255_reg_233");
    sc_trace(mVcdFile, ap_phi_mux_section_count_V_flag_1_phi_fu_249_p10, "ap_phi_mux_section_count_V_flag_1_phi_fu_249_p10");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_section_count_V_flag_1_reg_246, "ap_phi_reg_pp0_iter0_section_count_V_flag_1_reg_246");
    sc_trace(mVcdFile, ap_phi_mux_section_count_V_new_1_phi_fu_270_p10, "ap_phi_mux_section_count_V_new_1_phi_fu_270_p10");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_section_count_V_new_1_reg_267, "ap_phi_reg_pp0_iter0_section_count_V_new_1_reg_267");
    sc_trace(mVcdFile, trunc_ln209_fu_431_p1, "trunc_ln209_fu_431_p1");
    sc_trace(mVcdFile, add_ln700_1_fu_370_p2, "add_ln700_1_fu_370_p2");
    sc_trace(mVcdFile, zext_ln76_fu_453_p1, "zext_ln76_fu_453_p1");
    sc_trace(mVcdFile, add_ln700_2_fu_337_p2, "add_ln700_2_fu_337_p2");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_152_p3, "tmp_nbreadreq_fu_152_p3");
    sc_trace(mVcdFile, icmp_ln879_1_fu_398_p2, "icmp_ln879_1_fu_398_p2");
    sc_trace(mVcdFile, ap_NS_iter0_fsm, "ap_NS_iter0_fsm");
    sc_trace(mVcdFile, ap_NS_iter1_fsm, "ap_NS_iter1_fsm");
    sc_trace(mVcdFile, ap_NS_iter2_fsm, "ap_NS_iter2_fsm");
    sc_trace(mVcdFile, ap_condition_1065, "ap_condition_1065");
    sc_trace(mVcdFile, ap_condition_941, "ap_condition_941");
    sc_trace(mVcdFile, ap_condition_852, "ap_condition_852");
    sc_trace(mVcdFile, ap_condition_897, "ap_condition_897");
    sc_trace(mVcdFile, ap_condition_969, "ap_condition_969");
    sc_trace(mVcdFile, ap_condition_950, "ap_condition_950");
#endif

    }
    mHdltvinHandle.open("ecpri_mux.hdltvin.dat");
    mHdltvoutHandle.open("ecpri_mux.hdltvout.dat");
}

ecpri_mux::~ecpri_mux() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void ecpri_mux::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_iter0_fsm = ap_ST_iter0_fsm_state1;
    } else {
        ap_CS_iter0_fsm = ap_NS_iter0_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_iter1_fsm = ap_ST_iter1_fsm_state0;
    } else {
        ap_CS_iter1_fsm = ap_NS_iter1_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_iter2_fsm = ap_ST_iter2_fsm_state0;
    } else {
        ap_CS_iter2_fsm = ap_NS_iter2_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        control_data_in_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_data_V_0_vld_out.read()))) {
            control_data_in_V_data_V_0_sel_rd =  (sc_logic) (~control_data_in_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        control_data_in_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_data_V_0_ack_in.read()))) {
            control_data_in_V_data_V_0_sel_wr =  (sc_logic) (~control_data_in_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        control_data_in_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(control_data_in_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(control_data_in_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            control_data_in_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(control_data_in_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(control_data_in_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            control_data_in_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(control_data_in_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(control_data_in_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(control_data_in_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_data_V_0_ack_out.read()))))) {
            control_data_in_V_data_V_0_state = ap_const_lv2_3;
        } else {
            control_data_in_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        control_data_in_V_last_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_last_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_last_V_0_vld_out.read()))) {
            control_data_in_V_last_V_0_sel_rd =  (sc_logic) (~control_data_in_V_last_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        control_data_in_V_last_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_last_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_last_V_0_ack_in.read()))) {
            control_data_in_V_last_V_0_sel_wr =  (sc_logic) (~control_data_in_V_last_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        control_data_in_V_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, control_data_in_V_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, control_data_in_V_last_V_0_state.read())))) {
            control_data_in_V_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, control_data_in_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, control_data_in_V_last_V_0_state.read())))) {
            control_data_in_V_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, control_data_in_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, control_data_in_V_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, control_data_in_V_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_last_V_0_ack_out.read()))))) {
            control_data_in_V_last_V_0_state = ap_const_lv2_3;
        } else {
            control_data_in_V_last_V_0_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_852.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,2,2>(ap_const_lv2_0, ecpri_mux_state_load_load_fu_299_p1.read())) {
            ecpri_mux_state = zext_ln76_fu_453_p1.read();
        } else if (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read())) {
            ecpri_mux_state = ap_const_lv2_2;
        } else if (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read())) {
            ecpri_mux_state = ap_phi_mux_storemerge255_phi_fu_236_p6.read();
        } else if (esl_seteq<1,1,1>(ap_condition_941.read(), ap_const_boolean_1)) {
            ecpri_mux_state = ap_const_lv2_3;
        } else if ((esl_seteq<1,2,2>(ap_const_lv2_3, ecpri_mux_state.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_fu_311_p2.read()))) {
            ecpri_mux_state = ap_const_lv2_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_852.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read())) {
            layer_count_V = ap_const_lv3_0;
        } else if (esl_seteq<1,1,1>(ap_condition_897.read(), ap_const_boolean_1)) {
            layer_count_V = add_ln700_1_fu_370_p2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mux_data_out_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_data_V_1_vld_out.read()))) {
            mux_data_out_V_data_V_1_sel_rd =  (sc_logic) (~mux_data_out_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mux_data_out_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_data_V_1_ack_in.read()))) {
            mux_data_out_V_data_V_1_sel_wr =  (sc_logic) (~mux_data_out_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mux_data_out_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, mux_data_out_V_data_V_1_state.read())))) {
            mux_data_out_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read())))) {
            mux_data_out_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, mux_data_out_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_data_V_1_ack_out.read()))))) {
            mux_data_out_V_data_V_1_state = ap_const_lv2_3;
        } else {
            mux_data_out_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mux_data_out_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_keep_V_1_vld_out.read()))) {
            mux_data_out_V_keep_V_1_sel_rd =  (sc_logic) (~mux_data_out_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mux_data_out_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, mux_data_out_V_keep_V_1_state.read())))) {
            mux_data_out_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read())))) {
            mux_data_out_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, mux_data_out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_keep_V_1_ack_out.read()))))) {
            mux_data_out_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            mux_data_out_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mux_data_out_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_last_V_1_vld_out.read()))) {
            mux_data_out_V_last_V_1_sel_rd =  (sc_logic) (~mux_data_out_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mux_data_out_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_last_V_1_ack_in.read()))) {
            mux_data_out_V_last_V_1_sel_wr =  (sc_logic) (~mux_data_out_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mux_data_out_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, mux_data_out_V_last_V_1_state.read())))) {
            mux_data_out_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read())))) {
            mux_data_out_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, mux_data_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_last_V_1_ack_out.read()))))) {
            mux_data_out_V_last_V_1_state = ap_const_lv2_3;
        } else {
            mux_data_out_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mux_data_out_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_user_V_1_vld_out.read()))) {
            mux_data_out_V_user_V_1_sel_rd =  (sc_logic) (~mux_data_out_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mux_data_out_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, mux_data_out_V_user_V_1_state.read())))) {
            mux_data_out_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read())))) {
            mux_data_out_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, mux_data_out_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_user_V_1_ack_out.read()))))) {
            mux_data_out_V_user_V_1_state = ap_const_lv2_3;
        } else {
            mux_data_out_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_852.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read())) {
            numSection_V = trunc_ln209_fu_431_p1.read();
        } else if (esl_seteq<1,1,1>(ap_condition_897.read(), ap_const_boolean_1)) {
            numSection_V = mux_cnfg_V.read().range(23, 12);
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_852.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read())) {
            tlast_counter_V = ap_const_lv8_0;
        } else if (esl_seteq<1,1,1>(ap_condition_950.read(), ap_const_boolean_1)) {
            tlast_counter_V = add_ln700_2_fu_337_p2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        user_data_in_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_data_V_0_vld_out.read()))) {
            user_data_in_V_data_V_0_sel_rd =  (sc_logic) (~user_data_in_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        user_data_in_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_data_V_0_ack_in.read()))) {
            user_data_in_V_data_V_0_sel_wr =  (sc_logic) (~user_data_in_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        user_data_in_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, user_data_in_V_data_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, user_data_in_V_data_V_0_state.read())))) {
            user_data_in_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, user_data_in_V_data_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, user_data_in_V_data_V_0_state.read())))) {
            user_data_in_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, user_data_in_V_data_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, user_data_in_V_data_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, user_data_in_V_data_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_data_V_0_ack_out.read()))))) {
            user_data_in_V_data_V_0_state = ap_const_lv2_3;
        } else {
            user_data_in_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        user_data_in_V_last_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_last_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_last_V_0_vld_out.read()))) {
            user_data_in_V_last_V_0_sel_rd =  (sc_logic) (~user_data_in_V_last_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        user_data_in_V_last_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_last_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_last_V_0_ack_in.read()))) {
            user_data_in_V_last_V_0_sel_wr =  (sc_logic) (~user_data_in_V_last_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        user_data_in_V_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, user_data_in_V_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, user_data_in_V_last_V_0_state.read())))) {
            user_data_in_V_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, user_data_in_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, user_data_in_V_last_V_0_state.read())))) {
            user_data_in_V_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, user_data_in_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, user_data_in_V_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, user_data_in_V_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_last_V_0_ack_out.read()))))) {
            user_data_in_V_last_V_0_state = ap_const_lv2_3;
        } else {
            user_data_in_V_last_V_0_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_data_V_0_load_A.read())) {
        control_data_in_V_data_V_0_payload_A = control_data_in_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_data_V_0_load_B.read())) {
        control_data_in_V_data_V_0_payload_B = control_data_in_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_last_V_0_load_A.read())) {
        control_data_in_V_last_V_0_payload_A = control_data_in_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_last_V_0_load_B.read())) {
        control_data_in_V_last_V_0_payload_B = control_data_in_TLAST.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_vld_out.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mux_config_in_V_V_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))))) {
        ecpri_mux_state_load_reg_484 = ecpri_mux_state.read();
        numSection_V_load_reg_469 = numSection_V.read();
        t_V_1_reg_479 = layer_count_V.read();
        t_V_reg_474 = section_count_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))))) {
        ecpri_mux_state_load_reg_484_pp0_iter1_reg = ecpri_mux_state_load_reg_484.read();
        icmp_ln887_reg_489_pp0_iter1_reg = icmp_ln887_reg_489.read();
        numSection_V_load_reg_469_pp0_iter1_reg = numSection_V_load_reg_469.read();
        t_V_1_reg_479_pp0_iter1_reg = t_V_1_reg_479.read();
        t_V_reg_474_pp0_iter1_reg = t_V_reg_474.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && esl_seteq<1,2,2>(ap_const_lv2_3, ecpri_mux_state.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_vld_out.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mux_config_in_V_V_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))))) {
        icmp_ln887_reg_489 = icmp_ln887_fu_311_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_vld_out.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mux_config_in_V_V_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))))) {
        mux_cnfg_V = mux_config_in_V_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_data_V_1_load_A.read())) {
        mux_data_out_V_data_V_1_payload_A = mux_data_out_V_data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_data_V_1_load_B.read())) {
        mux_data_out_V_data_V_1_payload_B = mux_data_out_V_data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_last_V_1_load_A.read())) {
        mux_data_out_V_last_V_1_payload_A = mux_data_out_V_last_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_last_V_1_load_B.read())) {
        mux_data_out_V_last_V_1_payload_B = mux_data_out_V_last_V_1_data_in.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_vld_out.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mux_config_in_V_V_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))) && esl_seteq<1,1,1>(ap_const_lv1_1, ap_phi_mux_section_count_V_flag_1_phi_fu_249_p10.read()))) {
        section_count_V = ap_phi_mux_section_count_V_new_1_phi_fu_270_p10.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && esl_seteq<1,2,2>(ap_const_lv2_3, ecpri_mux_state.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_fu_311_p2.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_vld_out.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mux_config_in_V_V_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))))) {
        tmp_data_V_1_reg_493 = user_data_in_V_data_V_0_data_out.read();
        tmp_last_V_1_reg_498 = user_data_in_V_last_V_0_data_out.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_vld_out.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mux_config_in_V_V_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))))) {
        tmp_data_V_reg_503 = control_data_in_V_data_V_0_data_out.read();
        tmp_last_V_reg_508 = control_data_in_V_last_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_data_V_0_load_A.read())) {
        user_data_in_V_data_V_0_payload_A = user_data_in_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_data_V_0_load_B.read())) {
        user_data_in_V_data_V_0_payload_B = user_data_in_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_last_V_0_load_A.read())) {
        user_data_in_V_last_V_0_payload_A = user_data_in_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_last_V_0_load_B.read())) {
        user_data_in_V_last_V_0_payload_B = user_data_in_TLAST.read();
    }
}

void ecpri_mux::thread_add_ln700_1_fu_370_p2() {
    add_ln700_1_fu_370_p2 = (!layer_count_V.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(layer_count_V.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void ecpri_mux::thread_add_ln700_2_fu_337_p2() {
    add_ln700_2_fu_337_p2 = (!tlast_counter_V.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(tlast_counter_V.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void ecpri_mux::thread_add_ln700_fu_357_p2() {
    add_ln700_fu_357_p2 = (!section_count_V.read().is_01() || !ap_const_lv12_1.is_01())? sc_lv<12>(): (sc_biguint<12>(section_count_V.read()) + sc_biguint<12>(ap_const_lv12_1));
}

void ecpri_mux::thread_ap_CS_iter0_fsm_state1() {
    ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm.read()[0];
}

void ecpri_mux::thread_ap_CS_iter1_fsm_state2() {
    ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm.read()[1];
}

void ecpri_mux::thread_ap_CS_iter2_fsm_state3() {
    ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm.read()[1];
}

void ecpri_mux::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = ((esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_vld_out.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mux_config_in_V_V_TVALID.read())));
}

void ecpri_mux::thread_ap_block_state2_io() {
    ap_block_state2_io = ((esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_V_data_V_1_ack_in.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op57_write_state2.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state_load_reg_484.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_V_data_V_1_ack_in.read())));
}

void ecpri_mux::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void ecpri_mux::thread_ap_block_state3_io() {
    ap_block_state3_io = ((esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_V_data_V_1_ack_in.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op94_write_state3.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state_load_reg_484_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_V_data_V_1_ack_in.read())));
}

void ecpri_mux::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())));
}

void ecpri_mux::thread_ap_condition_1065() {
    ap_condition_1065 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_last_V_fu_353_p1.read()));
}

void ecpri_mux::thread_ap_condition_852() {
    ap_condition_852 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_vld_out.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mux_config_in_V_V_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))));
}

void ecpri_mux::thread_ap_condition_897() {
    ap_condition_897 = (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_last_V_fu_353_p1.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_364_p2.read()));
}

void ecpri_mux::thread_ap_condition_941() {
    ap_condition_941 = (esl_seteq<1,2,2>(ap_const_lv2_3, ecpri_mux_state.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_fu_311_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_last_V_1_fu_327_p1.read()));
}

void ecpri_mux::thread_ap_condition_950() {
    ap_condition_950 = (esl_seteq<1,2,2>(ap_const_lv2_3, ecpri_mux_state.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_fu_311_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_last_V_1_fu_327_p1.read()));
}

void ecpri_mux::thread_ap_condition_969() {
    ap_condition_969 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
  esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
  esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
  esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
  (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
   esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
  (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
   esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
  (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
   esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
  (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
   esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())))));
}

void ecpri_mux::thread_ap_phi_mux_section_count_V_flag_1_phi_fu_249_p10() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()))) {
        ap_phi_mux_section_count_V_flag_1_phi_fu_249_p10 = ap_phi_mux_section_count_V_flag_phi_fu_209_p6.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
                esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read()))) {
        ap_phi_mux_section_count_V_flag_1_phi_fu_249_p10 = ap_const_lv1_1;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
                 esl_seteq<1,2,2>(ap_const_lv2_0, ecpri_mux_state_load_load_fu_299_p1.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
                 esl_seteq<1,2,2>(ap_const_lv2_3, ecpri_mux_state.read())))) {
        ap_phi_mux_section_count_V_flag_1_phi_fu_249_p10 = ap_const_lv1_0;
    } else {
        ap_phi_mux_section_count_V_flag_1_phi_fu_249_p10 = ap_phi_reg_pp0_iter0_section_count_V_flag_1_reg_246.read();
    }
}

void ecpri_mux::thread_ap_phi_mux_section_count_V_flag_phi_fu_209_p6() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_last_V_fu_353_p1.read()))) {
        ap_phi_mux_section_count_V_flag_phi_fu_209_p6 = ap_const_lv1_0;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
                 esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, tmp_last_V_fu_353_p1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_364_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
                 esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, tmp_last_V_fu_353_p1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_fu_364_p2.read())))) {
        ap_phi_mux_section_count_V_flag_phi_fu_209_p6 = ap_const_lv1_1;
    } else {
        ap_phi_mux_section_count_V_flag_phi_fu_209_p6 = ap_phi_reg_pp0_iter0_section_count_V_flag_reg_206.read();
    }
}

void ecpri_mux::thread_ap_phi_mux_section_count_V_new_1_phi_fu_270_p10() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read())) {
        if (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read())) {
            ap_phi_mux_section_count_V_new_1_phi_fu_270_p10 = ap_phi_mux_section_count_V_new_s_phi_fu_223_p6.read();
        } else if (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read())) {
            ap_phi_mux_section_count_V_new_1_phi_fu_270_p10 = ap_const_lv12_0;
        } else {
            ap_phi_mux_section_count_V_new_1_phi_fu_270_p10 = ap_phi_reg_pp0_iter0_section_count_V_new_1_reg_267.read();
        }
    } else {
        ap_phi_mux_section_count_V_new_1_phi_fu_270_p10 = ap_phi_reg_pp0_iter0_section_count_V_new_1_reg_267.read();
    }
}

void ecpri_mux::thread_ap_phi_mux_section_count_V_new_s_phi_fu_223_p6() {
    if (esl_seteq<1,1,1>(ap_condition_1065.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_fu_364_p2.read())) {
            ap_phi_mux_section_count_V_new_s_phi_fu_223_p6 = add_ln700_fu_357_p2.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_364_p2.read())) {
            ap_phi_mux_section_count_V_new_s_phi_fu_223_p6 = ap_const_lv12_0;
        } else {
            ap_phi_mux_section_count_V_new_s_phi_fu_223_p6 = ap_phi_reg_pp0_iter0_section_count_V_new_s_reg_220.read();
        }
    } else {
        ap_phi_mux_section_count_V_new_s_phi_fu_223_p6 = ap_phi_reg_pp0_iter0_section_count_V_new_s_reg_220.read();
    }
}

void ecpri_mux::thread_ap_phi_mux_storemerge255_phi_fu_236_p6() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_last_V_fu_353_p1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_fu_364_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_last_V_fu_353_p1.read())))) {
        ap_phi_mux_storemerge255_phi_fu_236_p6 = ap_const_lv2_2;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
                esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_last_V_fu_353_p1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_364_p2.read()))) {
        ap_phi_mux_storemerge255_phi_fu_236_p6 = select_ln104_fu_404_p3.read();
    } else {
        ap_phi_mux_storemerge255_phi_fu_236_p6 = ap_phi_reg_pp0_iter0_storemerge255_reg_233.read();
    }
}

void ecpri_mux::thread_ap_phi_reg_pp0_iter0_section_count_V_flag_1_reg_246() {
    ap_phi_reg_pp0_iter0_section_count_V_flag_1_reg_246 =  (sc_lv<1>) ("X");
}

void ecpri_mux::thread_ap_phi_reg_pp0_iter0_section_count_V_flag_reg_206() {
    ap_phi_reg_pp0_iter0_section_count_V_flag_reg_206 =  (sc_lv<1>) ("X");
}

void ecpri_mux::thread_ap_phi_reg_pp0_iter0_section_count_V_new_1_reg_267() {
    ap_phi_reg_pp0_iter0_section_count_V_new_1_reg_267 =  (sc_lv<12>) ("XXXXXXXXXXXX");
}

void ecpri_mux::thread_ap_phi_reg_pp0_iter0_section_count_V_new_s_reg_220() {
    ap_phi_reg_pp0_iter0_section_count_V_new_s_reg_220 =  (sc_lv<12>) ("XXXXXXXXXXXX");
}

void ecpri_mux::thread_ap_phi_reg_pp0_iter0_storemerge255_reg_233() {
    ap_phi_reg_pp0_iter0_storemerge255_reg_233 =  (sc_lv<2>) ("XX");
}

void ecpri_mux::thread_ap_predicate_op14_read_state1() {
    ap_predicate_op14_read_state1 = (esl_seteq<1,2,2>(ap_const_lv2_3, ecpri_mux_state.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_fu_311_p2.read()));
}

void ecpri_mux::thread_ap_predicate_op57_write_state2() {
    ap_predicate_op57_write_state2 = (esl_seteq<1,2,2>(ap_const_lv2_3, ecpri_mux_state_load_reg_484.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_reg_489.read()));
}

void ecpri_mux::thread_ap_predicate_op94_write_state3() {
    ap_predicate_op94_write_state3 = (esl_seteq<1,2,2>(ap_const_lv2_3, ecpri_mux_state_load_reg_484_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_reg_489_pp0_iter1_reg.read()));
}

void ecpri_mux::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void ecpri_mux::thread_control_data_in_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()))) {
        control_data_in_TDATA_blk_n = control_data_in_V_data_V_0_state.read()[0];
    } else {
        control_data_in_TDATA_blk_n = ap_const_logic_1;
    }
}

void ecpri_mux::thread_control_data_in_TREADY() {
    control_data_in_TREADY = control_data_in_V_last_V_0_state.read()[1];
}

void ecpri_mux::thread_control_data_in_V_data_V_0_ack_in() {
    control_data_in_V_data_V_0_ack_in = control_data_in_V_data_V_0_state.read()[1];
}

void ecpri_mux::thread_control_data_in_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_vld_out.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mux_config_in_V_V_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))))) {
        control_data_in_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        control_data_in_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void ecpri_mux::thread_control_data_in_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_data_V_0_sel.read())) {
        control_data_in_V_data_V_0_data_out = control_data_in_V_data_V_0_payload_B.read();
    } else {
        control_data_in_V_data_V_0_data_out = control_data_in_V_data_V_0_payload_A.read();
    }
}

void ecpri_mux::thread_control_data_in_V_data_V_0_load_A() {
    control_data_in_V_data_V_0_load_A = (control_data_in_V_data_V_0_state_cmp_full.read() & ~control_data_in_V_data_V_0_sel_wr.read());
}

void ecpri_mux::thread_control_data_in_V_data_V_0_load_B() {
    control_data_in_V_data_V_0_load_B = (control_data_in_V_data_V_0_sel_wr.read() & control_data_in_V_data_V_0_state_cmp_full.read());
}

void ecpri_mux::thread_control_data_in_V_data_V_0_sel() {
    control_data_in_V_data_V_0_sel = control_data_in_V_data_V_0_sel_rd.read();
}

void ecpri_mux::thread_control_data_in_V_data_V_0_state_cmp_full() {
    control_data_in_V_data_V_0_state_cmp_full =  (sc_logic) ((!control_data_in_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(control_data_in_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void ecpri_mux::thread_control_data_in_V_data_V_0_vld_in() {
    control_data_in_V_data_V_0_vld_in = control_data_in_TVALID.read();
}

void ecpri_mux::thread_control_data_in_V_data_V_0_vld_out() {
    control_data_in_V_data_V_0_vld_out = control_data_in_V_data_V_0_state.read()[0];
}

void ecpri_mux::thread_control_data_in_V_last_V_0_ack_in() {
    control_data_in_V_last_V_0_ack_in = control_data_in_V_last_V_0_state.read()[1];
}

void ecpri_mux::thread_control_data_in_V_last_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_vld_out.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mux_config_in_V_V_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))))) {
        control_data_in_V_last_V_0_ack_out = ap_const_logic_1;
    } else {
        control_data_in_V_last_V_0_ack_out = ap_const_logic_0;
    }
}

void ecpri_mux::thread_control_data_in_V_last_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, control_data_in_V_last_V_0_sel.read())) {
        control_data_in_V_last_V_0_data_out = control_data_in_V_last_V_0_payload_B.read();
    } else {
        control_data_in_V_last_V_0_data_out = control_data_in_V_last_V_0_payload_A.read();
    }
}

void ecpri_mux::thread_control_data_in_V_last_V_0_load_A() {
    control_data_in_V_last_V_0_load_A = (control_data_in_V_last_V_0_state_cmp_full.read() & ~control_data_in_V_last_V_0_sel_wr.read());
}

void ecpri_mux::thread_control_data_in_V_last_V_0_load_B() {
    control_data_in_V_last_V_0_load_B = (control_data_in_V_last_V_0_sel_wr.read() & control_data_in_V_last_V_0_state_cmp_full.read());
}

void ecpri_mux::thread_control_data_in_V_last_V_0_sel() {
    control_data_in_V_last_V_0_sel = control_data_in_V_last_V_0_sel_rd.read();
}

void ecpri_mux::thread_control_data_in_V_last_V_0_state_cmp_full() {
    control_data_in_V_last_V_0_state_cmp_full =  (sc_logic) ((!control_data_in_V_last_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(control_data_in_V_last_V_0_state.read() != ap_const_lv2_1))[0];
}

void ecpri_mux::thread_control_data_in_V_last_V_0_vld_in() {
    control_data_in_V_last_V_0_vld_in = control_data_in_TVALID.read();
}

void ecpri_mux::thread_control_data_in_V_last_V_0_vld_out() {
    control_data_in_V_last_V_0_vld_out = control_data_in_V_last_V_0_state.read()[0];
}

void ecpri_mux::thread_ecpri_mux_state_load_load_fu_299_p1() {
    ecpri_mux_state_load_load_fu_299_p1 = ecpri_mux_state.read();
}

void ecpri_mux::thread_ecpri_mux_state_out_V() {
    ecpri_mux_state_out_V = ecpri_mux_state_load_reg_484_pp0_iter1_reg.read();
}

void ecpri_mux::thread_icmp_ln879_1_fu_398_p2() {
    icmp_ln879_1_fu_398_p2 = (!layer_count_V.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(layer_count_V.read() == ap_const_lv3_0);
}

void ecpri_mux::thread_icmp_ln879_fu_364_p2() {
    icmp_ln879_fu_364_p2 = (!add_ln700_fu_357_p2.read().is_01() || !numSection_V.read().is_01())? sc_lv<1>(): sc_lv<1>(add_ln700_fu_357_p2.read() == numSection_V.read());
}

void ecpri_mux::thread_icmp_ln887_fu_311_p2() {
    icmp_ln887_fu_311_p2 = (!tlast_counter_V.read().is_01() || !ap_const_lv8_8C.is_01())? sc_lv<1>(): (sc_biguint<8>(tlast_counter_V.read()) < sc_biguint<8>(ap_const_lv8_8C));
}

void ecpri_mux::thread_layer_count_out_V() {
    layer_count_out_V = t_V_1_reg_479_pp0_iter1_reg.read();
}

void ecpri_mux::thread_mux_config_in_V_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read()))) {
        mux_config_in_V_V_TDATA_blk_n = mux_config_in_V_V_TVALID.read();
    } else {
        mux_config_in_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void ecpri_mux::thread_mux_config_in_V_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_vld_out.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mux_config_in_V_V_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))))) {
        mux_config_in_V_V_TREADY = ap_const_logic_1;
    } else {
        mux_config_in_V_V_TREADY = ap_const_logic_0;
    }
}

void ecpri_mux::thread_mux_data_out_TDATA() {
    mux_data_out_TDATA = mux_data_out_V_data_V_1_data_out.read();
}

void ecpri_mux::thread_mux_data_out_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state_load_reg_484.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state_load_reg_484_pp0_iter1_reg.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_3, ecpri_mux_state_load_reg_484.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_reg_489.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_3, ecpri_mux_state_load_reg_484_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_reg_489_pp0_iter1_reg.read())))) {
        mux_data_out_TDATA_blk_n = mux_data_out_V_data_V_1_state.read()[1];
    } else {
        mux_data_out_TDATA_blk_n = ap_const_logic_1;
    }
}

void ecpri_mux::thread_mux_data_out_TKEEP() {
    mux_data_out_TKEEP = mux_data_out_V_keep_V_1_data_out.read();
}

void ecpri_mux::thread_mux_data_out_TLAST() {
    mux_data_out_TLAST = mux_data_out_V_last_V_1_data_out.read();
}

void ecpri_mux::thread_mux_data_out_TUSER() {
    mux_data_out_TUSER = mux_data_out_V_user_V_1_data_out.read();
}

void ecpri_mux::thread_mux_data_out_TVALID() {
    mux_data_out_TVALID = mux_data_out_V_last_V_1_state.read()[0];
}

void ecpri_mux::thread_mux_data_out_V_data_V_1_ack_in() {
    mux_data_out_V_data_V_1_ack_in = mux_data_out_V_data_V_1_state.read()[1];
}

void ecpri_mux::thread_mux_data_out_V_data_V_1_ack_out() {
    mux_data_out_V_data_V_1_ack_out = mux_data_out_TREADY.read();
}

void ecpri_mux::thread_mux_data_out_V_data_V_1_data_in() {
    if (esl_seteq<1,1,1>(ap_condition_969.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state_load_reg_484.read())) {
            mux_data_out_V_data_V_1_data_in = tmp_data_V_reg_503.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op57_write_state2.read())) {
            mux_data_out_V_data_V_1_data_in = tmp_data_V_1_reg_493.read();
        } else {
            mux_data_out_V_data_V_1_data_in = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        mux_data_out_V_data_V_1_data_in = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void ecpri_mux::thread_mux_data_out_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_data_V_1_sel.read())) {
        mux_data_out_V_data_V_1_data_out = mux_data_out_V_data_V_1_payload_B.read();
    } else {
        mux_data_out_V_data_V_1_data_out = mux_data_out_V_data_V_1_payload_A.read();
    }
}

void ecpri_mux::thread_mux_data_out_V_data_V_1_load_A() {
    mux_data_out_V_data_V_1_load_A = (mux_data_out_V_data_V_1_state_cmp_full.read() & ~mux_data_out_V_data_V_1_sel_wr.read());
}

void ecpri_mux::thread_mux_data_out_V_data_V_1_load_B() {
    mux_data_out_V_data_V_1_load_B = (mux_data_out_V_data_V_1_sel_wr.read() & mux_data_out_V_data_V_1_state_cmp_full.read());
}

void ecpri_mux::thread_mux_data_out_V_data_V_1_sel() {
    mux_data_out_V_data_V_1_sel = mux_data_out_V_data_V_1_sel_rd.read();
}

void ecpri_mux::thread_mux_data_out_V_data_V_1_state_cmp_full() {
    mux_data_out_V_data_V_1_state_cmp_full =  (sc_logic) ((!mux_data_out_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(mux_data_out_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void ecpri_mux::thread_mux_data_out_V_data_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op57_write_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state_load_reg_484.read()) && 
          !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))))))) {
        mux_data_out_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        mux_data_out_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void ecpri_mux::thread_mux_data_out_V_data_V_1_vld_out() {
    mux_data_out_V_data_V_1_vld_out = mux_data_out_V_data_V_1_state.read()[0];
}

void ecpri_mux::thread_mux_data_out_V_keep_V_1_ack_out() {
    mux_data_out_V_keep_V_1_ack_out = mux_data_out_TREADY.read();
}

void ecpri_mux::thread_mux_data_out_V_keep_V_1_data_out() {
    mux_data_out_V_keep_V_1_data_out = ap_const_lv16_FFFF;
}

void ecpri_mux::thread_mux_data_out_V_keep_V_1_sel() {
    mux_data_out_V_keep_V_1_sel = mux_data_out_V_keep_V_1_sel_rd.read();
}

void ecpri_mux::thread_mux_data_out_V_keep_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op57_write_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state_load_reg_484.read()) && 
          !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))))))) {
        mux_data_out_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        mux_data_out_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void ecpri_mux::thread_mux_data_out_V_keep_V_1_vld_out() {
    mux_data_out_V_keep_V_1_vld_out = mux_data_out_V_keep_V_1_state.read()[0];
}

void ecpri_mux::thread_mux_data_out_V_last_V_1_ack_in() {
    mux_data_out_V_last_V_1_ack_in = mux_data_out_V_last_V_1_state.read()[1];
}

void ecpri_mux::thread_mux_data_out_V_last_V_1_ack_out() {
    mux_data_out_V_last_V_1_ack_out = mux_data_out_TREADY.read();
}

void ecpri_mux::thread_mux_data_out_V_last_V_1_data_in() {
    if (esl_seteq<1,1,1>(ap_condition_969.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state_load_reg_484.read())) {
            mux_data_out_V_last_V_1_data_in = tmp_last_V_reg_508.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op57_write_state2.read())) {
            mux_data_out_V_last_V_1_data_in = tmp_last_V_1_reg_498.read();
        } else {
            mux_data_out_V_last_V_1_data_in =  (sc_lv<1>) ("X");
        }
    } else {
        mux_data_out_V_last_V_1_data_in =  (sc_lv<1>) ("X");
    }
}

void ecpri_mux::thread_mux_data_out_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, mux_data_out_V_last_V_1_sel.read())) {
        mux_data_out_V_last_V_1_data_out = mux_data_out_V_last_V_1_payload_B.read();
    } else {
        mux_data_out_V_last_V_1_data_out = mux_data_out_V_last_V_1_payload_A.read();
    }
}

void ecpri_mux::thread_mux_data_out_V_last_V_1_load_A() {
    mux_data_out_V_last_V_1_load_A = (mux_data_out_V_last_V_1_state_cmp_full.read() & ~mux_data_out_V_last_V_1_sel_wr.read());
}

void ecpri_mux::thread_mux_data_out_V_last_V_1_load_B() {
    mux_data_out_V_last_V_1_load_B = (mux_data_out_V_last_V_1_sel_wr.read() & mux_data_out_V_last_V_1_state_cmp_full.read());
}

void ecpri_mux::thread_mux_data_out_V_last_V_1_sel() {
    mux_data_out_V_last_V_1_sel = mux_data_out_V_last_V_1_sel_rd.read();
}

void ecpri_mux::thread_mux_data_out_V_last_V_1_state_cmp_full() {
    mux_data_out_V_last_V_1_state_cmp_full =  (sc_logic) ((!mux_data_out_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(mux_data_out_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void ecpri_mux::thread_mux_data_out_V_last_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op57_write_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state_load_reg_484.read()) && 
          !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))))))) {
        mux_data_out_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        mux_data_out_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void ecpri_mux::thread_mux_data_out_V_last_V_1_vld_out() {
    mux_data_out_V_last_V_1_vld_out = mux_data_out_V_last_V_1_state.read()[0];
}

void ecpri_mux::thread_mux_data_out_V_user_V_1_ack_out() {
    mux_data_out_V_user_V_1_ack_out = mux_data_out_TREADY.read();
}

void ecpri_mux::thread_mux_data_out_V_user_V_1_data_out() {
    mux_data_out_V_user_V_1_data_out = ap_const_lv1_0;
}

void ecpri_mux::thread_mux_data_out_V_user_V_1_sel() {
    mux_data_out_V_user_V_1_sel = mux_data_out_V_user_V_1_sel_rd.read();
}

void ecpri_mux::thread_mux_data_out_V_user_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op57_write_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
          esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state_load_reg_484.read()) && 
          !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))))))) {
        mux_data_out_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        mux_data_out_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void ecpri_mux::thread_mux_data_out_V_user_V_1_vld_out() {
    mux_data_out_V_user_V_1_vld_out = mux_data_out_V_user_V_1_state.read()[0];
}

void ecpri_mux::thread_num_section_out_V() {
    num_section_out_V = numSection_V_load_reg_469_pp0_iter1_reg.read();
}

void ecpri_mux::thread_section_count_out_V() {
    section_count_out_V = t_V_reg_474_pp0_iter1_reg.read();
}

void ecpri_mux::thread_select_ln104_fu_404_p3() {
    select_ln104_fu_404_p3 = (!icmp_ln879_1_fu_398_p2.read()[0].is_01())? sc_lv<2>(): ((icmp_ln879_1_fu_398_p2.read()[0].to_bool())? ap_const_lv2_3: ap_const_lv2_2);
}

void ecpri_mux::thread_tmp_last_V_1_fu_327_p1() {
    tmp_last_V_1_fu_327_p1 = user_data_in_V_last_V_0_data_out.read();
}

void ecpri_mux::thread_tmp_last_V_fu_353_p1() {
    tmp_last_V_fu_353_p1 = control_data_in_V_last_V_0_data_out.read();
}

void ecpri_mux::thread_tmp_nbreadreq_fu_152_p3() {
    tmp_nbreadreq_fu_152_p3 =  (sc_lv<1>) ((mux_config_in_V_V_TVALID.read()));
}

void ecpri_mux::thread_trunc_ln209_fu_431_p1() {
    trunc_ln209_fu_431_p1 = mux_config_in_V_V_TDATA.read().range(12-1, 0);
}

void ecpri_mux::thread_user_data_in_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,2,2>(ap_const_lv2_3, ecpri_mux_state.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_fu_311_p2.read()))) {
        user_data_in_TDATA_blk_n = user_data_in_V_data_V_0_state.read()[0];
    } else {
        user_data_in_TDATA_blk_n = ap_const_logic_1;
    }
}

void ecpri_mux::thread_user_data_in_TREADY() {
    user_data_in_TREADY = user_data_in_V_last_V_0_state.read()[1];
}

void ecpri_mux::thread_user_data_in_V_data_V_0_ack_in() {
    user_data_in_V_data_V_0_ack_in = user_data_in_V_data_V_0_state.read()[1];
}

void ecpri_mux::thread_user_data_in_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_vld_out.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mux_config_in_V_V_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))))) {
        user_data_in_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        user_data_in_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void ecpri_mux::thread_user_data_in_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_data_V_0_sel.read())) {
        user_data_in_V_data_V_0_data_out = user_data_in_V_data_V_0_payload_B.read();
    } else {
        user_data_in_V_data_V_0_data_out = user_data_in_V_data_V_0_payload_A.read();
    }
}

void ecpri_mux::thread_user_data_in_V_data_V_0_load_A() {
    user_data_in_V_data_V_0_load_A = (user_data_in_V_data_V_0_state_cmp_full.read() & ~user_data_in_V_data_V_0_sel_wr.read());
}

void ecpri_mux::thread_user_data_in_V_data_V_0_load_B() {
    user_data_in_V_data_V_0_load_B = (user_data_in_V_data_V_0_sel_wr.read() & user_data_in_V_data_V_0_state_cmp_full.read());
}

void ecpri_mux::thread_user_data_in_V_data_V_0_sel() {
    user_data_in_V_data_V_0_sel = user_data_in_V_data_V_0_sel_rd.read();
}

void ecpri_mux::thread_user_data_in_V_data_V_0_state_cmp_full() {
    user_data_in_V_data_V_0_state_cmp_full =  (sc_logic) ((!user_data_in_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(user_data_in_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void ecpri_mux::thread_user_data_in_V_data_V_0_vld_in() {
    user_data_in_V_data_V_0_vld_in = user_data_in_TVALID.read();
}

void ecpri_mux::thread_user_data_in_V_data_V_0_vld_out() {
    user_data_in_V_data_V_0_vld_out = user_data_in_V_data_V_0_state.read()[0];
}

void ecpri_mux::thread_user_data_in_V_last_V_0_ack_in() {
    user_data_in_V_last_V_0_ack_in = user_data_in_V_last_V_0_state.read()[1];
}

void ecpri_mux::thread_user_data_in_V_last_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_vld_out.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mux_config_in_V_V_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))))) {
        user_data_in_V_last_V_0_ack_out = ap_const_logic_1;
    } else {
        user_data_in_V_last_V_0_ack_out = ap_const_logic_0;
    }
}

void ecpri_mux::thread_user_data_in_V_last_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, user_data_in_V_last_V_0_sel.read())) {
        user_data_in_V_last_V_0_data_out = user_data_in_V_last_V_0_payload_B.read();
    } else {
        user_data_in_V_last_V_0_data_out = user_data_in_V_last_V_0_payload_A.read();
    }
}

void ecpri_mux::thread_user_data_in_V_last_V_0_load_A() {
    user_data_in_V_last_V_0_load_A = (user_data_in_V_last_V_0_state_cmp_full.read() & ~user_data_in_V_last_V_0_sel_wr.read());
}

void ecpri_mux::thread_user_data_in_V_last_V_0_load_B() {
    user_data_in_V_last_V_0_load_B = (user_data_in_V_last_V_0_sel_wr.read() & user_data_in_V_last_V_0_state_cmp_full.read());
}

void ecpri_mux::thread_user_data_in_V_last_V_0_sel() {
    user_data_in_V_last_V_0_sel = user_data_in_V_last_V_0_sel_rd.read();
}

void ecpri_mux::thread_user_data_in_V_last_V_0_state_cmp_full() {
    user_data_in_V_last_V_0_state_cmp_full =  (sc_logic) ((!user_data_in_V_last_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(user_data_in_V_last_V_0_state.read() != ap_const_lv2_1))[0];
}

void ecpri_mux::thread_user_data_in_V_last_V_0_vld_in() {
    user_data_in_V_last_V_0_vld_in = user_data_in_TVALID.read();
}

void ecpri_mux::thread_user_data_in_V_last_V_0_vld_out() {
    user_data_in_V_last_V_0_vld_out = user_data_in_V_last_V_0_state.read()[0];
}

void ecpri_mux::thread_zext_ln76_fu_453_p1() {
    zext_ln76_fu_453_p1 = esl_zext<2,1>(tmp_nbreadreq_fu_152_p3.read());
}

void ecpri_mux::thread_ap_NS_iter0_fsm() {
    switch (ap_CS_iter0_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
break;
        default : 
            ap_NS_iter0_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

void ecpri_mux::thread_ap_NS_iter1_fsm() {
    switch (ap_CS_iter1_fsm.read().to_uint64()) {
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) && !((esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_vld_out.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mux_config_in_V_V_TVALID.read()))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            } else if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) && (esl_seteq<1,1,1>(ap_CS_iter0_fsm_state1.read(), ap_const_logic_0) || 
  (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
   ((esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_vld_out.read()) && 
     esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || 
    (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
     esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_vld_out.read())) || 
    (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read()) && 
     esl_seteq<1,1,1>(ap_const_logic_0, mux_config_in_V_V_TVALID.read()))))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            } else {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            }
            break;
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_0, user_data_in_V_data_V_0_vld_out.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, control_data_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,2,2>(ap_const_lv2_1, ecpri_mux_state.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mux_config_in_V_V_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            } else {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            }
            break;
        default : 
            ap_NS_iter1_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

void ecpri_mux::thread_ap_NS_iter2_fsm() {
    switch (ap_CS_iter2_fsm.read().to_uint64()) {
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0) && !(esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            } else if ((((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || 
  esl_seteq<1,1,1>(ap_CS_iter1_fsm_state2.read(), ap_const_logic_0)) && !(esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            } else {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            }
            break;
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_data_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_user_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_keep_V_1_state.read()) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, mux_data_out_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_data_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_user_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_keep_V_1_state.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mux_data_out_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, mux_data_out_V_last_V_1_state.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))))) {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            } else {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            }
            break;
        default : 
            ap_NS_iter2_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

void ecpri_mux::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"control_data_in_TDATA\" :  \"" << control_data_in_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"control_data_in_TVALID\" :  \"" << control_data_in_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"control_data_in_TREADY\" :  \"" << control_data_in_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"control_data_in_TUSER\" :  \"" << control_data_in_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"control_data_in_TKEEP\" :  \"" << control_data_in_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"control_data_in_TLAST\" :  \"" << control_data_in_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"user_data_in_TDATA\" :  \"" << user_data_in_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"user_data_in_TVALID\" :  \"" << user_data_in_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"user_data_in_TREADY\" :  \"" << user_data_in_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"user_data_in_TUSER\" :  \"" << user_data_in_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"user_data_in_TKEEP\" :  \"" << user_data_in_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"user_data_in_TLAST\" :  \"" << user_data_in_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mux_data_out_TDATA\" :  \"" << mux_data_out_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mux_data_out_TVALID\" :  \"" << mux_data_out_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mux_data_out_TREADY\" :  \"" << mux_data_out_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mux_data_out_TUSER\" :  \"" << mux_data_out_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mux_data_out_TKEEP\" :  \"" << mux_data_out_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mux_data_out_TLAST\" :  \"" << mux_data_out_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mux_config_in_V_V_TDATA\" :  \"" << mux_config_in_V_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mux_config_in_V_V_TVALID\" :  \"" << mux_config_in_V_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mux_config_in_V_V_TREADY\" :  \"" << mux_config_in_V_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ecpri_mux_state_out_V\" :  \"" << ecpri_mux_state_out_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"num_section_out_V\" :  \"" << num_section_out_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"section_count_out_V\" :  \"" << section_count_out_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_count_out_V\" :  \"" << layer_count_out_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

