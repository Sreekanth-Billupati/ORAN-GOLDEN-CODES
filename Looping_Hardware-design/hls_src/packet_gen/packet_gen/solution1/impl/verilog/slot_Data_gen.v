// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="slot_Data_gen,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.102000,HLS_SYN_LAT=45867,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=108,HLS_SYN_LUT=150,HLS_VERSION=2019_1}" *)

module slot_Data_gen (
        ap_clk,
        ap_rst_n,
        data_V_V_TDATA,
        data_V_V_TVALID,
        data_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst_n;
output  [31:0] data_V_V_TDATA;
output   data_V_V_TVALID;
input   data_V_V_TREADY;

 reg    ap_rst_n_inv;
reg   [31:0] data_V_V_1_data_out;
reg    data_V_V_1_vld_in;
wire    data_V_V_1_vld_out;
wire    data_V_V_1_ack_in;
wire    data_V_V_1_ack_out;
reg   [31:0] data_V_V_1_payload_A;
reg   [31:0] data_V_V_1_payload_B;
reg    data_V_V_1_sel_rd;
reg    data_V_V_1_sel_wr;
wire    data_V_V_1_sel;
wire    data_V_V_1_load_A;
wire    data_V_V_1_load_B;
reg   [1:0] data_V_V_1_state;
wire    data_V_V_1_state_cmp_full;
reg    data_V_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln10_reg_80;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln10_reg_80_pp0_iter1_reg;
reg   [15:0] tmp_V_reg_51;
wire   [0:0] icmp_ln10_fu_63_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] i_fu_69_p2;
reg   [15:0] i_reg_84;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] tmp_V_1_fu_75_p1;
wire    ap_CS_fsm_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [15:0] ap_phi_mux_tmp_V_phi_fu_55_p4;
wire    ap_block_pp0_stage0_01001;
reg   [2:0] ap_NS_fsm;
wire    ap_CS_fsm_state5;
reg    ap_block_state5;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 data_V_V_1_sel_rd = 1'b0;
#0 data_V_V_1_sel_wr = 1'b0;
#0 data_V_V_1_state = 2'd0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((data_V_V_1_ack_out == 1'b1) & (data_V_V_1_vld_out == 1'b1))) begin
            data_V_V_1_sel_rd <= ~data_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((data_V_V_1_ack_in == 1'b1) & (data_V_V_1_vld_in == 1'b1))) begin
            data_V_V_1_sel_wr <= ~data_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_V_V_1_state <= 2'd0;
    end else begin
        if ((((data_V_V_1_vld_in == 1'b0) & (data_V_V_1_state == 2'd2)) | ((data_V_V_1_vld_in == 1'b0) & (data_V_V_1_state == 2'd3) & (data_V_V_1_ack_out == 1'b1)))) begin
            data_V_V_1_state <= 2'd2;
        end else if ((((data_V_V_TREADY == 1'b0) & (data_V_V_1_state == 2'd1)) | ((data_V_V_TREADY == 1'b0) & (data_V_V_1_state == 2'd3) & (data_V_V_1_vld_in == 1'b1)))) begin
            data_V_V_1_state <= 2'd1;
        end else if (((~((data_V_V_1_vld_in == 1'b0) & (data_V_V_1_ack_out == 1'b1)) & ~((data_V_V_TREADY == 1'b0) & (data_V_V_1_vld_in == 1'b1)) & (data_V_V_1_state == 2'd3)) | ((data_V_V_1_state == 2'd1) & (data_V_V_1_ack_out == 1'b1)) | ((data_V_V_1_state == 2'd2) & (data_V_V_1_vld_in == 1'b1)))) begin
            data_V_V_1_state <= 2'd3;
        end else begin
            data_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_80 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_reg_51 <= i_reg_84;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_V_reg_51 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((data_V_V_1_load_A == 1'b1)) begin
        data_V_V_1_payload_A <= tmp_V_1_fu_75_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((data_V_V_1_load_B == 1'b1)) begin
        data_V_V_1_payload_B <= tmp_V_1_fu_75_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_84 <= i_fu_69_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln10_reg_80 <= icmp_ln10_fu_63_p2;
        icmp_ln10_reg_80_pp0_iter1_reg <= icmp_ln10_reg_80;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_63_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln10_reg_80 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_tmp_V_phi_fu_55_p4 = i_reg_84;
    end else begin
        ap_phi_mux_tmp_V_phi_fu_55_p4 = tmp_V_reg_51;
    end
end

always @ (*) begin
    if ((data_V_V_1_sel == 1'b1)) begin
        data_V_V_1_data_out = data_V_V_1_payload_B;
    end else begin
        data_V_V_1_data_out = data_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_80 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_V_1_vld_in = 1'b1;
    end else begin
        data_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (icmp_ln10_reg_80_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (icmp_ln10_reg_80 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        data_V_V_TDATA_blk_n = data_V_V_1_state[1'd1];
    end else begin
        data_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln10_fu_63_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln10_fu_63_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((data_V_V_1_state == 2'd1) | ((data_V_V_TREADY == 1'b0) & (data_V_V_1_state == 2'd3))) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((icmp_ln10_reg_80 == 1'd0) & (data_V_V_1_ack_in == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((icmp_ln10_reg_80_pp0_iter1_reg == 1'd0) & (data_V_V_1_ack_in == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5 = ((data_V_V_1_state == 2'd1) | ((data_V_V_TREADY == 1'b0) & (data_V_V_1_state == 2'd3)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data_V_V_1_ack_in = data_V_V_1_state[1'd1];

assign data_V_V_1_ack_out = data_V_V_TREADY;

assign data_V_V_1_load_A = (~data_V_V_1_sel_wr & data_V_V_1_state_cmp_full);

assign data_V_V_1_load_B = (data_V_V_1_state_cmp_full & data_V_V_1_sel_wr);

assign data_V_V_1_sel = data_V_V_1_sel_rd;

assign data_V_V_1_state_cmp_full = ((data_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign data_V_V_1_vld_out = data_V_V_1_state[1'd0];

assign data_V_V_TDATA = data_V_V_1_data_out;

assign data_V_V_TVALID = data_V_V_1_state[1'd0];

assign i_fu_69_p2 = (ap_phi_mux_tmp_V_phi_fu_55_p4 + 16'd1);

assign icmp_ln10_fu_63_p2 = ((ap_phi_mux_tmp_V_phi_fu_55_p4 == 16'd45864) ? 1'b1 : 1'b0);

assign tmp_V_1_fu_75_p1 = tmp_V_reg_51;

endmodule //slot_Data_gen
