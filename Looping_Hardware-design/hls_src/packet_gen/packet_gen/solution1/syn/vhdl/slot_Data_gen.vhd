-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity slot_Data_gen is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    data_V_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_V_V_TVALID : OUT STD_LOGIC;
    data_V_V_TREADY : IN STD_LOGIC );
end;


architecture behav of slot_Data_gen is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "slot_Data_gen,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.102000,HLS_SYN_LAT=45867,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=108,HLS_SYN_LUT=150,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_B328 : STD_LOGIC_VECTOR (15 downto 0) := "1011001100101000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal data_V_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_V_1_vld_in : STD_LOGIC;
    signal data_V_V_1_vld_out : STD_LOGIC;
    signal data_V_V_1_ack_in : STD_LOGIC;
    signal data_V_V_1_ack_out : STD_LOGIC;
    signal data_V_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_V_1_sel_rd : STD_LOGIC := '0';
    signal data_V_V_1_sel_wr : STD_LOGIC := '0';
    signal data_V_V_1_sel : STD_LOGIC;
    signal data_V_V_1_load_A : STD_LOGIC;
    signal data_V_V_1_load_B : STD_LOGIC;
    signal data_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal data_V_V_1_state_cmp_full : STD_LOGIC;
    signal data_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln10_reg_80 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln10_reg_80_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_reg_51 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln10_fu_63_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_69_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_84 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_V_1_fu_75_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_tmp_V_phi_fu_55_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    data_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((data_V_V_1_ack_out = ap_const_logic_1) and (data_V_V_1_vld_out = ap_const_logic_1))) then 
                                        data_V_V_1_sel_rd <= not(data_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    data_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((data_V_V_1_ack_in = ap_const_logic_1) and (data_V_V_1_vld_in = ap_const_logic_1))) then 
                                        data_V_V_1_sel_wr <= not(data_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    data_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((data_V_V_1_vld_in = ap_const_logic_0) and (data_V_V_1_state = ap_const_lv2_2)) or ((data_V_V_1_vld_in = ap_const_logic_0) and (data_V_V_1_state = ap_const_lv2_3) and (data_V_V_1_ack_out = ap_const_logic_1)))) then 
                    data_V_V_1_state <= ap_const_lv2_2;
                elsif ((((data_V_V_TREADY = ap_const_logic_0) and (data_V_V_1_state = ap_const_lv2_1)) or ((data_V_V_TREADY = ap_const_logic_0) and (data_V_V_1_state = ap_const_lv2_3) and (data_V_V_1_vld_in = ap_const_logic_1)))) then 
                    data_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((data_V_V_1_vld_in = ap_const_logic_0) and (data_V_V_1_ack_out = ap_const_logic_1))) and not(((data_V_V_TREADY = ap_const_logic_0) and (data_V_V_1_vld_in = ap_const_logic_1))) and (data_V_V_1_state = ap_const_lv2_3)) or ((data_V_V_1_state = ap_const_lv2_1) and (data_V_V_1_ack_out = ap_const_logic_1)) or ((data_V_V_1_state = ap_const_lv2_2) and (data_V_V_1_vld_in = ap_const_logic_1)))) then 
                    data_V_V_1_state <= ap_const_lv2_3;
                else 
                    data_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tmp_V_reg_51_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_80 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_V_reg_51 <= i_reg_84;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                tmp_V_reg_51 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_V_V_1_load_A = ap_const_logic_1)) then
                data_V_V_1_payload_A <= tmp_V_1_fu_75_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_V_V_1_load_B = ap_const_logic_1)) then
                data_V_V_1_payload_B <= tmp_V_1_fu_75_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_84 <= i_fu_69_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln10_reg_80 <= icmp_ln10_fu_63_p2;
                icmp_ln10_reg_80_pp0_iter1_reg <= icmp_ln10_reg_80;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (data_V_V_TREADY, data_V_V_1_state, ap_CS_fsm, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln10_fu_63_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln10_fu_63_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln10_fu_63_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((data_V_V_1_state = ap_const_lv2_1) or ((data_V_V_TREADY = ap_const_logic_0) and (data_V_V_1_state = ap_const_lv2_3)))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state3_io, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state3_io, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(data_V_V_1_ack_in, icmp_ln10_reg_80)
    begin
                ap_block_state3_io <= ((icmp_ln10_reg_80 = ap_const_lv1_0) and (data_V_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(data_V_V_1_ack_in, icmp_ln10_reg_80_pp0_iter1_reg)
    begin
                ap_block_state4_io <= ((icmp_ln10_reg_80_pp0_iter1_reg = ap_const_lv1_0) and (data_V_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_assign_proc : process(data_V_V_TREADY, data_V_V_1_state)
    begin
                ap_block_state5 <= ((data_V_V_1_state = ap_const_lv2_1) or ((data_V_V_TREADY = ap_const_logic_0) and (data_V_V_1_state = ap_const_lv2_3)));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_63_p2)
    begin
        if ((icmp_ln10_fu_63_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_tmp_V_phi_fu_55_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln10_reg_80, tmp_V_reg_51, i_reg_84)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln10_reg_80 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_tmp_V_phi_fu_55_p4 <= i_reg_84;
        else 
            ap_phi_mux_tmp_V_phi_fu_55_p4 <= tmp_V_reg_51;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    data_V_V_1_ack_in <= data_V_V_1_state(1);
    data_V_V_1_ack_out <= data_V_V_TREADY;

    data_V_V_1_data_out_assign_proc : process(data_V_V_1_payload_A, data_V_V_1_payload_B, data_V_V_1_sel)
    begin
        if ((data_V_V_1_sel = ap_const_logic_1)) then 
            data_V_V_1_data_out <= data_V_V_1_payload_B;
        else 
            data_V_V_1_data_out <= data_V_V_1_payload_A;
        end if; 
    end process;

    data_V_V_1_load_A <= (not(data_V_V_1_sel_wr) and data_V_V_1_state_cmp_full);
    data_V_V_1_load_B <= (data_V_V_1_state_cmp_full and data_V_V_1_sel_wr);
    data_V_V_1_sel <= data_V_V_1_sel_rd;
    data_V_V_1_state_cmp_full <= '0' when (data_V_V_1_state = ap_const_lv2_1) else '1';

    data_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln10_reg_80, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln10_reg_80 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_V_1_vld_in <= ap_const_logic_1;
        else 
            data_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    data_V_V_1_vld_out <= data_V_V_1_state(0);
    data_V_V_TDATA <= data_V_V_1_data_out;

    data_V_V_TDATA_blk_n_assign_proc : process(data_V_V_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln10_reg_80, ap_enable_reg_pp0_iter2, icmp_ln10_reg_80_pp0_iter1_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln10_reg_80_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln10_reg_80 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            data_V_V_TDATA_blk_n <= data_V_V_1_state(1);
        else 
            data_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_V_V_TVALID <= data_V_V_1_state(0);
    i_fu_69_p2 <= std_logic_vector(unsigned(ap_phi_mux_tmp_V_phi_fu_55_p4) + unsigned(ap_const_lv16_1));
    icmp_ln10_fu_63_p2 <= "1" when (ap_phi_mux_tmp_V_phi_fu_55_p4 = ap_const_lv16_B328) else "0";
    tmp_V_1_fu_75_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_51),32));
end behav;
